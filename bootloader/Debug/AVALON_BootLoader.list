
AVALON_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c48  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e38  08001e38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e38  08001e38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e38  08001e38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001e4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001e4c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acaa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ea  00000000  00000000  0002ad29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  0002d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a3c  00000000  00000000  0002dc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c5f7  00000000  00000000  00052653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f11a1  00000000  00000000  0005ec4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003174  00000000  00000000  0014fdec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00152f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001e08 	.word	0x08001e08

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001e08 	.word	0x08001e08

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 f9b2 	bl	8000586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f815 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f85f 	bl	80002e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000234:	f000 fc40 	bl	8000ab8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000238:	b672      	cpsid	i
}
 800023a:	bf00      	nop
  __disable_irq();

  /*Create a function pointer that point on reset handler of application*/
  uint32_t go_address = *((volatile uint32_t*) (0x08004004));
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <main+0x34>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	607b      	str	r3, [r7, #4]
  void (*jump_to_app)(void) = (void *)go_address;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	603b      	str	r3, [r7, #0]
  jump_to_app();
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x32>
 800024c:	08004004 	.word	0x08004004

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	; 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2238      	movs	r2, #56	; 0x38
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fda6 	bl	8001db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f000 fc37 	bl	8000ae8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000282:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2340      	movs	r3, #64	; 0x40
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000290:	2304      	movs	r3, #4
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000294:	234b      	movs	r3, #75	; 0x4b
 8000296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000298:	2302      	movs	r3, #2
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a0:	2302      	movs	r3, #2
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fcc1 	bl	8000c30 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002b4:	f000 f85c 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2303      	movs	r3, #3
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2104      	movs	r1, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 ffc5 	bl	8001260 <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002dc:	f000 f848 	bl	8000370 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3750      	adds	r7, #80	; 0x50
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_GPIO_Init+0x60>)
 80002fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <MX_GPIO_Init+0x60>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_GPIO_Init+0x60>)
 800030a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031e:	f000 fbcb 	bl	8000ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000326:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f000 fa3a 	bl	80007b4 <HAL_GPIO_Init>

}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000

0800034c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d101      	bne.n	8000362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800035e:	f000 f92b 	bl	80005b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40012c00 	.word	0x40012c00

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x44>)
 8000384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_MspInit+0x44>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6613      	str	r3, [r2, #96]	; 0x60
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x44>)
 8000390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <HAL_MspInit+0x44>)
 800039c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <HAL_MspInit+0x44>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	6593      	str	r3, [r2, #88]	; 0x58
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HAL_MspInit+0x44>)
 80003a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08c      	sub	sp, #48	; 0x30
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003d4:	2300      	movs	r3, #0
 80003d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <HAL_InitTick+0xcc>)
 80003dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003de:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <HAL_InitTick+0xcc>)
 80003e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e4:	6613      	str	r3, [r2, #96]	; 0x60
 80003e6:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <HAL_InitTick+0xcc>)
 80003e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003f2:	f107 020c 	add.w	r2, r7, #12
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4611      	mov	r1, r2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 f8ef 	bl	80015e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000402:	f001 f8d7 	bl	80015b4 <HAL_RCC_GetPCLK2Freq>
 8000406:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <HAL_InitTick+0xd0>)
 800040c:	fba2 2303 	umull	r2, r3, r2, r3
 8000410:	0c9b      	lsrs	r3, r3, #18
 8000412:	3b01      	subs	r3, #1
 8000414:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <HAL_InitTick+0xd4>)
 8000418:	4a20      	ldr	r2, [pc, #128]	; (800049c <HAL_InitTick+0xd8>)
 800041a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <HAL_InitTick+0xd4>)
 800041e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000422:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000424:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <HAL_InitTick+0xd4>)
 8000426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000428:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800042a:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <HAL_InitTick+0xd4>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <HAL_InitTick+0xd4>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000436:	4818      	ldr	r0, [pc, #96]	; (8000498 <HAL_InitTick+0xd4>)
 8000438:	f001 f94a 	bl	80016d0 <HAL_TIM_Base_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000446:	2b00      	cmp	r3, #0
 8000448:	d11b      	bne.n	8000482 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800044a:	4813      	ldr	r0, [pc, #76]	; (8000498 <HAL_InitTick+0xd4>)
 800044c:	f001 f9a2 	bl	8001794 <HAL_TIM_Base_Start_IT>
 8000450:	4603      	mov	r3, r0
 8000452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800045a:	2b00      	cmp	r3, #0
 800045c:	d111      	bne.n	8000482 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800045e:	2019      	movs	r0, #25
 8000460:	f000 f99a 	bl	8000798 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b0f      	cmp	r3, #15
 8000468:	d808      	bhi.n	800047c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800046a:	2200      	movs	r2, #0
 800046c:	6879      	ldr	r1, [r7, #4]
 800046e:	2019      	movs	r0, #25
 8000470:	f000 f978 	bl	8000764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000474:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <HAL_InitTick+0xdc>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6013      	str	r3, [r2, #0]
 800047a:	e002      	b.n	8000482 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800047c:	2301      	movs	r3, #1
 800047e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000486:	4618      	mov	r0, r3
 8000488:	3730      	adds	r7, #48	; 0x30
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000
 8000494:	431bde83 	.word	0x431bde83
 8000498:	20000028 	.word	0x20000028
 800049c:	40012c00 	.word	0x40012c00
 80004a0:	20000004 	.word	0x20000004

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000502:	f001 f9bf 	bl	8001884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000028 	.word	0x20000028

08000510 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <SystemInit+0x20>)
 8000516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <SystemInit+0x20>)
 800051c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053a:	490e      	ldr	r1, [pc, #56]	; (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <LoopForever+0xe>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000550:	4c0b      	ldr	r4, [pc, #44]	; (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800055e:	f7ff ffd7 	bl	8000510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000562:	f001 fc2d 	bl	8001dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000566:	f7ff fe57 	bl	8000218 <main>

0800056a <LoopForever>:

LoopForever:
    b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000578:	08001e40 	.word	0x08001e40
  ldr r2, =_sbss
 800057c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000580:	20000078 	.word	0x20000078

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>

08000586 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800058c:	2300      	movs	r3, #0
 800058e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f8dc 	bl	800074e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000596:	200f      	movs	r0, #15
 8000598:	f7ff ff14 	bl	80003c4 <HAL_InitTick>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
 80005a6:	e001      	b.n	80005ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a8:	f7ff fee8 	bl	800037c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ac:	79fb      	ldrb	r3, [r7, #7]

}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x1c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x20>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x1c>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	20000074 	.word	0x20000074
 80005d8:	20000008 	.word	0x20000008

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000074 	.word	0x20000074

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff4c 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000772:	f7ff ff63 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000776:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	6978      	ldr	r0, [r7, #20]
 800077e:	f7ff ffb3 	bl	80006e8 <NVIC_EncodePriority>
 8000782:	4602      	mov	r2, r0
 8000784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff82 	bl	8000694 <__NVIC_SetPriority>
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff56 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80007c2:	e15a      	b.n	8000a7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	2101      	movs	r1, #1
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	fa01 f303 	lsl.w	r3, r1, r3
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f000 814c 	beq.w	8000a74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f003 0303 	and.w	r3, r3, #3
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d005      	beq.n	80007f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d130      	bne.n	8000856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	2203      	movs	r2, #3
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	68da      	ldr	r2, [r3, #12]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4313      	orrs	r3, r2
 800081c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800082a:	2201      	movs	r2, #1
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4013      	ands	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	091b      	lsrs	r3, r3, #4
 8000840:	f003 0201 	and.w	r2, r3, #1
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f003 0303 	and.w	r3, r3, #3
 800085e:	2b03      	cmp	r3, #3
 8000860:	d017      	beq.n	8000892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2203      	movs	r2, #3
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4013      	ands	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4313      	orrs	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	2b02      	cmp	r3, #2
 800089c:	d123      	bne.n	80008e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	08da      	lsrs	r2, r3, #3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3208      	adds	r2, #8
 80008a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	220f      	movs	r2, #15
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4013      	ands	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	691a      	ldr	r2, [r3, #16]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	6939      	ldr	r1, [r7, #16]
 80008e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0203 	and.w	r2, r3, #3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 80a6 	beq.w	8000a74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000928:	4b5b      	ldr	r3, [pc, #364]	; (8000a98 <HAL_GPIO_Init+0x2e4>)
 800092a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092c:	4a5a      	ldr	r2, [pc, #360]	; (8000a98 <HAL_GPIO_Init+0x2e4>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6613      	str	r3, [r2, #96]	; 0x60
 8000934:	4b58      	ldr	r3, [pc, #352]	; (8000a98 <HAL_GPIO_Init+0x2e4>)
 8000936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000940:	4a56      	ldr	r2, [pc, #344]	; (8000a9c <HAL_GPIO_Init+0x2e8>)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	089b      	lsrs	r3, r3, #2
 8000946:	3302      	adds	r3, #2
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f003 0303 	and.w	r3, r3, #3
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800096a:	d01f      	beq.n	80009ac <HAL_GPIO_Init+0x1f8>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a4c      	ldr	r2, [pc, #304]	; (8000aa0 <HAL_GPIO_Init+0x2ec>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d019      	beq.n	80009a8 <HAL_GPIO_Init+0x1f4>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a4b      	ldr	r2, [pc, #300]	; (8000aa4 <HAL_GPIO_Init+0x2f0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d013      	beq.n	80009a4 <HAL_GPIO_Init+0x1f0>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a4a      	ldr	r2, [pc, #296]	; (8000aa8 <HAL_GPIO_Init+0x2f4>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d00d      	beq.n	80009a0 <HAL_GPIO_Init+0x1ec>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a49      	ldr	r2, [pc, #292]	; (8000aac <HAL_GPIO_Init+0x2f8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d007      	beq.n	800099c <HAL_GPIO_Init+0x1e8>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a48      	ldr	r2, [pc, #288]	; (8000ab0 <HAL_GPIO_Init+0x2fc>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d101      	bne.n	8000998 <HAL_GPIO_Init+0x1e4>
 8000994:	2305      	movs	r3, #5
 8000996:	e00a      	b.n	80009ae <HAL_GPIO_Init+0x1fa>
 8000998:	2306      	movs	r3, #6
 800099a:	e008      	b.n	80009ae <HAL_GPIO_Init+0x1fa>
 800099c:	2304      	movs	r3, #4
 800099e:	e006      	b.n	80009ae <HAL_GPIO_Init+0x1fa>
 80009a0:	2303      	movs	r3, #3
 80009a2:	e004      	b.n	80009ae <HAL_GPIO_Init+0x1fa>
 80009a4:	2302      	movs	r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x1fa>
 80009a8:	2301      	movs	r3, #1
 80009aa:	e000      	b.n	80009ae <HAL_GPIO_Init+0x1fa>
 80009ac:	2300      	movs	r3, #0
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	f002 0203 	and.w	r2, r2, #3
 80009b4:	0092      	lsls	r2, r2, #2
 80009b6:	4093      	lsls	r3, r2
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009be:	4937      	ldr	r1, [pc, #220]	; (8000a9c <HAL_GPIO_Init+0x2e8>)
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009cc:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	43db      	mvns	r3, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009f0:	4a30      	ldr	r2, [pc, #192]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a1a:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000a20:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a44:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	fa22 f303 	lsr.w	r3, r2, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f47f ae9d 	bne.w	80007c4 <HAL_GPIO_Init+0x10>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	371c      	adds	r7, #28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	48000400 	.word	0x48000400
 8000aa4:	48000800 	.word	0x48000800
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48001000 	.word	0x48001000
 8000ab0:	48001400 	.word	0x48001400
 8000ab4:	40010400 	.word	0x40010400

08000ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ac8:	787b      	ldrb	r3, [r7, #1]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ad4:	e002      	b.n	8000adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ad6:	887a      	ldrh	r2, [r7, #2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d141      	bne.n	8000b7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b02:	d131      	bne.n	8000b68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b04:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b0a:	4a46      	ldr	r2, [pc, #280]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b1c:	4a41      	ldr	r2, [pc, #260]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2232      	movs	r2, #50	; 0x32
 8000b2a:	fb02 f303 	mul.w	r3, r2, r3
 8000b2e:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000b30:	fba2 2303 	umull	r2, r3, r2, r3
 8000b34:	0c9b      	lsrs	r3, r3, #18
 8000b36:	3301      	adds	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b3a:	e002      	b.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b4e:	d102      	bne.n	8000b56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f2      	bne.n	8000b3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b56:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b62:	d158      	bne.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e057      	b.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000b78:	e04d      	b.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b80:	d141      	bne.n	8000c06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b8e:	d131      	bne.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b96:	4a23      	ldr	r2, [pc, #140]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ba8:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2232      	movs	r2, #50	; 0x32
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	0c9b      	lsrs	r3, r3, #18
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc6:	e002      	b.n	8000bce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d102      	bne.n	8000be2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f2      	bne.n	8000bc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bee:	d112      	bne.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e011      	b.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c04:	e007      	b.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40007000 	.word	0x40007000
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	431bde83 	.word	0x431bde83

08000c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e306      	b.n	8001250 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d075      	beq.n	8000d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c4e:	4b97      	ldr	r3, [pc, #604]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c58:	4b94      	ldr	r3, [pc, #592]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	2b0c      	cmp	r3, #12
 8000c66:	d102      	bne.n	8000c6e <HAL_RCC_OscConfig+0x3e>
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d002      	beq.n	8000c74 <HAL_RCC_OscConfig+0x44>
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d10b      	bne.n	8000c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c74:	4b8d      	ldr	r3, [pc, #564]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d05b      	beq.n	8000d38 <HAL_RCC_OscConfig+0x108>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d157      	bne.n	8000d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e2e1      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c94:	d106      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x74>
 8000c96:	4b85      	ldr	r3, [pc, #532]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a84      	ldr	r2, [pc, #528]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e01d      	b.n	8000ce0 <HAL_RCC_OscConfig+0xb0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x98>
 8000cae:	4b7f      	ldr	r3, [pc, #508]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a7e      	ldr	r2, [pc, #504]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b7c      	ldr	r3, [pc, #496]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a7b      	ldr	r2, [pc, #492]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e00b      	b.n	8000ce0 <HAL_RCC_OscConfig+0xb0>
 8000cc8:	4b78      	ldr	r3, [pc, #480]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a77      	ldr	r2, [pc, #476]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b75      	ldr	r3, [pc, #468]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a74      	ldr	r2, [pc, #464]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d013      	beq.n	8000d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fc78 	bl	80005dc <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fc74 	bl	80005dc <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	; 0x64
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e2a6      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f0      	beq.n	8000cf0 <HAL_RCC_OscConfig+0xc0>
 8000d0e:	e014      	b.n	8000d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc64 	bl	80005dc <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fc60 	bl	80005dc <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b64      	cmp	r3, #100	; 0x64
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e292      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d2a:	4b60      	ldr	r3, [pc, #384]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0xe8>
 8000d36:	e000      	b.n	8000d3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d075      	beq.n	8000e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d46:	4b59      	ldr	r3, [pc, #356]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
 8000d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d50:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	2b0c      	cmp	r3, #12
 8000d5e:	d102      	bne.n	8000d66 <HAL_RCC_OscConfig+0x136>
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d002      	beq.n	8000d6c <HAL_RCC_OscConfig+0x13c>
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d11f      	bne.n	8000dac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d6c:	4b4f      	ldr	r3, [pc, #316]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_RCC_OscConfig+0x154>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e265      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d84:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	061b      	lsls	r3, r3, #24
 8000d92:	4946      	ldr	r1, [pc, #280]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d98:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <HAL_RCC_OscConfig+0x280>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fb11 	bl	80003c4 <HAL_InitTick>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d043      	beq.n	8000e30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e251      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d023      	beq.n	8000dfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a3c      	ldr	r2, [pc, #240]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc0c 	bl	80005dc <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fc08 	bl	80005dc <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e23a      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	061b      	lsls	r3, r3, #24
 8000df4:	492d      	ldr	r1, [pc, #180]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e01a      	b.n	8000e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e08:	f7ff fbe8 	bl	80005dc <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fbe4 	bl	80005dc <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e216      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x1e0>
 8000e2e:	e000      	b.n	8000e32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d041      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d01c      	beq.n	8000e80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e4c:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e56:	f7ff fbc1 	bl	80005dc <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fbbd 	bl	80005dc <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e1ef      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0ef      	beq.n	8000e5e <HAL_RCC_OscConfig+0x22e>
 8000e7e:	e020      	b.n	8000ec2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_RCC_OscConfig+0x27c>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e90:	f7ff fba4 	bl	80005dc <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e96:	e00d      	b.n	8000eb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fba0 	bl	80005dc <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d906      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1d2      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000eb4:	4b8c      	ldr	r3, [pc, #560]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1ea      	bne.n	8000e98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 80a6 	beq.w	800101c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ed4:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x2b4>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <HAL_RCC_OscConfig+0x2b6>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00d      	beq.n	8000f06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a7e      	ldr	r2, [pc, #504]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b7c      	ldr	r3, [pc, #496]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f02:	2301      	movs	r3, #1
 8000f04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f06:	4b79      	ldr	r3, [pc, #484]	; (80010ec <HAL_RCC_OscConfig+0x4bc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d118      	bne.n	8000f44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f12:	4b76      	ldr	r3, [pc, #472]	; (80010ec <HAL_RCC_OscConfig+0x4bc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a75      	ldr	r2, [pc, #468]	; (80010ec <HAL_RCC_OscConfig+0x4bc>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fb5d 	bl	80005dc <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f26:	f7ff fb59 	bl	80005dc <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e18b      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f38:	4b6c      	ldr	r3, [pc, #432]	; (80010ec <HAL_RCC_OscConfig+0x4bc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f0      	beq.n	8000f26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_RCC_OscConfig+0x32e>
 8000f4c:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f52:	4a65      	ldr	r2, [pc, #404]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f5c:	e024      	b.n	8000fa8 <HAL_RCC_OscConfig+0x378>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d110      	bne.n	8000f88 <HAL_RCC_OscConfig+0x358>
 8000f66:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f6c:	4a5e      	ldr	r2, [pc, #376]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f7c:	4a5a      	ldr	r2, [pc, #360]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f86:	e00f      	b.n	8000fa8 <HAL_RCC_OscConfig+0x378>
 8000f88:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f8e:	4a56      	ldr	r2, [pc, #344]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f98:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f9e:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d016      	beq.n	8000fde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fb14 	bl	80005dc <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fb6:	e00a      	b.n	8000fce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fb10 	bl	80005dc <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e140      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0ed      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x388>
 8000fdc:	e015      	b.n	800100a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fde:	f7ff fafd 	bl	80005dc <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff faf9 	bl	80005dc <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e129      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8000ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ed      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	4a34      	ldr	r2, [pc, #208]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8001016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800101a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0320 	and.w	r3, r3, #32
 8001024:	2b00      	cmp	r3, #0
 8001026:	d03c      	beq.n	80010a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d01c      	beq.n	800106a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8001032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001036:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001040:	f7ff facc 	bl	80005dc <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001048:	f7ff fac8 	bl	80005dc <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e0fa      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 800105c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0ef      	beq.n	8001048 <HAL_RCC_OscConfig+0x418>
 8001068:	e01b      	b.n	80010a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 800106c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001070:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800107a:	f7ff faaf 	bl	80005dc <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001082:	f7ff faab 	bl	80005dc <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e0dd      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 8001096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1ef      	bne.n	8001082 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80d1 	beq.w	800124e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	f000 808b 	beq.w	80011d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d15e      	bne.n	8001180 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_RCC_OscConfig+0x4b8>)
 80010c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff fa85 	bl	80005dc <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010d4:	e00c      	b.n	80010f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fa81 	bl	80005dc <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d905      	bls.n	80010f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e0b3      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010f0:	4b59      	ldr	r3, [pc, #356]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1ec      	bne.n	80010d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	4b56      	ldr	r3, [pc, #344]	; (800125c <HAL_RCC_OscConfig+0x62c>)
 8001102:	4013      	ands	r3, r2
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6a11      	ldr	r1, [r2, #32]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800110c:	3a01      	subs	r2, #1
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	4311      	orrs	r1, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001116:	0212      	lsls	r2, r2, #8
 8001118:	4311      	orrs	r1, r2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800111e:	0852      	lsrs	r2, r2, #1
 8001120:	3a01      	subs	r2, #1
 8001122:	0552      	lsls	r2, r2, #21
 8001124:	4311      	orrs	r1, r2
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800112a:	0852      	lsrs	r2, r2, #1
 800112c:	3a01      	subs	r2, #1
 800112e:	0652      	lsls	r2, r2, #25
 8001130:	4311      	orrs	r1, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001136:	06d2      	lsls	r2, r2, #27
 8001138:	430a      	orrs	r2, r1
 800113a:	4947      	ldr	r1, [pc, #284]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 800113c:	4313      	orrs	r3, r2
 800113e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a44      	ldr	r2, [pc, #272]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 8001146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800114a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a41      	ldr	r2, [pc, #260]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 8001152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001156:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fa40 	bl	80005dc <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff fa3c 	bl	80005dc <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e06e      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x530>
 800117e:	e066      	b.n	800124e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a34      	ldr	r2, [pc, #208]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 8001186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800118a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 8001192:	f023 0303 	bic.w	r3, r3, #3
 8001196:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 800119e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fa18 	bl	80005dc <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff fa14 	bl	80005dc <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e046      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x580>
 80011ce:	e03e      	b.n	800124e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e039      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_RCC_OscConfig+0x628>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d12c      	bne.n	800124a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	3b01      	subs	r3, #1
 80011fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fe:	429a      	cmp	r2, r3
 8001200:	d123      	bne.n	800124a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800120e:	429a      	cmp	r2, r3
 8001210:	d11b      	bne.n	800124a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d113      	bne.n	800124a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	085b      	lsrs	r3, r3, #1
 800122e:	3b01      	subs	r3, #1
 8001230:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d109      	bne.n	800124a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	3b01      	subs	r3, #1
 8001244:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001246:	429a      	cmp	r2, r3
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000
 800125c:	019f800c 	.word	0x019f800c

08001260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e11e      	b.n	80014b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b91      	ldr	r3, [pc, #580]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d910      	bls.n	80012a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b8e      	ldr	r3, [pc, #568]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 020f 	bic.w	r2, r3, #15
 800128e:	498c      	ldr	r1, [pc, #560]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e106      	b.n	80014b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d073      	beq.n	800139c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d129      	bne.n	8001310 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012bc:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0f4      	b.n	80014b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80012cc:	f000 f9ba 	bl	8001644 <RCC_GetSysClockFreqFromPLLSource>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <HAL_RCC_ClockConfig+0x268>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d93f      	bls.n	800135a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80012da:	4b7a      	ldr	r3, [pc, #488]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d033      	beq.n	800135a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d12f      	bne.n	800135a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80012fa:	4b72      	ldr	r3, [pc, #456]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001302:	4a70      	ldr	r2, [pc, #448]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e024      	b.n	800135a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d107      	bne.n	8001328 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0c6      	b.n	80014b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0be      	b.n	80014b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001338:	f000 f8ce 	bl	80014d8 <HAL_RCC_GetSysClockFreq>
 800133c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4a61      	ldr	r2, [pc, #388]	; (80014c8 <HAL_RCC_ClockConfig+0x268>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d909      	bls.n	800135a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800134e:	4a5d      	ldr	r2, [pc, #372]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800135a:	4b5a      	ldr	r3, [pc, #360]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f023 0203 	bic.w	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4957      	ldr	r1, [pc, #348]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800136c:	f7ff f936 	bl	80005dc <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	e00a      	b.n	800138a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f7ff f932 	bl	80005dc <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e095      	b.n	80014b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 020c 	and.w	r2, r3, #12
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	429a      	cmp	r2, r3
 800139a:	d1eb      	bne.n	8001374 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a42      	ldr	r2, [pc, #264]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d007      	beq.n	80013dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80013d4:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013dc:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4936      	ldr	r1, [pc, #216]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	608b      	str	r3, [r1, #8]
 80013ee:	e008      	b.n	8001402 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b80      	cmp	r3, #128	; 0x80
 80013f4:	d105      	bne.n	8001402 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 80013fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001400:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d21d      	bcs.n	800144c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 020f 	bic.w	r2, r3, #15
 8001418:	4929      	ldr	r1, [pc, #164]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001420:	f7ff f8dc 	bl	80005dc <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7ff f8d8 	bl	80005dc <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e03b      	b.n	80014b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <HAL_RCC_ClockConfig+0x260>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d1ed      	bne.n	8001428 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4917      	ldr	r1, [pc, #92]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	490f      	ldr	r1, [pc, #60]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001486:	4313      	orrs	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800148a:	f000 f825 	bl	80014d8 <HAL_RCC_GetSysClockFreq>
 800148e:	4602      	mov	r2, r0
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_RCC_ClockConfig+0x264>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	490c      	ldr	r1, [pc, #48]	; (80014cc <HAL_RCC_ClockConfig+0x26c>)
 800149c:	5ccb      	ldrb	r3, [r1, r3]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_RCC_ClockConfig+0x270>)
 80014a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_RCC_ClockConfig+0x274>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ff88 	bl	80003c4 <HAL_InitTick>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	04c4b400 	.word	0x04c4b400
 80014cc:	08001e20 	.word	0x08001e20
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	e047      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d102      	bne.n	8001502 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	e03e      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d136      	bne.n	800157c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3301      	adds	r3, #1
 8001524:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800152c:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <HAL_RCC_GetSysClockFreq+0xc0>)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001536:	68d2      	ldr	r2, [r2, #12]
 8001538:	0a12      	lsrs	r2, r2, #8
 800153a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
      break;
 8001544:	e00c      	b.n	8001560 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001550:	68d2      	ldr	r2, [r2, #12]
 8001552:	0a12      	lsrs	r2, r2, #8
 8001554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
      break;
 800155e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0e5b      	lsrs	r3, r3, #25
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	3301      	adds	r3, #1
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e001      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001580:	693b      	ldr	r3, [r7, #16]
}
 8001582:	4618      	mov	r0, r3
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	00f42400 	.word	0x00f42400
 8001598:	007a1200 	.word	0x007a1200

0800159c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000000 	.word	0x20000000

080015b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80015b8:	f7ff fff0 	bl	800159c <HAL_RCC_GetHCLKFreq>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	0adb      	lsrs	r3, r3, #11
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	4904      	ldr	r1, [pc, #16]	; (80015dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80015ca:	5ccb      	ldrb	r3, [r1, r3]
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08001e30 	.word	0x08001e30

080015e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	220f      	movs	r2, #15
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_RCC_GetClockConfig+0x60>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 020f 	and.w	r2, r3, #15
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	40022000 	.word	0x40022000

08001644 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d10c      	bne.n	8001682 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001672:	68d2      	ldr	r2, [r2, #12]
 8001674:	0a12      	lsrs	r2, r2, #8
 8001676:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
    break;
 8001680:	e00c      	b.n	800169c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800168c:	68d2      	ldr	r2, [r2, #12]
 800168e:	0a12      	lsrs	r2, r2, #8
 8001690:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    break;
 800169a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0e5b      	lsrs	r3, r3, #25
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	3301      	adds	r3, #1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016b6:	687b      	ldr	r3, [r7, #4]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000
 80016c8:	007a1200 	.word	0x007a1200
 80016cc:	00f42400 	.word	0x00f42400

080016d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e049      	b.n	8001776 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f841 	bl	800177e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3304      	adds	r3, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f000 fa60 	bl	8001bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d001      	beq.n	80017ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e054      	b.n	8001856 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a26      	ldr	r2, [pc, #152]	; (8001864 <HAL_TIM_Base_Start_IT+0xd0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d022      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x80>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d6:	d01d      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x80>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_TIM_Base_Start_IT+0xd4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d018      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x80>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <HAL_TIM_Base_Start_IT+0xd8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x80>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_TIM_Base_Start_IT+0xdc>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00e      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x80>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <HAL_TIM_Base_Start_IT+0xe0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x80>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_TIM_Base_Start_IT+0xe4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0x80>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_TIM_Base_Start_IT+0xe8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d115      	bne.n	8001840 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_TIM_Base_Start_IT+0xec>)
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b06      	cmp	r3, #6
 8001824:	d015      	beq.n	8001852 <HAL_TIM_Base_Start_IT+0xbe>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d011      	beq.n	8001852 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800183e:	e008      	b.n	8001852 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e000      	b.n	8001854 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40000400 	.word	0x40000400
 800186c:	40000800 	.word	0x40000800
 8001870:	40000c00 	.word	0x40000c00
 8001874:	40013400 	.word	0x40013400
 8001878:	40014000 	.word	0x40014000
 800187c:	40015000 	.word	0x40015000
 8001880:	00010007 	.word	0x00010007

08001884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b02      	cmp	r3, #2
 8001898:	d122      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d11b      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0202 	mvn.w	r2, #2
 80018b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f965 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 80018cc:	e005      	b.n	80018da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f957 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f968 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d122      	bne.n	8001934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d11b      	bne.n	8001934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0204 	mvn.w	r2, #4
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f93b 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001920:	e005      	b.n	800192e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f92d 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f93e 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b08      	cmp	r3, #8
 8001940:	d122      	bne.n	8001988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b08      	cmp	r3, #8
 800194e:	d11b      	bne.n	8001988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0208 	mvn.w	r2, #8
 8001958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2204      	movs	r2, #4
 800195e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f911 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001974:	e005      	b.n	8001982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f903 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f914 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b10      	cmp	r3, #16
 8001994:	d122      	bne.n	80019dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d11b      	bne.n	80019dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0210 	mvn.w	r2, #16
 80019ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2208      	movs	r2, #8
 80019b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8e7 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 80019c8:	e005      	b.n	80019d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8d9 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f8ea 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d10e      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0201 	mvn.w	r2, #1
 8001a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fca2 	bl	800034c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	2b80      	cmp	r3, #128	; 0x80
 8001a14:	d10e      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a20:	2b80      	cmp	r3, #128	; 0x80
 8001a22:	d107      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f982 	bl	8001d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a42:	d10e      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	d107      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f975 	bl	8001d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	2b40      	cmp	r3, #64	; 0x40
 8001a6e:	d10e      	bne.n	8001a8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d107      	bne.n	8001a8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f898 	bl	8001bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d10e      	bne.n	8001aba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d107      	bne.n	8001aba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f06f 0220 	mvn.w	r2, #32
 8001ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f935 	bl	8001d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ac8:	d10f      	bne.n	8001aea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad8:	d107      	bne.n	8001aea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f93b 	bl	8001d60 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001af8:	d10f      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b08:	d107      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f92d 	bl	8001d74 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b28:	d10f      	bne.n	8001b4a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b38:	d107      	bne.n	8001b4a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f91f 	bl	8001d88 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b58:	d10f      	bne.n	8001b7a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b68:	d107      	bne.n	8001b7a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f911 	bl	8001d9c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <TIM_Base_SetConfig+0x12c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d017      	beq.n	8001c1c <TIM_Base_SetConfig+0x48>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf2:	d013      	beq.n	8001c1c <TIM_Base_SetConfig+0x48>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a43      	ldr	r2, [pc, #268]	; (8001d04 <TIM_Base_SetConfig+0x130>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00f      	beq.n	8001c1c <TIM_Base_SetConfig+0x48>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a42      	ldr	r2, [pc, #264]	; (8001d08 <TIM_Base_SetConfig+0x134>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00b      	beq.n	8001c1c <TIM_Base_SetConfig+0x48>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a41      	ldr	r2, [pc, #260]	; (8001d0c <TIM_Base_SetConfig+0x138>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <TIM_Base_SetConfig+0x48>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <TIM_Base_SetConfig+0x13c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d003      	beq.n	8001c1c <TIM_Base_SetConfig+0x48>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <TIM_Base_SetConfig+0x140>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d108      	bne.n	8001c2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <TIM_Base_SetConfig+0x12c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d023      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3c:	d01f      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a30      	ldr	r2, [pc, #192]	; (8001d04 <TIM_Base_SetConfig+0x130>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01b      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <TIM_Base_SetConfig+0x134>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d017      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a2e      	ldr	r2, [pc, #184]	; (8001d0c <TIM_Base_SetConfig+0x138>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <TIM_Base_SetConfig+0x13c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00f      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <TIM_Base_SetConfig+0x144>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00b      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a2c      	ldr	r2, [pc, #176]	; (8001d1c <TIM_Base_SetConfig+0x148>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <TIM_Base_SetConfig+0x14c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d003      	beq.n	8001c7e <TIM_Base_SetConfig+0xaa>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <TIM_Base_SetConfig+0x140>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <TIM_Base_SetConfig+0x12c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <TIM_Base_SetConfig+0x110>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <TIM_Base_SetConfig+0x13c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00f      	beq.n	8001ce4 <TIM_Base_SetConfig+0x110>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <TIM_Base_SetConfig+0x144>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00b      	beq.n	8001ce4 <TIM_Base_SetConfig+0x110>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <TIM_Base_SetConfig+0x148>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <TIM_Base_SetConfig+0x110>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <TIM_Base_SetConfig+0x14c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <TIM_Base_SetConfig+0x110>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <TIM_Base_SetConfig+0x140>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d103      	bne.n	8001cec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40013400 	.word	0x40013400
 8001d14:	40015000 	.word	0x40015000
 8001d18:	40014000 	.word	0x40014000
 8001d1c:	40014400 	.word	0x40014400
 8001d20:	40014800 	.word	0x40014800

08001d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <memset>:
 8001db0:	4402      	add	r2, r0
 8001db2:	4603      	mov	r3, r0
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d100      	bne.n	8001dba <memset+0xa>
 8001db8:	4770      	bx	lr
 8001dba:	f803 1b01 	strb.w	r1, [r3], #1
 8001dbe:	e7f9      	b.n	8001db4 <memset+0x4>

08001dc0 <__libc_init_array>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	4d0d      	ldr	r5, [pc, #52]	; (8001df8 <__libc_init_array+0x38>)
 8001dc4:	4c0d      	ldr	r4, [pc, #52]	; (8001dfc <__libc_init_array+0x3c>)
 8001dc6:	1b64      	subs	r4, r4, r5
 8001dc8:	10a4      	asrs	r4, r4, #2
 8001dca:	2600      	movs	r6, #0
 8001dcc:	42a6      	cmp	r6, r4
 8001dce:	d109      	bne.n	8001de4 <__libc_init_array+0x24>
 8001dd0:	4d0b      	ldr	r5, [pc, #44]	; (8001e00 <__libc_init_array+0x40>)
 8001dd2:	4c0c      	ldr	r4, [pc, #48]	; (8001e04 <__libc_init_array+0x44>)
 8001dd4:	f000 f818 	bl	8001e08 <_init>
 8001dd8:	1b64      	subs	r4, r4, r5
 8001dda:	10a4      	asrs	r4, r4, #2
 8001ddc:	2600      	movs	r6, #0
 8001dde:	42a6      	cmp	r6, r4
 8001de0:	d105      	bne.n	8001dee <__libc_init_array+0x2e>
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
 8001de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de8:	4798      	blx	r3
 8001dea:	3601      	adds	r6, #1
 8001dec:	e7ee      	b.n	8001dcc <__libc_init_array+0xc>
 8001dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001df2:	4798      	blx	r3
 8001df4:	3601      	adds	r6, #1
 8001df6:	e7f2      	b.n	8001dde <__libc_init_array+0x1e>
 8001df8:	08001e38 	.word	0x08001e38
 8001dfc:	08001e38 	.word	0x08001e38
 8001e00:	08001e38 	.word	0x08001e38
 8001e04:	08001e3c 	.word	0x08001e3c

08001e08 <_init>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr

08001e14 <_fini>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr
