
AVALON_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cff8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800d1d8  0800d1d8  0001d1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6f4  0800d6f4  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d6f4  0800d6f4  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d6f4  0800d6f4  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6f4  0800d6f4  0001d6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800d6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  2000034c  0800da48  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  0800da48  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fe8  00000000  00000000  000203bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e4  00000000  00000000  000333a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00036b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbf  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002834f  00000000  00000000  0003871f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014498  00000000  00000000  00060a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4d2  00000000  00000000  00074f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000501c  00000000  00000000  001613d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001663f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d1c0 	.word	0x0800d1c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	0800d1c0 	.word	0x0800d1c0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2lz>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2300      	movs	r3, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	460d      	mov	r5, r1
 8000c76:	f7ff ff61 	bl	8000b3c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x1c>
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fcd7 	bl	8000658 <__aeabi_dmul>
 8000caa:	f7ff ff6f 	bl	8000b8c <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc58 	bl	8000564 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fcce 	bl	8000658 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fb10 	bl	80002e8 <__aeabi_dsub>
 8000cc8:	f7ff ff60 	bl	8000b8c <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <AT25X041B_Init>:
#include "at25x041b.h"
#include "main.h"



uint8_t AT25X041B_Init(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t CS_PORT,uint32_t CS_PIN){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	603b      	str	r3, [r7, #0]
	/*@Function use to init the memory and check if the read and write is working
	 * by looking into the device id an manufacturer
	 */

	uint8_t txBuffer[1] = {0};
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	753b      	strb	r3, [r7, #20]
	uint8_t rxBuffer[2] = {0};
 8000cea:	2300      	movs	r3, #0
 8000cec:	823b      	strh	r3, [r7, #16]
	uint8_t result = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]

	//store the port and pin number into the struct
	AT25X041B->CS_PIN = CS_PIN;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
	AT25X041B->CS_PORT = CS_PORT;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24


	//set the cs to a high level to make sure the communication didn't start before
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	4618      	mov	r0, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f001 fab7 	bl	8002280 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d12:	2005      	movs	r0, #5
 8000d14:	f000 ff1e 	bl	8001b54 <HAL_Delay>
	//Pull low the GPIO to start communication
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	f001 faaa 	bl	8002280 <HAL_GPIO_WritePin>

	txBuffer[0] = RESUME_DEEP_POWER_DOWN_CMD;
 8000d2c:	23ab      	movs	r3, #171	; 0xab
 8000d2e:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI,txBuffer, 1, 100);
 8000d30:	f107 0114 	add.w	r1, r7, #20
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	2201      	movs	r2, #1
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f004 f930 	bl	8004f9e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	4618      	mov	r0, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f001 fa97 	bl	8002280 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d52:	2005      	movs	r0, #5
 8000d54:	f000 fefe 	bl	8001b54 <HAL_Delay>
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	f001 fa8a 	bl	8002280 <HAL_GPIO_WritePin>

	txBuffer[0] = READ_ID_CMD;
 8000d6c:	239f      	movs	r3, #159	; 0x9f
 8000d6e:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI, txBuffer, 1, 100);
 8000d70:	f107 0114 	add.w	r1, r7, #20
 8000d74:	2364      	movs	r3, #100	; 0x64
 8000d76:	2201      	movs	r2, #1
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f004 f910 	bl	8004f9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, rxBuffer, 2, 100);
 8000d7e:	f107 0110 	add.w	r1, r7, #16
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2202      	movs	r2, #2
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f004 fa77 	bl	800527a <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f001 fa70 	bl	8002280 <HAL_GPIO_WritePin>

	AT25X041B->LastWrittenAddr = 0x07FFFF;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <AT25X041B_Init+0xec>)
 8000da4:	619a      	str	r2, [r3, #24]
	AT25X041B->ManufacturerId = rxBuffer[0];
 8000da6:	7c3a      	ldrb	r2, [r7, #16]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	701a      	strb	r2, [r3, #0]
	if(AT25X041B->ManufacturerId !=0x1F){
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b1f      	cmp	r3, #31
 8000db2:	d001      	beq.n	8000db8 <AT25X041B_Init+0xe0>
		result = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	75fb      	strb	r3, [r7, #23]
	}
	return result;
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	0007ffff 	.word	0x0007ffff

08000dc8 <AT25X041B_ChipErase>:

	HAL_Delay(5);
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
}

uint8_t AT25X041B_ChipErase(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b092      	sub	sp, #72	; 0x48
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	/*
	 * A simple function that erase the full 4Mb of the chip return 1 if the chip erase worked 0 if not
	 */
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t result = 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint32_t SECTOR_ADDR_LIST[11] = {0x07FFFF,0x07BFFF,0x079FFF,0x076FFF,0x060FFF,0x050FFF,0x040FFF,0x030FFF,0x020FFF,0x010FFF,0x000FFF};
 8000dd8:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <AT25X041B_ChipErase+0x10c>)
 8000dda:	f107 040c 	add.w	r4, r7, #12
 8000dde:	461d      	mov	r5, r3
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//All sector should be unprotect first to ensure a full erase
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
 8000df4:	e00d      	b.n	8000e12 <AT25X041B_ChipErase+0x4a>
		AT25X041B_UnprotectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 8000df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	3348      	adds	r3, #72	; 0x48
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e02:	461a      	mov	r2, r3
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f8ec 	bl	8000fe4 <AT25X041B_UnprotectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e0e:	3301      	adds	r3, #1
 8000e10:	643b      	str	r3, [r7, #64]	; 0x40
 8000e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e14:	2b0a      	cmp	r3, #10
 8000e16:	d9ee      	bls.n	8000df6 <AT25X041B_ChipErase+0x2e>
	}
	//We also need to disable write protection (don't know why but the datasheet say to do it)
	AT25X041B_WriteProtectionDisable(SPI, AT25X041B);
 8000e18:	6839      	ldr	r1, [r7, #0]
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f96e 	bl	80010fc <AT25X041B_WriteProtectionDisable>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	4618      	mov	r0, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f001 fa26 	bl	8002280 <HAL_GPIO_WritePin>

	//Send the full chip erase command
	data[0] = FULL_CHIP_ERASE_CMD;
 8000e34:	23c7      	movs	r3, #199	; 0xc7
 8000e36:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000e3a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	2201      	movs	r2, #1
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f004 f8ab 	bl	8004f9e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	f001 fa12 	bl	8002280 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f83c 	bl	8000edc <AT25X041B_ReadStatusReg_Byte1>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//wait until the chip erase is done (check RDY/ bits)
	while(status_reg_val & 0x01 != 0x00){
 8000e6a:	e006      	b.n	8000e7a <AT25X041B_ChipErase+0xb2>
		status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f834 	bl	8000edc <AT25X041B_ReadStatusReg_Byte1>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(status_reg_val & 0x01 != 0x00){
 8000e7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f2      	bne.n	8000e6c <AT25X041B_ChipErase+0xa4>
	}


	//All sector should be protected again
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e8a:	e00d      	b.n	8000ea8 <AT25X041B_ChipErase+0xe0>
		AT25X041B_ProtectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 8000e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	3348      	adds	r3, #72	; 0x48
 8000e92:	443b      	add	r3, r7
 8000e94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f8e7 	bl	8001070 <AT25X041B_ProtectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eaa:	2b0a      	cmp	r3, #10
 8000eac:	d9ee      	bls.n	8000e8c <AT25X041B_ChipErase+0xc4>
	}

	//chek the EPE bit from the status register to ensure no error
	if(((status_reg_val & 0x20)>>5) == 0x01){
 8000eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <AT25X041B_ChipErase+0xfa>
		//If an error occure --> return 0
		result = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000ec0:	e002      	b.n	8000ec8 <AT25X041B_ChipErase+0x100>
	}
	else{
		//if the chip erase worked then the memory is clear and the las written adress is 0 (0x7FFFF as i read the flash from max addr downto 0
		AT25X041B->LastWrittenAddr = 0x07FFFF;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <AT25X041B_ChipErase+0x110>)
 8000ec6:	619a      	str	r2, [r3, #24]
	}
	return result;
 8000ec8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46

}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3748      	adds	r7, #72	; 0x48
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed4:	0800d1d8 	.word	0x0800d1d8
 8000ed8:	0007ffff 	.word	0x0007ffff

08000edc <AT25X041B_ReadStatusReg_Byte1>:

uint8_t AT25X041B_ReadStatusReg_Byte1(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]

	uint8_t data[1];
	uint8_t status_reg_value[1];


	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	4618      	mov	r0, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f001 f9c3 	bl	8002280 <HAL_GPIO_WritePin>

	data[0] = READ_STATUS_CMD;
 8000efa:	2305      	movs	r3, #5
 8000efc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000efe:	f107 010c 	add.w	r1, r7, #12
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f004 f849 	bl	8004f9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, status_reg_value, 1, 100);
 8000f0c:	f107 0108 	add.w	r1, r7, #8
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f004 f9b0 	bl	800527a <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f001 f9a9 	bl	8002280 <HAL_GPIO_WritePin>

	return status_reg_value[0];
 8000f2e:	7a3b      	ldrb	r3, [r7, #8]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <AT25X041B_WriteMemory8>:
	AT25X041B_ProtectSector(SPI, AT25X041B, addr);

	return memory_value[0];
}

void AT25X041B_WriteMemory8(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr,uint8_t data_in){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	70fb      	strb	r3, [r7, #3]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t data_in_array[1];

	//Split the 23 bits addr into 3*8bits
	addr8bit[2] = (addr & 0xFF);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	77bb      	strb	r3, [r7, #30]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	777b      	strb	r3, [r7, #29]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	773b      	strb	r3, [r7, #28]
	data_in_array[0] = data_in;
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	753b      	strb	r3, [r7, #20]

	//Before reading the sector should be first unprotected
	AT25X041B_UnprotectSector(SPI, AT25X041B, addr);
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f83d 	bl	8000fe4 <AT25X041B_UnprotectSector>

	//We should send a write protection disable
	AT25X041B_WriteProtectionDisable(SPI, AT25X041B);
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f8c5 	bl	80010fc <AT25X041B_WriteProtectionDisable>


	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	4618      	mov	r0, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	f001 f97d 	bl	8002280 <HAL_GPIO_WritePin>

	data[0] = WRITE_BYTE_CMD;
 8000f86:	2302      	movs	r3, #2
 8000f88:	763b      	strb	r3, [r7, #24]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000f8a:	f107 0118 	add.w	r1, r7, #24
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	2201      	movs	r2, #1
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f004 f803 	bl	8004f9e <HAL_SPI_Transmit>
	//write the 23bit addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 8000f98:	f107 011c 	add.w	r1, r7, #28
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f003 fffc 	bl	8004f9e <HAL_SPI_Transmit>
	//send the data to write
	HAL_SPI_Transmit(SPI,data_in_array,1,100);
 8000fa6:	f107 0114 	add.w	r1, r7, #20
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	2201      	movs	r2, #1
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f003 fff5 	bl	8004f9e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	4618      	mov	r0, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f001 f95c 	bl	8002280 <HAL_GPIO_WritePin>

	AT25X041B->LastWrittenAddr--;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	619a      	str	r2, [r3, #24]

	//When everything is done the sector should be protected again
	AT25X041B_ProtectSector(SPI, AT25X041B, addr);
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 f84a 	bl	8001070 <AT25X041B_ProtectSector>


}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <AT25X041B_UnprotectSector>:
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);

	return sector_status[0];
}

void AT25X041B_UnprotectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0c1b      	lsrs	r3, r3, #16
 8001002:	b2db      	uxtb	r3, r3
 8001004:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f877 	bl	80010fc <AT25X041B_WriteProtectionDisable>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d003      	beq.n	8001020 <AT25X041B_UnprotectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 f86e 	bl	80010fc <AT25X041B_WriteProtectionDisable>
	}


	data[0] = UNPROTECT_SECTOR_CMD;
 8001020:	2339      	movs	r3, #57	; 0x39
 8001022:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	4618      	mov	r0, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	b29b      	uxth	r3, r3
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	f001 f924 	bl	8002280 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8001038:	f107 0110 	add.w	r1, r7, #16
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	2201      	movs	r2, #1
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f003 ffac 	bl	8004f9e <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 8001046:	f107 0114 	add.w	r1, r7, #20
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	2203      	movs	r2, #3
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f003 ffa5 	bl	8004f9e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	4618      	mov	r0, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f001 f90c 	bl	8002280 <HAL_GPIO_WritePin>

}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <AT25X041B_ProtectSector>:

void AT25X041B_ProtectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	b2db      	uxtb	r3, r3
 8001088:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	b2db      	uxtb	r3, r3
 8001090:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f831 	bl	80010fc <AT25X041B_WriteProtectionDisable>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d003      	beq.n	80010ac <AT25X041B_ProtectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f828 	bl	80010fc <AT25X041B_WriteProtectionDisable>
	}


	data[0] = PROTECT_SECTOR_CMD;
 80010ac:	2336      	movs	r3, #54	; 0x36
 80010ae:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	4618      	mov	r0, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	f001 f8de 	bl	8002280 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 80010c4:	f107 0110 	add.w	r1, r7, #16
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	2201      	movs	r2, #1
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f003 ff66 	bl	8004f9e <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 80010d2:	f107 0114 	add.w	r1, r7, #20
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	2203      	movs	r2, #3
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f003 ff5f 	bl	8004f9e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	4618      	mov	r0, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	f001 f8c6 	bl	8002280 <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <AT25X041B_WriteProtectionDisable>:
		res = 0;
	}
	return res;
}

uint8_t AT25X041B_WriteProtectionDisable(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t res = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	4618      	mov	r0, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	b29b      	uxth	r3, r3
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f001 f8b1 	bl	8002280 <HAL_GPIO_WritePin>

	data[0] = WRITE_DISABLE_CMD;
 800111e:	2306      	movs	r3, #6
 8001120:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8001122:	f107 010c 	add.w	r1, r7, #12
 8001126:	2364      	movs	r3, #100	; 0x64
 8001128:	2201      	movs	r2, #1
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f003 ff37 	bl	8004f9e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	4618      	mov	r0, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	b29b      	uxth	r3, r3
 800113c:	2201      	movs	r2, #1
 800113e:	4619      	mov	r1, r3
 8001140:	f001 f89e 	bl	8002280 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI, AT25X041B);
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fec8 	bl	8000edc <AT25X041B_ReadStatusReg_Byte1>
 800114c:	4603      	mov	r3, r0
 800114e:	73bb      	strb	r3, [r7, #14]

	//if the command didn't worked then return 0
	if(((status_reg_val&0x02)>>1) == 0x00){
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <AT25X041B_WriteProtectionDisable+0x62>
		res = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <WriteCoordinateFlash>:

void WriteCoordinateFlash(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,coord_t coordinate){
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	6178      	str	r0, [r7, #20]
 8001170:	6139      	str	r1, [r7, #16]
 8001172:	eef0 6a40 	vmov.f32	s13, s0
 8001176:	eeb0 7a60 	vmov.f32	s14, s1
 800117a:	eef0 7a41 	vmov.f32	s15, s2
 800117e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001182:	ed87 7a02 	vstr	s14, [r7, #8]
 8001186:	edc7 7a03 	vstr	s15, [r7, #12]
		float longitude;
		uint8_t longitude_byte[4];
	} longitude_u;

	//Affect the coordinate to the union
	longitude_u.longitude = coordinate.longitude;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	61bb      	str	r3, [r7, #24]
	latitude_u.latitude = coordinate.latitude;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	61fb      	str	r3, [r7, #28]
	altitude_u.altitude = coordinate.altitude;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	623b      	str	r3, [r7, #32]

	//Store all data's into the memory
	for(int i=0;i<sizeof(altitude_u.altitude_byte);i++){
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800119a:	e00e      	b.n	80011ba <WriteCoordinateFlash+0x52>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr, altitude_u.altitude_byte[i]);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	6999      	ldr	r1, [r3, #24]
 80011a0:	f107 0220 	add.w	r2, r7, #32
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	460a      	mov	r2, r1
 80011ac:	6939      	ldr	r1, [r7, #16]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff fec2 	bl	8000f38 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(altitude_u.altitude_byte);i++){
 80011b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b6:	3301      	adds	r3, #1
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d9ed      	bls.n	800119c <WriteCoordinateFlash+0x34>
	}

	for(int i=0;i<sizeof(latitude_u.latitude_byte);i++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c4:	e00e      	b.n	80011e4 <WriteCoordinateFlash+0x7c>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr,latitude_u.latitude_byte[i]);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6999      	ldr	r1, [r3, #24]
 80011ca:	f107 021c 	add.w	r2, r7, #28
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	460a      	mov	r2, r1
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f7ff fead 	bl	8000f38 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(latitude_u.latitude_byte);i++){
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	3301      	adds	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d9ed      	bls.n	80011c6 <WriteCoordinateFlash+0x5e>
	}

	for(int i=0;i<sizeof(longitude_u.longitude_byte);i++){
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	e00e      	b.n	800120e <WriteCoordinateFlash+0xa6>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr, longitude_u.longitude_byte[i]);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6999      	ldr	r1, [r3, #24]
 80011f4:	f107 0218 	add.w	r2, r7, #24
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	460a      	mov	r2, r1
 8001200:	6939      	ldr	r1, [r7, #16]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff fe98 	bl	8000f38 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(longitude_u.longitude_byte);i++){
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	3301      	adds	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	2b03      	cmp	r3, #3
 8001212:	d9ed      	bls.n	80011f0 <WriteCoordinateFlash+0x88>
	}

}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b0b4      	sub	sp, #208	; 0xd0
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 fc24 	bl	8001a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f8ed 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 f977 	bl	8001520 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8001232:	f008 fc39 	bl	8009aa8 <MX_USB_Device_Init>
  MX_SPI1_Init();
 8001236:	f000 f935 	bl	80014a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Init the external flash */
  if(AT25X041B_Init(&hspi1, &external_flash, SPI1_CS_GPIO_Port, SPI1_CS_Pin) != 0x00){
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001242:	4963      	ldr	r1, [pc, #396]	; (80013d0 <main+0x1b0>)
 8001244:	4863      	ldr	r0, [pc, #396]	; (80013d4 <main+0x1b4>)
 8001246:	f7ff fd47 	bl	8000cd8 <AT25X041B_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <main+0x34>
	  Error_Handler();
 8001250:	f000 fa53 	bl	80016fa <Error_Handler>
  }

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f001 f80f 	bl	8002280 <HAL_GPIO_WritePin>

  /* loop to ensure user is ready to send a data */
  uint8_t Flash_confirmation[] = "Flashing data please wait ...\r\n";
 8001262:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <main+0x1b8>)
 8001264:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001268:	461d      	mov	r5, r3
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t Print_time[] = "Waiting for USB interrupt !\r\n";
 8001276:	4b59      	ldr	r3, [pc, #356]	; (80013dc <main+0x1bc>)
 8001278:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800127c:	461d      	mov	r5, r3
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001286:	c407      	stmia	r4!, {r0, r1, r2}
 8001288:	8023      	strh	r3, [r4, #0]
  uint8_t Flash_erase[] = "External flash erase please wait ... \r\n";
 800128a:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <main+0x1c0>)
 800128c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001290:	461d      	mov	r5, r3
 8001292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800129e:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t Jumping_to_app[] = "Jumping to application !\r\n";
 80012a2:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <main+0x1c4>)
 80012a4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80012a8:	461d      	mov	r5, r3
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b2:	c403      	stmia	r4!, {r0, r1}
 80012b4:	8022      	strh	r2, [r4, #0]
 80012b6:	3402      	adds	r4, #2
 80012b8:	0c13      	lsrs	r3, r2, #16
 80012ba:	7023      	strb	r3, [r4, #0]
  uint8_t Error1[] = "An error occurred while erasing external flash !\r\n";
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <main+0x1c8>)
 80012be:	f107 0414 	add.w	r4, r7, #20
 80012c2:	461d      	mov	r5, r3
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	8022      	strh	r2, [r4, #0]
 80012d6:	3402      	adds	r4, #2
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	7023      	strb	r3, [r4, #0]
  uint8_t Write_confirmation[] = "Flash successful\r\n";
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <main+0x1cc>)
 80012de:	463c      	mov	r4, r7
 80012e0:	461d      	mov	r5, r3
 80012e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	8022      	strh	r2, [r4, #0]
 80012ec:	3402      	adds	r4, #2
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	7023      	strb	r3, [r4, #0]

  for(int i=0;i<TIME_TO_WAIT_S;i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012f8:	e058      	b.n	80013ac <main+0x18c>
	  if(start_of_flash){
 80012fa:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <main+0x1d0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d045      	beq.n	800138e <main+0x16e>
		  CDC_Transmit_FS(Flash_erase, sizeof(Flash_erase));
 8001302:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001306:	2128      	movs	r1, #40	; 0x28
 8001308:	4618      	mov	r0, r3
 800130a:	f008 fcd5 	bl	8009cb8 <CDC_Transmit_FS>
		  if( AT25X041B_ChipErase(&hspi1, &external_flash) == 0x01){
 800130e:	4930      	ldr	r1, [pc, #192]	; (80013d0 <main+0x1b0>)
 8001310:	4830      	ldr	r0, [pc, #192]	; (80013d4 <main+0x1b4>)
 8001312:	f7ff fd59 	bl	8000dc8 <AT25X041B_ChipErase>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d106      	bne.n	800132a <main+0x10a>
			  CDC_Transmit_FS(Flash_confirmation, sizeof(Flash_confirmation));
 800131c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001320:	2120      	movs	r1, #32
 8001322:	4618      	mov	r0, r3
 8001324:	f008 fcc8 	bl	8009cb8 <CDC_Transmit_FS>
 8001328:	e02c      	b.n	8001384 <main+0x164>
		  }
		  else{
			  CDC_Transmit_FS(Error1, sizeof(Error1));
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2133      	movs	r1, #51	; 0x33
 8001330:	4618      	mov	r0, r3
 8001332:	f008 fcc1 	bl	8009cb8 <CDC_Transmit_FS>
		  }

		  /* Wait until we received a end of flash sequence */
		  while(end_of_flash != 1){
 8001336:	e025      	b.n	8001384 <main+0x164>

			  /* Wait until a full coordinate has been send, it must end with \r\n */
			  if(end_of_coordinate == 0x01){
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <main+0x1d4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d121      	bne.n	8001384 <main+0x164>
				  /* convert RX buffer into coordinate */
				  Rx_Buffer_Processing(RX_BUFFER,&coordinate);
 8001340:	492d      	ldr	r1, [pc, #180]	; (80013f8 <main+0x1d8>)
 8001342:	482e      	ldr	r0, [pc, #184]	; (80013fc <main+0x1dc>)
 8001344:	f000 f954 	bl	80015f0 <Rx_Buffer_Processing>

				  /* Flash the external flash */
				  WriteCoordinateFlash(&hspi1, &external_flash,coordinate);
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <main+0x1d8>)
 800134a:	edd3 6a00 	vldr	s13, [r3]
 800134e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001352:	edd3 7a02 	vldr	s15, [r3, #8]
 8001356:	eeb0 0a66 	vmov.f32	s0, s13
 800135a:	eef0 0a47 	vmov.f32	s1, s14
 800135e:	eeb0 1a67 	vmov.f32	s2, s15
 8001362:	491b      	ldr	r1, [pc, #108]	; (80013d0 <main+0x1b0>)
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <main+0x1b4>)
 8001366:	f7ff feff 	bl	8001168 <WriteCoordinateFlash>
				  end_of_coordinate = 0;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <main+0x1d4>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
				  memset(RX_BUFFER, 0, sizeof(RX_BUFFER));
 8001370:	2264      	movs	r2, #100	; 0x64
 8001372:	2100      	movs	r1, #0
 8001374:	4821      	ldr	r0, [pc, #132]	; (80013fc <main+0x1dc>)
 8001376:	f00a f810 	bl	800b39a <memset>
				  CDC_Transmit_FS(Write_confirmation, sizeof(Write_confirmation));
 800137a:	463b      	mov	r3, r7
 800137c:	2113      	movs	r1, #19
 800137e:	4618      	mov	r0, r3
 8001380:	f008 fc9a 	bl	8009cb8 <CDC_Transmit_FS>
		  while(end_of_flash != 1){
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <main+0x1e0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1d5      	bne.n	8001338 <main+0x118>
			  }
		  }
		  break;
 800138c:	e012      	b.n	80013b4 <main+0x194>
	  }
	  CDC_Transmit_FS(Print_time, sizeof(Print_time));
 800138e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001392:	211e      	movs	r1, #30
 8001394:	4618      	mov	r0, r3
 8001396:	f008 fc8f 	bl	8009cb8 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f000 fbd9 	bl	8001b54 <HAL_Delay>
  for(int i=0;i<TIME_TO_WAIT_S;i++){
 80013a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013a6:	3301      	adds	r3, #1
 80013a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	dda2      	ble.n	80012fa <main+0xda>
  }

  CDC_Transmit_FS(Jumping_to_app, sizeof(Jumping_to_app));
 80013b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b8:	211b      	movs	r1, #27
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 fc7c 	bl	8009cb8 <CDC_Transmit_FS>
  HAL_Delay(1000);
 80013c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c4:	f000 fbc6 	bl	8001b54 <HAL_Delay>
  JumpToApplication(APP_ADDRESS);
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <main+0x1e4>)
 80013ca:	f000 f8db 	bl	8001584 <JumpToApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <main+0x1ae>
 80013d0:	200003d0 	.word	0x200003d0
 80013d4:	2000036c 	.word	0x2000036c
 80013d8:	0800d204 	.word	0x0800d204
 80013dc:	0800d224 	.word	0x0800d224
 80013e0:	0800d244 	.word	0x0800d244
 80013e4:	0800d26c 	.word	0x0800d26c
 80013e8:	0800d288 	.word	0x0800d288
 80013ec:	0800d2bc 	.word	0x0800d2bc
 80013f0:	20000368 	.word	0x20000368
 80013f4:	2000036a 	.word	0x2000036a
 80013f8:	200003fc 	.word	0x200003fc
 80013fc:	200006e4 	.word	0x200006e4
 8001400:	20000369 	.word	0x20000369
 8001404:	0800e000 	.word	0x0800e000

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	; 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	2238      	movs	r2, #56	; 0x38
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f009 ffbf 	bl	800b39a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800142e:	f002 fc73 	bl	8003d18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001432:	2322      	movs	r3, #34	; 0x22
 8001434:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001440:	2301      	movs	r3, #1
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001448:	2302      	movs	r3, #2
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800144c:	2304      	movs	r3, #4
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001450:	234b      	movs	r3, #75	; 0x4b
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fd7d 	bl	8003f64 <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001470:	f000 f943 	bl	80016fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001474:	230f      	movs	r3, #15
 8001476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001478:	2303      	movs	r3, #3
 800147a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2104      	movs	r1, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f003 f881 	bl	8004594 <HAL_RCC_ClockConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001498:	f000 f92f 	bl	80016fa <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3750      	adds	r7, #80	; 0x50
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_SPI1_Init+0x74>)
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <MX_SPI1_Init+0x78>)
 80014ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_SPI1_Init+0x74>)
 80014b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_SPI1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_SPI1_Init+0x74>)
 80014be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_SPI1_Init+0x74>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_SPI1_Init+0x74>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_SPI1_Init+0x74>)
 80014d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_SPI1_Init+0x74>)
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_SPI1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_SPI1_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_SPI1_Init+0x74>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_SPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_SPI1_Init+0x74>)
 8001504:	f003 fc78 	bl	8004df8 <HAL_SPI_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800150e:	f000 f8f4 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000036c 	.word	0x2000036c
 800151c:	40013000 	.word	0x40013000

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_GPIO_Init+0x60>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	4a11      	ldr	r2, [pc, #68]	; (8001580 <MX_GPIO_Init+0x60>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_GPIO_Init+0x60>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001556:	f000 fe93 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 800155a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f000 fc20 	bl	8001db8 <HAL_GPIO_Init>

}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000

08001584 <JumpToApplication>:

/* USER CODE BEGIN 4 */
void JumpToApplication(uint32_t application_addr){
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

	  /*Init a function pointer*/
	  uint32_t go_address = *((volatile uint32_t*) (application_addr + 4));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3304      	adds	r3, #4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	617b      	str	r3, [r7, #20]
	  void (*jump_to_app)(void) = (void *)go_address;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]

	  /*Uninit all peripheral use by the bootloader*/
	  HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a0:	f000 fd8c 	bl	80020bc <HAL_GPIO_DeInit>

	  /* Disable SPI*/
	  HAL_SPI_DeInit(&hspi1);
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <JumpToApplication+0x60>)
 80015a6:	f003 fcd2 	bl	8004f4e <HAL_SPI_DeInit>

	  /*Disable clock*/
	  HAL_RCC_DeInit();
 80015aa:	f002 fc59 	bl	8003e60 <HAL_RCC_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ae:	b672      	cpsid	i
}
 80015b0:	bf00      	nop

	  /*disable all IRQ*/
	  __disable_irq();

	  /*Relocate vector table*/
	  SCB->VTOR = application_addr;
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <JumpToApplication+0x64>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6093      	str	r3, [r2, #8]

	  /*Set main stack pointer pas sure*/
	  __set_MSP(*(volatile uint32_t*) application_addr);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f383 8808 	msr	MSP, r3
}
 80015c4:	bf00      	nop

	  /*Reset systick timer*/
	  SysTick->CTRL = 0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <JumpToApplication+0x68>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <JumpToApplication+0x68>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <JumpToApplication+0x68>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
		//#error "In order to jump correctly the app should be relocated at different @ - please allow more than (2048byte*4)=16384 byte -- probably around 40 or 42 kB "
	  /*Jump*/
	  jump_to_app();
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4798      	blx	r3
}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000036c 	.word	0x2000036c
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <Rx_Buffer_Processing>:
 * @method latitude,longitude,altitude\r\n
 * @param RX_BUFFER any size buffer (should end with a \0)
 * @param coord is the output coordinate pointer
 * @output 0 if success 1 else
 */
uint8_t Rx_Buffer_Processing(uint8_t RX_BUFFER[],coord_t *output){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]

	uint8_t temp_string[30] = {0x0};
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	831a      	strh	r2, [r3, #24]
	uint8_t temp_char[2] = {0x0};
 8001612:	2300      	movs	r3, #0
 8001614:	81bb      	strh	r3, [r7, #12]
	uint16_t counter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	86fb      	strh	r3, [r7, #54]	; 0x36

	for(int i=0;i<3;i++){
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
 800161e:	e064      	b.n	80016ea <Rx_Buffer_Processing+0xfa>

		while((RX_BUFFER[counter] != ',')&&(RX_BUFFER[counter] != '\r')){
			temp_char[0] = RX_BUFFER[counter];
 8001620:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	733b      	strb	r3, [r7, #12]
			temp_char[1] = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	737b      	strb	r3, [r7, #13]
			strcat(temp_string,temp_char);
 800162e:	f107 020c 	add.w	r2, r7, #12
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f009 feb6 	bl	800b3aa <strcat>
			counter++;
 800163e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001640:	3301      	adds	r3, #1
 8001642:	86fb      	strh	r3, [r7, #54]	; 0x36
		while((RX_BUFFER[counter] != ',')&&(RX_BUFFER[counter] != '\r')){
 8001644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b2c      	cmp	r3, #44	; 0x2c
 800164e:	d005      	beq.n	800165c <Rx_Buffer_Processing+0x6c>
 8001650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b0d      	cmp	r3, #13
 800165a:	d1e1      	bne.n	8001620 <Rx_Buffer_Processing+0x30>
		}

		switch (i) {
 800165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165e:	2b02      	cmp	r3, #2
 8001660:	d027      	beq.n	80016b2 <Rx_Buffer_Processing+0xc2>
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	2b02      	cmp	r3, #2
 8001666:	dc33      	bgt.n	80016d0 <Rx_Buffer_Processing+0xe0>
 8001668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <Rx_Buffer_Processing+0x86>
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	2b01      	cmp	r3, #1
 8001672:	d00f      	beq.n	8001694 <Rx_Buffer_Processing+0xa4>
 8001674:	e02c      	b.n	80016d0 <Rx_Buffer_Processing+0xe0>
			case 0:
				output->latitude = atof(temp_string);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4618      	mov	r0, r3
 800167c:	f008 ff6a 	bl	800a554 <atof>
 8001680:	ec53 2b10 	vmov	r2, r3, d0
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff faa0 	bl	8000bcc <__aeabi_d2f>
 800168c:	4602      	mov	r2, r0
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]
				break;
 8001692:	e01d      	b.n	80016d0 <Rx_Buffer_Processing+0xe0>
			case 1:
				output->longitude = atof(temp_string);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4618      	mov	r0, r3
 800169a:	f008 ff5b 	bl	800a554 <atof>
 800169e:	ec53 2b10 	vmov	r2, r3, d0
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa91 	bl	8000bcc <__aeabi_d2f>
 80016aa:	4602      	mov	r2, r0
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	605a      	str	r2, [r3, #4]
				break;
 80016b0:	e00e      	b.n	80016d0 <Rx_Buffer_Processing+0xe0>
			case 2:
				output->altitude = atof(temp_string);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4618      	mov	r0, r3
 80016b8:	f008 ff4c 	bl	800a554 <atof>
 80016bc:	ec53 2b10 	vmov	r2, r3, d0
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa82 	bl	8000bcc <__aeabi_d2f>
 80016c8:	4602      	mov	r2, r0
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	609a      	str	r2, [r3, #8]
				break;
 80016ce:	bf00      	nop
		}
		counter++;
 80016d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016d2:	3301      	adds	r3, #1
 80016d4:	86fb      	strh	r3, [r7, #54]	; 0x36
		memset(temp_string, 0, sizeof(temp_string));
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	221e      	movs	r2, #30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 fe5b 	bl	800b39a <memset>
	for(int i=0;i<3;i++){
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e6:	3301      	adds	r3, #1
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	dda9      	ble.n	8001644 <Rx_Buffer_Processing+0x54>
	}
	return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3738      	adds	r7, #56	; 0x38
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016fe:	b672      	cpsid	i
}
 8001700:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001702:	e7fe      	b.n	8001702 <Error_Handler+0x8>

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x44>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_MspInit+0x44>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6613      	str	r3, [r2, #96]	; 0x60
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_MspInit+0x44>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_MspInit+0x44>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_MspInit+0x44>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6593      	str	r3, [r2, #88]	; 0x58
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_MspInit+0x44>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_SPI_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d128      	bne.n	80017c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_SPI_MspInit+0x80>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_SPI_MspInit+0x80>)
 8001774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001778:	6613      	str	r3, [r2, #96]	; 0x60
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_SPI_MspInit+0x80>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_SPI_MspInit+0x80>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_SPI_MspInit+0x80>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_SPI_MspInit+0x80>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800179e:	23e0      	movs	r3, #224	; 0xe0
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ae:	2305      	movs	r3, #5
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f000 fafc 	bl	8001db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40013000 	.word	0x40013000
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_SPI_MspDeInit+0x30>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10a      	bne.n	80017f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_SPI_MspDeInit+0x34>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_SPI_MspDeInit+0x34>)
 80017e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017ec:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80017ee:	21e0      	movs	r1, #224	; 0xe0
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f000 fc62 	bl	80020bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40013000 	.word	0x40013000
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f960 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <USB_LP_IRQHandler+0x10>)
 8001862:	f000 fe2c 	bl	80024be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20001948 	.word	0x20001948

08001870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_kill>:

int _kill(int pid, int sig)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188a:	f009 fdf5 	bl	800b478 <__errno>
 800188e:	4603      	mov	r3, r0
 8001890:	2216      	movs	r2, #22
 8001892:	601a      	str	r2, [r3, #0]
  return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_exit>:

void _exit (int status)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe7 	bl	8001880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b2:	e7fe      	b.n	80018b2 <_exit+0x12>

080018b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018c6:	f3af 8000 	nop.w
 80018ca:	4601      	mov	r1, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf0      	blt.n	80018c6 <_read+0x12>
  }

  return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
  }
  return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f009 fd5a 	bl	800b478 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20020000 	.word	0x20020000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	20000408 	.word	0x20000408
 80019f8:	20001fa8 	.word	0x20001fa8

080019fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LoopForever+0xe>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	; (8001a6c <LoopForever+0x16>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4a:	f7ff ffd7 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f009 fd19 	bl	800b484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a52:	f7ff fbe5 	bl	8001220 <main>

08001a56 <LoopForever>:

LoopForever:
    b LoopForever
 8001a56:	e7fe      	b.n	8001a56 <LoopForever>
  ldr   r0, =_estack
 8001a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001a64:	0800d6fc 	.word	0x0800d6fc
  ldr r2, =_sbss
 8001a68:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001a6c:	20001fa8 	.word	0x20001fa8

08001a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_2_IRQHandler>

08001a72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f95b 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a82:	200f      	movs	r0, #15
 8001a84:	f000 f80e 	bl	8001aa4 <HAL_InitTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	e001      	b.n	8001a98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a94:	f7ff fe36 	bl	8001704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a98:	79fb      	ldrb	r3, [r7, #7]

}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_InitTick+0x68>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d022      	beq.n	8001afe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_InitTick+0x6c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_InitTick+0x68>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f966 	bl	8001d9e <HAL_SYSTICK_Config>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10f      	bne.n	8001af8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	d809      	bhi.n	8001af2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae6:	f000 f932 	bl	8001d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_InitTick+0x70>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	e004      	b.n	8001b02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e001      	b.n	8001b02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_IncTick+0x1c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_IncTick+0x20>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <HAL_IncTick+0x1c>)
 8001b28:	6013      	str	r3, [r2, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	2000040c 	.word	0x2000040c
 8001b38:	20000008 	.word	0x20000008

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000040c 	.word	0x2000040c

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d004      	beq.n	8001b78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_Delay+0x40>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b78:	bf00      	nop
 8001b7a:	f7ff ffdf 	bl	8001b3c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d8f7      	bhi.n	8001b7a <HAL_Delay+0x26>
  {
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000008 	.word	0x20000008

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff40 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff90 	bl	8001c8c <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5f 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff33 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa4 	bl	8001cf4 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dc6:	e15a      	b.n	800207e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 814c 	beq.w	8002078 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d005      	beq.n	8001df8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d130      	bne.n	8001e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2e:	2201      	movs	r2, #1
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 0201 	and.w	r2, r3, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d017      	beq.n	8001e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d123      	bne.n	8001eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80a6 	beq.w	8002078 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	; (800209c <HAL_GPIO_Init+0x2e4>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f30:	4a5a      	ldr	r2, [pc, #360]	; (800209c <HAL_GPIO_Init+0x2e4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6613      	str	r3, [r2, #96]	; 0x60
 8001f38:	4b58      	ldr	r3, [pc, #352]	; (800209c <HAL_GPIO_Init+0x2e4>)
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f44:	4a56      	ldr	r2, [pc, #344]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f6e:	d01f      	beq.n	8001fb0 <HAL_GPIO_Init+0x1f8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d019      	beq.n	8001fac <HAL_GPIO_Init+0x1f4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a4b      	ldr	r2, [pc, #300]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x1f0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a4a      	ldr	r2, [pc, #296]	; (80020ac <HAL_GPIO_Init+0x2f4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1ec>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a49      	ldr	r2, [pc, #292]	; (80020b0 <HAL_GPIO_Init+0x2f8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a48      	ldr	r2, [pc, #288]	; (80020b4 <HAL_GPIO_Init+0x2fc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1e4>
 8001f98:	2305      	movs	r3, #5
 8001f9a:	e00a      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	e008      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff4:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_GPIO_Init+0x300>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002072:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f ae9d 	bne.w	8001dc8 <HAL_GPIO_Init+0x10>
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	48000400 	.word	0x48000400
 80020a8:	48000800 	.word	0x48000800
 80020ac:	48000c00 	.word	0x48000c00
 80020b0:	48001000 	.word	0x48001000
 80020b4:	48001400 	.word	0x48001400
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80020ca:	e0bd      	b.n	8002248 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80b0 	beq.w	8002242 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80020e2:	4a60      	ldr	r2, [pc, #384]	; (8002264 <HAL_GPIO_DeInit+0x1a8>)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210a:	d01f      	beq.n	800214c <HAL_GPIO_DeInit+0x90>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a56      	ldr	r2, [pc, #344]	; (8002268 <HAL_GPIO_DeInit+0x1ac>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d019      	beq.n	8002148 <HAL_GPIO_DeInit+0x8c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a55      	ldr	r2, [pc, #340]	; (800226c <HAL_GPIO_DeInit+0x1b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_GPIO_DeInit+0x88>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_GPIO_DeInit+0x1b4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_DeInit+0x84>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a53      	ldr	r2, [pc, #332]	; (8002274 <HAL_GPIO_DeInit+0x1b8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_DeInit+0x80>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_GPIO_DeInit+0x1bc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_DeInit+0x7c>
 8002134:	2305      	movs	r3, #5
 8002136:	e00a      	b.n	800214e <HAL_GPIO_DeInit+0x92>
 8002138:	2306      	movs	r3, #6
 800213a:	e008      	b.n	800214e <HAL_GPIO_DeInit+0x92>
 800213c:	2304      	movs	r3, #4
 800213e:	e006      	b.n	800214e <HAL_GPIO_DeInit+0x92>
 8002140:	2303      	movs	r3, #3
 8002142:	e004      	b.n	800214e <HAL_GPIO_DeInit+0x92>
 8002144:	2302      	movs	r3, #2
 8002146:	e002      	b.n	800214e <HAL_GPIO_DeInit+0x92>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_GPIO_DeInit+0x92>
 800214c:	2300      	movs	r3, #0
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	f002 0203 	and.w	r2, r2, #3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4093      	lsls	r3, r2
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	429a      	cmp	r2, r3
 800215c:	d132      	bne.n	80021c4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	4945      	ldr	r1, [pc, #276]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 8002168:	4013      	ands	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800216c:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	4941      	ldr	r1, [pc, #260]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 8002176:	4013      	ands	r3, r2
 8002178:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	493e      	ldr	r1, [pc, #248]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 8002184:	4013      	ands	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	493a      	ldr	r1, [pc, #232]	; (800227c <HAL_GPIO_DeInit+0x1c0>)
 8002192:	4013      	ands	r3, r2
 8002194:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80021a6:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <HAL_GPIO_DeInit+0x1a8>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43da      	mvns	r2, r3
 80021b6:	482b      	ldr	r0, [pc, #172]	; (8002264 <HAL_GPIO_DeInit+0x1a8>)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	400a      	ands	r2, r1
 80021be:	3302      	adds	r3, #2
 80021c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2103      	movs	r1, #3
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	08d2      	lsrs	r2, r2, #3
 80021f8:	4019      	ands	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2103      	movs	r1, #3
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	2101      	movs	r1, #1
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2103      	movs	r1, #3
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	401a      	ands	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f af3b 	bne.w	80020cc <HAL_GPIO_DeInit+0x10>
  }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40010000 	.word	0x40010000
 8002268:	48000400 	.word	0x48000400
 800226c:	48000800 	.word	0x48000800
 8002270:	48000c00 	.word	0x48000c00
 8002274:	48001000 	.word	0x48001000
 8002278:	48001400 	.word	0x48001400
 800227c:	40010400 	.word	0x40010400

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	b08b      	sub	sp, #44	; 0x2c
 80022b4:	af06      	add	r7, sp, #24
 80022b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0d7      	b.n	8002472 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f007 fe36 	bl	8009f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2203      	movs	r2, #3
 80022e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 fcdc 	bl	8005ca6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e04c      	b.n	800238e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3301      	adds	r3, #1
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	b298      	uxth	r0, r3
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	3336      	adds	r3, #54	; 0x36
 8002332:	4602      	mov	r2, r0
 8002334:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3303      	adds	r3, #3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3338      	adds	r3, #56	; 0x38
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	333c      	adds	r3, #60	; 0x3c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3340      	adds	r3, #64	; 0x40
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3ad      	bcc.n	80022f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e044      	b.n	8002428 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3301      	adds	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3b5      	bcc.n	800239e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	687e      	ldr	r6, [r7, #4]
 800243a:	466d      	mov	r5, sp
 800243c:	f106 0410 	add.w	r4, r6, #16
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	1d33      	adds	r3, r6, #4
 800244a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f003 fc45 	bl	8005cdc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f001 fc29 	bl	8003cc2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800247a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_Start+0x16>
 800248c:	2302      	movs	r3, #2
 800248e:	e012      	b.n	80024b6 <HAL_PCD_Start+0x3c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fbeb 	bl	8005c78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 fe04 	bl	80080b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 fe09 	bl	80080e2 <USB_ReadInterrupts>
 80024d0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fb26 	bl	8002b2e <PCD_EP_ISR_Handler>

    return;
 80024e2:	e110      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d013      	beq.n	8002516 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002500:	b292      	uxth	r2, r2
 8002502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f007 fdaf 	bl	800a06a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800250c:	2100      	movs	r1, #0
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8fc 	bl	800270c <HAL_PCD_SetAddress>

    return;
 8002514:	e0f7      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00c      	beq.n	800253a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002532:	b292      	uxth	r2, r2
 8002534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002538:	e0e5      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00c      	beq.n	800255e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002556:	b292      	uxth	r2, r2
 8002558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800255c:	e0d3      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d034      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0204 	bic.w	r2, r2, #4
 800257a:	b292      	uxth	r2, r2
 800257c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002588:	b29a      	uxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0208 	bic.w	r2, r2, #8
 8002592:	b292      	uxth	r2, r2
 8002594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025aa:	2100      	movs	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f007 ff51 	bl	800a454 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f007 fd92 	bl	800a0dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025ca:	b292      	uxth	r2, r2
 80025cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80025d0:	e099      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d027      	beq.n	800262c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0208 	orr.w	r2, r2, #8
 80025ee:	b292      	uxth	r2, r2
 80025f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002606:	b292      	uxth	r2, r2
 8002608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0204 	orr.w	r2, r2, #4
 800261e:	b292      	uxth	r2, r2
 8002620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f007 fd3f 	bl	800a0a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800262a:	e06c      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b00      	cmp	r3, #0
 8002634:	d040      	beq.n	80026b8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002648:	b292      	uxth	r2, r2
 800264a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d12b      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002660:	b29a      	uxth	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0204 	orr.w	r2, r2, #4
 800266a:	b292      	uxth	r2, r2
 800266c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002678:	b29a      	uxth	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	b292      	uxth	r2, r2
 8002684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002698:	b29b      	uxth	r3, r3
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026a6:	2101      	movs	r1, #1
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f007 fed3 	bl	800a454 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80026ae:	e02a      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f007 fcf9 	bl	800a0a8 <HAL_PCD_SuspendCallback>
    return;
 80026b6:	e026      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00f      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d4:	b292      	uxth	r2, r2
 80026d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f007 fcb7 	bl	800a04e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026e0:	e011      	b.n	8002706 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fe:	b292      	uxth	r2, r2
 8002700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002704:	bf00      	nop
  }
}
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_PCD_SetAddress+0x1a>
 8002722:	2302      	movs	r3, #2
 8002724:	e013      	b.n	800274e <HAL_PCD_SetAddress+0x42>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f005 fca4 	bl	800808c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	461a      	mov	r2, r3
 8002764:	4603      	mov	r3, r0
 8002766:	70fb      	strb	r3, [r7, #3]
 8002768:	460b      	mov	r3, r1
 800276a:	803b      	strh	r3, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da0e      	bge.n	800279a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	705a      	strb	r2, [r3, #1]
 8002798:	e00e      	b.n	80027b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 0207 	and.w	r2, r3, #7
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027c4:	883a      	ldrh	r2, [r7, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	78ba      	ldrb	r2, [r7, #2]
 80027ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027e2:	78bb      	ldrb	r3, [r7, #2]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_PCD_EP_Open+0xa6>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e00e      	b.n	800281a <HAL_PCD_EP_Open+0xc4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68f9      	ldr	r1, [r7, #12]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fa88 	bl	8005d20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002818:	7afb      	ldrb	r3, [r7, #11]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800282e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da0e      	bge.n	8002854 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	705a      	strb	r2, [r3, #1]
 8002852:	e00e      	b.n	8002872 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 0207 	and.w	r2, r3, #7
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_PCD_EP_Close+0x6a>
 8002888:	2302      	movs	r3, #2
 800288a:	e00e      	b.n	80028aa <HAL_PCD_EP_Close+0x88>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 fdd4 	bl	8006448 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	460b      	mov	r3, r1
 80028c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	f003 0207 	and.w	r2, r3, #7
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2200      	movs	r2, #0
 80028f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f2:	7afb      	ldrb	r3, [r7, #11]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 ff87 	bl	8006822 <USB_EPStartXfer>
 8002914:	e005      	b.n	8002922 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6979      	ldr	r1, [r7, #20]
 800291c:	4618      	mov	r0, r3
 800291e:	f003 ff80 	bl	8006822 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 0207 	and.w	r2, r3, #7
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	460b      	mov	r3, r1
 800296a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2201      	movs	r2, #1
 80029a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a8:	7afb      	ldrb	r3, [r7, #11]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6979      	ldr	r1, [r7, #20]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 ff2c 	bl	8006822 <USB_EPStartXfer>
 80029ca:	e005      	b.n	80029d8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6979      	ldr	r1, [r7, #20]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 ff25 	bl	8006822 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	f003 0207 	and.w	r2, r3, #7
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d901      	bls.n	8002a00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e03e      	b.n	8002a7e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da0e      	bge.n	8002a26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	705a      	strb	r2, [r3, #1]
 8002a24:	e00c      	b.n	8002a40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_PCD_EP_SetStall+0x7e>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e00e      	b.n	8002a7e <HAL_PCD_EP_SetStall+0x9c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 fa0d 	bl	8007e8e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 020f 	and.w	r2, r3, #15
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d901      	bls.n	8002aa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e040      	b.n	8002b26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	da0e      	bge.n	8002aca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	705a      	strb	r2, [r3, #1]
 8002ac8:	e00e      	b.n	8002ae8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 0207 	and.w	r2, r3, #7
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_PCD_EP_ClrStall+0x82>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e00e      	b.n	8002b26 <HAL_PCD_EP_ClrStall+0xa0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68f9      	ldr	r1, [r7, #12]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f005 fa0a 	bl	8007f30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b096      	sub	sp, #88	; 0x58
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b36:	e39c      	b.n	8003272 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002b52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 815e 	bne.w	8002e18 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d150      	bne.n	8002c0a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b78:	81fb      	strh	r3, [r7, #14]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3328      	adds	r3, #40	; 0x28
 8002b90:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f007 fa25 	bl	800a01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 834a 	beq.w	8003272 <PCD_EP_ISR_Handler+0x744>
 8002bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 8345 	bne.w	8003272 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c08:	e333      	b.n	8003272 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c10:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d032      	beq.n	8002c8e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c60:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f005 fa8f 	bl	8008186 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c74:	4013      	ands	r3, r2
 8002c76:	823b      	strh	r3, [r7, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	8a3a      	ldrh	r2, [r7, #16]
 8002c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c82:	b292      	uxth	r2, r2
 8002c84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f007 f99a 	bl	8009fc0 <HAL_PCD_SetupStageCallback>
 8002c8c:	e2f1      	b.n	8003272 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c8e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f280 82ed 	bge.w	8003272 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	83fb      	strh	r3, [r7, #30]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	8bfa      	ldrh	r2, [r7, #30]
 8002cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb2:	b292      	uxth	r2, r2
 8002cb4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cdc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <PCD_EP_ISR_Handler+0x1ec>
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d015      	beq.n	8002d1a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf4:	6959      	ldr	r1, [r3, #20]
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f005 fa41 	bl	8008186 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d10:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d12:	2100      	movs	r1, #0
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f007 f965 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 82a3 	bne.w	8003272 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b3e      	cmp	r3, #62	; 0x3e
 8002d52:	d918      	bls.n	8002d86 <PCD_EP_ISR_Handler+0x258>
 8002d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <PCD_EP_ISR_Handler+0x240>
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	e029      	b.n	8002dda <PCD_EP_ISR_Handler+0x2ac>
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d112      	bne.n	8002db4 <PCD_EP_ISR_Handler+0x286>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e012      	b.n	8002dda <PCD_EP_ISR_Handler+0x2ac>
 8002db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	647b      	str	r3, [r7, #68]	; 0x44
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <PCD_EP_ISR_Handler+0x2a0>
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dca:	3301      	adds	r3, #1
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	827b      	strh	r3, [r7, #18]
 8002dec:	8a7b      	ldrh	r3, [r7, #18]
 8002dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002df2:	827b      	strh	r3, [r7, #18]
 8002df4:	8a7b      	ldrh	r3, [r7, #18]
 8002df6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dfa:	827b      	strh	r3, [r7, #18]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	8a7b      	ldrh	r3, [r7, #18]
 8002e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8013      	strh	r3, [r2, #0]
 8002e16:	e22c      	b.n	8003272 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e2c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f280 80f6 	bge.w	8003022 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e6c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e84:	7b1b      	ldrb	r3, [r3, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d123      	bne.n	8002ed2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002eb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 808e 	beq.w	8002fd8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec2:	6959      	ldr	r1, [r3, #20]
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec6:	88da      	ldrh	r2, [r3, #6]
 8002ec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ecc:	f005 f95b 	bl	8008186 <USB_ReadPMA>
 8002ed0:	e082      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	78db      	ldrb	r3, [r3, #3]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d10a      	bne.n	8002ef0 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002eda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9d3 	bl	800328e <HAL_PCD_EP_DB_Receive>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002eee:	e073      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	441a      	add	r2, r3
 8002f1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d022      	beq.n	8002f94 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002f76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02c      	beq.n	8002fd8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f84:	6959      	ldr	r1, [r3, #20]
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	891a      	ldrh	r2, [r3, #8]
 8002f8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f8e:	f005 f8fa 	bl	8008186 <USB_ReadPMA>
 8002f92:	e021      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002fbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fca:	6959      	ldr	r1, [r3, #20]
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fce:	895a      	ldrh	r2, [r3, #10]
 8002fd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fd4:	f005 f8d7 	bl	8008186 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fe0:	441a      	add	r2, r3
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fee:	441a      	add	r2, r3
 8002ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <PCD_EP_ISR_Handler+0x4da>
 8002ffc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	429a      	cmp	r2, r3
 8003006:	d206      	bcs.n	8003016 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f006 ffe8 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
 8003014:	e005      	b.n	8003022 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fc00 	bl	8006822 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003022:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8121 	beq.w	8003272 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003030:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	441a      	add	r2, r3
 8003070:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800307c:	b29b      	uxth	r3, r3
 800307e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003082:	78db      	ldrb	r3, [r3, #3]
 8003084:	2b02      	cmp	r3, #2
 8003086:	f000 80a2 	beq.w	80031ce <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800308a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003092:	7b1b      	ldrb	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8093 	beq.w	80031c0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800309a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d046      	beq.n	8003134 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d126      	bne.n	80030fc <PCD_EP_ISR_Handler+0x5ce>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030bc:	b29b      	uxth	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	4413      	add	r3, r2
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	00da      	lsls	r2, r3, #3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	4413      	add	r3, r2
 80030d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	e061      	b.n	80031c0 <PCD_EP_ISR_Handler+0x692>
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d15d      	bne.n	80031c0 <PCD_EP_ISR_Handler+0x692>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	4413      	add	r3, r2
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	00da      	lsls	r2, r3, #3
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	4413      	add	r3, r2
 8003126:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2200      	movs	r2, #0
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	e045      	b.n	80031c0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d126      	bne.n	8003190 <PCD_EP_ISR_Handler+0x662>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003150:	b29b      	uxth	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	4413      	add	r3, r2
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	00da      	lsls	r2, r3, #3
 8003160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003162:	4413      	add	r3, r2
 8003164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003174:	b29a      	uxth	r2, r3
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003188:	b29a      	uxth	r2, r3
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	e017      	b.n	80031c0 <PCD_EP_ISR_Handler+0x692>
 8003190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d113      	bne.n	80031c0 <PCD_EP_ISR_Handler+0x692>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a6:	4413      	add	r3, r2
 80031a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	00da      	lsls	r2, r3, #3
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	4413      	add	r3, r2
 80031b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2200      	movs	r2, #0
 80031be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f006 ff27 	bl	800a01a <HAL_PCD_DataInStageCallback>
 80031cc:	e051      	b.n	8003272 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80031ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d144      	bne.n	8003264 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800320a:	429a      	cmp	r2, r3
 800320c:	d907      	bls.n	800321e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800320e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321a:	619a      	str	r2, [r3, #24]
 800321c:	e002      	b.n	8003224 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800321e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800322c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f006 fef1 	bl	800a01a <HAL_PCD_DataInStageCallback>
 8003238:	e01b      	b.n	8003272 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800323a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003242:	441a      	add	r2, r3
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003246:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003250:	441a      	add	r2, r3
 8003252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003254:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fae0 	bl	8006822 <USB_EPStartXfer>
 8003262:	e006      	b.n	8003272 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003264:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003268:	461a      	mov	r2, r3
 800326a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f917 	bl	80034a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800327a:	b29b      	uxth	r3, r3
 800327c:	b21b      	sxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	f6ff ac5a 	blt.w	8002b38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3758      	adds	r7, #88	; 0x58
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b088      	sub	sp, #32
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	4613      	mov	r3, r2
 800329a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d07c      	beq.n	80033a0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	8b7b      	ldrh	r3, [r7, #26]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d306      	bcc.n	80032e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	8b7b      	ldrh	r3, [r7, #26]
 80032dc:	1ad2      	subs	r2, r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	619a      	str	r2, [r3, #24]
 80032e2:	e002      	b.n	80032ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2200      	movs	r2, #0
 80032e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d123      	bne.n	800333a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330c:	833b      	strh	r3, [r7, #24]
 800330e:	8b3b      	ldrh	r3, [r7, #24]
 8003310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003314:	833b      	strh	r3, [r7, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	441a      	add	r2, r3
 8003324:	8b3b      	ldrh	r3, [r7, #24]
 8003326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800332e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003336:	b29b      	uxth	r3, r3
 8003338:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01f      	beq.n	8003384 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	82fb      	strh	r3, [r7, #22]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	8afb      	ldrh	r3, [r7, #22]
 8003370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003380:	b29b      	uxth	r3, r3
 8003382:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003384:	8b7b      	ldrh	r3, [r7, #26]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8085 	beq.w	8003496 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6959      	ldr	r1, [r3, #20]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	891a      	ldrh	r2, [r3, #8]
 8003398:	8b7b      	ldrh	r3, [r7, #26]
 800339a:	f004 fef4 	bl	8008186 <USB_ReadPMA>
 800339e:	e07a      	b.n	8003496 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	8b7b      	ldrh	r3, [r7, #26]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d306      	bcc.n	80033de <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	8b7b      	ldrh	r3, [r7, #26]
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	619a      	str	r2, [r3, #24]
 80033dc:	e002      	b.n	80033e4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d123      	bne.n	8003434 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	83fb      	strh	r3, [r7, #30]
 8003408:	8bfb      	ldrh	r3, [r7, #30]
 800340a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800340e:	83fb      	strh	r3, [r7, #30]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	8bfb      	ldrh	r3, [r7, #30]
 8003420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003430:	b29b      	uxth	r3, r3
 8003432:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11f      	bne.n	800347e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003458:	83bb      	strh	r3, [r7, #28]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	8bbb      	ldrh	r3, [r7, #28]
 800346a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800347a:	b29b      	uxth	r3, r3
 800347c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800347e:	8b7b      	ldrh	r3, [r7, #26]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6959      	ldr	r1, [r3, #20]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	895a      	ldrh	r2, [r3, #10]
 8003490:	8b7b      	ldrh	r3, [r7, #26]
 8003492:	f004 fe78 	bl	8008186 <USB_ReadPMA>
    }
  }

  return count;
 8003496:	8b7b      	ldrh	r3, [r7, #26]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b0a2      	sub	sp, #136	; 0x88
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 81c5 	beq.w	8003844 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d907      	bls.n	80034fe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	619a      	str	r2, [r3, #24]
 80034fc:	e002      	b.n	8003504 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 80b9 	bne.w	8003680 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d126      	bne.n	8003564 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003524:	b29b      	uxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	4413      	add	r3, r2
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	00da      	lsls	r2, r3, #3
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	4413      	add	r3, r2
 8003538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003548:	b29a      	uxth	r2, r3
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	801a      	strh	r2, [r3, #0]
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800355c:	b29a      	uxth	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	801a      	strh	r2, [r3, #0]
 8003562:	e01a      	b.n	800359a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	785b      	ldrb	r3, [r3, #1]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d116      	bne.n	800359a <HAL_PCD_EP_DB_Transmit+0xfa>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	4413      	add	r3, r2
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	00da      	lsls	r2, r3, #3
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	4413      	add	r3, r2
 800358e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d126      	bne.n	80035f6 <HAL_PCD_EP_DB_Transmit+0x156>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4413      	add	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00da      	lsls	r2, r3, #3
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035da:	b29a      	uxth	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	801a      	strh	r2, [r3, #0]
 80035f4:	e017      	b.n	8003626 <HAL_PCD_EP_DB_Transmit+0x186>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d113      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0x186>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003606:	b29b      	uxth	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	4413      	add	r3, r2
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	00da      	lsls	r2, r3, #3
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	4413      	add	r3, r2
 800361a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2200      	movs	r2, #0
 8003624:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f006 fcf4 	bl	800a01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 82d2 	beq.w	8003be2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	827b      	strh	r3, [r7, #18]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	441a      	add	r2, r3
 8003668:	8a7b      	ldrh	r3, [r7, #18]
 800366a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367a:	b29b      	uxth	r3, r3
 800367c:	8013      	strh	r3, [r2, #0]
 800367e:	e2b0      	b.n	8003be2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d021      	beq.n	80036ce <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	f040 8284 	bne.w	8003be2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036e2:	441a      	add	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036f0:	441a      	add	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6a1a      	ldr	r2, [r3, #32]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d309      	bcc.n	8003716 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	621a      	str	r2, [r3, #32]
 8003714:	e015      	b.n	8003742 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d107      	bne.n	800372e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800371e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003722:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800372c:	e009      	b.n	8003742 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d155      	bne.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x356>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375e:	4413      	add	r3, r2
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	00da      	lsls	r2, r3, #3
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	4413      	add	r3, r2
 800376c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
 8003772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003774:	2b3e      	cmp	r3, #62	; 0x3e
 8003776:	d916      	bls.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x306>
 8003778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
 800377e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378a:	3b01      	subs	r3, #1
 800378c:	64bb      	str	r3, [r7, #72]	; 0x48
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003790:	b29b      	uxth	r3, r3
 8003792:	029b      	lsls	r3, r3, #10
 8003794:	b29b      	uxth	r3, r3
 8003796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800379a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379e:	b29a      	uxth	r2, r3
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	e043      	b.n	800382e <HAL_PCD_EP_DB_Transmit+0x38e>
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d112      	bne.n	80037d2 <HAL_PCD_EP_DB_Transmit+0x332>
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	801a      	strh	r2, [r3, #0]
 80037d0:	e02d      	b.n	800382e <HAL_PCD_EP_DB_Transmit+0x38e>
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_PCD_EP_DB_Transmit+0x348>
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e4:	3301      	adds	r3, #1
 80037e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e01b      	b.n	800382e <HAL_PCD_EP_DB_Transmit+0x38e>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d117      	bne.n	800382e <HAL_PCD_EP_DB_Transmit+0x38e>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380c:	b29b      	uxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003812:	4413      	add	r3, r2
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	00da      	lsls	r2, r3, #3
 800381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381e:	4413      	add	r3, r2
 8003820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003828:	b29a      	uxth	r2, r3
 800382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6959      	ldr	r1, [r3, #20]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	891a      	ldrh	r2, [r3, #8]
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	b29b      	uxth	r3, r3
 800383e:	f004 fc60 	bl	8008102 <USB_WritePMA>
 8003842:	e1ce      	b.n	8003be2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384c:	b29b      	uxth	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	4413      	add	r3, r2
 800385e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003868:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003874:	429a      	cmp	r2, r3
 8003876:	d307      	bcc.n	8003888 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	699a      	ldr	r2, [r3, #24]
 800387c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003880:	1ad2      	subs	r2, r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	619a      	str	r2, [r3, #24]
 8003886:	e002      	b.n	800388e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 80c4 	bne.w	8003a20 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d126      	bne.n	80038ee <HAL_PCD_EP_DB_Transmit+0x44e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b4:	4413      	add	r3, r2
 80038b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	00da      	lsls	r2, r3, #3
 80038be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c0:	4413      	add	r3, r2
 80038c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038c6:	667b      	str	r3, [r7, #100]	; 0x64
 80038c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	e01a      	b.n	8003924 <HAL_PCD_EP_DB_Transmit+0x484>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d116      	bne.n	8003924 <HAL_PCD_EP_DB_Transmit+0x484>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	673b      	str	r3, [r7, #112]	; 0x70
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800390a:	4413      	add	r3, r2
 800390c:	673b      	str	r3, [r7, #112]	; 0x70
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00da      	lsls	r2, r3, #3
 8003914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003916:	4413      	add	r3, r2
 8003918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800391c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	785b      	ldrb	r3, [r3, #1]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d12f      	bne.n	8003992 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800394a:	4413      	add	r3, r2
 800394c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	00da      	lsls	r2, r3, #3
 8003956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395a:	4413      	add	r3, r2
 800395c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003970:	b29a      	uxth	r2, r3
 8003972:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003988:	b29a      	uxth	r2, r3
 800398a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	e017      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x522>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	785b      	ldrb	r3, [r3, #1]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d113      	bne.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x522>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039a8:	4413      	add	r3, r2
 80039aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	00da      	lsls	r2, r3, #3
 80039b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b4:	4413      	add	r3, r2
 80039b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80039bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039be:	2200      	movs	r2, #0
 80039c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f006 fb26 	bl	800a01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 8104 	bne.w	8003be2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]
 8003a1e:	e0e0      	b.n	8003be2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d121      	bne.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f040 80b4 	bne.w	8003be2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a82:	441a      	add	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a90:	441a      	add	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6a1a      	ldr	r2, [r3, #32]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d309      	bcc.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	621a      	str	r2, [r3, #32]
 8003ab4:	e015      	b.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003abe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ac2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003acc:	e009      	b.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d155      	bne.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b04:	4413      	add	r3, r2
 8003b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	00da      	lsls	r2, r3, #3
 8003b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b10:	4413      	add	r3, r2
 8003b12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b16:	657b      	str	r3, [r7, #84]	; 0x54
 8003b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b1c:	d916      	bls.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	677b      	str	r3, [r7, #116]	; 0x74
 8003b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x694>
 8003b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b30:	3b01      	subs	r3, #1
 8003b32:	677b      	str	r3, [r7, #116]	; 0x74
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	029b      	lsls	r3, r3, #10
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	e040      	b.n	8003bce <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d112      	bne.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	e02a      	b.n	8003bce <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	677b      	str	r3, [r7, #116]	; 0x74
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	677b      	str	r3, [r7, #116]	; 0x74
 8003b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	029b      	lsls	r3, r3, #10
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b98:	801a      	strh	r2, [r3, #0]
 8003b9a:	e018      	b.n	8003bce <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d114      	bne.n	8003bce <HAL_PCD_EP_DB_Transmit+0x72e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb2:	4413      	add	r3, r2
 8003bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	00da      	lsls	r2, r3, #3
 8003bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bcc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6959      	ldr	r1, [r3, #20]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	895a      	ldrh	r2, [r3, #10]
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f004 fa90 	bl	8008102 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	823b      	strh	r3, [r7, #16]
 8003bfe:	8a3b      	ldrh	r3, [r7, #16]
 8003c00:	f083 0310 	eor.w	r3, r3, #16
 8003c04:	823b      	strh	r3, [r7, #16]
 8003c06:	8a3b      	ldrh	r3, [r7, #16]
 8003c08:	f083 0320 	eor.w	r3, r3, #32
 8003c0c:	823b      	strh	r3, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	8a3b      	ldrh	r3, [r7, #16]
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3788      	adds	r7, #136	; 0x88
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	897b      	ldrh	r3, [r7, #10]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e009      	b.n	8003c86 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c72:	897a      	ldrh	r2, [r7, #10]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c86:	893b      	ldrh	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	80da      	strh	r2, [r3, #6]
 8003c9a:	e00b      	b.n	8003cb4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d141      	bne.n	8003daa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d26:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d131      	bne.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d34:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	4a46      	ldr	r2, [pc, #280]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d44:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d4c:	4a41      	ldr	r2, [pc, #260]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d54:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2232      	movs	r2, #50	; 0x32
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	0c9b      	lsrs	r3, r3, #18
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6a:	e002      	b.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d72:	4b38      	ldr	r3, [pc, #224]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d102      	bne.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f2      	bne.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d158      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e057      	b.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9e:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003da8:	e04d      	b.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db0:	d141      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003db2:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbe:	d131      	bne.n	8003e24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc6:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2232      	movs	r2, #50	; 0x32
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	0c9b      	lsrs	r3, r3, #18
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df6:	e002      	b.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfe:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d102      	bne.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f2      	bne.n	8003df8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1e:	d112      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e011      	b.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e34:	e007      	b.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e3e:	4a05      	ldr	r2, [pc, #20]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40007000 	.word	0x40007000
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	431bde83 	.word	0x431bde83

08003e60 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e66:	f7fd fe69 	bl	8001b3c <HAL_GetTick>
 8003e6a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e6c:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a38      	ldr	r2, [pc, #224]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e76:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fd fe5f 	bl	8001b3c <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e05f      	b.n	8003f4c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8003e98:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea2:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ea4:	f7fd fe4a 	bl	8001b3c <HAL_GetTick>
 8003ea8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8003eaa:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb2:	f7fd fe43 	bl	8001b3c <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e041      	b.n	8003f4c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d1ee      	bne.n	8003eb2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <HAL_RCC_DeInit+0xf8>)
 8003ed6:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_RCC_DeInit+0xfc>)
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003eda:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <HAL_RCC_DeInit+0x100>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd fde0 	bl	8001aa4 <HAL_InitTick>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02e      	b.n	8003f4c <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003efc:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003efe:	f7fd fe1d 	bl	8001b3c <HAL_GetTick>
 8003f02:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd fe19 	bl	8001b3c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e019      	b.n	8003f4c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f2a:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_RCC_DeInit+0xf4>)
 8003f42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	00f42400 	.word	0x00f42400
 8003f60:	20000004 	.word	0x20000004

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e306      	b.n	8004584 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f82:	4b97      	ldr	r3, [pc, #604]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f8c:	4b94      	ldr	r3, [pc, #592]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d102      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x3e>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b8d      	ldr	r3, [pc, #564]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e2e1      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x74>
 8003fca:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a84      	ldr	r2, [pc, #528]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7b      	ldr	r2, [pc, #492]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	4b78      	ldr	r3, [pc, #480]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a77      	ldr	r2, [pc, #476]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a74      	ldr	r2, [pc, #464]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd fd8e 	bl	8001b3c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fd fd8a 	bl	8001b3c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e2a6      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004036:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xc0>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fd7a 	bl	8001b3c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd fd76 	bl	8001b3c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e292      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800405e:	4b60      	ldr	r3, [pc, #384]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d075      	beq.n	8004166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407a:	4b59      	ldr	r3, [pc, #356]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004084:	4b56      	ldr	r3, [pc, #344]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d102      	bne.n	800409a <HAL_RCC_OscConfig+0x136>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_OscConfig+0x13c>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d11f      	bne.n	80040e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a0:	4b4f      	ldr	r3, [pc, #316]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_OscConfig+0x154>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e265      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b8:	4b49      	ldr	r3, [pc, #292]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	4946      	ldr	r1, [pc, #280]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040cc:	4b45      	ldr	r3, [pc, #276]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fd fce7 	bl	8001aa4 <HAL_InitTick>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d043      	beq.n	8004164 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e251      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d023      	beq.n	8004130 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e8:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80040ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fd22 	bl	8001b3c <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fc:	f7fd fd1e 	bl	8001b3c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e23a      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410e:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	492d      	ldr	r1, [pc, #180]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
 800412e:	e01a      	b.n	8004166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2a      	ldr	r2, [pc, #168]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fd fcfe 	bl	8001b3c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004144:	f7fd fcfa 	bl	8001b3c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e216      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1e0>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d041      	beq.n	80041f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 800417c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004180:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fd fcd7 	bl	8001b3c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fd fcd3 	bl	8001b3c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1ef      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ef      	beq.n	8004192 <HAL_RCC_OscConfig+0x22e>
 80041b2:	e020      	b.n	80041f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <HAL_RCC_OscConfig+0x27c>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fcba 	bl	8001b3c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ca:	e00d      	b.n	80041e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fd fcb6 	bl	8001b3c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d906      	bls.n	80041e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e1d2      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e8:	4b8c      	ldr	r3, [pc, #560]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ea      	bne.n	80041cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80a6 	beq.w	8004350 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004204:	2300      	movs	r3, #0
 8004206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004208:	4b84      	ldr	r3, [pc, #528]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_OscConfig+0x2b4>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x2b6>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	4b7f      	ldr	r3, [pc, #508]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	4a7e      	ldr	r2, [pc, #504]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
 800422a:	4b7c      	ldr	r3, [pc, #496]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004236:	2301      	movs	r3, #1
 8004238:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423a:	4b79      	ldr	r3, [pc, #484]	; (8004420 <HAL_RCC_OscConfig+0x4bc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d118      	bne.n	8004278 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004246:	4b76      	ldr	r3, [pc, #472]	; (8004420 <HAL_RCC_OscConfig+0x4bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a75      	ldr	r2, [pc, #468]	; (8004420 <HAL_RCC_OscConfig+0x4bc>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004252:	f7fd fc73 	bl	8001b3c <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425a:	f7fd fc6f 	bl	8001b3c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e18b      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426c:	4b6c      	ldr	r3, [pc, #432]	; (8004420 <HAL_RCC_OscConfig+0x4bc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d108      	bne.n	8004292 <HAL_RCC_OscConfig+0x32e>
 8004280:	4b66      	ldr	r3, [pc, #408]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	4a65      	ldr	r2, [pc, #404]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004290:	e024      	b.n	80042dc <HAL_RCC_OscConfig+0x378>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b05      	cmp	r3, #5
 8004298:	d110      	bne.n	80042bc <HAL_RCC_OscConfig+0x358>
 800429a:	4b60      	ldr	r3, [pc, #384]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	4a5e      	ldr	r2, [pc, #376]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042aa:	4b5c      	ldr	r3, [pc, #368]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	4a5a      	ldr	r2, [pc, #360]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ba:	e00f      	b.n	80042dc <HAL_RCC_OscConfig+0x378>
 80042bc:	4b57      	ldr	r3, [pc, #348]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a56      	ldr	r2, [pc, #344]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042cc:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a52      	ldr	r2, [pc, #328]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d016      	beq.n	8004312 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd fc2a 	bl	8001b3c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fd fc26 	bl	8001b3c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e140      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	4b46      	ldr	r3, [pc, #280]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ed      	beq.n	80042ec <HAL_RCC_OscConfig+0x388>
 8004310:	e015      	b.n	800433e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fd fc13 	bl	8001b3c <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fd fc0f 	bl	8001b3c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e129      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004330:	4b3a      	ldr	r3, [pc, #232]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ed      	bne.n	800431a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800433e:	7ffb      	ldrb	r3, [r7, #31]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b35      	ldr	r3, [pc, #212]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	4a34      	ldr	r2, [pc, #208]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d03c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01c      	beq.n	800439e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800436a:	4a2c      	ldr	r2, [pc, #176]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fd fbe2 	bl	8001b3c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800437c:	f7fd fbde 	bl	8001b3c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0fa      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 8004390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ef      	beq.n	800437c <HAL_RCC_OscConfig+0x418>
 800439c:	e01b      	b.n	80043d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800439e:	4b1f      	ldr	r3, [pc, #124]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a4:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fd fbc5 	bl	8001b3c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b6:	f7fd fbc1 	bl	8001b3c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0dd      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80043ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ef      	bne.n	80043b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80d1 	beq.w	8004582 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	f000 808b 	beq.w	8004504 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d15e      	bne.n	80044b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a08      	ldr	r2, [pc, #32]	; (800441c <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fd fb9b 	bl	8001b3c <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004408:	e00c      	b.n	8004424 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440a:	f7fd fb97 	bl	8001b3c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d905      	bls.n	8004424 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0b3      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_OscConfig+0x628>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ec      	bne.n	800440a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004430:	4b56      	ldr	r3, [pc, #344]	; (800458c <HAL_RCC_OscConfig+0x628>)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	4b56      	ldr	r3, [pc, #344]	; (8004590 <HAL_RCC_OscConfig+0x62c>)
 8004436:	4013      	ands	r3, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6a11      	ldr	r1, [r2, #32]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004440:	3a01      	subs	r2, #1
 8004442:	0112      	lsls	r2, r2, #4
 8004444:	4311      	orrs	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800444a:	0212      	lsls	r2, r2, #8
 800444c:	4311      	orrs	r1, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004452:	0852      	lsrs	r2, r2, #1
 8004454:	3a01      	subs	r2, #1
 8004456:	0552      	lsls	r2, r2, #21
 8004458:	4311      	orrs	r1, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800445e:	0852      	lsrs	r2, r2, #1
 8004460:	3a01      	subs	r2, #1
 8004462:	0652      	lsls	r2, r2, #25
 8004464:	4311      	orrs	r1, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800446a:	06d2      	lsls	r2, r2, #27
 800446c:	430a      	orrs	r2, r1
 800446e:	4947      	ldr	r1, [pc, #284]	; (800458c <HAL_RCC_OscConfig+0x628>)
 8004470:	4313      	orrs	r3, r2
 8004472:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b45      	ldr	r3, [pc, #276]	; (800458c <HAL_RCC_OscConfig+0x628>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a44      	ldr	r2, [pc, #272]	; (800458c <HAL_RCC_OscConfig+0x628>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004480:	4b42      	ldr	r3, [pc, #264]	; (800458c <HAL_RCC_OscConfig+0x628>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a41      	ldr	r2, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x628>)
 8004486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fd fb56 	bl	8001b3c <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fd fb52 	bl	8001b3c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e06e      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a6:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x530>
 80044b2:	e066      	b.n	8004582 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a34      	ldr	r2, [pc, #208]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044c0:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a31      	ldr	r2, [pc, #196]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044cc:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a2e      	ldr	r2, [pc, #184]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fb2e 	bl	8001b3c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fd fb2a 	bl	8001b3c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e046      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_RCC_OscConfig+0x628>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x580>
 8004502:	e03e      	b.n	8004582 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e039      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCC_OscConfig+0x628>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0203 	and.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	429a      	cmp	r2, r3
 8004522:	d12c      	bne.n	800457e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	3b01      	subs	r3, #1
 8004530:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d123      	bne.n	800457e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d11b      	bne.n	800457e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d113      	bne.n	800457e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d109      	bne.n	800457e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	019f800c 	.word	0x019f800c

08004594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e11e      	b.n	80047ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b91      	ldr	r3, [pc, #580]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d910      	bls.n	80045dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b8e      	ldr	r3, [pc, #568]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	498c      	ldr	r1, [pc, #560]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b8a      	ldr	r3, [pc, #552]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e106      	b.n	80047ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d073      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d129      	bne.n	8004644 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f0:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0f4      	b.n	80047ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004600:	f000 f966 	bl	80048d0 <RCC_GetSysClockFreqFromPLLSource>
 8004604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4a7c      	ldr	r2, [pc, #496]	; (80047fc <HAL_RCC_ClockConfig+0x268>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d93f      	bls.n	800468e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800460e:	4b7a      	ldr	r3, [pc, #488]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004622:	2b00      	cmp	r3, #0
 8004624:	d033      	beq.n	800468e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800462a:	2b00      	cmp	r3, #0
 800462c:	d12f      	bne.n	800468e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800462e:	4b72      	ldr	r3, [pc, #456]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004636:	4a70      	ldr	r2, [pc, #448]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	e024      	b.n	800468e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d107      	bne.n	800465c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800464c:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0c6      	b.n	80047ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800465c:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0be      	b.n	80047ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800466c:	f000 f8ce 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8004670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4a61      	ldr	r2, [pc, #388]	; (80047fc <HAL_RCC_ClockConfig+0x268>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d909      	bls.n	800468e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800467a:	4b5f      	ldr	r3, [pc, #380]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004682:	4a5d      	ldr	r2, [pc, #372]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b5a      	ldr	r3, [pc, #360]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4957      	ldr	r1, [pc, #348]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a0:	f7fd fa4c 	bl	8001b3c <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7fd fa48 	bl	8001b3c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e095      	b.n	80047ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d023      	beq.n	8004724 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e8:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4a42      	ldr	r2, [pc, #264]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 80046ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004700:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004708:	4a3b      	ldr	r2, [pc, #236]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800470a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800470e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4936      	ldr	r1, [pc, #216]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
 8004722:	e008      	b.n	8004736 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d105      	bne.n	8004736 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800472a:	4b33      	ldr	r3, [pc, #204]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	4a32      	ldr	r2, [pc, #200]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 8004730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004734:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d21d      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f023 020f 	bic.w	r2, r3, #15
 800474c:	4929      	ldr	r1, [pc, #164]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004754:	f7fd f9f2 	bl	8001b3c <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	e00a      	b.n	8004772 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fd f9ee 	bl	8001b3c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	; 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e03b      	b.n	80047ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <HAL_RCC_ClockConfig+0x260>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d1ed      	bne.n	800475c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4917      	ldr	r1, [pc, #92]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	490f      	ldr	r1, [pc, #60]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047be:	f000 f825 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80047c2:	4602      	mov	r2, r0
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_RCC_ClockConfig+0x264>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	490c      	ldr	r1, [pc, #48]	; (8004800 <HAL_RCC_ClockConfig+0x26c>)
 80047d0:	5ccb      	ldrb	r3, [r1, r3]
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	fa22 f303 	lsr.w	r3, r2, r3
 80047da:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <HAL_RCC_ClockConfig+0x270>)
 80047dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x274>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd f95e 	bl	8001aa4 <HAL_InitTick>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40022000 	.word	0x40022000
 80047f8:	40021000 	.word	0x40021000
 80047fc:	04c4b400 	.word	0x04c4b400
 8004800:	0800d328 	.word	0x0800d328
 8004804:	20000000 	.word	0x20000000
 8004808:	20000004 	.word	0x20000004

0800480c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b04      	cmp	r3, #4
 800481c:	d102      	bne.n	8004824 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800481e:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e047      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004824:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b08      	cmp	r3, #8
 800482e:	d102      	bne.n	8004836 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e03e      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004836:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d136      	bne.n	80048b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004842:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800484c:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3301      	adds	r3, #1
 8004858:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b03      	cmp	r3, #3
 800485e:	d10c      	bne.n	800487a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800486a:	68d2      	ldr	r2, [r2, #12]
 800486c:	0a12      	lsrs	r2, r2, #8
 800486e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	617b      	str	r3, [r7, #20]
      break;
 8004878:	e00c      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800487a:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004884:	68d2      	ldr	r2, [r2, #12]
 8004886:	0a12      	lsrs	r2, r2, #8
 8004888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800488c:	fb02 f303 	mul.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]
      break;
 8004892:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	0e5b      	lsrs	r3, r3, #25
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	3301      	adds	r3, #1
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	e001      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048b4:	693b      	ldr	r3, [r7, #16]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	00f42400 	.word	0x00f42400
 80048cc:	007a1200 	.word	0x007a1200

080048d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d10c      	bne.n	800490e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048fe:	68d2      	ldr	r2, [r2, #12]
 8004900:	0a12      	lsrs	r2, r2, #8
 8004902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	617b      	str	r3, [r7, #20]
    break;
 800490c:	e00c      	b.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004918:	68d2      	ldr	r2, [r2, #12]
 800491a:	0a12      	lsrs	r2, r2, #8
 800491c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004920:	fb02 f303 	mul.w	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]
    break;
 8004926:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	0e5b      	lsrs	r3, r3, #25
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004942:	687b      	ldr	r3, [r7, #4]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40021000 	.word	0x40021000
 8004954:	007a1200 	.word	0x007a1200
 8004958:	00f42400 	.word	0x00f42400

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004964:	2300      	movs	r3, #0
 8004966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004968:	2300      	movs	r3, #0
 800496a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8098 	beq.w	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	4a3f      	ldr	r2, [pc, #252]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6593      	str	r3, [r2, #88]	; 0x58
 8004996:	4b3d      	ldr	r3, [pc, #244]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	2301      	movs	r3, #1
 80049a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a6:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a39      	ldr	r2, [pc, #228]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049b2:	f7fd f8c3 	bl	8001b3c <HAL_GetTick>
 80049b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049b8:	e009      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7fd f8bf 	bl	8001b3c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d902      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	74fb      	strb	r3, [r7, #19]
        break;
 80049cc:	e005      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ce:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0ef      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d159      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049e0:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d019      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049fc:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a18:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3a:	f7fd f87f 	bl	8001b3c <HAL_GetTick>
 8004a3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a40:	e00b      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fd f87b 	bl	8001b3c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d902      	bls.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	74fb      	strb	r3, [r7, #19]
            break;
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ec      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	4903      	ldr	r1, [pc, #12]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a84:	e008      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	74bb      	strb	r3, [r7, #18]
 8004a8a:	e005      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a98:	7c7b      	ldrb	r3, [r7, #17]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4ba7      	ldr	r3, [pc, #668]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	4aa6      	ldr	r2, [pc, #664]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ab6:	4ba1      	ldr	r3, [pc, #644]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f023 0203 	bic.w	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	499d      	ldr	r1, [pc, #628]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ad8:	4b98      	ldr	r3, [pc, #608]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f023 020c 	bic.w	r2, r3, #12
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4995      	ldr	r1, [pc, #596]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004afa:	4b90      	ldr	r3, [pc, #576]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	498c      	ldr	r1, [pc, #560]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b1c:	4b87      	ldr	r3, [pc, #540]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	4984      	ldr	r1, [pc, #528]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b3e:	4b7f      	ldr	r3, [pc, #508]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	497b      	ldr	r1, [pc, #492]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b60:	4b76      	ldr	r3, [pc, #472]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	4973      	ldr	r1, [pc, #460]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b82:	4b6e      	ldr	r3, [pc, #440]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	496a      	ldr	r1, [pc, #424]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba4:	4b65      	ldr	r3, [pc, #404]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4962      	ldr	r1, [pc, #392]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	4959      	ldr	r1, [pc, #356]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004be8:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	4951      	ldr	r1, [pc, #324]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0a:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	4948      	ldr	r1, [pc, #288]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c2c:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	4940      	ldr	r1, [pc, #256]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4c:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d015      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	4932      	ldr	r1, [pc, #200]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	4924      	ldr	r1, [pc, #144]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	4916      	ldr	r1, [pc, #88]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d019      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4908      	ldr	r1, [pc, #32]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2a:	d109      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a02      	ldr	r2, [pc, #8]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	4926      	ldr	r1, [pc, #152]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d6c:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a20      	ldr	r2, [pc, #128]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	4918      	ldr	r1, [pc, #96]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d105      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004da4:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d015      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	490a      	ldr	r1, [pc, #40]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dda:	d105      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004de8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000

08004df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e09d      	b.n	8004f46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d009      	beq.n	8004e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
 8004e22:	e005      	b.n	8004e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fc7e 	bl	800174c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e70:	d902      	bls.n	8004e78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e002      	b.n	8004e7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e86:	d007      	beq.n	8004e98 <HAL_SPI_Init+0xa0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	ea42 0103 	orr.w	r1, r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	f003 0204 	and.w	r2, r3, #4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f14:	ea42 0103 	orr.w	r1, r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e01a      	b.n	8004f96 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fc fc29 	bl	80017d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b088      	sub	sp, #32
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_SPI_Transmit+0x22>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e158      	b.n	8005272 <HAL_SPI_Transmit+0x2d4>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fc8:	f7fc fdb8 	bl	8001b3c <HAL_GetTick>
 8004fcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fe2:	e13d      	b.n	8005260 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_Transmit+0x52>
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ff4:	e134      	b.n	8005260 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	88fa      	ldrh	r2, [r7, #6]
 800500e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005040:	d10f      	bne.n	8005062 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005060:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d007      	beq.n	8005080 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005088:	d94b      	bls.n	8005122 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Transmit+0xfa>
 8005092:	8afb      	ldrh	r3, [r7, #22]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d13e      	bne.n	8005116 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	881a      	ldrh	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	1c9a      	adds	r2, r3, #2
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050bc:	e02b      	b.n	8005116 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d112      	bne.n	80050f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	1c9a      	adds	r2, r3, #2
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050f0:	e011      	b.n	8005116 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f2:	f7fc fd23 	bl	8001b3c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d803      	bhi.n	800510a <HAL_SPI_Transmit+0x16c>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d102      	bne.n	8005110 <HAL_SPI_Transmit+0x172>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005114:	e0a4      	b.n	8005260 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ce      	bne.n	80050be <HAL_SPI_Transmit+0x120>
 8005120:	e07c      	b.n	800521c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_Transmit+0x192>
 800512a:	8afb      	ldrh	r3, [r7, #22]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d170      	bne.n	8005212 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d912      	bls.n	8005160 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b02      	subs	r3, #2
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800515e:	e058      	b.n	8005212 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005186:	e044      	b.n	8005212 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d12b      	bne.n	80051ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d912      	bls.n	80051c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	1c9a      	adds	r2, r3, #2
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b02      	subs	r3, #2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051c4:	e025      	b.n	8005212 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ec:	e011      	b.n	8005212 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ee:	f7fc fca5 	bl	8001b3c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d803      	bhi.n	8005206 <HAL_SPI_Transmit+0x268>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d102      	bne.n	800520c <HAL_SPI_Transmit+0x26e>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005210:	e026      	b.n	8005260 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1b5      	bne.n	8005188 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fce3 	bl	8005bec <SPI_EndRxTxTransaction>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e000      	b.n	8005260 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800525e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005270:	7ffb      	ldrb	r3, [r7, #31]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b088      	sub	sp, #32
 800527e:	af02      	add	r7, sp, #8
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005296:	d112      	bne.n	80052be <HAL_SPI_Receive+0x44>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10e      	bne.n	80052be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2204      	movs	r2, #4
 80052a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	4613      	mov	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f910 	bl	80054da <HAL_SPI_TransmitReceive>
 80052ba:	4603      	mov	r3, r0
 80052bc:	e109      	b.n	80054d2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_SPI_Receive+0x52>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e102      	b.n	80054d2 <HAL_SPI_Receive+0x258>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052d4:	f7fc fc32 	bl	8001b3c <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d002      	beq.n	80052ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
 80052e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052ea:	e0e9      	b.n	80054c0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Receive+0x7e>
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052fc:	e0e0      	b.n	80054c0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2204      	movs	r2, #4
 8005302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005348:	d908      	bls.n	800535c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	e007      	b.n	800536c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800536a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005374:	d10f      	bne.n	8005396 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d007      	beq.n	80053b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053bc:	d867      	bhi.n	800548e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053be:	e030      	b.n	8005422 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d117      	bne.n	80053fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f103 020c 	add.w	r2, r3, #12
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80053fc:	e011      	b.n	8005422 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fe:	f7fc fb9d 	bl	8001b3c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d803      	bhi.n	8005416 <HAL_SPI_Receive+0x19c>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d102      	bne.n	800541c <HAL_SPI_Receive+0x1a2>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005420:	e04e      	b.n	80054c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1c8      	bne.n	80053c0 <HAL_SPI_Receive+0x146>
 800542e:	e034      	b.n	800549a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d115      	bne.n	800546a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	b292      	uxth	r2, r2
 800544a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	1c9a      	adds	r2, r3, #2
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005468:	e011      	b.n	800548e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546a:	f7fc fb67 	bl	8001b3c <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d803      	bhi.n	8005482 <HAL_SPI_Receive+0x208>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d102      	bne.n	8005488 <HAL_SPI_Receive+0x20e>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800548c:	e018      	b.n	80054c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1ca      	bne.n	8005430 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fb4c 	bl	8005b3c <SPI_EndRxTransaction>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
 80054bc:	e000      	b.n	80054c0 <HAL_SPI_Receive+0x246>
  }

error :
 80054be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08a      	sub	sp, #40	; 0x28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e8:	2301      	movs	r3, #1
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x26>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e1fb      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x41e>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005508:	f7fc fb18 	bl	8001b3c <HAL_GetTick>
 800550c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005514:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800551c:	887b      	ldrh	r3, [r7, #2]
 800551e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005524:	7efb      	ldrb	r3, [r7, #27]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d00e      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x6e>
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005530:	d106      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x66>
 800553a:	7efb      	ldrb	r3, [r7, #27]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d003      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005540:	2302      	movs	r3, #2
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005546:	e1cd      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_SPI_TransmitReceive+0x80>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_TransmitReceive+0x80>
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005560:	e1c0      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b04      	cmp	r3, #4
 800556c:	d003      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2205      	movs	r2, #5
 8005572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	887a      	ldrh	r2, [r7, #2]
 8005586:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	887a      	ldrh	r2, [r7, #2]
 800558e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	887a      	ldrh	r2, [r7, #2]
 80055a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055b8:	d802      	bhi.n	80055c0 <HAL_SPI_TransmitReceive+0xe6>
 80055ba:	8a3b      	ldrh	r3, [r7, #16]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d908      	bls.n	80055d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	e007      	b.n	80055e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d007      	beq.n	8005600 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005608:	d97c      	bls.n	8005704 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x13e>
 8005612:	8a7b      	ldrh	r3, [r7, #18]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d169      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	1c9a      	adds	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563c:	e056      	b.n	80056ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d11b      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x1aa>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x1aa>
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b01      	cmp	r3, #1
 800565a:	d113      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	1c9a      	adds	r2, r3, #2
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b01      	cmp	r3, #1
 8005690:	d11c      	bne.n	80056cc <HAL_SPI_TransmitReceive+0x1f2>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d016      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	b292      	uxth	r2, r2
 80056aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	1c9a      	adds	r2, r3, #2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056c8:	2301      	movs	r3, #1
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056cc:	f7fc fa36 	bl	8001b3c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d8:	429a      	cmp	r2, r3
 80056da:	d807      	bhi.n	80056ec <HAL_SPI_TransmitReceive+0x212>
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d003      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056ea:	e0fb      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1a3      	bne.n	800563e <HAL_SPI_TransmitReceive+0x164>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d19d      	bne.n	800563e <HAL_SPI_TransmitReceive+0x164>
 8005702:	e0df      	b.n	80058c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x23a>
 800570c:	8a7b      	ldrh	r3, [r7, #18]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 80cb 	bne.w	80058aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	d912      	bls.n	8005744 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b02      	subs	r3, #2
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005742:	e0b2      	b.n	80058aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576a:	e09e      	b.n	80058aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d134      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x30a>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02f      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x30a>
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	2b01      	cmp	r3, #1
 8005788:	d12c      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d912      	bls.n	80057ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	881a      	ldrh	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b02      	subs	r3, #2
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057b8:	e012      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d148      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x3aa>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d042      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	d923      	bls.n	8005852 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	b292      	uxth	r2, r2
 8005816:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	1c9a      	adds	r2, r3, #2
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b02      	subs	r3, #2
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d81f      	bhi.n	8005880 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	e016      	b.n	8005880 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f103 020c 	add.w	r2, r3, #12
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005880:	2301      	movs	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005884:	f7fc f95a 	bl	8001b3c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005890:	429a      	cmp	r2, r3
 8005892:	d803      	bhi.n	800589c <HAL_SPI_TransmitReceive+0x3c2>
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d102      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x3c8>
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80058a8:	e01c      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f47f af5b 	bne.w	800576c <HAL_SPI_TransmitReceive+0x292>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f47f af54 	bne.w	800576c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f98f 	bl	8005bec <SPI_EndRxTxTransaction>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	661a      	str	r2, [r3, #96]	; 0x60
 80058e0:	e000      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80058e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005910:	f7fc f914 	bl	8001b3c <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	4413      	add	r3, r2
 800591e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005920:	f7fc f90c 	bl	8001b3c <HAL_GetTick>
 8005924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	015b      	lsls	r3, r3, #5
 800592c:	0d1b      	lsrs	r3, r3, #20
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	fb02 f303 	mul.w	r3, r2, r3
 8005934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005936:	e054      	b.n	80059e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d050      	beq.n	80059e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005940:	f7fc f8fc 	bl	8001b3c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	429a      	cmp	r2, r3
 800594e:	d902      	bls.n	8005956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d13d      	bne.n	80059d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596e:	d111      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005978:	d004      	beq.n	8005984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005982:	d107      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599c:	d10f      	bne.n	80059be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e017      	b.n	8005a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	3b01      	subs	r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4013      	ands	r3, r2
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d19b      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000000 	.word	0x20000000

08005a10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a22:	f7fc f88b 	bl	8001b3c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	4413      	add	r3, r2
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a32:	f7fc f883 	bl	8001b3c <HAL_GetTick>
 8005a36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a40:	4b3d      	ldr	r3, [pc, #244]	; (8005b38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	00da      	lsls	r2, r3, #3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	0d1b      	lsrs	r3, r3, #20
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	fb02 f303 	mul.w	r3, r2, r3
 8005a56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a58:	e060      	b.n	8005b1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a60:	d107      	bne.n	8005a72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d050      	beq.n	8005b1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a7a:	f7fc f85f 	bl	8001b3c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d902      	bls.n	8005a90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d13d      	bne.n	8005b0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa8:	d111      	bne.n	8005ace <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab2:	d004      	beq.n	8005abe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abc:	d107      	bne.n	8005ace <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005acc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	d10f      	bne.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005af6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e010      	b.n	8005b2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d196      	bne.n	8005a5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3728      	adds	r7, #40	; 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000000 	.word	0x20000000

08005b3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b50:	d111      	bne.n	8005b76 <SPI_EndRxTransaction+0x3a>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5a:	d004      	beq.n	8005b66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d107      	bne.n	8005b76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff febd 	bl	8005900 <SPI_WaitFlagStateUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e023      	b.n	8005be4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba4:	d11d      	bne.n	8005be2 <SPI_EndRxTransaction+0xa6>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bae:	d004      	beq.n	8005bba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d113      	bne.n	8005be2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff ff22 	bl	8005a10 <SPI_WaitFifoStateUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e000      	b.n	8005be4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff ff03 	bl	8005a10 <SPI_WaitFifoStateUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e027      	b.n	8005c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2180      	movs	r1, #128	; 0x80
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff fe68 	bl	8005900 <SPI_WaitFlagStateUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e014      	b.n	8005c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fedc 	bl	8005a10 <SPI_WaitFifoStateUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e000      	b.n	8005c70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c88:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005c8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005cb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cdc:	b084      	sub	sp, #16
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	f107 0014 	add.w	r0, r7, #20
 8005cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	b004      	add	sp, #16
 8005d1c:	4770      	bx	lr
	...

08005d20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b09d      	sub	sp, #116	; 0x74
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	78db      	ldrb	r3, [r3, #3]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d81f      	bhi.n	8005d92 <USB_ActivateEndpoint+0x72>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <USB_ActivateEndpoint+0x38>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d9b 	.word	0x08005d9b
 8005d64:	08005d77 	.word	0x08005d77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005d68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005d74:	e012      	b.n	8005d9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005d76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d7a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005d7e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005d82:	e00b      	b.n	8005d9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005d84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005d90:	e004      	b.n	8005d9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005d98:	e000      	b.n	8005d9c <USB_ActivateEndpoint+0x7c>
      break;
 8005d9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	b21b      	sxth	r3, r3
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	b21a      	sxth	r2, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b21b      	sxth	r3, r3
 8005de2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	7b1b      	ldrb	r3, [r3, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 8149 	bne.w	80060a4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8084 	beq.w	8005f24 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	00da      	lsls	r2, r3, #3
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	88db      	ldrh	r3, [r3, #6]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	827b      	strh	r3, [r7, #18]
 8005e5e:	8a7b      	ldrh	r3, [r7, #18]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <USB_ActivateEndpoint+0x180>
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	823b      	strh	r3, [r7, #16]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	8a3b      	ldrh	r3, [r7, #16]
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	78db      	ldrb	r3, [r3, #3]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d020      	beq.n	8005eea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ebe:	81bb      	strh	r3, [r7, #12]
 8005ec0:	89bb      	ldrh	r3, [r7, #12]
 8005ec2:	f083 0320 	eor.w	r3, r3, #32
 8005ec6:	81bb      	strh	r3, [r7, #12]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	89bb      	ldrh	r3, [r7, #12]
 8005ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	8013      	strh	r3, [r2, #0]
 8005ee8:	e2a6      	b.n	8006438 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f00:	81fb      	strh	r3, [r7, #14]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]
 8005f22:	e289      	b.n	8006438 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	4413      	add	r3, r2
 8005f36:	633b      	str	r3, [r7, #48]	; 0x30
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	00da      	lsls	r2, r3, #3
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	4413      	add	r3, r2
 8005f42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	88db      	ldrh	r3, [r3, #6]
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	4413      	add	r3, r2
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	00da      	lsls	r2, r3, #3
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	4413      	add	r3, r2
 8005f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b3e      	cmp	r3, #62	; 0x3e
 8005f82:	d918      	bls.n	8005fb6 <USB_ActivateEndpoint+0x296>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d102      	bne.n	8005f9e <USB_ActivateEndpoint+0x27e>
 8005f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	029b      	lsls	r3, r3, #10
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e029      	b.n	800600a <USB_ActivateEndpoint+0x2ea>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d112      	bne.n	8005fe4 <USB_ActivateEndpoint+0x2c4>
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e012      	b.n	800600a <USB_ActivateEndpoint+0x2ea>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <USB_ActivateEndpoint+0x2de>
 8005ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006000:	b29b      	uxth	r3, r3
 8006002:	029b      	lsls	r3, r3, #10
 8006004:	b29a      	uxth	r2, r3
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	847b      	strh	r3, [r7, #34]	; 0x22
 8006018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800601a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01b      	beq.n	800605a <USB_ActivateEndpoint+0x33a>
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	843b      	strh	r3, [r7, #32]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	441a      	add	r2, r3
 8006044:	8c3b      	ldrh	r3, [r7, #32]
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	83fb      	strh	r3, [r7, #30]
 8006072:	8bfb      	ldrh	r3, [r7, #30]
 8006074:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006078:	83fb      	strh	r3, [r7, #30]
 800607a:	8bfb      	ldrh	r3, [r7, #30]
 800607c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006080:	83fb      	strh	r3, [r7, #30]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	8bfb      	ldrh	r3, [r7, #30]
 800608e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609e:	b29b      	uxth	r3, r3
 80060a0:	8013      	strh	r3, [r2, #0]
 80060a2:	e1c9      	b.n	8006438 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	78db      	ldrb	r3, [r3, #3]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d11e      	bne.n	80060ea <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	441a      	add	r2, r3
 80060d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
 80060e8:	e01d      	b.n	8006126 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	441a      	add	r2, r3
 800610e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006130:	b29b      	uxth	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006136:	4413      	add	r3, r2
 8006138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	00da      	lsls	r2, r3, #3
 8006140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006142:	4413      	add	r3, r2
 8006144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006148:	65bb      	str	r3, [r7, #88]	; 0x58
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	891b      	ldrh	r3, [r3, #8]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	657b      	str	r3, [r7, #84]	; 0x54
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616a:	4413      	add	r3, r2
 800616c:	657b      	str	r3, [r7, #84]	; 0x54
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	00da      	lsls	r2, r3, #3
 8006174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006176:	4413      	add	r3, r2
 8006178:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	895b      	ldrh	r3, [r3, #10]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 8093 	bne.w	80062be <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01b      	beq.n	80061ec <USB_ActivateEndpoint+0x4cc>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80061fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01b      	beq.n	800623c <USB_ActivateEndpoint+0x51c>
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006234:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	873b      	strh	r3, [r7, #56]	; 0x38
 8006254:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006256:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800625a:	873b      	strh	r3, [r7, #56]	; 0x38
 800625c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800625e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006262:	873b      	strh	r3, [r7, #56]	; 0x38
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]
 80062bc:	e0bc      	b.n	8006438 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80062ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01d      	beq.n	8006316 <USB_ActivateEndpoint+0x5f6>
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800630e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006326:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01d      	beq.n	800636e <USB_ActivateEndpoint+0x64e>
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006348:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	441a      	add	r2, r3
 8006356:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800635a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800635e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006366:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800636a:	b29b      	uxth	r3, r3
 800636c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	78db      	ldrb	r3, [r3, #3]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d024      	beq.n	80063c0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006390:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006394:	f083 0320 	eor.w	r3, r3, #32
 8006398:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80063aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]
 80063be:	e01d      	b.n	80063fc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006434:	b29b      	uxth	r3, r3
 8006436:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006438:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800643c:	4618      	mov	r0, r3
 800643e:	3774      	adds	r7, #116	; 0x74
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006448:	b480      	push	{r7}
 800644a:	b08d      	sub	sp, #52	; 0x34
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	7b1b      	ldrb	r3, [r3, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 808e 	bne.w	8006578 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d044      	beq.n	80064ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	81bb      	strh	r3, [r7, #12]
 8006472:	89bb      	ldrh	r3, [r7, #12]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01b      	beq.n	80064b4 <USB_DeactivateEndpoint+0x6c>
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	817b      	strh	r3, [r7, #10]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	441a      	add	r2, r3
 800649e:	897b      	ldrh	r3, [r7, #10]
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ca:	813b      	strh	r3, [r7, #8]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	441a      	add	r2, r3
 80064d6:	893b      	ldrh	r3, [r7, #8]
 80064d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	8013      	strh	r3, [r2, #0]
 80064ec:	e192      	b.n	8006814 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	827b      	strh	r3, [r7, #18]
 80064fc:	8a7b      	ldrh	r3, [r7, #18]
 80064fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01b      	beq.n	800653e <USB_DeactivateEndpoint+0xf6>
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	823b      	strh	r3, [r7, #16]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	8a3b      	ldrh	r3, [r7, #16]
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006554:	81fb      	strh	r3, [r7, #14]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006572:	b29b      	uxth	r3, r3
 8006574:	8013      	strh	r3, [r2, #0]
 8006576:	e14d      	b.n	8006814 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 80a5 	bne.w	80066cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	843b      	strh	r3, [r7, #32]
 8006590:	8c3b      	ldrh	r3, [r7, #32]
 8006592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01b      	beq.n	80065d2 <USB_DeactivateEndpoint+0x18a>
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b0:	83fb      	strh	r3, [r7, #30]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	8bfb      	ldrh	r3, [r7, #30]
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	83bb      	strh	r3, [r7, #28]
 80065e0:	8bbb      	ldrh	r3, [r7, #28]
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01b      	beq.n	8006622 <USB_DeactivateEndpoint+0x1da>
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006600:	837b      	strh	r3, [r7, #26]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	8b7b      	ldrh	r3, [r7, #26]
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006638:	833b      	strh	r3, [r7, #24]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	441a      	add	r2, r3
 8006644:	8b3b      	ldrh	r3, [r7, #24]
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	82fb      	strh	r3, [r7, #22]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	8afb      	ldrh	r3, [r7, #22]
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	82bb      	strh	r3, [r7, #20]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8abb      	ldrh	r3, [r7, #20]
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]
 80066ca:	e0a3      	b.n	8006814 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80066da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01b      	beq.n	800671c <USB_DeactivateEndpoint+0x2d4>
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	857b      	strh	r3, [r7, #42]	; 0x2a
 800672a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01b      	beq.n	800676c <USB_DeactivateEndpoint+0x324>
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	853b      	strh	r3, [r7, #40]	; 0x28
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006768:	b29b      	uxth	r3, r3
 800676a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	441a      	add	r2, r3
 80067c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3734      	adds	r7, #52	; 0x34
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b0c2      	sub	sp, #264	; 0x108
 8006826:	af00      	add	r7, sp, #0
 8006828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006830:	6018      	str	r0, [r3, #0]
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b01      	cmp	r3, #1
 800684a:	f040 867b 	bne.w	8007544 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d908      	bls.n	800687c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800687a:	e007      	b.n	800688c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800687c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	7b1b      	ldrb	r3, [r3, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d13a      	bne.n	8006912 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6959      	ldr	r1, [r3, #20]
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	88da      	ldrh	r2, [r3, #6]
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068c2:	6800      	ldr	r0, [r0, #0]
 80068c4:	f001 fc1d 	bl	8008102 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	00da      	lsls	r2, r3, #3
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2
 80068fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	f000 bde3 	b.w	80074d8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	78db      	ldrb	r3, [r3, #3]
 800691e:	2b02      	cmp	r3, #2
 8006920:	f040 843a 	bne.w	8007198 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	f240 83b7 	bls.w	80070b0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800696c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006992:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a1a      	ldr	r2, [r3, #32]
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 81b3 	beq.w	8006d4a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	633b      	str	r3, [r7, #48]	; 0x30
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d16d      	bne.n	8006adc <USB_EPStartXfer+0x2ba>
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	4413      	add	r3, r2
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	00da      	lsls	r2, r3, #3
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a40:	2b3e      	cmp	r3, #62	; 0x3e
 8006a42:	d91c      	bls.n	8006a7e <USB_EPStartXfer+0x25c>
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <USB_EPStartXfer+0x242>
 8006a5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	e053      	b.n	8006b26 <USB_EPStartXfer+0x304>
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d112      	bne.n	8006aac <USB_EPStartXfer+0x28a>
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	e03c      	b.n	8006b26 <USB_EPStartXfer+0x304>
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d004      	beq.n	8006acc <USB_EPStartXfer+0x2aa>
 8006ac2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006acc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	029b      	lsls	r3, r3, #10
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	e024      	b.n	8006b26 <USB_EPStartXfer+0x304>
 8006adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d11c      	bne.n	8006b26 <USB_EPStartXfer+0x304>
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	4413      	add	r3, r2
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	00da      	lsls	r2, r3, #3
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	4413      	add	r3, r2
 8006b16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	895b      	ldrh	r3, [r3, #10]
 8006b32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6959      	ldr	r1, [r3, #20]
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b54:	6800      	ldr	r0, [r0, #0]
 8006b56:	f001 fad4 	bl	8008102 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	441a      	add	r2, r3
 8006b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6a1a      	ldr	r2, [r3, #32]
 8006b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d90f      	bls.n	8006bb4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a1a      	ldr	r2, [r3, #32]
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba4:	1ad2      	subs	r2, r2, r3
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	621a      	str	r2, [r3, #32]
 8006bb2:	e00e      	b.n	8006bd2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d16d      	bne.n	8006cbe <USB_EPStartXfer+0x49c>
 8006be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	4413      	add	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	00da      	lsls	r2, r3, #3
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c22:	2b3e      	cmp	r3, #62	; 0x3e
 8006c24:	d91c      	bls.n	8006c60 <USB_EPStartXfer+0x43e>
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <USB_EPStartXfer+0x424>
 8006c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e059      	b.n	8006d14 <USB_EPStartXfer+0x4f2>
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d112      	bne.n	8006c8e <USB_EPStartXfer+0x46c>
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e042      	b.n	8006d14 <USB_EPStartXfer+0x4f2>
 8006c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <USB_EPStartXfer+0x48c>
 8006ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ca8:	3301      	adds	r3, #1
 8006caa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	029b      	lsls	r3, r3, #10
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e02a      	b.n	8006d14 <USB_EPStartXfer+0x4f2>
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d122      	bne.n	8006d14 <USB_EPStartXfer+0x4f2>
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	623b      	str	r3, [r7, #32]
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	4413      	add	r3, r2
 8006cf0:	623b      	str	r3, [r7, #32]
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	00da      	lsls	r2, r3, #3
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	4413      	add	r3, r2
 8006d04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	891b      	ldrh	r3, [r3, #8]
 8006d20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6959      	ldr	r1, [r3, #20]
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d42:	6800      	ldr	r0, [r0, #0]
 8006d44:	f001 f9dd 	bl	8008102 <USB_WritePMA>
 8006d48:	e3c6      	b.n	80074d8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d16d      	bne.n	8006e36 <USB_EPStartXfer+0x614>
 8006d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7a:	4413      	add	r3, r2
 8006d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	00da      	lsls	r2, r3, #3
 8006d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d8e:	4413      	add	r3, r2
 8006d90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d94:	647b      	str	r3, [r7, #68]	; 0x44
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d9c:	d91c      	bls.n	8006dd8 <USB_EPStartXfer+0x5b6>
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dac:	f003 031f 	and.w	r3, r3, #31
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <USB_EPStartXfer+0x59c>
 8006db4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006db8:	3b01      	subs	r3, #1
 8006dba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	029b      	lsls	r3, r3, #10
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	e059      	b.n	8006e8c <USB_EPStartXfer+0x66a>
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d112      	bne.n	8006e06 <USB_EPStartXfer+0x5e4>
 8006de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e042      	b.n	8006e8c <USB_EPStartXfer+0x66a>
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <USB_EPStartXfer+0x604>
 8006e1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	029b      	lsls	r3, r3, #10
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e02a      	b.n	8006e8c <USB_EPStartXfer+0x66a>
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d122      	bne.n	8006e8c <USB_EPStartXfer+0x66a>
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	653b      	str	r3, [r7, #80]	; 0x50
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e66:	4413      	add	r3, r2
 8006e68:	653b      	str	r3, [r7, #80]	; 0x50
 8006e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	00da      	lsls	r2, r3, #3
 8006e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	891b      	ldrh	r3, [r3, #8]
 8006e98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6959      	ldr	r1, [r3, #20]
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006eb6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	f001 f921 	bl	8008102 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed0:	441a      	add	r2, r3
 8006ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6a1a      	ldr	r2, [r3, #32]
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d90f      	bls.n	8006f1a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6a1a      	ldr	r2, [r3, #32]
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	621a      	str	r2, [r3, #32]
 8006f18:	e00e      	b.n	8006f38 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2200      	movs	r2, #0
 8006f36:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	643b      	str	r3, [r7, #64]	; 0x40
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	785b      	ldrb	r3, [r3, #1]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d16d      	bne.n	8007030 <USB_EPStartXfer+0x80e>
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	4413      	add	r3, r2
 8006f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	00da      	lsls	r2, r3, #3
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f94:	2b3e      	cmp	r3, #62	; 0x3e
 8006f96:	d91c      	bls.n	8006fd2 <USB_EPStartXfer+0x7b0>
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <USB_EPStartXfer+0x796>
 8006fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	029b      	lsls	r3, r3, #10
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e053      	b.n	800707a <USB_EPStartXfer+0x858>
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d112      	bne.n	8007000 <USB_EPStartXfer+0x7de>
 8006fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	e03c      	b.n	800707a <USB_EPStartXfer+0x858>
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <USB_EPStartXfer+0x7fe>
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701a:	3301      	adds	r3, #1
 800701c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29a      	uxth	r2, r3
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e024      	b.n	800707a <USB_EPStartXfer+0x858>
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d11c      	bne.n	800707a <USB_EPStartXfer+0x858>
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007054:	4413      	add	r3, r2
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
 8007058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	00da      	lsls	r2, r3, #3
 8007066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007068:	4413      	add	r3, r2
 800706a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	b29a      	uxth	r2, r3
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	895b      	ldrh	r3, [r3, #10]
 8007086:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6959      	ldr	r1, [r3, #20]
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709a:	b29b      	uxth	r3, r3
 800709c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070a8:	6800      	ldr	r0, [r0, #0]
 80070aa:	f001 f82a 	bl	8008102 <USB_WritePMA>
 80070ae:	e213      	b.n	80074d8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80070c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	b29b      	uxth	r3, r3
 800711a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800713c:	4413      	add	r3, r2
 800713e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	00da      	lsls	r2, r3, #3
 800714e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007150:	4413      	add	r3, r2
 8007152:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007156:	65bb      	str	r3, [r7, #88]	; 0x58
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715c:	b29a      	uxth	r2, r3
 800715e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007160:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	891b      	ldrh	r3, [r3, #8]
 800716e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6959      	ldr	r1, [r3, #20]
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007182:	b29b      	uxth	r3, r3
 8007184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007188:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800718c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007190:	6800      	ldr	r0, [r0, #0]
 8007192:	f000 ffb6 	bl	8008102 <USB_WritePMA>
 8007196:	e19f      	b.n	80074d8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a1a      	ldr	r2, [r3, #32]
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80bc 	beq.w	8007356 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	673b      	str	r3, [r7, #112]	; 0x70
 80071ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	785b      	ldrb	r3, [r3, #1]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d16d      	bne.n	80072d6 <USB_EPStartXfer+0xab4>
 80071fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	66bb      	str	r3, [r7, #104]	; 0x68
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007214:	b29b      	uxth	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800721a:	4413      	add	r3, r2
 800721c:	66bb      	str	r3, [r7, #104]	; 0x68
 800721e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	00da      	lsls	r2, r3, #3
 800722c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800722e:	4413      	add	r3, r2
 8007230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007234:	667b      	str	r3, [r7, #100]	; 0x64
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723a:	2b3e      	cmp	r3, #62	; 0x3e
 800723c:	d91c      	bls.n	8007278 <USB_EPStartXfer+0xa56>
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <USB_EPStartXfer+0xa3c>
 8007254:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007258:	3b01      	subs	r3, #1
 800725a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800725e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007262:	b29b      	uxth	r3, r3
 8007264:	029b      	lsls	r3, r3, #10
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007270:	b29a      	uxth	r2, r3
 8007272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	e053      	b.n	8007320 <USB_EPStartXfer+0xafe>
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	2b00      	cmp	r3, #0
 800727e:	d112      	bne.n	80072a6 <USB_EPStartXfer+0xa84>
 8007280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800728a:	b29a      	uxth	r2, r3
 800728c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800729a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729e:	b29a      	uxth	r2, r3
 80072a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e03c      	b.n	8007320 <USB_EPStartXfer+0xafe>
 80072a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <USB_EPStartXfer+0xaa4>
 80072bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072c0:	3301      	adds	r3, #1
 80072c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	029b      	lsls	r3, r3, #10
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	e024      	b.n	8007320 <USB_EPStartXfer+0xafe>
 80072d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d11c      	bne.n	8007320 <USB_EPStartXfer+0xafe>
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	461a      	mov	r2, r3
 80072f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072fa:	4413      	add	r3, r2
 80072fc:	673b      	str	r3, [r7, #112]	; 0x70
 80072fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	00da      	lsls	r2, r3, #3
 800730c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800730e:	4413      	add	r3, r2
 8007310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731a:	b29a      	uxth	r2, r3
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	895b      	ldrh	r3, [r3, #10]
 800732c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6959      	ldr	r1, [r3, #20]
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007340:	b29b      	uxth	r3, r3
 8007342:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007346:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800734a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800734e:	6800      	ldr	r0, [r0, #0]
 8007350:	f000 fed7 	bl	8008102 <USB_WritePMA>
 8007354:	e0c0      	b.n	80074d8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d16d      	bne.n	8007442 <USB_EPStartXfer+0xc20>
 8007366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007380:	b29b      	uxth	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007386:	4413      	add	r3, r2
 8007388:	67fb      	str	r3, [r7, #124]	; 0x7c
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	00da      	lsls	r2, r3, #3
 8007398:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800739a:	4413      	add	r3, r2
 800739c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a6:	2b3e      	cmp	r3, #62	; 0x3e
 80073a8:	d91c      	bls.n	80073e4 <USB_EPStartXfer+0xbc2>
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b8:	f003 031f 	and.w	r3, r3, #31
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <USB_EPStartXfer+0xba8>
 80073c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80073c4:	3b01      	subs	r3, #1
 80073c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	029b      	lsls	r3, r3, #10
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	e05f      	b.n	80074a4 <USB_EPStartXfer+0xc82>
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d112      	bne.n	8007412 <USB_EPStartXfer+0xbf0>
 80073ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740a:	b29a      	uxth	r2, r3
 800740c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e048      	b.n	80074a4 <USB_EPStartXfer+0xc82>
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <USB_EPStartXfer+0xc10>
 8007428:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800742c:	3301      	adds	r3, #1
 800742e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007432:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007436:	b29b      	uxth	r3, r3
 8007438:	029b      	lsls	r3, r3, #10
 800743a:	b29a      	uxth	r2, r3
 800743c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	e030      	b.n	80074a4 <USB_EPStartXfer+0xc82>
 8007442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d128      	bne.n	80074a4 <USB_EPStartXfer+0xc82>
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746e:	b29b      	uxth	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007476:	4413      	add	r3, r2
 8007478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800747c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	00da      	lsls	r2, r3, #3
 800748a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800748e:	4413      	add	r3, r2
 8007490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749c:	b29a      	uxth	r2, r3
 800749e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	891b      	ldrh	r3, [r3, #8]
 80074b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6959      	ldr	r1, [r3, #20]
 80074c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074d2:	6800      	ldr	r0, [r0, #0]
 80074d4:	f000 fe15 	bl	8008102 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fe:	817b      	strh	r3, [r7, #10]
 8007500:	897b      	ldrh	r3, [r7, #10]
 8007502:	f083 0310 	eor.w	r3, r3, #16
 8007506:	817b      	strh	r3, [r7, #10]
 8007508:	897b      	ldrh	r3, [r7, #10]
 800750a:	f083 0320 	eor.w	r3, r3, #32
 800750e:	817b      	strh	r3, [r7, #10]
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	441a      	add	r2, r3
 800752a:	897b      	ldrh	r3, [r7, #10]
 800752c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753c:	b29b      	uxth	r3, r3
 800753e:	8013      	strh	r3, [r2, #0]
 8007540:	f000 bc9f 	b.w	8007e82 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	7b1b      	ldrb	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 80ae 	bne.w	80076b2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	429a      	cmp	r2, r3
 8007570:	d917      	bls.n	80075a2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007592:	1ad2      	subs	r2, r2, r3
 8007594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	619a      	str	r2, [r3, #24]
 80075a0:	e00e      	b.n	80075c0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2200      	movs	r2, #0
 80075be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075dc:	b29b      	uxth	r3, r3
 80075de:	461a      	mov	r2, r3
 80075e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075e4:	4413      	add	r3, r2
 80075e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00da      	lsls	r2, r3, #3
 80075f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075fc:	4413      	add	r3, r2
 80075fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760a:	2b3e      	cmp	r3, #62	; 0x3e
 800760c:	d91d      	bls.n	800764a <USB_EPStartXfer+0xe28>
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <USB_EPStartXfer+0xe0c>
 8007624:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007628:	3b01      	subs	r3, #1
 800762a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800762e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007632:	b29b      	uxth	r3, r3
 8007634:	029b      	lsls	r3, r3, #10
 8007636:	b29b      	uxth	r3, r3
 8007638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007640:	b29a      	uxth	r2, r3
 8007642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	e3e1      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764e:	2b00      	cmp	r3, #0
 8007650:	d116      	bne.n	8007680 <USB_EPStartXfer+0xe5e>
 8007652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e3c6      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
 8007680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <USB_EPStartXfer+0xe7e>
 8007696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800769a:	3301      	adds	r3, #1
 800769c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	029b      	lsls	r3, r3, #10
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	e3ad      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	78db      	ldrb	r3, [r3, #3]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	f040 8200 	bne.w	8007ac4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 8091 	bne.w	80077f8 <USB_EPStartXfer+0xfd6>
 80076d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076fa:	4413      	add	r3, r2
 80076fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	00da      	lsls	r2, r3, #3
 800770e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007712:	4413      	add	r3, r2
 8007714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800771c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b3e      	cmp	r3, #62	; 0x3e
 800772a:	d925      	bls.n	8007778 <USB_EPStartXfer+0xf56>
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800773e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <USB_EPStartXfer+0xf3a>
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007756:	3b01      	subs	r3, #1
 8007758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007760:	b29b      	uxth	r3, r3
 8007762:	029b      	lsls	r3, r3, #10
 8007764:	b29b      	uxth	r3, r3
 8007766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776e:	b29a      	uxth	r2, r3
 8007770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	e074      	b.n	8007862 <USB_EPStartXfer+0x1040>
 8007778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d116      	bne.n	80077b6 <USB_EPStartXfer+0xf94>
 8007788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007794:	b29a      	uxth	r2, r3
 8007796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077b2:	801a      	strh	r2, [r3, #0]
 80077b4:	e055      	b.n	8007862 <USB_EPStartXfer+0x1040>
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <USB_EPStartXfer+0xfc4>
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e0:	3301      	adds	r3, #1
 80077e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	029b      	lsls	r3, r3, #10
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e034      	b.n	8007862 <USB_EPStartXfer+0x1040>
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d12c      	bne.n	8007862 <USB_EPStartXfer+0x1040>
 8007808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007824:	b29b      	uxth	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800782c:	4413      	add	r3, r2
 800782e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	00da      	lsls	r2, r3, #3
 8007840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007844:	4413      	add	r3, r2
 8007846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800784a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	b29a      	uxth	r2, r3
 800785c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8091 	bne.w	80079a4 <USB_EPStartXfer+0x1182>
 8007882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078a6:	4413      	add	r3, r2
 80078a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	00da      	lsls	r2, r3, #3
 80078ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078be:	4413      	add	r3, r2
 80078c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	2b3e      	cmp	r3, #62	; 0x3e
 80078d6:	d925      	bls.n	8007924 <USB_EPStartXfer+0x1102>
 80078d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 031f 	and.w	r3, r3, #31
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <USB_EPStartXfer+0x10e6>
 80078fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007902:	3b01      	subs	r3, #1
 8007904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	b29b      	uxth	r3, r3
 800790e:	029b      	lsls	r3, r3, #10
 8007910:	b29b      	uxth	r3, r3
 8007912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791a:	b29a      	uxth	r2, r3
 800791c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007920:	801a      	strh	r2, [r3, #0]
 8007922:	e06d      	b.n	8007a00 <USB_EPStartXfer+0x11de>
 8007924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d116      	bne.n	8007962 <USB_EPStartXfer+0x1140>
 8007934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007940:	b29a      	uxth	r2, r3
 8007942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29b      	uxth	r3, r3
 8007950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007958:	b29a      	uxth	r2, r3
 800795a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	e04e      	b.n	8007a00 <USB_EPStartXfer+0x11de>
 8007962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <USB_EPStartXfer+0x1170>
 8007988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800798c:	3301      	adds	r3, #1
 800798e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007996:	b29b      	uxth	r3, r3
 8007998:	029b      	lsls	r3, r3, #10
 800799a:	b29a      	uxth	r2, r3
 800799c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e02d      	b.n	8007a00 <USB_EPStartXfer+0x11de>
 80079a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d125      	bne.n	8007a00 <USB_EPStartXfer+0x11de>
 80079b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079ca:	4413      	add	r3, r2
 80079cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	00da      	lsls	r2, r3, #3
 80079de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079e2:	4413      	add	r3, r2
 80079e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079fe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 81fe 	beq.w	8007e0e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <USB_EPStartXfer+0x1228>
 8007a3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10d      	bne.n	8007a66 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 81db 	bne.w	8007e0e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 81d4 	bne.w	8007e0e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	8013      	strh	r3, [r2, #0]
 8007ac2:	e1a4      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	78db      	ldrb	r3, [r3, #3]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	f040 819a 	bne.w	8007e0a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d917      	bls.n	8007b22 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	619a      	str	r2, [r3, #24]
 8007b20:	e00e      	b.n	8007b40 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d178      	bne.n	8007c42 <USB_EPStartXfer+0x1420>
 8007b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b74:	4413      	add	r3, r2
 8007b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	00da      	lsls	r2, r3, #3
 8007b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9c:	d91d      	bls.n	8007bda <USB_EPStartXfer+0x13b8>
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <USB_EPStartXfer+0x139c>
 8007bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	e064      	b.n	8007ca4 <USB_EPStartXfer+0x1482>
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d116      	bne.n	8007c10 <USB_EPStartXfer+0x13ee>
 8007be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	e049      	b.n	8007ca4 <USB_EPStartXfer+0x1482>
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d004      	beq.n	8007c30 <USB_EPStartXfer+0x140e>
 8007c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	029b      	lsls	r3, r3, #10
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	e030      	b.n	8007ca4 <USB_EPStartXfer+0x1482>
 8007c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d128      	bne.n	8007ca4 <USB_EPStartXfer+0x1482>
 8007c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c76:	4413      	add	r3, r2
 8007c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	00da      	lsls	r2, r3, #3
 8007c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c8e:	4413      	add	r3, r2
 8007c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ca2:	801a      	strh	r2, [r3, #0]
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d178      	bne.n	8007db4 <USB_EPStartXfer+0x1592>
 8007cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	00da      	lsls	r2, r3, #3
 8007cfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cfe:	4413      	add	r3, r2
 8007d00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d0e:	d91d      	bls.n	8007d4c <USB_EPStartXfer+0x152a>
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d104      	bne.n	8007d30 <USB_EPStartXfer+0x150e>
 8007d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	029b      	lsls	r3, r3, #10
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d48:	801a      	strh	r2, [r3, #0]
 8007d4a:	e060      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d116      	bne.n	8007d82 <USB_EPStartXfer+0x1560>
 8007d54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d7e:	801a      	strh	r2, [r3, #0]
 8007d80:	e045      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
 8007d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <USB_EPStartXfer+0x1580>
 8007d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e02c      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
 8007db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d124      	bne.n	8007e0e <USB_EPStartXfer+0x15ec>
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007dda:	4413      	add	r3, r2
 8007ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	00da      	lsls	r2, r3, #3
 8007dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007df2:	4413      	add	r3, r2
 8007df4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e06:	801a      	strh	r2, [r3, #0]
 8007e08:	e001      	b.n	8007e0e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e03a      	b.n	8007e84 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007e38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007e3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007e44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	441a      	add	r2, r3
 8007e6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d020      	beq.n	8007ee2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb6:	81bb      	strh	r3, [r7, #12]
 8007eb8:	89bb      	ldrh	r3, [r7, #12]
 8007eba:	f083 0310 	eor.w	r3, r3, #16
 8007ebe:	81bb      	strh	r3, [r7, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	441a      	add	r2, r3
 8007eca:	89bb      	ldrh	r3, [r7, #12]
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
 8007ee0:	e01f      	b.n	8007f22 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef8:	81fb      	strh	r3, [r7, #14]
 8007efa:	89fb      	ldrh	r3, [r7, #14]
 8007efc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f00:	81fb      	strh	r3, [r7, #14]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	441a      	add	r2, r3
 8007f0c:	89fb      	ldrh	r3, [r7, #14]
 8007f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	7b1b      	ldrb	r3, [r3, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f040 809d 	bne.w	800807e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d04c      	beq.n	8007fe6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	823b      	strh	r3, [r7, #16]
 8007f5a:	8a3b      	ldrh	r3, [r7, #16]
 8007f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01b      	beq.n	8007f9c <USB_EPClearStall+0x6c>
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	81fb      	strh	r3, [r7, #14]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	89fb      	ldrh	r3, [r7, #14]
 8007f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	78db      	ldrb	r3, [r3, #3]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d06c      	beq.n	800807e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fba:	81bb      	strh	r3, [r7, #12]
 8007fbc:	89bb      	ldrh	r3, [r7, #12]
 8007fbe:	f083 0320 	eor.w	r3, r3, #32
 8007fc2:	81bb      	strh	r3, [r7, #12]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	89bb      	ldrh	r3, [r7, #12]
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]
 8007fe4:	e04b      	b.n	800807e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	82fb      	strh	r3, [r7, #22]
 8007ff4:	8afb      	ldrh	r3, [r7, #22]
 8007ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01b      	beq.n	8008036 <USB_EPClearStall+0x106>
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008014:	82bb      	strh	r3, [r7, #20]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	8abb      	ldrh	r3, [r7, #20]
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800802e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804c:	827b      	strh	r3, [r7, #18]
 800804e:	8a7b      	ldrh	r3, [r7, #18]
 8008050:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008054:	827b      	strh	r3, [r7, #18]
 8008056:	8a7b      	ldrh	r3, [r7, #18]
 8008058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800805c:	827b      	strh	r3, [r7, #18]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	8a7b      	ldrh	r3, [r7, #18]
 800806a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807a:	b29b      	uxth	r3, r3
 800807c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d103      	bne.n	80080a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b085      	sub	sp, #20
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80080f4:	68fb      	ldr	r3, [r7, #12]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008102:	b480      	push	{r7}
 8008104:	b08d      	sub	sp, #52	; 0x34
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	460b      	mov	r3, r1
 8008112:	80fb      	strh	r3, [r7, #6]
 8008114:	4613      	mov	r3, r2
 8008116:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008118:	88bb      	ldrh	r3, [r7, #4]
 800811a:	3301      	adds	r3, #1
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008138:	e01b      	b.n	8008172 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	3301      	adds	r3, #1
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	b29b      	uxth	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	4313      	orrs	r3, r2
 8008156:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	b29a      	uxth	r2, r3
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	3302      	adds	r3, #2
 8008164:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	3301      	adds	r3, #1
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	3b01      	subs	r3, #1
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e0      	bne.n	800813a <USB_WritePMA+0x38>
  }
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	3734      	adds	r7, #52	; 0x34
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008186:	b480      	push	{r7}
 8008188:	b08b      	sub	sp, #44	; 0x2c
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	4611      	mov	r1, r2
 8008192:	461a      	mov	r2, r3
 8008194:	460b      	mov	r3, r1
 8008196:	80fb      	strh	r3, [r7, #6]
 8008198:	4613      	mov	r3, r2
 800819a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800819c:	88bb      	ldrh	r3, [r7, #4]
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
 80081bc:	e018      	b.n	80081f0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	3302      	adds	r3, #2
 80081ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	0a1b      	lsrs	r3, r3, #8
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	3301      	adds	r3, #1
 80081e8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	3b01      	subs	r3, #1
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e3      	bne.n	80081be <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80081f6:	88bb      	ldrh	r3, [r7, #4]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d007      	beq.n	8008212 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	b2da      	uxtb	r2, r3
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	701a      	strb	r2, [r3, #0]
  }
}
 8008212:	bf00      	nop
 8008214:	372c      	adds	r7, #44	; 0x2c
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	460b      	mov	r3, r1
 8008228:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800822a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800822e:	f002 f947 	bl	800a4c0 <USBD_static_malloc>
 8008232:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008242:	2302      	movs	r3, #2
 8008244:	e066      	b.n	8008314 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7c1b      	ldrb	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d119      	bne.n	800828a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800825a:	2202      	movs	r2, #2
 800825c:	2181      	movs	r1, #129	; 0x81
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 ffd3 	bl	800a20a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800826a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826e:	2202      	movs	r2, #2
 8008270:	2101      	movs	r1, #1
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 ffc9 	bl	800a20a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2210      	movs	r2, #16
 8008284:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008288:	e016      	b.n	80082b8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800828a:	2340      	movs	r3, #64	; 0x40
 800828c:	2202      	movs	r2, #2
 800828e:	2181      	movs	r1, #129	; 0x81
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 ffba 	bl	800a20a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800829c:	2340      	movs	r3, #64	; 0x40
 800829e:	2202      	movs	r2, #2
 80082a0:	2101      	movs	r1, #1
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 ffb1 	bl	800a20a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2210      	movs	r2, #16
 80082b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082b8:	2308      	movs	r3, #8
 80082ba:	2203      	movs	r2, #3
 80082bc:	2182      	movs	r1, #130	; 0x82
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 ffa3 	bl	800a20a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7c1b      	ldrb	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082f8:	2101      	movs	r1, #1
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f002 f875 	bl	800a3ea <USBD_LL_PrepareReceive>
 8008300:	e007      	b.n	8008312 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008308:	2340      	movs	r3, #64	; 0x40
 800830a:	2101      	movs	r1, #1
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f002 f86c 	bl	800a3ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008328:	2181      	movs	r1, #129	; 0x81
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 ff93 	bl	800a256 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008336:	2101      	movs	r1, #1
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 ff8c 	bl	800a256 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008346:	2182      	movs	r1, #130	; 0x82
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 ff84 	bl	800a256 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00e      	beq.n	8008386 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008378:	4618      	mov	r0, r3
 800837a:	f002 f8af 	bl	800a4dc <USBD_static_free>
    pdev->pClassData = NULL;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e0af      	b.n	8008518 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d03f      	beq.n	8008444 <USBD_CDC_Setup+0xb4>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	f040 809f 	bne.w	8008508 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d02e      	beq.n	8008430 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	da16      	bge.n	800840a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80083e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	88d2      	ldrh	r2, [r2, #6]
 80083ee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	88db      	ldrh	r3, [r3, #6]
 80083f4:	2b07      	cmp	r3, #7
 80083f6:	bf28      	it	cs
 80083f8:	2307      	movcs	r3, #7
 80083fa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	89fa      	ldrh	r2, [r7, #14]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 facf 	bl	80099a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008408:	e085      	b.n	8008516 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	785a      	ldrb	r2, [r3, #1]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	88db      	ldrh	r3, [r3, #6]
 8008418:	b2da      	uxtb	r2, r3
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008420:	6939      	ldr	r1, [r7, #16]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	88db      	ldrh	r3, [r3, #6]
 8008426:	461a      	mov	r2, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 fae8 	bl	80099fe <USBD_CtlPrepareRx>
      break;
 800842e:	e072      	b.n	8008516 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	7850      	ldrb	r0, [r2, #1]
 800843c:	2200      	movs	r2, #0
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	4798      	blx	r3
      break;
 8008442:	e068      	b.n	8008516 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	2b0b      	cmp	r3, #11
 800844a:	d852      	bhi.n	80084f2 <USBD_CDC_Setup+0x162>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <USBD_CDC_Setup+0xc4>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008485 	.word	0x08008485
 8008458:	08008501 	.word	0x08008501
 800845c:	080084f3 	.word	0x080084f3
 8008460:	080084f3 	.word	0x080084f3
 8008464:	080084f3 	.word	0x080084f3
 8008468:	080084f3 	.word	0x080084f3
 800846c:	080084f3 	.word	0x080084f3
 8008470:	080084f3 	.word	0x080084f3
 8008474:	080084f3 	.word	0x080084f3
 8008478:	080084f3 	.word	0x080084f3
 800847c:	080084af 	.word	0x080084af
 8008480:	080084d9 	.word	0x080084d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b03      	cmp	r3, #3
 800848e:	d107      	bne.n	80084a0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008490:	f107 030a 	add.w	r3, r7, #10
 8008494:	2202      	movs	r2, #2
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fa84 	bl	80099a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800849e:	e032      	b.n	8008506 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fa0e 	bl	80098c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	75fb      	strb	r3, [r7, #23]
          break;
 80084ac:	e02b      	b.n	8008506 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d107      	bne.n	80084ca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ba:	f107 030d 	add.w	r3, r7, #13
 80084be:	2201      	movs	r2, #1
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 fa6f 	bl	80099a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084c8:	e01d      	b.n	8008506 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f9f9 	bl	80098c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	75fb      	strb	r3, [r7, #23]
          break;
 80084d6:	e016      	b.n	8008506 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d00f      	beq.n	8008504 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 f9ec 	bl	80098c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80084ec:	2303      	movs	r3, #3
 80084ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084f0:	e008      	b.n	8008504 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f9e5 	bl	80098c4 <USBD_CtlError>
          ret = USBD_FAIL;
 80084fa:	2303      	movs	r3, #3
 80084fc:	75fb      	strb	r3, [r7, #23]
          break;
 80084fe:	e002      	b.n	8008506 <USBD_CDC_Setup+0x176>
          break;
 8008500:	bf00      	nop
 8008502:	e008      	b.n	8008516 <USBD_CDC_Setup+0x186>
          break;
 8008504:	bf00      	nop
      }
      break;
 8008506:	e006      	b.n	8008516 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 f9da 	bl	80098c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	75fb      	strb	r3, [r7, #23]
      break;
 8008514:	bf00      	nop
  }

  return (uint8_t)ret;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800853e:	2303      	movs	r3, #3
 8008540:	e04f      	b.n	80085e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008548:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	440b      	add	r3, r1
 8008558:	3318      	adds	r3, #24
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d029      	beq.n	80085b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	3318      	adds	r3, #24
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	78f9      	ldrb	r1, [r7, #3]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	460b      	mov	r3, r1
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	4403      	add	r3, r0
 8008580:	3338      	adds	r3, #56	; 0x38
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	fbb2 f1f3 	udiv	r1, r2, r3
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800858e:	2b00      	cmp	r3, #0
 8008590:	d110      	bne.n	80085b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3318      	adds	r3, #24
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085a6:	78f9      	ldrb	r1, [r7, #3]
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 fefb 	bl	800a3a8 <USBD_LL_Transmit>
 80085b2:	e015      	b.n	80085e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008608:	2303      	movs	r3, #3
 800860a:	e015      	b.n	8008638 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 ff0b 	bl	800a42c <USBD_LL_GetRxDataSize>
 8008616:	4602      	mov	r2, r0
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008632:	4611      	mov	r1, r2
 8008634:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800864e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	e01b      	b.n	8008692 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d015      	beq.n	8008690 <USBD_CDC_EP0_RxReady+0x50>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800866a:	2bff      	cmp	r3, #255	; 0xff
 800866c:	d010      	beq.n	8008690 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800867c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008684:	b292      	uxth	r2, r2
 8008686:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	22ff      	movs	r2, #255	; 0xff
 800868c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2243      	movs	r2, #67	; 0x43
 80086a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80086aa:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	20000094 	.word	0x20000094

080086bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2243      	movs	r2, #67	; 0x43
 80086c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80086ca:	4b03      	ldr	r3, [pc, #12]	; (80086d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	20000050 	.word	0x20000050

080086dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2243      	movs	r2, #67	; 0x43
 80086e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80086ea:	4b03      	ldr	r3, [pc, #12]	; (80086f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	200000d8 	.word	0x200000d8

080086fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	220a      	movs	r2, #10
 8008708:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	; (8008718 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	2000000c 	.word	0x2000000c

0800871c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800872c:	2303      	movs	r3, #3
 800872e:	e004      	b.n	800873a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008746:	b480      	push	{r7}
 8008748:	b087      	sub	sp, #28
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008758:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	e008      	b.n	8008776 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008792:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	e004      	b.n	80087a8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80087c4:	2301      	movs	r3, #1
 80087c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e01a      	b.n	800880c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d114      	bne.n	800880a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80087fe:	2181      	movs	r1, #129	; 0x81
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 fdd1 	bl	800a3a8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008822:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800882e:	2303      	movs	r3, #3
 8008830:	e016      	b.n	8008860 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7c1b      	ldrb	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008844:	2101      	movs	r1, #1
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 fdcf 	bl	800a3ea <USBD_LL_PrepareReceive>
 800884c:	e007      	b.n	800885e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008854:	2340      	movs	r3, #64	; 0x40
 8008856:	2101      	movs	r1, #1
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 fdc6 	bl	800a3ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800887c:	2303      	movs	r3, #3
 800887e:	e01f      	b.n	80088c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	79fa      	ldrb	r2, [r7, #7]
 80088b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f001 fc2d 	bl	800a114 <USBD_LL_Init>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	e016      	b.n	800890e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	f107 020e 	add.w	r2, r7, #14
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	4602      	mov	r2, r0
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fc58 	bl	800a1d4 <USBD_LL_Start>
 8008924:	4603      	mov	r3, r0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	4611      	mov	r1, r2
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
 800896e:	4603      	mov	r3, r0
 8008970:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	2b00      	cmp	r3, #0
 8008990:	d007      	beq.n	80089a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	4611      	mov	r1, r2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
  }

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 ff46 	bl	8009850 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80089d2:	461a      	mov	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089e0:	f003 031f 	and.w	r3, r3, #31
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d01a      	beq.n	8008a1e <USBD_LL_SetupStage+0x72>
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d822      	bhi.n	8008a32 <USBD_LL_SetupStage+0x86>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <USBD_LL_SetupStage+0x4a>
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d00a      	beq.n	8008a0a <USBD_LL_SetupStage+0x5e>
 80089f4:	e01d      	b.n	8008a32 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f9ee 	bl	8008de0 <USBD_StdDevReq>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
      break;
 8008a08:	e020      	b.n	8008a4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa52 	bl	8008ebc <USBD_StdItfReq>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1c:	e016      	b.n	8008a4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa91 	bl	8008f4e <USBD_StdEPReq>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a30:	e00c      	b.n	8008a4c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fc27 	bl	800a294 <USBD_LL_StallEP>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4a:	bf00      	nop
  }

  return ret;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d138      	bne.n	8008adc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d14a      	bne.n	8008b12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d913      	bls.n	8008ab0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	1ad2      	subs	r2, r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	bf28      	it	cs
 8008aa2:	4613      	movcs	r3, r2
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 ffc5 	bl	8009a38 <USBD_CtlContinueRx>
 8008aae:	e030      	b.n	8008b12 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d10b      	bne.n	8008ad4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d005      	beq.n	8008ad4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 ffc0 	bl	8009a5a <USBD_CtlSendStatus>
 8008ada:	e01a      	b.n	8008b12 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d114      	bne.n	8008b12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00e      	beq.n	8008b12 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	7afa      	ldrb	r2, [r7, #11]
 8008afe:	4611      	mov	r1, r2
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	4798      	blx	r3
 8008b04:	4603      	mov	r3, r0
 8008b06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	e000      	b.n	8008b14 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	460b      	mov	r3, r1
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b2a:	7afb      	ldrb	r3, [r7, #11]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d16b      	bne.n	8008c08 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3314      	adds	r3, #20
 8008b34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d156      	bne.n	8008bee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d914      	bls.n	8008b76 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	1ad2      	subs	r2, r2, r3
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 ff3a 	bl	80099dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f001 fc3b 	bl	800a3ea <USBD_LL_PrepareReceive>
 8008b74:	e03b      	b.n	8008bee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d11c      	bne.n	8008bbc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d316      	bcc.n	8008bbc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d20f      	bcs.n	8008bbc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 ff1b 	bl	80099dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f001 fc18 	bl	800a3ea <USBD_LL_PrepareReceive>
 8008bba:	e018      	b.n	8008bee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d10b      	bne.n	8008be0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008be0:	2180      	movs	r1, #128	; 0x80
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f001 fb56 	bl	800a294 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 ff49 	bl	8009a80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d122      	bne.n	8008c3e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fe98 	bl	800892e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c06:	e01a      	b.n	8008c3e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d114      	bne.n	8008c3e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00e      	beq.n	8008c3e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	7afa      	ldrb	r2, [r7, #11]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	4798      	blx	r3
 8008c30:	4603      	mov	r3, r0
 8008c32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	e000      	b.n	8008c40 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e02f      	b.n	8008cdc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00f      	beq.n	8008ca6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6852      	ldr	r2, [r2, #4]
 8008c9e:	b2d2      	uxtb	r2, r2
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2100      	movs	r1, #0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 faac 	bl	800a20a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2240      	movs	r2, #64	; 0x40
 8008cbe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cc2:	2340      	movs	r3, #64	; 0x40
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fa9e 	bl	800a20a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2240      	movs	r2, #64	; 0x40
 8008cd8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	78fa      	ldrb	r2, [r7, #3]
 8008cf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2204      	movs	r2, #4
 8008d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d106      	bne.n	8008d52 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e012      	b.n	8008d9c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d10b      	bne.n	8008d9a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d005      	beq.n	8008d9a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	3301      	adds	r3, #1
 8008dba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008dc2:	8a3b      	ldrh	r3, [r7, #16]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	b21a      	sxth	r2, r3
 8008dc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	b21b      	sxth	r3, r3
 8008dd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008dd2:	89fb      	ldrh	r3, [r7, #14]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	371c      	adds	r7, #28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d005      	beq.n	8008e06 <USBD_StdDevReq+0x26>
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d853      	bhi.n	8008ea6 <USBD_StdDevReq+0xc6>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00b      	beq.n	8008e1a <USBD_StdDevReq+0x3a>
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d14f      	bne.n	8008ea6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]
      break;
 8008e18:	e04a      	b.n	8008eb0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	2b09      	cmp	r3, #9
 8008e20:	d83b      	bhi.n	8008e9a <USBD_StdDevReq+0xba>
 8008e22:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <USBD_StdDevReq+0x48>)
 8008e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008e91 	.word	0x08008e91
 8008e30:	08008e9b 	.word	0x08008e9b
 8008e34:	08008e87 	.word	0x08008e87
 8008e38:	08008e9b 	.word	0x08008e9b
 8008e3c:	08008e5b 	.word	0x08008e5b
 8008e40:	08008e51 	.word	0x08008e51
 8008e44:	08008e9b 	.word	0x08008e9b
 8008e48:	08008e73 	.word	0x08008e73
 8008e4c:	08008e65 	.word	0x08008e65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f9de 	bl	8009214 <USBD_GetDescriptor>
          break;
 8008e58:	e024      	b.n	8008ea4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fb6d 	bl	800953c <USBD_SetAddress>
          break;
 8008e62:	e01f      	b.n	8008ea4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fbac 	bl	80095c4 <USBD_SetConfig>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8008e70:	e018      	b.n	8008ea4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fc4b 	bl	8009710 <USBD_GetConfig>
          break;
 8008e7a:	e013      	b.n	8008ea4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fc7c 	bl	800977c <USBD_GetStatus>
          break;
 8008e84:	e00e      	b.n	8008ea4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fcab 	bl	80097e4 <USBD_SetFeature>
          break;
 8008e8e:	e009      	b.n	8008ea4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fcba 	bl	800980c <USBD_ClrFeature>
          break;
 8008e98:	e004      	b.n	8008ea4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fd11 	bl	80098c4 <USBD_CtlError>
          break;
 8008ea2:	bf00      	nop
      }
      break;
 8008ea4:	e004      	b.n	8008eb0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fd0b 	bl	80098c4 <USBD_CtlError>
      break;
 8008eae:	bf00      	nop
  }

  return ret;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop

08008ebc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed2:	2b40      	cmp	r3, #64	; 0x40
 8008ed4:	d005      	beq.n	8008ee2 <USBD_StdItfReq+0x26>
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	d82f      	bhi.n	8008f3a <USBD_StdItfReq+0x7e>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <USBD_StdItfReq+0x26>
 8008ede:	2b20      	cmp	r3, #32
 8008ee0:	d12b      	bne.n	8008f3a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d81d      	bhi.n	8008f2c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	889b      	ldrh	r3, [r3, #4]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d813      	bhi.n	8008f22 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	88db      	ldrh	r3, [r3, #6]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d110      	bne.n	8008f36 <USBD_StdItfReq+0x7a>
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10d      	bne.n	8008f36 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fd9d 	bl	8009a5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f20:	e009      	b.n	8008f36 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fccd 	bl	80098c4 <USBD_CtlError>
          break;
 8008f2a:	e004      	b.n	8008f36 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fcc8 	bl	80098c4 <USBD_CtlError>
          break;
 8008f34:	e000      	b.n	8008f38 <USBD_StdItfReq+0x7c>
          break;
 8008f36:	bf00      	nop
      }
      break;
 8008f38:	e004      	b.n	8008f44 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fcc1 	bl	80098c4 <USBD_CtlError>
      break;
 8008f42:	bf00      	nop
  }

  return ret;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	889b      	ldrh	r3, [r3, #4]
 8008f60:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f6a:	2b40      	cmp	r3, #64	; 0x40
 8008f6c:	d007      	beq.n	8008f7e <USBD_StdEPReq+0x30>
 8008f6e:	2b40      	cmp	r3, #64	; 0x40
 8008f70:	f200 8145 	bhi.w	80091fe <USBD_StdEPReq+0x2b0>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00c      	beq.n	8008f92 <USBD_StdEPReq+0x44>
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	f040 8140 	bne.w	80091fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f90:	e13a      	b.n	8009208 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	785b      	ldrb	r3, [r3, #1]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d007      	beq.n	8008faa <USBD_StdEPReq+0x5c>
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	f300 8129 	bgt.w	80091f2 <USBD_StdEPReq+0x2a4>
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d07f      	beq.n	80090a4 <USBD_StdEPReq+0x156>
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d03c      	beq.n	8009022 <USBD_StdEPReq+0xd4>
 8008fa8:	e123      	b.n	80091f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d002      	beq.n	8008fbc <USBD_StdEPReq+0x6e>
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d016      	beq.n	8008fe8 <USBD_StdEPReq+0x9a>
 8008fba:	e02c      	b.n	8009016 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <USBD_StdEPReq+0x90>
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b80      	cmp	r3, #128	; 0x80
 8008fc6:	d00a      	beq.n	8008fde <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 f961 	bl	800a294 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fd2:	2180      	movs	r1, #128	; 0x80
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 f95d 	bl	800a294 <USBD_LL_StallEP>
 8008fda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fdc:	e020      	b.n	8009020 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc6f 	bl	80098c4 <USBD_CtlError>
              break;
 8008fe6:	e01b      	b.n	8009020 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	885b      	ldrh	r3, [r3, #2]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10e      	bne.n	800900e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <USBD_StdEPReq+0xc0>
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	2b80      	cmp	r3, #128	; 0x80
 8008ffa:	d008      	beq.n	800900e <USBD_StdEPReq+0xc0>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	88db      	ldrh	r3, [r3, #6]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d104      	bne.n	800900e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 f943 	bl	800a294 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fd23 	bl	8009a5a <USBD_CtlSendStatus>

              break;
 8009014:	e004      	b.n	8009020 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fc53 	bl	80098c4 <USBD_CtlError>
              break;
 800901e:	bf00      	nop
          }
          break;
 8009020:	e0ec      	b.n	80091fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b02      	cmp	r3, #2
 800902c:	d002      	beq.n	8009034 <USBD_StdEPReq+0xe6>
 800902e:	2b03      	cmp	r3, #3
 8009030:	d016      	beq.n	8009060 <USBD_StdEPReq+0x112>
 8009032:	e030      	b.n	8009096 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <USBD_StdEPReq+0x108>
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b80      	cmp	r3, #128	; 0x80
 800903e:	d00a      	beq.n	8009056 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 f925 	bl	800a294 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800904a:	2180      	movs	r1, #128	; 0x80
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f921 	bl	800a294 <USBD_LL_StallEP>
 8009052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009054:	e025      	b.n	80090a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fc33 	bl	80098c4 <USBD_CtlError>
              break;
 800905e:	e020      	b.n	80090a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	885b      	ldrh	r3, [r3, #2]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11b      	bne.n	80090a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800906e:	2b00      	cmp	r3, #0
 8009070:	d004      	beq.n	800907c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 f92b 	bl	800a2d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fcec 	bl	8009a5a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009094:	e004      	b.n	80090a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc13 	bl	80098c4 <USBD_CtlError>
              break;
 800909e:	e000      	b.n	80090a2 <USBD_StdEPReq+0x154>
              break;
 80090a0:	bf00      	nop
          }
          break;
 80090a2:	e0ab      	b.n	80091fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d002      	beq.n	80090b6 <USBD_StdEPReq+0x168>
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d032      	beq.n	800911a <USBD_StdEPReq+0x1cc>
 80090b4:	e097      	b.n	80091e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d007      	beq.n	80090cc <USBD_StdEPReq+0x17e>
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b80      	cmp	r3, #128	; 0x80
 80090c0:	d004      	beq.n	80090cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fbfd 	bl	80098c4 <USBD_CtlError>
                break;
 80090ca:	e091      	b.n	80091f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	da0b      	bge.n	80090ec <USBD_StdEPReq+0x19e>
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	3310      	adds	r3, #16
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	4413      	add	r3, r2
 80090e8:	3304      	adds	r3, #4
 80090ea:	e00b      	b.n	8009104 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	4413      	add	r3, r2
 8009102:	3304      	adds	r3, #4
 8009104:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2202      	movs	r2, #2
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fc47 	bl	80099a6 <USBD_CtlSendData>
              break;
 8009118:	e06a      	b.n	80091f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800911a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800911e:	2b00      	cmp	r3, #0
 8009120:	da11      	bge.n	8009146 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	f003 020f 	and.w	r2, r3, #15
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	440b      	add	r3, r1
 8009134:	3324      	adds	r3, #36	; 0x24
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d117      	bne.n	800916c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fbc0 	bl	80098c4 <USBD_CtlError>
                  break;
 8009144:	e054      	b.n	80091f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	f003 020f 	and.w	r2, r3, #15
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	440b      	add	r3, r1
 8009158:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fbad 	bl	80098c4 <USBD_CtlError>
                  break;
 800916a:	e041      	b.n	80091f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800916c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009170:	2b00      	cmp	r3, #0
 8009172:	da0b      	bge.n	800918c <USBD_StdEPReq+0x23e>
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	3310      	adds	r3, #16
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4413      	add	r3, r2
 8009188:	3304      	adds	r3, #4
 800918a:	e00b      	b.n	80091a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	3304      	adds	r3, #4
 80091a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <USBD_StdEPReq+0x264>
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	2b80      	cmp	r3, #128	; 0x80
 80091b0:	d103      	bne.n	80091ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e00e      	b.n	80091d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 f8a6 	bl	800a310 <USBD_LL_IsStallEP>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	2201      	movs	r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e002      	b.n	80091d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2202      	movs	r2, #2
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fbe1 	bl	80099a6 <USBD_CtlSendData>
              break;
 80091e4:	e004      	b.n	80091f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fb6b 	bl	80098c4 <USBD_CtlError>
              break;
 80091ee:	bf00      	nop
          }
          break;
 80091f0:	e004      	b.n	80091fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fb65 	bl	80098c4 <USBD_CtlError>
          break;
 80091fa:	bf00      	nop
      }
      break;
 80091fc:	e004      	b.n	8009208 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fb5f 	bl	80098c4 <USBD_CtlError>
      break;
 8009206:	bf00      	nop
  }

  return ret;
 8009208:	7bfb      	ldrb	r3, [r7, #15]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	885b      	ldrh	r3, [r3, #2]
 800922e:	0a1b      	lsrs	r3, r3, #8
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	2b0e      	cmp	r3, #14
 8009236:	f200 8152 	bhi.w	80094de <USBD_GetDescriptor+0x2ca>
 800923a:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <USBD_GetDescriptor+0x2c>)
 800923c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009240:	080092b1 	.word	0x080092b1
 8009244:	080092c9 	.word	0x080092c9
 8009248:	08009309 	.word	0x08009309
 800924c:	080094df 	.word	0x080094df
 8009250:	080094df 	.word	0x080094df
 8009254:	0800947f 	.word	0x0800947f
 8009258:	080094ab 	.word	0x080094ab
 800925c:	080094df 	.word	0x080094df
 8009260:	080094df 	.word	0x080094df
 8009264:	080094df 	.word	0x080094df
 8009268:	080094df 	.word	0x080094df
 800926c:	080094df 	.word	0x080094df
 8009270:	080094df 	.word	0x080094df
 8009274:	080094df 	.word	0x080094df
 8009278:	0800927d 	.word	0x0800927d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	7c12      	ldrb	r2, [r2, #16]
 8009294:	f107 0108 	add.w	r1, r7, #8
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800929e:	e126      	b.n	80094ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fb0e 	bl	80098c4 <USBD_CtlError>
        err++;
 80092a8:	7afb      	ldrb	r3, [r7, #11]
 80092aa:	3301      	adds	r3, #1
 80092ac:	72fb      	strb	r3, [r7, #11]
      break;
 80092ae:	e11e      	b.n	80094ee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7c12      	ldrb	r2, [r2, #16]
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
      break;
 80092c6:	e112      	b.n	80094ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	7c1b      	ldrb	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10d      	bne.n	80092ec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	f107 0208 	add.w	r2, r7, #8
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	2202      	movs	r2, #2
 80092e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092ea:	e100      	b.n	80094ee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	f107 0208 	add.w	r2, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3301      	adds	r3, #1
 8009302:	2202      	movs	r2, #2
 8009304:	701a      	strb	r2, [r3, #0]
      break;
 8009306:	e0f2      	b.n	80094ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	885b      	ldrh	r3, [r3, #2]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b05      	cmp	r3, #5
 8009310:	f200 80ac 	bhi.w	800946c <USBD_GetDescriptor+0x258>
 8009314:	a201      	add	r2, pc, #4	; (adr r2, 800931c <USBD_GetDescriptor+0x108>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	08009335 	.word	0x08009335
 8009320:	08009369 	.word	0x08009369
 8009324:	0800939d 	.word	0x0800939d
 8009328:	080093d1 	.word	0x080093d1
 800932c:	08009405 	.word	0x08009405
 8009330:	08009439 	.word	0x08009439
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	7c12      	ldrb	r2, [r2, #16]
 800934c:	f107 0108 	add.w	r1, r7, #8
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009356:	e091      	b.n	800947c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fab2 	bl	80098c4 <USBD_CtlError>
            err++;
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	3301      	adds	r3, #1
 8009364:	72fb      	strb	r3, [r7, #11]
          break;
 8009366:	e089      	b.n	800947c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00b      	beq.n	800938c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7c12      	ldrb	r2, [r2, #16]
 8009380:	f107 0108 	add.w	r1, r7, #8
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938a:	e077      	b.n	800947c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa98 	bl	80098c4 <USBD_CtlError>
            err++;
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	3301      	adds	r3, #1
 8009398:	72fb      	strb	r3, [r7, #11]
          break;
 800939a:	e06f      	b.n	800947c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00b      	beq.n	80093c0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7c12      	ldrb	r2, [r2, #16]
 80093b4:	f107 0108 	add.w	r1, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093be:	e05d      	b.n	800947c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fa7e 	bl	80098c4 <USBD_CtlError>
            err++;
 80093c8:	7afb      	ldrb	r3, [r7, #11]
 80093ca:	3301      	adds	r3, #1
 80093cc:	72fb      	strb	r3, [r7, #11]
          break;
 80093ce:	e055      	b.n	800947c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	7c12      	ldrb	r2, [r2, #16]
 80093e8:	f107 0108 	add.w	r1, r7, #8
 80093ec:	4610      	mov	r0, r2
 80093ee:	4798      	blx	r3
 80093f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093f2:	e043      	b.n	800947c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa64 	bl	80098c4 <USBD_CtlError>
            err++;
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	3301      	adds	r3, #1
 8009400:	72fb      	strb	r3, [r7, #11]
          break;
 8009402:	e03b      	b.n	800947c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00b      	beq.n	8009428 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	7c12      	ldrb	r2, [r2, #16]
 800941c:	f107 0108 	add.w	r1, r7, #8
 8009420:	4610      	mov	r0, r2
 8009422:	4798      	blx	r3
 8009424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009426:	e029      	b.n	800947c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa4a 	bl	80098c4 <USBD_CtlError>
            err++;
 8009430:	7afb      	ldrb	r3, [r7, #11]
 8009432:	3301      	adds	r3, #1
 8009434:	72fb      	strb	r3, [r7, #11]
          break;
 8009436:	e021      	b.n	800947c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00b      	beq.n	800945c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	7c12      	ldrb	r2, [r2, #16]
 8009450:	f107 0108 	add.w	r1, r7, #8
 8009454:	4610      	mov	r0, r2
 8009456:	4798      	blx	r3
 8009458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800945a:	e00f      	b.n	800947c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fa30 	bl	80098c4 <USBD_CtlError>
            err++;
 8009464:	7afb      	ldrb	r3, [r7, #11]
 8009466:	3301      	adds	r3, #1
 8009468:	72fb      	strb	r3, [r7, #11]
          break;
 800946a:	e007      	b.n	800947c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fa28 	bl	80098c4 <USBD_CtlError>
          err++;
 8009474:	7afb      	ldrb	r3, [r7, #11]
 8009476:	3301      	adds	r3, #1
 8009478:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800947a:	bf00      	nop
      }
      break;
 800947c:	e037      	b.n	80094ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	7c1b      	ldrb	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948e:	f107 0208 	add.w	r2, r7, #8
 8009492:	4610      	mov	r0, r2
 8009494:	4798      	blx	r3
 8009496:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009498:	e029      	b.n	80094ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fa11 	bl	80098c4 <USBD_CtlError>
        err++;
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	3301      	adds	r3, #1
 80094a6:	72fb      	strb	r3, [r7, #11]
      break;
 80094a8:	e021      	b.n	80094ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	7c1b      	ldrb	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10d      	bne.n	80094ce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	f107 0208 	add.w	r2, r7, #8
 80094be:	4610      	mov	r0, r2
 80094c0:	4798      	blx	r3
 80094c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3301      	adds	r3, #1
 80094c8:	2207      	movs	r2, #7
 80094ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094cc:	e00f      	b.n	80094ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f9f7 	bl	80098c4 <USBD_CtlError>
        err++;
 80094d6:	7afb      	ldrb	r3, [r7, #11]
 80094d8:	3301      	adds	r3, #1
 80094da:	72fb      	strb	r3, [r7, #11]
      break;
 80094dc:	e007      	b.n	80094ee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f9ef 	bl	80098c4 <USBD_CtlError>
      err++;
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	3301      	adds	r3, #1
 80094ea:	72fb      	strb	r3, [r7, #11]
      break;
 80094ec:	bf00      	nop
  }

  if (err != 0U)
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d11e      	bne.n	8009532 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	88db      	ldrh	r3, [r3, #6]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d016      	beq.n	800952a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80094fc:	893b      	ldrh	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00e      	beq.n	8009520 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	88da      	ldrh	r2, [r3, #6]
 8009506:	893b      	ldrh	r3, [r7, #8]
 8009508:	4293      	cmp	r3, r2
 800950a:	bf28      	it	cs
 800950c:	4613      	movcs	r3, r2
 800950e:	b29b      	uxth	r3, r3
 8009510:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009512:	893b      	ldrh	r3, [r7, #8]
 8009514:	461a      	mov	r2, r3
 8009516:	68f9      	ldr	r1, [r7, #12]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa44 	bl	80099a6 <USBD_CtlSendData>
 800951e:	e009      	b.n	8009534 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f9ce 	bl	80098c4 <USBD_CtlError>
 8009528:	e004      	b.n	8009534 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa95 	bl	8009a5a <USBD_CtlSendStatus>
 8009530:	e000      	b.n	8009534 <USBD_GetDescriptor+0x320>
    return;
 8009532:	bf00      	nop
  }
}
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop

0800953c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	889b      	ldrh	r3, [r3, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d131      	bne.n	80095b2 <USBD_SetAddress+0x76>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	88db      	ldrh	r3, [r3, #6]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d12d      	bne.n	80095b2 <USBD_SetAddress+0x76>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	885b      	ldrh	r3, [r3, #2]
 800955a:	2b7f      	cmp	r3, #127	; 0x7f
 800955c:	d829      	bhi.n	80095b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	885b      	ldrh	r3, [r3, #2]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009568:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b03      	cmp	r3, #3
 8009574:	d104      	bne.n	8009580 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f9a3 	bl	80098c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	e01d      	b.n	80095bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 feec 	bl	800a36a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fa61 	bl	8009a5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a6:	e009      	b.n	80095bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b0:	e004      	b.n	80095bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f985 	bl	80098c4 <USBD_CtlError>
  }
}
 80095ba:	bf00      	nop
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	885b      	ldrh	r3, [r3, #2]
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	4b4c      	ldr	r3, [pc, #304]	; (800970c <USBD_SetConfig+0x148>)
 80095da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095dc:	4b4b      	ldr	r3, [pc, #300]	; (800970c <USBD_SetConfig+0x148>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d905      	bls.n	80095f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f96c 	bl	80098c4 <USBD_CtlError>
    return USBD_FAIL;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e088      	b.n	8009702 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d002      	beq.n	8009602 <USBD_SetConfig+0x3e>
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d025      	beq.n	800964c <USBD_SetConfig+0x88>
 8009600:	e071      	b.n	80096e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009602:	4b42      	ldr	r3, [pc, #264]	; (800970c <USBD_SetConfig+0x148>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01c      	beq.n	8009644 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800960a:	4b40      	ldr	r3, [pc, #256]	; (800970c <USBD_SetConfig+0x148>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009614:	4b3d      	ldr	r3, [pc, #244]	; (800970c <USBD_SetConfig+0x148>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff f992 	bl	8008944 <USBD_SetClassConfig>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d004      	beq.n	8009634 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f949 	bl	80098c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009632:	e065      	b.n	8009700 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fa10 	bl	8009a5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2203      	movs	r2, #3
 800963e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009642:	e05d      	b.n	8009700 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fa08 	bl	8009a5a <USBD_CtlSendStatus>
      break;
 800964a:	e059      	b.n	8009700 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800964c:	4b2f      	ldr	r3, [pc, #188]	; (800970c <USBD_SetConfig+0x148>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d112      	bne.n	800967a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800965c:	4b2b      	ldr	r3, [pc, #172]	; (800970c <USBD_SetConfig+0x148>)
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009666:	4b29      	ldr	r3, [pc, #164]	; (800970c <USBD_SetConfig+0x148>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff f985 	bl	800897c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9f1 	bl	8009a5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009678:	e042      	b.n	8009700 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <USBD_SetConfig+0x148>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d02a      	beq.n	80096de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff f973 	bl	800897c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009696:	4b1d      	ldr	r3, [pc, #116]	; (800970c <USBD_SetConfig+0x148>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096a0:	4b1a      	ldr	r3, [pc, #104]	; (800970c <USBD_SetConfig+0x148>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff f94c 	bl	8008944 <USBD_SetClassConfig>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00f      	beq.n	80096d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f903 	bl	80098c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff f958 	bl	800897c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096d4:	e014      	b.n	8009700 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f9bf 	bl	8009a5a <USBD_CtlSendStatus>
      break;
 80096dc:	e010      	b.n	8009700 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f9bb 	bl	8009a5a <USBD_CtlSendStatus>
      break;
 80096e4:	e00c      	b.n	8009700 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f8eb 	bl	80098c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096ee:	4b07      	ldr	r3, [pc, #28]	; (800970c <USBD_SetConfig+0x148>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff f941 	bl	800897c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80096fa:	2303      	movs	r3, #3
 80096fc:	73fb      	strb	r3, [r7, #15]
      break;
 80096fe:	bf00      	nop
  }

  return ret;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000410 	.word	0x20000410

08009710 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	88db      	ldrh	r3, [r3, #6]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d004      	beq.n	800972c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f8cd 	bl	80098c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800972a:	e023      	b.n	8009774 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	dc02      	bgt.n	800973e <USBD_GetConfig+0x2e>
 8009738:	2b00      	cmp	r3, #0
 800973a:	dc03      	bgt.n	8009744 <USBD_GetConfig+0x34>
 800973c:	e015      	b.n	800976a <USBD_GetConfig+0x5a>
 800973e:	2b03      	cmp	r3, #3
 8009740:	d00b      	beq.n	800975a <USBD_GetConfig+0x4a>
 8009742:	e012      	b.n	800976a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3308      	adds	r3, #8
 800974e:	2201      	movs	r2, #1
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f927 	bl	80099a6 <USBD_CtlSendData>
        break;
 8009758:	e00c      	b.n	8009774 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	3304      	adds	r3, #4
 800975e:	2201      	movs	r2, #1
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f91f 	bl	80099a6 <USBD_CtlSendData>
        break;
 8009768:	e004      	b.n	8009774 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f8a9 	bl	80098c4 <USBD_CtlError>
        break;
 8009772:	bf00      	nop
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	3b01      	subs	r3, #1
 8009790:	2b02      	cmp	r3, #2
 8009792:	d81e      	bhi.n	80097d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	88db      	ldrh	r3, [r3, #6]
 8009798:	2b02      	cmp	r3, #2
 800979a:	d004      	beq.n	80097a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f890 	bl	80098c4 <USBD_CtlError>
        break;
 80097a4:	e01a      	b.n	80097dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f043 0202 	orr.w	r2, r3, #2
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	330c      	adds	r3, #12
 80097c6:	2202      	movs	r2, #2
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8eb 	bl	80099a6 <USBD_CtlSendData>
      break;
 80097d0:	e004      	b.n	80097dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f875 	bl	80098c4 <USBD_CtlError>
      break;
 80097da:	bf00      	nop
  }
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	885b      	ldrh	r3, [r3, #2]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d106      	bne.n	8009804 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f92b 	bl	8009a5a <USBD_CtlSendStatus>
  }
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800981c:	b2db      	uxtb	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	2b02      	cmp	r3, #2
 8009822:	d80b      	bhi.n	800983c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	885b      	ldrh	r3, [r3, #2]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d10c      	bne.n	8009846 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f910 	bl	8009a5a <USBD_CtlSendStatus>
      }
      break;
 800983a:	e004      	b.n	8009846 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f840 	bl	80098c4 <USBD_CtlError>
      break;
 8009844:	e000      	b.n	8009848 <USBD_ClrFeature+0x3c>
      break;
 8009846:	bf00      	nop
  }
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	781a      	ldrb	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3301      	adds	r3, #1
 800986a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	781a      	ldrb	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fa92 	bl	8008da4 <SWAPBYTE>
 8009880:	4603      	mov	r3, r0
 8009882:	461a      	mov	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3301      	adds	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3301      	adds	r3, #1
 8009892:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f7ff fa85 	bl	8008da4 <SWAPBYTE>
 800989a:	4603      	mov	r3, r0
 800989c:	461a      	mov	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3301      	adds	r3, #1
 80098a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3301      	adds	r3, #1
 80098ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff fa78 	bl	8008da4 <SWAPBYTE>
 80098b4:	4603      	mov	r3, r0
 80098b6:	461a      	mov	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	80da      	strh	r2, [r3, #6]
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80098ce:	2180      	movs	r1, #128	; 0x80
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fcdf 	bl	800a294 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80098d6:	2100      	movs	r1, #0
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fcdb 	bl	800a294 <USBD_LL_StallEP>
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b086      	sub	sp, #24
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d036      	beq.n	800996a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009900:	6938      	ldr	r0, [r7, #16]
 8009902:	f000 f836 	bl	8009972 <USBD_GetLen>
 8009906:	4603      	mov	r3, r0
 8009908:	3301      	adds	r3, #1
 800990a:	b29b      	uxth	r3, r3
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	4413      	add	r3, r2
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	7812      	ldrb	r2, [r2, #0]
 800991e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	3301      	adds	r3, #1
 8009924:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	4413      	add	r3, r2
 800992c:	2203      	movs	r2, #3
 800992e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	3301      	adds	r3, #1
 8009934:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009936:	e013      	b.n	8009960 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	4413      	add	r3, r2
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	7812      	ldrb	r2, [r2, #0]
 8009942:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3301      	adds	r3, #1
 8009948:	613b      	str	r3, [r7, #16]
    idx++;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	3301      	adds	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	4413      	add	r3, r2
 8009956:	2200      	movs	r2, #0
 8009958:	701a      	strb	r2, [r3, #0]
    idx++;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	3301      	adds	r3, #1
 800995e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e7      	bne.n	8009938 <USBD_GetString+0x52>
 8009968:	e000      	b.n	800996c <USBD_GetString+0x86>
    return;
 800996a:	bf00      	nop
  }
}
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009982:	e005      	b.n	8009990 <USBD_GetLen+0x1e>
  {
    len++;
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	3301      	adds	r3, #1
 8009988:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	3301      	adds	r3, #1
 800998e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1f5      	bne.n	8009984 <USBD_GetLen+0x12>
  }

  return len;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2202      	movs	r2, #2
 80099b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	2100      	movs	r1, #0
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fceb 	bl	800a3a8 <USBD_LL_Transmit>

  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	2100      	movs	r1, #0
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 fcda 	bl	800a3a8 <USBD_LL_Transmit>

  return USBD_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2203      	movs	r2, #3
 8009a0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	2100      	movs	r1, #0
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fcde 	bl	800a3ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	2100      	movs	r1, #0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fccd 	bl	800a3ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2204      	movs	r2, #4
 8009a66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fc99 	bl	800a3a8 <USBD_LL_Transmit>

  return USBD_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a90:	2300      	movs	r3, #0
 8009a92:	2200      	movs	r2, #0
 8009a94:	2100      	movs	r1, #0
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fca7 	bl	800a3ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009aac:	2200      	movs	r2, #0
 8009aae:	4912      	ldr	r1, [pc, #72]	; (8009af8 <MX_USB_Device_Init+0x50>)
 8009ab0:	4812      	ldr	r0, [pc, #72]	; (8009afc <MX_USB_Device_Init+0x54>)
 8009ab2:	f7fe fed9 	bl	8008868 <USBD_Init>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009abc:	f7f7 fe1d 	bl	80016fa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009ac0:	490f      	ldr	r1, [pc, #60]	; (8009b00 <MX_USB_Device_Init+0x58>)
 8009ac2:	480e      	ldr	r0, [pc, #56]	; (8009afc <MX_USB_Device_Init+0x54>)
 8009ac4:	f7fe ff00 	bl	80088c8 <USBD_RegisterClass>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009ace:	f7f7 fe14 	bl	80016fa <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009ad2:	490c      	ldr	r1, [pc, #48]	; (8009b04 <MX_USB_Device_Init+0x5c>)
 8009ad4:	4809      	ldr	r0, [pc, #36]	; (8009afc <MX_USB_Device_Init+0x54>)
 8009ad6:	f7fe fe21 	bl	800871c <USBD_CDC_RegisterInterface>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009ae0:	f7f7 fe0b 	bl	80016fa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009ae4:	4805      	ldr	r0, [pc, #20]	; (8009afc <MX_USB_Device_Init+0x54>)
 8009ae6:	f7fe ff16 	bl	8008916 <USBD_Start>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009af0:	f7f7 fe03 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009af4:	bf00      	nop
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20000130 	.word	0x20000130
 8009afc:	20000414 	.word	0x20000414
 8009b00:	20000018 	.word	0x20000018
 8009b04:	2000011c 	.word	0x2000011c

08009b08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4905      	ldr	r1, [pc, #20]	; (8009b24 <CDC_Init_FS+0x1c>)
 8009b10:	4805      	ldr	r0, [pc, #20]	; (8009b28 <CDC_Init_FS+0x20>)
 8009b12:	f7fe fe18 	bl	8008746 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b16:	4905      	ldr	r1, [pc, #20]	; (8009b2c <CDC_Init_FS+0x24>)
 8009b18:	4803      	ldr	r0, [pc, #12]	; (8009b28 <CDC_Init_FS+0x20>)
 8009b1a:	f7fe fe32 	bl	8008782 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	20000f48 	.word	0x20000f48
 8009b28:	20000414 	.word	0x20000414
 8009b2c:	20000748 	.word	0x20000748

08009b30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b30:	b480      	push	{r7}
 8009b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	71fb      	strb	r3, [r7, #7]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	2b23      	cmp	r3, #35	; 0x23
 8009b54:	d84a      	bhi.n	8009bec <CDC_Control_FS+0xac>
 8009b56:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <CDC_Control_FS+0x1c>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009bed 	.word	0x08009bed
 8009b60:	08009bed 	.word	0x08009bed
 8009b64:	08009bed 	.word	0x08009bed
 8009b68:	08009bed 	.word	0x08009bed
 8009b6c:	08009bed 	.word	0x08009bed
 8009b70:	08009bed 	.word	0x08009bed
 8009b74:	08009bed 	.word	0x08009bed
 8009b78:	08009bed 	.word	0x08009bed
 8009b7c:	08009bed 	.word	0x08009bed
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009bed 	.word	0x08009bed
 8009b88:	08009bed 	.word	0x08009bed
 8009b8c:	08009bed 	.word	0x08009bed
 8009b90:	08009bed 	.word	0x08009bed
 8009b94:	08009bed 	.word	0x08009bed
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009bed 	.word	0x08009bed
 8009ba0:	08009bed 	.word	0x08009bed
 8009ba4:	08009bed 	.word	0x08009bed
 8009ba8:	08009bed 	.word	0x08009bed
 8009bac:	08009bed 	.word	0x08009bed
 8009bb0:	08009bed 	.word	0x08009bed
 8009bb4:	08009bed 	.word	0x08009bed
 8009bb8:	08009bed 	.word	0x08009bed
 8009bbc:	08009bed 	.word	0x08009bed
 8009bc0:	08009bed 	.word	0x08009bed
 8009bc4:	08009bed 	.word	0x08009bed
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bed 	.word	0x08009bed
 8009bd0:	08009bed 	.word	0x08009bed
 8009bd4:	08009bed 	.word	0x08009bed
 8009bd8:	08009bed 	.word	0x08009bed
 8009bdc:	08009bed 	.word	0x08009bed
 8009be0:	08009bed 	.word	0x08009bed
 8009be4:	08009bed 	.word	0x08009bed
 8009be8:	08009bed 	.word	0x08009bed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bec:	bf00      	nop
  }

  return (USBD_OK);
 8009bee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint8_t string_check_cmplt[14] = {0x0};
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	f107 0310 	add.w	r3, r7, #16
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	605a      	str	r2, [r3, #4]
 8009c14:	811a      	strh	r2, [r3, #8]
  start_of_flash = 1;
 8009c16:	4b22      	ldr	r3, [pc, #136]	; (8009ca0 <CDC_Receive_FS+0xa4>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	701a      	strb	r2, [r3, #0]
  end_of_coordinate = 0;
 8009c1c:	4b21      	ldr	r3, [pc, #132]	; (8009ca4 <CDC_Receive_FS+0xa8>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	4820      	ldr	r0, [pc, #128]	; (8009ca8 <CDC_Receive_FS+0xac>)
 8009c26:	f7fe fdac 	bl	8008782 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c2a:	481f      	ldr	r0, [pc, #124]	; (8009ca8 <CDC_Receive_FS+0xac>)
 8009c2c:	f7fe fdf2 	bl	8008814 <USBD_CDC_ReceivePacket>
  strcat(RX_BUFFER,Buf);
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	481e      	ldr	r0, [pc, #120]	; (8009cac <CDC_Receive_FS+0xb0>)
 8009c34:	f001 fbb9 	bl	800b3aa <strcat>

  /* if we found the END OF FLASH COMMAND*/
  for(int i=0;i<13;i++){
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61fb      	str	r3, [r7, #28]
 8009c3c:	e00c      	b.n	8009c58 <CDC_Receive_FS+0x5c>
	  string_check_cmplt[i] = RX_BUFFER[i];
 8009c3e:	4a1b      	ldr	r2, [pc, #108]	; (8009cac <CDC_Receive_FS+0xb0>)
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	4413      	add	r3, r2
 8009c44:	7819      	ldrb	r1, [r3, #0]
 8009c46:	f107 020c 	add.w	r2, r7, #12
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	460a      	mov	r2, r1
 8009c50:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<13;i++){
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	3301      	adds	r3, #1
 8009c56:	61fb      	str	r3, [r7, #28]
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	2b0c      	cmp	r3, #12
 8009c5c:	ddef      	ble.n	8009c3e <CDC_Receive_FS+0x42>
  }
  if(strcmp(string_check_cmplt,"FLASH_CMPLT\r\n") == 0x00){
 8009c5e:	f107 030c 	add.w	r3, r7, #12
 8009c62:	4913      	ldr	r1, [pc, #76]	; (8009cb0 <CDC_Receive_FS+0xb4>)
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7f6 fadb 	bl	8000220 <strcmp>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d107      	bne.n	8009c80 <CDC_Receive_FS+0x84>
	  end_of_flash = 1;
 8009c70:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <CDC_Receive_FS+0xb8>)
 8009c72:	2201      	movs	r2, #1
 8009c74:	701a      	strb	r2, [r3, #0]
	  /* clear the RX_BUFFER_ARRAY */
	  memset(RX_BUFFER, 0, sizeof(RX_BUFFER));
 8009c76:	2264      	movs	r2, #100	; 0x64
 8009c78:	2100      	movs	r1, #0
 8009c7a:	480c      	ldr	r0, [pc, #48]	; (8009cac <CDC_Receive_FS+0xb0>)
 8009c7c:	f001 fb8d 	bl	800b39a <memset>
  }

  /* If the received char is \n then it mean end of coordinate */
  if(Buf[(*Len -1)] == '\n'){
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	4413      	add	r3, r2
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b0a      	cmp	r3, #10
 8009c8e:	d102      	bne.n	8009c96 <CDC_Receive_FS+0x9a>
	  end_of_coordinate = 1;
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <CDC_Receive_FS+0xa8>)
 8009c92:	2201      	movs	r2, #1
 8009c94:	701a      	strb	r2, [r3, #0]
  }


  return (USBD_OK);
 8009c96:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3720      	adds	r7, #32
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	20000368 	.word	0x20000368
 8009ca4:	2000036a 	.word	0x2000036a
 8009ca8:	20000414 	.word	0x20000414
 8009cac:	200006e4 	.word	0x200006e4
 8009cb0:	0800d2d0 	.word	0x0800d2d0
 8009cb4:	20000369 	.word	0x20000369

08009cb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cc8:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <CDC_Transmit_FS+0x48>)
 8009cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e00b      	b.n	8009cf6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cde:	887b      	ldrh	r3, [r7, #2]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	4806      	ldr	r0, [pc, #24]	; (8009d00 <CDC_Transmit_FS+0x48>)
 8009ce6:	f7fe fd2e 	bl	8008746 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cea:	4805      	ldr	r0, [pc, #20]	; (8009d00 <CDC_Transmit_FS+0x48>)
 8009cec:	f7fe fd62 	bl	80087b4 <USBD_CDC_TransmitPacket>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000414 	.word	0x20000414

08009d04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
	...

08009d28 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2212      	movs	r2, #18
 8009d38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d3a:	4b03      	ldr	r3, [pc, #12]	; (8009d48 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	20000150 	.word	0x20000150

08009d4c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4603      	mov	r3, r0
 8009d54:	6039      	str	r1, [r7, #0]
 8009d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2204      	movs	r2, #4
 8009d5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d5e:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	20000164 	.word	0x20000164

08009d70 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	6039      	str	r1, [r7, #0]
 8009d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d105      	bne.n	8009d8e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	4907      	ldr	r1, [pc, #28]	; (8009da4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d86:	4808      	ldr	r0, [pc, #32]	; (8009da8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d88:	f7ff fdad 	bl	80098e6 <USBD_GetString>
 8009d8c:	e004      	b.n	8009d98 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	4904      	ldr	r1, [pc, #16]	; (8009da4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d92:	4805      	ldr	r0, [pc, #20]	; (8009da8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d94:	f7ff fda7 	bl	80098e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20001748 	.word	0x20001748
 8009da8:	0800d2e0 	.word	0x0800d2e0

08009dac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	4904      	ldr	r1, [pc, #16]	; (8009dcc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009dbc:	4804      	ldr	r0, [pc, #16]	; (8009dd0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009dbe:	f7ff fd92 	bl	80098e6 <USBD_GetString>
  return USBD_StrDesc;
 8009dc2:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20001748 	.word	0x20001748
 8009dd0:	0800d2f8 	.word	0x0800d2f8

08009dd4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	6039      	str	r1, [r7, #0]
 8009dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	221a      	movs	r2, #26
 8009de4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009de6:	f000 f843 	bl	8009e70 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009dea:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20000168 	.word	0x20000168

08009df8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e04:	79fb      	ldrb	r3, [r7, #7]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d105      	bne.n	8009e16 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	4907      	ldr	r1, [pc, #28]	; (8009e2c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e0e:	4808      	ldr	r0, [pc, #32]	; (8009e30 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e10:	f7ff fd69 	bl	80098e6 <USBD_GetString>
 8009e14:	e004      	b.n	8009e20 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	4904      	ldr	r1, [pc, #16]	; (8009e2c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e1a:	4805      	ldr	r0, [pc, #20]	; (8009e30 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e1c:	f7ff fd63 	bl	80098e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20001748 	.word	0x20001748
 8009e30:	0800d30c 	.word	0x0800d30c

08009e34 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	6039      	str	r1, [r7, #0]
 8009e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d105      	bne.n	8009e52 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	4907      	ldr	r1, [pc, #28]	; (8009e68 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e4a:	4808      	ldr	r0, [pc, #32]	; (8009e6c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e4c:	f7ff fd4b 	bl	80098e6 <USBD_GetString>
 8009e50:	e004      	b.n	8009e5c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	4904      	ldr	r1, [pc, #16]	; (8009e68 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e56:	4805      	ldr	r0, [pc, #20]	; (8009e6c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e58:	f7ff fd45 	bl	80098e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e5c:	4b02      	ldr	r3, [pc, #8]	; (8009e68 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20001748 	.word	0x20001748
 8009e6c:	0800d318 	.word	0x0800d318

08009e70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e76:	4b0f      	ldr	r3, [pc, #60]	; (8009eb4 <Get_SerialNum+0x44>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e7c:	4b0e      	ldr	r3, [pc, #56]	; (8009eb8 <Get_SerialNum+0x48>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e82:	4b0e      	ldr	r3, [pc, #56]	; (8009ebc <Get_SerialNum+0x4c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d009      	beq.n	8009eaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e96:	2208      	movs	r2, #8
 8009e98:	4909      	ldr	r1, [pc, #36]	; (8009ec0 <Get_SerialNum+0x50>)
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f000 f814 	bl	8009ec8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	4908      	ldr	r1, [pc, #32]	; (8009ec4 <Get_SerialNum+0x54>)
 8009ea4:	68b8      	ldr	r0, [r7, #8]
 8009ea6:	f000 f80f 	bl	8009ec8 <IntToUnicode>
  }
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	1fff7590 	.word	0x1fff7590
 8009eb8:	1fff7594 	.word	0x1fff7594
 8009ebc:	1fff7598 	.word	0x1fff7598
 8009ec0:	2000016a 	.word	0x2000016a
 8009ec4:	2000017a 	.word	0x2000017a

08009ec8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b087      	sub	sp, #28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eda:	2300      	movs	r3, #0
 8009edc:	75fb      	strb	r3, [r7, #23]
 8009ede:	e027      	b.n	8009f30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	0f1b      	lsrs	r3, r3, #28
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d80b      	bhi.n	8009f00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	0f1b      	lsrs	r3, r3, #28
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	440b      	add	r3, r1
 8009ef8:	3230      	adds	r2, #48	; 0x30
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	701a      	strb	r2, [r3, #0]
 8009efe:	e00a      	b.n	8009f16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	0f1b      	lsrs	r3, r3, #28
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	440b      	add	r3, r1
 8009f10:	3237      	adds	r2, #55	; 0x37
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	3301      	adds	r3, #1
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	4413      	add	r3, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	75fb      	strb	r3, [r7, #23]
 8009f30:	7dfa      	ldrb	r2, [r7, #23]
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d3d3      	bcc.n	8009ee0 <IntToUnicode+0x18>
  }
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
	...

08009f48 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b098      	sub	sp, #96	; 0x60
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f50:	f107 030c 	add.w	r3, r7, #12
 8009f54:	2254      	movs	r2, #84	; 0x54
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fa1e 	bl	800b39a <memset>
  if(pcdHandle->Instance==USB)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a15      	ldr	r2, [pc, #84]	; (8009fb8 <HAL_PCD_MspInit+0x70>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d122      	bne.n	8009fae <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f6c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f72:	f107 030c 	add.w	r3, r7, #12
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fa fcf0 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009f82:	f7f7 fbba 	bl	80016fa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f86:	4b0d      	ldr	r3, [pc, #52]	; (8009fbc <HAL_PCD_MspInit+0x74>)
 8009f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8a:	4a0c      	ldr	r2, [pc, #48]	; (8009fbc <HAL_PCD_MspInit+0x74>)
 8009f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f90:	6593      	str	r3, [r2, #88]	; 0x58
 8009f92:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <HAL_PCD_MspInit+0x74>)
 8009f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f9a:	60bb      	str	r3, [r7, #8]
 8009f9c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	2014      	movs	r0, #20
 8009fa4:	f7f7 fed3 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009fa8:	2014      	movs	r0, #20
 8009faa:	f7f7 feea 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fae:	bf00      	nop
 8009fb0:	3760      	adds	r7, #96	; 0x60
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	40005c00 	.word	0x40005c00
 8009fbc:	40021000 	.word	0x40021000

08009fc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe fce8 	bl	80089ac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	440b      	add	r3, r1
 800a004:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	4619      	mov	r1, r3
 800a00e:	f7fe fd22 	bl	8008a56 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	6879      	ldr	r1, [r7, #4]
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	440b      	add	r3, r1
 800a03a:	333c      	adds	r3, #60	; 0x3c
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	4619      	mov	r1, r3
 800a042:	f7fe fd6b 	bl	8008b1c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fe7f 	bl	8008d60 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a072:	2301      	movs	r3, #1
 800a074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d001      	beq.n	800a082 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a07e:	f7f7 fb3c 	bl	80016fa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a088:	7bfa      	ldrb	r2, [r7, #15]
 800a08a:	4611      	mov	r1, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fe29 	bl	8008ce4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fdd5 	bl	8008c48 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a09e:	bf00      	nop
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fe24 	bl	8008d04 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0c4:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <HAL_PCD_SuspendCallback+0x30>)
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	4a03      	ldr	r2, [pc, #12]	; (800a0d8 <HAL_PCD_SuspendCallback+0x30>)
 800a0ca:	f043 0306 	orr.w	r3, r3, #6
 800a0ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	e000ed00 	.word	0xe000ed00

0800a0dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d007      	beq.n	800a0fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0ec:	4b08      	ldr	r3, [pc, #32]	; (800a110 <HAL_PCD_ResumeCallback+0x34>)
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	4a07      	ldr	r2, [pc, #28]	; (800a110 <HAL_PCD_ResumeCallback+0x34>)
 800a0f2:	f023 0306 	bic.w	r3, r3, #6
 800a0f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a0f8:	f000 f9fa 	bl	800a4f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fe14 	bl	8008d30 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	e000ed00 	.word	0xe000ed00

0800a114 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a11c:	4a2b      	ldr	r2, [pc, #172]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a29      	ldr	r2, [pc, #164]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a128:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a12c:	4b27      	ldr	r3, [pc, #156]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a12e:	4a28      	ldr	r2, [pc, #160]	; (800a1d0 <USBD_LL_Init+0xbc>)
 800a130:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a132:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a134:	2208      	movs	r2, #8
 800a136:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a138:	4b24      	ldr	r3, [pc, #144]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a13a:	2202      	movs	r2, #2
 800a13c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a13e:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a140:	2202      	movs	r2, #2
 800a142:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a144:	4b21      	ldr	r3, [pc, #132]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a146:	2200      	movs	r2, #0
 800a148:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a14a:	4b20      	ldr	r3, [pc, #128]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a150:	4b1e      	ldr	r3, [pc, #120]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a152:	2200      	movs	r2, #0
 800a154:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a156:	4b1d      	ldr	r3, [pc, #116]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a158:	2200      	movs	r2, #0
 800a15a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a15c:	481b      	ldr	r0, [pc, #108]	; (800a1cc <USBD_LL_Init+0xb8>)
 800a15e:	f7f8 f8a7 	bl	80022b0 <HAL_PCD_Init>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a168:	f7f7 fac7 	bl	80016fa <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a172:	2318      	movs	r3, #24
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	f7f9 fd60 	bl	8003c3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a182:	2358      	movs	r3, #88	; 0x58
 800a184:	2200      	movs	r2, #0
 800a186:	2180      	movs	r1, #128	; 0x80
 800a188:	f7f9 fd58 	bl	8003c3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a192:	23c0      	movs	r3, #192	; 0xc0
 800a194:	2200      	movs	r2, #0
 800a196:	2181      	movs	r1, #129	; 0x81
 800a198:	f7f9 fd50 	bl	8003c3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	f7f9 fd47 	bl	8003c3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2182      	movs	r1, #130	; 0x82
 800a1bc:	f7f9 fd3e 	bl	8003c3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20001948 	.word	0x20001948
 800a1d0:	40005c00 	.word	0x40005c00

0800a1d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7f8 f945 	bl	800247a <HAL_PCD_Start>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f980 	bl	800a4fc <USBD_Get_USB_Status>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a200:	7bbb      	ldrb	r3, [r7, #14]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	4608      	mov	r0, r1
 800a214:	4611      	mov	r1, r2
 800a216:	461a      	mov	r2, r3
 800a218:	4603      	mov	r3, r0
 800a21a:	70fb      	strb	r3, [r7, #3]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70bb      	strb	r3, [r7, #2]
 800a220:	4613      	mov	r3, r2
 800a222:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a232:	78bb      	ldrb	r3, [r7, #2]
 800a234:	883a      	ldrh	r2, [r7, #0]
 800a236:	78f9      	ldrb	r1, [r7, #3]
 800a238:	f7f8 fa8d 	bl	8002756 <HAL_PCD_EP_Open>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f95a 	bl	800a4fc <USBD_Get_USB_Status>
 800a248:	4603      	mov	r3, r0
 800a24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	460b      	mov	r3, r1
 800a260:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a270:	78fa      	ldrb	r2, [r7, #3]
 800a272:	4611      	mov	r1, r2
 800a274:	4618      	mov	r0, r3
 800a276:	f7f8 fad4 	bl	8002822 <HAL_PCD_EP_Close>
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 f93b 	bl	800a4fc <USBD_Get_USB_Status>
 800a286:	4603      	mov	r3, r0
 800a288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2ae:	78fa      	ldrb	r2, [r7, #3]
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7f8 fb95 	bl	80029e2 <HAL_PCD_EP_SetStall>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 f91c 	bl	800a4fc <USBD_Get_USB_Status>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2ec:	78fa      	ldrb	r2, [r7, #3]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7f8 fbc8 	bl	8002a86 <HAL_PCD_EP_ClrStall>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 f8fd 	bl	800a4fc <USBD_Get_USB_Status>
 800a302:	4603      	mov	r3, r0
 800a304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a306:	7bbb      	ldrb	r3, [r7, #14]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a322:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	da0c      	bge.n	800a346 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a32c:	78fb      	ldrb	r3, [r7, #3]
 800a32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a332:	68f9      	ldr	r1, [r7, #12]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	00db      	lsls	r3, r3, #3
 800a33e:	440b      	add	r3, r1
 800a340:	3302      	adds	r3, #2
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	e00b      	b.n	800a35e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a34c:	68f9      	ldr	r1, [r7, #12]
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	440b      	add	r3, r1
 800a358:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a35c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	460b      	mov	r3, r1
 800a374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a384:	78fa      	ldrb	r2, [r7, #3]
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f7f8 f9bf 	bl	800270c <HAL_PCD_SetAddress>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f8b1 	bl	800a4fc <USBD_Get_USB_Status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3c6:	7af9      	ldrb	r1, [r7, #11]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	f7f8 fac6 	bl	800295c <HAL_PCD_EP_Transmit>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f890 	bl	800a4fc <USBD_Get_USB_Status>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b086      	sub	sp, #24
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a408:	7af9      	ldrb	r1, [r7, #11]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	f7f8 fa50 	bl	80028b2 <HAL_PCD_EP_Receive>
 800a412:	4603      	mov	r3, r0
 800a414:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 f86f 	bl	800a4fc <USBD_Get_USB_Status>
 800a41e:	4603      	mov	r3, r0
 800a420:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a422:	7dbb      	ldrb	r3, [r7, #22]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f7f8 fa72 	bl	800292c <HAL_PCD_EP_GetRxCount>
 800a448:	4603      	mov	r3, r0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <HAL_PCDEx_LPM_Callback+0x18>
 800a466:	2b01      	cmp	r3, #1
 800a468:	d013      	beq.n	800a492 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a46a:	e023      	b.n	800a4b4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d007      	beq.n	800a484 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a474:	f000 f83c 	bl	800a4f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a478:	4b10      	ldr	r3, [pc, #64]	; (800a4bc <HAL_PCDEx_LPM_Callback+0x68>)
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	4a0f      	ldr	r2, [pc, #60]	; (800a4bc <HAL_PCDEx_LPM_Callback+0x68>)
 800a47e:	f023 0306 	bic.w	r3, r3, #6
 800a482:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fc50 	bl	8008d30 <USBD_LL_Resume>
    break;
 800a490:	e010      	b.n	800a4b4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fc33 	bl	8008d04 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4a6:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <HAL_PCDEx_LPM_Callback+0x68>)
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	4a04      	ldr	r2, [pc, #16]	; (800a4bc <HAL_PCDEx_LPM_Callback+0x68>)
 800a4ac:	f043 0306 	orr.w	r3, r3, #6
 800a4b0:	6113      	str	r3, [r2, #16]
    break;
 800a4b2:	bf00      	nop
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	e000ed00 	.word	0xe000ed00

0800a4c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4c8:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <USBD_static_malloc+0x18>)
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	20001c3c 	.word	0x20001c3c

0800a4dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]

}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a4f4:	f7f6 ff88 	bl	8001408 <SystemClock_Config>
}
 800a4f8:	bf00      	nop
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d817      	bhi.n	800a540 <USBD_Get_USB_Status+0x44>
 800a510:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <USBD_Get_USB_Status+0x1c>)
 800a512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a516:	bf00      	nop
 800a518:	0800a529 	.word	0x0800a529
 800a51c:	0800a52f 	.word	0x0800a52f
 800a520:	0800a535 	.word	0x0800a535
 800a524:	0800a53b 	.word	0x0800a53b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	73fb      	strb	r3, [r7, #15]
    break;
 800a52c:	e00b      	b.n	800a546 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a52e:	2303      	movs	r3, #3
 800a530:	73fb      	strb	r3, [r7, #15]
    break;
 800a532:	e008      	b.n	800a546 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a534:	2301      	movs	r3, #1
 800a536:	73fb      	strb	r3, [r7, #15]
    break;
 800a538:	e005      	b.n	800a546 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a53a:	2303      	movs	r3, #3
 800a53c:	73fb      	strb	r3, [r7, #15]
    break;
 800a53e:	e002      	b.n	800a546 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a540:	2303      	movs	r3, #3
 800a542:	73fb      	strb	r3, [r7, #15]
    break;
 800a544:	bf00      	nop
  }
  return usb_status;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <atof>:
 800a554:	2100      	movs	r1, #0
 800a556:	f000 be0f 	b.w	800b178 <strtod>

0800a55a <sulp>:
 800a55a:	b570      	push	{r4, r5, r6, lr}
 800a55c:	4604      	mov	r4, r0
 800a55e:	460d      	mov	r5, r1
 800a560:	ec45 4b10 	vmov	d0, r4, r5
 800a564:	4616      	mov	r6, r2
 800a566:	f001 ff99 	bl	800c49c <__ulp>
 800a56a:	ec51 0b10 	vmov	r0, r1, d0
 800a56e:	b17e      	cbz	r6, 800a590 <sulp+0x36>
 800a570:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a574:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a578:	2b00      	cmp	r3, #0
 800a57a:	dd09      	ble.n	800a590 <sulp+0x36>
 800a57c:	051b      	lsls	r3, r3, #20
 800a57e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a582:	2400      	movs	r4, #0
 800a584:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a588:	4622      	mov	r2, r4
 800a58a:	462b      	mov	r3, r5
 800a58c:	f7f6 f864 	bl	8000658 <__aeabi_dmul>
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	0000      	movs	r0, r0
 800a594:	0000      	movs	r0, r0
	...

0800a598 <_strtod_l>:
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	ed2d 8b02 	vpush	{d8}
 800a5a0:	b09b      	sub	sp, #108	; 0x6c
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	9213      	str	r2, [sp, #76]	; 0x4c
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	9216      	str	r2, [sp, #88]	; 0x58
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	f04f 0800 	mov.w	r8, #0
 800a5b0:	f04f 0900 	mov.w	r9, #0
 800a5b4:	460a      	mov	r2, r1
 800a5b6:	9215      	str	r2, [sp, #84]	; 0x54
 800a5b8:	7811      	ldrb	r1, [r2, #0]
 800a5ba:	292b      	cmp	r1, #43	; 0x2b
 800a5bc:	d04c      	beq.n	800a658 <_strtod_l+0xc0>
 800a5be:	d83a      	bhi.n	800a636 <_strtod_l+0x9e>
 800a5c0:	290d      	cmp	r1, #13
 800a5c2:	d834      	bhi.n	800a62e <_strtod_l+0x96>
 800a5c4:	2908      	cmp	r1, #8
 800a5c6:	d834      	bhi.n	800a632 <_strtod_l+0x9a>
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	d03d      	beq.n	800a648 <_strtod_l+0xb0>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	920a      	str	r2, [sp, #40]	; 0x28
 800a5d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a5d2:	7832      	ldrb	r2, [r6, #0]
 800a5d4:	2a30      	cmp	r2, #48	; 0x30
 800a5d6:	f040 80b4 	bne.w	800a742 <_strtod_l+0x1aa>
 800a5da:	7872      	ldrb	r2, [r6, #1]
 800a5dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a5e0:	2a58      	cmp	r2, #88	; 0x58
 800a5e2:	d170      	bne.n	800a6c6 <_strtod_l+0x12e>
 800a5e4:	9302      	str	r3, [sp, #8]
 800a5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	ab16      	add	r3, sp, #88	; 0x58
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4a8e      	ldr	r2, [pc, #568]	; (800a828 <_strtod_l+0x290>)
 800a5f0:	ab17      	add	r3, sp, #92	; 0x5c
 800a5f2:	a915      	add	r1, sp, #84	; 0x54
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f001 f837 	bl	800b668 <__gethex>
 800a5fa:	f010 070f 	ands.w	r7, r0, #15
 800a5fe:	4605      	mov	r5, r0
 800a600:	d005      	beq.n	800a60e <_strtod_l+0x76>
 800a602:	2f06      	cmp	r7, #6
 800a604:	d12a      	bne.n	800a65c <_strtod_l+0xc4>
 800a606:	3601      	adds	r6, #1
 800a608:	2300      	movs	r3, #0
 800a60a:	9615      	str	r6, [sp, #84]	; 0x54
 800a60c:	930a      	str	r3, [sp, #40]	; 0x28
 800a60e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a610:	2b00      	cmp	r3, #0
 800a612:	f040 857f 	bne.w	800b114 <_strtod_l+0xb7c>
 800a616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a618:	b1db      	cbz	r3, 800a652 <_strtod_l+0xba>
 800a61a:	4642      	mov	r2, r8
 800a61c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a620:	ec43 2b10 	vmov	d0, r2, r3
 800a624:	b01b      	add	sp, #108	; 0x6c
 800a626:	ecbd 8b02 	vpop	{d8}
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	2920      	cmp	r1, #32
 800a630:	d1cc      	bne.n	800a5cc <_strtod_l+0x34>
 800a632:	3201      	adds	r2, #1
 800a634:	e7bf      	b.n	800a5b6 <_strtod_l+0x1e>
 800a636:	292d      	cmp	r1, #45	; 0x2d
 800a638:	d1c8      	bne.n	800a5cc <_strtod_l+0x34>
 800a63a:	2101      	movs	r1, #1
 800a63c:	910a      	str	r1, [sp, #40]	; 0x28
 800a63e:	1c51      	adds	r1, r2, #1
 800a640:	9115      	str	r1, [sp, #84]	; 0x54
 800a642:	7852      	ldrb	r2, [r2, #1]
 800a644:	2a00      	cmp	r2, #0
 800a646:	d1c3      	bne.n	800a5d0 <_strtod_l+0x38>
 800a648:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a64a:	9515      	str	r5, [sp, #84]	; 0x54
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 855f 	bne.w	800b110 <_strtod_l+0xb78>
 800a652:	4642      	mov	r2, r8
 800a654:	464b      	mov	r3, r9
 800a656:	e7e3      	b.n	800a620 <_strtod_l+0x88>
 800a658:	2100      	movs	r1, #0
 800a65a:	e7ef      	b.n	800a63c <_strtod_l+0xa4>
 800a65c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a65e:	b13a      	cbz	r2, 800a670 <_strtod_l+0xd8>
 800a660:	2135      	movs	r1, #53	; 0x35
 800a662:	a818      	add	r0, sp, #96	; 0x60
 800a664:	f002 f817 	bl	800c696 <__copybits>
 800a668:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a66a:	4620      	mov	r0, r4
 800a66c:	f001 fbea 	bl	800be44 <_Bfree>
 800a670:	3f01      	subs	r7, #1
 800a672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a674:	2f04      	cmp	r7, #4
 800a676:	d806      	bhi.n	800a686 <_strtod_l+0xee>
 800a678:	e8df f007 	tbb	[pc, r7]
 800a67c:	201d0314 	.word	0x201d0314
 800a680:	14          	.byte	0x14
 800a681:	00          	.byte	0x00
 800a682:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a686:	05e9      	lsls	r1, r5, #23
 800a688:	bf48      	it	mi
 800a68a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a68e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a692:	0d1b      	lsrs	r3, r3, #20
 800a694:	051b      	lsls	r3, r3, #20
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1b9      	bne.n	800a60e <_strtod_l+0x76>
 800a69a:	f000 feed 	bl	800b478 <__errno>
 800a69e:	2322      	movs	r3, #34	; 0x22
 800a6a0:	6003      	str	r3, [r0, #0]
 800a6a2:	e7b4      	b.n	800a60e <_strtod_l+0x76>
 800a6a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a6a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a6ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a6b4:	e7e7      	b.n	800a686 <_strtod_l+0xee>
 800a6b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a830 <_strtod_l+0x298>
 800a6ba:	e7e4      	b.n	800a686 <_strtod_l+0xee>
 800a6bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a6c0:	f04f 38ff 	mov.w	r8, #4294967295
 800a6c4:	e7df      	b.n	800a686 <_strtod_l+0xee>
 800a6c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	9215      	str	r2, [sp, #84]	; 0x54
 800a6cc:	785b      	ldrb	r3, [r3, #1]
 800a6ce:	2b30      	cmp	r3, #48	; 0x30
 800a6d0:	d0f9      	beq.n	800a6c6 <_strtod_l+0x12e>
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d09b      	beq.n	800a60e <_strtod_l+0x76>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	f04f 0a00 	mov.w	sl, #0
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a6e6:	46d3      	mov	fp, sl
 800a6e8:	220a      	movs	r2, #10
 800a6ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a6ec:	7806      	ldrb	r6, [r0, #0]
 800a6ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6f2:	b2d9      	uxtb	r1, r3
 800a6f4:	2909      	cmp	r1, #9
 800a6f6:	d926      	bls.n	800a746 <_strtod_l+0x1ae>
 800a6f8:	494c      	ldr	r1, [pc, #304]	; (800a82c <_strtod_l+0x294>)
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f000 fe64 	bl	800b3c8 <strncmp>
 800a700:	2800      	cmp	r0, #0
 800a702:	d030      	beq.n	800a766 <_strtod_l+0x1ce>
 800a704:	2000      	movs	r0, #0
 800a706:	4632      	mov	r2, r6
 800a708:	9005      	str	r0, [sp, #20]
 800a70a:	465e      	mov	r6, fp
 800a70c:	4603      	mov	r3, r0
 800a70e:	2a65      	cmp	r2, #101	; 0x65
 800a710:	d001      	beq.n	800a716 <_strtod_l+0x17e>
 800a712:	2a45      	cmp	r2, #69	; 0x45
 800a714:	d113      	bne.n	800a73e <_strtod_l+0x1a6>
 800a716:	b91e      	cbnz	r6, 800a720 <_strtod_l+0x188>
 800a718:	9a04      	ldr	r2, [sp, #16]
 800a71a:	4302      	orrs	r2, r0
 800a71c:	d094      	beq.n	800a648 <_strtod_l+0xb0>
 800a71e:	2600      	movs	r6, #0
 800a720:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a722:	1c6a      	adds	r2, r5, #1
 800a724:	9215      	str	r2, [sp, #84]	; 0x54
 800a726:	786a      	ldrb	r2, [r5, #1]
 800a728:	2a2b      	cmp	r2, #43	; 0x2b
 800a72a:	d074      	beq.n	800a816 <_strtod_l+0x27e>
 800a72c:	2a2d      	cmp	r2, #45	; 0x2d
 800a72e:	d078      	beq.n	800a822 <_strtod_l+0x28a>
 800a730:	f04f 0c00 	mov.w	ip, #0
 800a734:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a738:	2909      	cmp	r1, #9
 800a73a:	d97f      	bls.n	800a83c <_strtod_l+0x2a4>
 800a73c:	9515      	str	r5, [sp, #84]	; 0x54
 800a73e:	2700      	movs	r7, #0
 800a740:	e09e      	b.n	800a880 <_strtod_l+0x2e8>
 800a742:	2300      	movs	r3, #0
 800a744:	e7c8      	b.n	800a6d8 <_strtod_l+0x140>
 800a746:	f1bb 0f08 	cmp.w	fp, #8
 800a74a:	bfd8      	it	le
 800a74c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a74e:	f100 0001 	add.w	r0, r0, #1
 800a752:	bfda      	itte	le
 800a754:	fb02 3301 	mlale	r3, r2, r1, r3
 800a758:	9309      	strle	r3, [sp, #36]	; 0x24
 800a75a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a75e:	f10b 0b01 	add.w	fp, fp, #1
 800a762:	9015      	str	r0, [sp, #84]	; 0x54
 800a764:	e7c1      	b.n	800a6ea <_strtod_l+0x152>
 800a766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	9215      	str	r2, [sp, #84]	; 0x54
 800a76c:	785a      	ldrb	r2, [r3, #1]
 800a76e:	f1bb 0f00 	cmp.w	fp, #0
 800a772:	d037      	beq.n	800a7e4 <_strtod_l+0x24c>
 800a774:	9005      	str	r0, [sp, #20]
 800a776:	465e      	mov	r6, fp
 800a778:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	d912      	bls.n	800a7a6 <_strtod_l+0x20e>
 800a780:	2301      	movs	r3, #1
 800a782:	e7c4      	b.n	800a70e <_strtod_l+0x176>
 800a784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	9215      	str	r2, [sp, #84]	; 0x54
 800a78a:	785a      	ldrb	r2, [r3, #1]
 800a78c:	3001      	adds	r0, #1
 800a78e:	2a30      	cmp	r2, #48	; 0x30
 800a790:	d0f8      	beq.n	800a784 <_strtod_l+0x1ec>
 800a792:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a796:	2b08      	cmp	r3, #8
 800a798:	f200 84c1 	bhi.w	800b11e <_strtod_l+0xb86>
 800a79c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a79e:	9005      	str	r0, [sp, #20]
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	3a30      	subs	r2, #48	; 0x30
 800a7a8:	f100 0301 	add.w	r3, r0, #1
 800a7ac:	d014      	beq.n	800a7d8 <_strtod_l+0x240>
 800a7ae:	9905      	ldr	r1, [sp, #20]
 800a7b0:	4419      	add	r1, r3
 800a7b2:	9105      	str	r1, [sp, #20]
 800a7b4:	4633      	mov	r3, r6
 800a7b6:	eb00 0c06 	add.w	ip, r0, r6
 800a7ba:	210a      	movs	r1, #10
 800a7bc:	4563      	cmp	r3, ip
 800a7be:	d113      	bne.n	800a7e8 <_strtod_l+0x250>
 800a7c0:	1833      	adds	r3, r6, r0
 800a7c2:	2b08      	cmp	r3, #8
 800a7c4:	f106 0601 	add.w	r6, r6, #1
 800a7c8:	4406      	add	r6, r0
 800a7ca:	dc1a      	bgt.n	800a802 <_strtod_l+0x26a>
 800a7cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ce:	230a      	movs	r3, #10
 800a7d0:	fb03 2301 	mla	r3, r3, r1, r2
 800a7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7da:	1c51      	adds	r1, r2, #1
 800a7dc:	9115      	str	r1, [sp, #84]	; 0x54
 800a7de:	7852      	ldrb	r2, [r2, #1]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	e7c9      	b.n	800a778 <_strtod_l+0x1e0>
 800a7e4:	4658      	mov	r0, fp
 800a7e6:	e7d2      	b.n	800a78e <_strtod_l+0x1f6>
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	f103 0301 	add.w	r3, r3, #1
 800a7ee:	dc03      	bgt.n	800a7f8 <_strtod_l+0x260>
 800a7f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a7f2:	434f      	muls	r7, r1
 800a7f4:	9709      	str	r7, [sp, #36]	; 0x24
 800a7f6:	e7e1      	b.n	800a7bc <_strtod_l+0x224>
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	bfd8      	it	le
 800a7fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a800:	e7dc      	b.n	800a7bc <_strtod_l+0x224>
 800a802:	2e10      	cmp	r6, #16
 800a804:	bfdc      	itt	le
 800a806:	230a      	movle	r3, #10
 800a808:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a80c:	e7e3      	b.n	800a7d6 <_strtod_l+0x23e>
 800a80e:	2300      	movs	r3, #0
 800a810:	9305      	str	r3, [sp, #20]
 800a812:	2301      	movs	r3, #1
 800a814:	e780      	b.n	800a718 <_strtod_l+0x180>
 800a816:	f04f 0c00 	mov.w	ip, #0
 800a81a:	1caa      	adds	r2, r5, #2
 800a81c:	9215      	str	r2, [sp, #84]	; 0x54
 800a81e:	78aa      	ldrb	r2, [r5, #2]
 800a820:	e788      	b.n	800a734 <_strtod_l+0x19c>
 800a822:	f04f 0c01 	mov.w	ip, #1
 800a826:	e7f8      	b.n	800a81a <_strtod_l+0x282>
 800a828:	0800d348 	.word	0x0800d348
 800a82c:	0800d338 	.word	0x0800d338
 800a830:	7ff00000 	.word	0x7ff00000
 800a834:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a836:	1c51      	adds	r1, r2, #1
 800a838:	9115      	str	r1, [sp, #84]	; 0x54
 800a83a:	7852      	ldrb	r2, [r2, #1]
 800a83c:	2a30      	cmp	r2, #48	; 0x30
 800a83e:	d0f9      	beq.n	800a834 <_strtod_l+0x29c>
 800a840:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a844:	2908      	cmp	r1, #8
 800a846:	f63f af7a 	bhi.w	800a73e <_strtod_l+0x1a6>
 800a84a:	3a30      	subs	r2, #48	; 0x30
 800a84c:	9208      	str	r2, [sp, #32]
 800a84e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a850:	920c      	str	r2, [sp, #48]	; 0x30
 800a852:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a854:	1c57      	adds	r7, r2, #1
 800a856:	9715      	str	r7, [sp, #84]	; 0x54
 800a858:	7852      	ldrb	r2, [r2, #1]
 800a85a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a85e:	f1be 0f09 	cmp.w	lr, #9
 800a862:	d938      	bls.n	800a8d6 <_strtod_l+0x33e>
 800a864:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a866:	1a7f      	subs	r7, r7, r1
 800a868:	2f08      	cmp	r7, #8
 800a86a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a86e:	dc03      	bgt.n	800a878 <_strtod_l+0x2e0>
 800a870:	9908      	ldr	r1, [sp, #32]
 800a872:	428f      	cmp	r7, r1
 800a874:	bfa8      	it	ge
 800a876:	460f      	movge	r7, r1
 800a878:	f1bc 0f00 	cmp.w	ip, #0
 800a87c:	d000      	beq.n	800a880 <_strtod_l+0x2e8>
 800a87e:	427f      	negs	r7, r7
 800a880:	2e00      	cmp	r6, #0
 800a882:	d14f      	bne.n	800a924 <_strtod_l+0x38c>
 800a884:	9904      	ldr	r1, [sp, #16]
 800a886:	4301      	orrs	r1, r0
 800a888:	f47f aec1 	bne.w	800a60e <_strtod_l+0x76>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f47f aedb 	bne.w	800a648 <_strtod_l+0xb0>
 800a892:	2a69      	cmp	r2, #105	; 0x69
 800a894:	d029      	beq.n	800a8ea <_strtod_l+0x352>
 800a896:	dc26      	bgt.n	800a8e6 <_strtod_l+0x34e>
 800a898:	2a49      	cmp	r2, #73	; 0x49
 800a89a:	d026      	beq.n	800a8ea <_strtod_l+0x352>
 800a89c:	2a4e      	cmp	r2, #78	; 0x4e
 800a89e:	f47f aed3 	bne.w	800a648 <_strtod_l+0xb0>
 800a8a2:	499b      	ldr	r1, [pc, #620]	; (800ab10 <_strtod_l+0x578>)
 800a8a4:	a815      	add	r0, sp, #84	; 0x54
 800a8a6:	f001 f91f 	bl	800bae8 <__match>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	f43f aecc 	beq.w	800a648 <_strtod_l+0xb0>
 800a8b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b28      	cmp	r3, #40	; 0x28
 800a8b6:	d12f      	bne.n	800a918 <_strtod_l+0x380>
 800a8b8:	4996      	ldr	r1, [pc, #600]	; (800ab14 <_strtod_l+0x57c>)
 800a8ba:	aa18      	add	r2, sp, #96	; 0x60
 800a8bc:	a815      	add	r0, sp, #84	; 0x54
 800a8be:	f001 f927 	bl	800bb10 <__hexnan>
 800a8c2:	2805      	cmp	r0, #5
 800a8c4:	d128      	bne.n	800a918 <_strtod_l+0x380>
 800a8c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a8cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a8d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a8d4:	e69b      	b.n	800a60e <_strtod_l+0x76>
 800a8d6:	9f08      	ldr	r7, [sp, #32]
 800a8d8:	210a      	movs	r1, #10
 800a8da:	fb01 2107 	mla	r1, r1, r7, r2
 800a8de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a8e2:	9208      	str	r2, [sp, #32]
 800a8e4:	e7b5      	b.n	800a852 <_strtod_l+0x2ba>
 800a8e6:	2a6e      	cmp	r2, #110	; 0x6e
 800a8e8:	e7d9      	b.n	800a89e <_strtod_l+0x306>
 800a8ea:	498b      	ldr	r1, [pc, #556]	; (800ab18 <_strtod_l+0x580>)
 800a8ec:	a815      	add	r0, sp, #84	; 0x54
 800a8ee:	f001 f8fb 	bl	800bae8 <__match>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f43f aea8 	beq.w	800a648 <_strtod_l+0xb0>
 800a8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8fa:	4988      	ldr	r1, [pc, #544]	; (800ab1c <_strtod_l+0x584>)
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	a815      	add	r0, sp, #84	; 0x54
 800a900:	9315      	str	r3, [sp, #84]	; 0x54
 800a902:	f001 f8f1 	bl	800bae8 <__match>
 800a906:	b910      	cbnz	r0, 800a90e <_strtod_l+0x376>
 800a908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a90a:	3301      	adds	r3, #1
 800a90c:	9315      	str	r3, [sp, #84]	; 0x54
 800a90e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ab2c <_strtod_l+0x594>
 800a912:	f04f 0800 	mov.w	r8, #0
 800a916:	e67a      	b.n	800a60e <_strtod_l+0x76>
 800a918:	4881      	ldr	r0, [pc, #516]	; (800ab20 <_strtod_l+0x588>)
 800a91a:	f000 fde9 	bl	800b4f0 <nan>
 800a91e:	ec59 8b10 	vmov	r8, r9, d0
 800a922:	e674      	b.n	800a60e <_strtod_l+0x76>
 800a924:	9b05      	ldr	r3, [sp, #20]
 800a926:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a928:	1afb      	subs	r3, r7, r3
 800a92a:	f1bb 0f00 	cmp.w	fp, #0
 800a92e:	bf08      	it	eq
 800a930:	46b3      	moveq	fp, r6
 800a932:	2e10      	cmp	r6, #16
 800a934:	9308      	str	r3, [sp, #32]
 800a936:	4635      	mov	r5, r6
 800a938:	bfa8      	it	ge
 800a93a:	2510      	movge	r5, #16
 800a93c:	f7f5 fe12 	bl	8000564 <__aeabi_ui2d>
 800a940:	2e09      	cmp	r6, #9
 800a942:	4680      	mov	r8, r0
 800a944:	4689      	mov	r9, r1
 800a946:	dd13      	ble.n	800a970 <_strtod_l+0x3d8>
 800a948:	4b76      	ldr	r3, [pc, #472]	; (800ab24 <_strtod_l+0x58c>)
 800a94a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a94e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a952:	f7f5 fe81 	bl	8000658 <__aeabi_dmul>
 800a956:	4680      	mov	r8, r0
 800a958:	4650      	mov	r0, sl
 800a95a:	4689      	mov	r9, r1
 800a95c:	f7f5 fe02 	bl	8000564 <__aeabi_ui2d>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4640      	mov	r0, r8
 800a966:	4649      	mov	r1, r9
 800a968:	f7f5 fcc0 	bl	80002ec <__adddf3>
 800a96c:	4680      	mov	r8, r0
 800a96e:	4689      	mov	r9, r1
 800a970:	2e0f      	cmp	r6, #15
 800a972:	dc38      	bgt.n	800a9e6 <_strtod_l+0x44e>
 800a974:	9b08      	ldr	r3, [sp, #32]
 800a976:	2b00      	cmp	r3, #0
 800a978:	f43f ae49 	beq.w	800a60e <_strtod_l+0x76>
 800a97c:	dd24      	ble.n	800a9c8 <_strtod_l+0x430>
 800a97e:	2b16      	cmp	r3, #22
 800a980:	dc0b      	bgt.n	800a99a <_strtod_l+0x402>
 800a982:	4968      	ldr	r1, [pc, #416]	; (800ab24 <_strtod_l+0x58c>)
 800a984:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a98c:	4642      	mov	r2, r8
 800a98e:	464b      	mov	r3, r9
 800a990:	f7f5 fe62 	bl	8000658 <__aeabi_dmul>
 800a994:	4680      	mov	r8, r0
 800a996:	4689      	mov	r9, r1
 800a998:	e639      	b.n	800a60e <_strtod_l+0x76>
 800a99a:	9a08      	ldr	r2, [sp, #32]
 800a99c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	db20      	blt.n	800a9e6 <_strtod_l+0x44e>
 800a9a4:	4c5f      	ldr	r4, [pc, #380]	; (800ab24 <_strtod_l+0x58c>)
 800a9a6:	f1c6 060f 	rsb	r6, r6, #15
 800a9aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a9ae:	4642      	mov	r2, r8
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b6:	f7f5 fe4f 	bl	8000658 <__aeabi_dmul>
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	1b9e      	subs	r6, r3, r6
 800a9be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a9c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a9c6:	e7e3      	b.n	800a990 <_strtod_l+0x3f8>
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	3316      	adds	r3, #22
 800a9cc:	db0b      	blt.n	800a9e6 <_strtod_l+0x44e>
 800a9ce:	9b05      	ldr	r3, [sp, #20]
 800a9d0:	1bdf      	subs	r7, r3, r7
 800a9d2:	4b54      	ldr	r3, [pc, #336]	; (800ab24 <_strtod_l+0x58c>)
 800a9d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4649      	mov	r1, r9
 800a9e0:	f7f5 ff64 	bl	80008ac <__aeabi_ddiv>
 800a9e4:	e7d6      	b.n	800a994 <_strtod_l+0x3fc>
 800a9e6:	9b08      	ldr	r3, [sp, #32]
 800a9e8:	1b75      	subs	r5, r6, r5
 800a9ea:	441d      	add	r5, r3
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	dd70      	ble.n	800aad2 <_strtod_l+0x53a>
 800a9f0:	f015 030f 	ands.w	r3, r5, #15
 800a9f4:	d00a      	beq.n	800aa0c <_strtod_l+0x474>
 800a9f6:	494b      	ldr	r1, [pc, #300]	; (800ab24 <_strtod_l+0x58c>)
 800a9f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	464b      	mov	r3, r9
 800aa00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa04:	f7f5 fe28 	bl	8000658 <__aeabi_dmul>
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4689      	mov	r9, r1
 800aa0c:	f035 050f 	bics.w	r5, r5, #15
 800aa10:	d04d      	beq.n	800aaae <_strtod_l+0x516>
 800aa12:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800aa16:	dd22      	ble.n	800aa5e <_strtod_l+0x4c6>
 800aa18:	2500      	movs	r5, #0
 800aa1a:	46ab      	mov	fp, r5
 800aa1c:	9509      	str	r5, [sp, #36]	; 0x24
 800aa1e:	9505      	str	r5, [sp, #20]
 800aa20:	2322      	movs	r3, #34	; 0x22
 800aa22:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ab2c <_strtod_l+0x594>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	f04f 0800 	mov.w	r8, #0
 800aa2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f43f aded 	beq.w	800a60e <_strtod_l+0x76>
 800aa34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa36:	4620      	mov	r0, r4
 800aa38:	f001 fa04 	bl	800be44 <_Bfree>
 800aa3c:	9905      	ldr	r1, [sp, #20]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f001 fa00 	bl	800be44 <_Bfree>
 800aa44:	4659      	mov	r1, fp
 800aa46:	4620      	mov	r0, r4
 800aa48:	f001 f9fc 	bl	800be44 <_Bfree>
 800aa4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f001 f9f8 	bl	800be44 <_Bfree>
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
 800aa58:	f001 f9f4 	bl	800be44 <_Bfree>
 800aa5c:	e5d7      	b.n	800a60e <_strtod_l+0x76>
 800aa5e:	4b32      	ldr	r3, [pc, #200]	; (800ab28 <_strtod_l+0x590>)
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	2300      	movs	r3, #0
 800aa64:	112d      	asrs	r5, r5, #4
 800aa66:	4640      	mov	r0, r8
 800aa68:	4649      	mov	r1, r9
 800aa6a:	469a      	mov	sl, r3
 800aa6c:	2d01      	cmp	r5, #1
 800aa6e:	dc21      	bgt.n	800aab4 <_strtod_l+0x51c>
 800aa70:	b10b      	cbz	r3, 800aa76 <_strtod_l+0x4de>
 800aa72:	4680      	mov	r8, r0
 800aa74:	4689      	mov	r9, r1
 800aa76:	492c      	ldr	r1, [pc, #176]	; (800ab28 <_strtod_l+0x590>)
 800aa78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aa7c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aa80:	4642      	mov	r2, r8
 800aa82:	464b      	mov	r3, r9
 800aa84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa88:	f7f5 fde6 	bl	8000658 <__aeabi_dmul>
 800aa8c:	4b27      	ldr	r3, [pc, #156]	; (800ab2c <_strtod_l+0x594>)
 800aa8e:	460a      	mov	r2, r1
 800aa90:	400b      	ands	r3, r1
 800aa92:	4927      	ldr	r1, [pc, #156]	; (800ab30 <_strtod_l+0x598>)
 800aa94:	428b      	cmp	r3, r1
 800aa96:	4680      	mov	r8, r0
 800aa98:	d8be      	bhi.n	800aa18 <_strtod_l+0x480>
 800aa9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa9e:	428b      	cmp	r3, r1
 800aaa0:	bf86      	itte	hi
 800aaa2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ab34 <_strtod_l+0x59c>
 800aaa6:	f04f 38ff 	movhi.w	r8, #4294967295
 800aaaa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aaae:	2300      	movs	r3, #0
 800aab0:	9304      	str	r3, [sp, #16]
 800aab2:	e07b      	b.n	800abac <_strtod_l+0x614>
 800aab4:	07ea      	lsls	r2, r5, #31
 800aab6:	d505      	bpl.n	800aac4 <_strtod_l+0x52c>
 800aab8:	9b04      	ldr	r3, [sp, #16]
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fdcb 	bl	8000658 <__aeabi_dmul>
 800aac2:	2301      	movs	r3, #1
 800aac4:	9a04      	ldr	r2, [sp, #16]
 800aac6:	3208      	adds	r2, #8
 800aac8:	f10a 0a01 	add.w	sl, sl, #1
 800aacc:	106d      	asrs	r5, r5, #1
 800aace:	9204      	str	r2, [sp, #16]
 800aad0:	e7cc      	b.n	800aa6c <_strtod_l+0x4d4>
 800aad2:	d0ec      	beq.n	800aaae <_strtod_l+0x516>
 800aad4:	426d      	negs	r5, r5
 800aad6:	f015 020f 	ands.w	r2, r5, #15
 800aada:	d00a      	beq.n	800aaf2 <_strtod_l+0x55a>
 800aadc:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <_strtod_l+0x58c>)
 800aade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fedf 	bl	80008ac <__aeabi_ddiv>
 800aaee:	4680      	mov	r8, r0
 800aaf0:	4689      	mov	r9, r1
 800aaf2:	112d      	asrs	r5, r5, #4
 800aaf4:	d0db      	beq.n	800aaae <_strtod_l+0x516>
 800aaf6:	2d1f      	cmp	r5, #31
 800aaf8:	dd1e      	ble.n	800ab38 <_strtod_l+0x5a0>
 800aafa:	2500      	movs	r5, #0
 800aafc:	46ab      	mov	fp, r5
 800aafe:	9509      	str	r5, [sp, #36]	; 0x24
 800ab00:	9505      	str	r5, [sp, #20]
 800ab02:	2322      	movs	r3, #34	; 0x22
 800ab04:	f04f 0800 	mov.w	r8, #0
 800ab08:	f04f 0900 	mov.w	r9, #0
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	e78d      	b.n	800aa2c <_strtod_l+0x494>
 800ab10:	0800d343 	.word	0x0800d343
 800ab14:	0800d35c 	.word	0x0800d35c
 800ab18:	0800d33a 	.word	0x0800d33a
 800ab1c:	0800d33d 	.word	0x0800d33d
 800ab20:	0800d6c0 	.word	0x0800d6c0
 800ab24:	0800d4b0 	.word	0x0800d4b0
 800ab28:	0800d488 	.word	0x0800d488
 800ab2c:	7ff00000 	.word	0x7ff00000
 800ab30:	7ca00000 	.word	0x7ca00000
 800ab34:	7fefffff 	.word	0x7fefffff
 800ab38:	f015 0310 	ands.w	r3, r5, #16
 800ab3c:	bf18      	it	ne
 800ab3e:	236a      	movne	r3, #106	; 0x6a
 800ab40:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800aee4 <_strtod_l+0x94c>
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	4640      	mov	r0, r8
 800ab48:	4649      	mov	r1, r9
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	07ea      	lsls	r2, r5, #31
 800ab4e:	d504      	bpl.n	800ab5a <_strtod_l+0x5c2>
 800ab50:	e9da 2300 	ldrd	r2, r3, [sl]
 800ab54:	f7f5 fd80 	bl	8000658 <__aeabi_dmul>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	106d      	asrs	r5, r5, #1
 800ab5c:	f10a 0a08 	add.w	sl, sl, #8
 800ab60:	d1f4      	bne.n	800ab4c <_strtod_l+0x5b4>
 800ab62:	b10b      	cbz	r3, 800ab68 <_strtod_l+0x5d0>
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	9b04      	ldr	r3, [sp, #16]
 800ab6a:	b1bb      	cbz	r3, 800ab9c <_strtod_l+0x604>
 800ab6c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ab70:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	4649      	mov	r1, r9
 800ab78:	dd10      	ble.n	800ab9c <_strtod_l+0x604>
 800ab7a:	2b1f      	cmp	r3, #31
 800ab7c:	f340 811e 	ble.w	800adbc <_strtod_l+0x824>
 800ab80:	2b34      	cmp	r3, #52	; 0x34
 800ab82:	bfde      	ittt	le
 800ab84:	f04f 33ff 	movle.w	r3, #4294967295
 800ab88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ab8c:	4093      	lslle	r3, r2
 800ab8e:	f04f 0800 	mov.w	r8, #0
 800ab92:	bfcc      	ite	gt
 800ab94:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ab98:	ea03 0901 	andle.w	r9, r3, r1
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2300      	movs	r3, #0
 800aba0:	4640      	mov	r0, r8
 800aba2:	4649      	mov	r1, r9
 800aba4:	f7f5 ffc0 	bl	8000b28 <__aeabi_dcmpeq>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d1a6      	bne.n	800aafa <_strtod_l+0x562>
 800abac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abb2:	4633      	mov	r3, r6
 800abb4:	465a      	mov	r2, fp
 800abb6:	4620      	mov	r0, r4
 800abb8:	f001 f9ac 	bl	800bf14 <__s2b>
 800abbc:	9009      	str	r0, [sp, #36]	; 0x24
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f43f af2a 	beq.w	800aa18 <_strtod_l+0x480>
 800abc4:	9a08      	ldr	r2, [sp, #32]
 800abc6:	9b05      	ldr	r3, [sp, #20]
 800abc8:	2a00      	cmp	r2, #0
 800abca:	eba3 0307 	sub.w	r3, r3, r7
 800abce:	bfa8      	it	ge
 800abd0:	2300      	movge	r3, #0
 800abd2:	930c      	str	r3, [sp, #48]	; 0x30
 800abd4:	2500      	movs	r5, #0
 800abd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800abda:	9312      	str	r3, [sp, #72]	; 0x48
 800abdc:	46ab      	mov	fp, r5
 800abde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe0:	4620      	mov	r0, r4
 800abe2:	6859      	ldr	r1, [r3, #4]
 800abe4:	f001 f8ee 	bl	800bdc4 <_Balloc>
 800abe8:	9005      	str	r0, [sp, #20]
 800abea:	2800      	cmp	r0, #0
 800abec:	f43f af18 	beq.w	800aa20 <_strtod_l+0x488>
 800abf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf2:	691a      	ldr	r2, [r3, #16]
 800abf4:	3202      	adds	r2, #2
 800abf6:	f103 010c 	add.w	r1, r3, #12
 800abfa:	0092      	lsls	r2, r2, #2
 800abfc:	300c      	adds	r0, #12
 800abfe:	f000 fc68 	bl	800b4d2 <memcpy>
 800ac02:	ec49 8b10 	vmov	d0, r8, r9
 800ac06:	aa18      	add	r2, sp, #96	; 0x60
 800ac08:	a917      	add	r1, sp, #92	; 0x5c
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f001 fcb6 	bl	800c57c <__d2b>
 800ac10:	ec49 8b18 	vmov	d8, r8, r9
 800ac14:	9016      	str	r0, [sp, #88]	; 0x58
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f43f af02 	beq.w	800aa20 <_strtod_l+0x488>
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f001 fa10 	bl	800c044 <__i2b>
 800ac24:	4683      	mov	fp, r0
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f43f aefa 	beq.w	800aa20 <_strtod_l+0x488>
 800ac2c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ac2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac30:	2e00      	cmp	r6, #0
 800ac32:	bfab      	itete	ge
 800ac34:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ac36:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ac38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ac3a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ac3e:	bfac      	ite	ge
 800ac40:	eb06 0a03 	addge.w	sl, r6, r3
 800ac44:	1b9f      	sublt	r7, r3, r6
 800ac46:	9b04      	ldr	r3, [sp, #16]
 800ac48:	1af6      	subs	r6, r6, r3
 800ac4a:	4416      	add	r6, r2
 800ac4c:	4ba0      	ldr	r3, [pc, #640]	; (800aed0 <_strtod_l+0x938>)
 800ac4e:	3e01      	subs	r6, #1
 800ac50:	429e      	cmp	r6, r3
 800ac52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac56:	f280 80c4 	bge.w	800ade2 <_strtod_l+0x84a>
 800ac5a:	1b9b      	subs	r3, r3, r6
 800ac5c:	2b1f      	cmp	r3, #31
 800ac5e:	eba2 0203 	sub.w	r2, r2, r3
 800ac62:	f04f 0101 	mov.w	r1, #1
 800ac66:	f300 80b0 	bgt.w	800adca <_strtod_l+0x832>
 800ac6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac6e:	930e      	str	r3, [sp, #56]	; 0x38
 800ac70:	2300      	movs	r3, #0
 800ac72:	930d      	str	r3, [sp, #52]	; 0x34
 800ac74:	eb0a 0602 	add.w	r6, sl, r2
 800ac78:	9b04      	ldr	r3, [sp, #16]
 800ac7a:	45b2      	cmp	sl, r6
 800ac7c:	4417      	add	r7, r2
 800ac7e:	441f      	add	r7, r3
 800ac80:	4653      	mov	r3, sl
 800ac82:	bfa8      	it	ge
 800ac84:	4633      	movge	r3, r6
 800ac86:	42bb      	cmp	r3, r7
 800ac88:	bfa8      	it	ge
 800ac8a:	463b      	movge	r3, r7
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	bfc2      	ittt	gt
 800ac90:	1af6      	subgt	r6, r6, r3
 800ac92:	1aff      	subgt	r7, r7, r3
 800ac94:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ac98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dd17      	ble.n	800acce <_strtod_l+0x736>
 800ac9e:	4659      	mov	r1, fp
 800aca0:	461a      	mov	r2, r3
 800aca2:	4620      	mov	r0, r4
 800aca4:	f001 fa8e 	bl	800c1c4 <__pow5mult>
 800aca8:	4683      	mov	fp, r0
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f aeb8 	beq.w	800aa20 <_strtod_l+0x488>
 800acb0:	4601      	mov	r1, r0
 800acb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800acb4:	4620      	mov	r0, r4
 800acb6:	f001 f9db 	bl	800c070 <__multiply>
 800acba:	900b      	str	r0, [sp, #44]	; 0x2c
 800acbc:	2800      	cmp	r0, #0
 800acbe:	f43f aeaf 	beq.w	800aa20 <_strtod_l+0x488>
 800acc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800acc4:	4620      	mov	r0, r4
 800acc6:	f001 f8bd 	bl	800be44 <_Bfree>
 800acca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800accc:	9316      	str	r3, [sp, #88]	; 0x58
 800acce:	2e00      	cmp	r6, #0
 800acd0:	f300 808c 	bgt.w	800adec <_strtod_l+0x854>
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	dd08      	ble.n	800acec <_strtod_l+0x754>
 800acda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acdc:	9905      	ldr	r1, [sp, #20]
 800acde:	4620      	mov	r0, r4
 800ace0:	f001 fa70 	bl	800c1c4 <__pow5mult>
 800ace4:	9005      	str	r0, [sp, #20]
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f ae9a 	beq.w	800aa20 <_strtod_l+0x488>
 800acec:	2f00      	cmp	r7, #0
 800acee:	dd08      	ble.n	800ad02 <_strtod_l+0x76a>
 800acf0:	9905      	ldr	r1, [sp, #20]
 800acf2:	463a      	mov	r2, r7
 800acf4:	4620      	mov	r0, r4
 800acf6:	f001 fabf 	bl	800c278 <__lshift>
 800acfa:	9005      	str	r0, [sp, #20]
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f43f ae8f 	beq.w	800aa20 <_strtod_l+0x488>
 800ad02:	f1ba 0f00 	cmp.w	sl, #0
 800ad06:	dd08      	ble.n	800ad1a <_strtod_l+0x782>
 800ad08:	4659      	mov	r1, fp
 800ad0a:	4652      	mov	r2, sl
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f001 fab3 	bl	800c278 <__lshift>
 800ad12:	4683      	mov	fp, r0
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f43f ae83 	beq.w	800aa20 <_strtod_l+0x488>
 800ad1a:	9a05      	ldr	r2, [sp, #20]
 800ad1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f001 fb32 	bl	800c388 <__mdiff>
 800ad24:	4605      	mov	r5, r0
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f43f ae7a 	beq.w	800aa20 <_strtod_l+0x488>
 800ad2c:	68c3      	ldr	r3, [r0, #12]
 800ad2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad30:	2300      	movs	r3, #0
 800ad32:	60c3      	str	r3, [r0, #12]
 800ad34:	4659      	mov	r1, fp
 800ad36:	f001 fb0b 	bl	800c350 <__mcmp>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	da60      	bge.n	800ae00 <_strtod_l+0x868>
 800ad3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad40:	ea53 0308 	orrs.w	r3, r3, r8
 800ad44:	f040 8084 	bne.w	800ae50 <_strtod_l+0x8b8>
 800ad48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d17f      	bne.n	800ae50 <_strtod_l+0x8b8>
 800ad50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad54:	0d1b      	lsrs	r3, r3, #20
 800ad56:	051b      	lsls	r3, r3, #20
 800ad58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad5c:	d978      	bls.n	800ae50 <_strtod_l+0x8b8>
 800ad5e:	696b      	ldr	r3, [r5, #20]
 800ad60:	b913      	cbnz	r3, 800ad68 <_strtod_l+0x7d0>
 800ad62:	692b      	ldr	r3, [r5, #16]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	dd73      	ble.n	800ae50 <_strtod_l+0x8b8>
 800ad68:	4629      	mov	r1, r5
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f001 fa83 	bl	800c278 <__lshift>
 800ad72:	4659      	mov	r1, fp
 800ad74:	4605      	mov	r5, r0
 800ad76:	f001 faeb 	bl	800c350 <__mcmp>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	dd68      	ble.n	800ae50 <_strtod_l+0x8b8>
 800ad7e:	9904      	ldr	r1, [sp, #16]
 800ad80:	4a54      	ldr	r2, [pc, #336]	; (800aed4 <_strtod_l+0x93c>)
 800ad82:	464b      	mov	r3, r9
 800ad84:	2900      	cmp	r1, #0
 800ad86:	f000 8084 	beq.w	800ae92 <_strtod_l+0x8fa>
 800ad8a:	ea02 0109 	and.w	r1, r2, r9
 800ad8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad92:	dc7e      	bgt.n	800ae92 <_strtod_l+0x8fa>
 800ad94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad98:	f77f aeb3 	ble.w	800ab02 <_strtod_l+0x56a>
 800ad9c:	4b4e      	ldr	r3, [pc, #312]	; (800aed8 <_strtod_l+0x940>)
 800ad9e:	4640      	mov	r0, r8
 800ada0:	4649      	mov	r1, r9
 800ada2:	2200      	movs	r2, #0
 800ada4:	f7f5 fc58 	bl	8000658 <__aeabi_dmul>
 800ada8:	4b4a      	ldr	r3, [pc, #296]	; (800aed4 <_strtod_l+0x93c>)
 800adaa:	400b      	ands	r3, r1
 800adac:	4680      	mov	r8, r0
 800adae:	4689      	mov	r9, r1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f47f ae3f 	bne.w	800aa34 <_strtod_l+0x49c>
 800adb6:	2322      	movs	r3, #34	; 0x22
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	e63b      	b.n	800aa34 <_strtod_l+0x49c>
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295
 800adc0:	fa02 f303 	lsl.w	r3, r2, r3
 800adc4:	ea03 0808 	and.w	r8, r3, r8
 800adc8:	e6e8      	b.n	800ab9c <_strtod_l+0x604>
 800adca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800adce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800add2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800add6:	36e2      	adds	r6, #226	; 0xe2
 800add8:	fa01 f306 	lsl.w	r3, r1, r6
 800addc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ade0:	e748      	b.n	800ac74 <_strtod_l+0x6dc>
 800ade2:	2100      	movs	r1, #0
 800ade4:	2301      	movs	r3, #1
 800ade6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800adea:	e743      	b.n	800ac74 <_strtod_l+0x6dc>
 800adec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800adee:	4632      	mov	r2, r6
 800adf0:	4620      	mov	r0, r4
 800adf2:	f001 fa41 	bl	800c278 <__lshift>
 800adf6:	9016      	str	r0, [sp, #88]	; 0x58
 800adf8:	2800      	cmp	r0, #0
 800adfa:	f47f af6b 	bne.w	800acd4 <_strtod_l+0x73c>
 800adfe:	e60f      	b.n	800aa20 <_strtod_l+0x488>
 800ae00:	46ca      	mov	sl, r9
 800ae02:	d171      	bne.n	800aee8 <_strtod_l+0x950>
 800ae04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae0a:	b352      	cbz	r2, 800ae62 <_strtod_l+0x8ca>
 800ae0c:	4a33      	ldr	r2, [pc, #204]	; (800aedc <_strtod_l+0x944>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d12a      	bne.n	800ae68 <_strtod_l+0x8d0>
 800ae12:	9b04      	ldr	r3, [sp, #16]
 800ae14:	4641      	mov	r1, r8
 800ae16:	b1fb      	cbz	r3, 800ae58 <_strtod_l+0x8c0>
 800ae18:	4b2e      	ldr	r3, [pc, #184]	; (800aed4 <_strtod_l+0x93c>)
 800ae1a:	ea09 0303 	and.w	r3, r9, r3
 800ae1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae22:	f04f 32ff 	mov.w	r2, #4294967295
 800ae26:	d81a      	bhi.n	800ae5e <_strtod_l+0x8c6>
 800ae28:	0d1b      	lsrs	r3, r3, #20
 800ae2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae32:	4299      	cmp	r1, r3
 800ae34:	d118      	bne.n	800ae68 <_strtod_l+0x8d0>
 800ae36:	4b2a      	ldr	r3, [pc, #168]	; (800aee0 <_strtod_l+0x948>)
 800ae38:	459a      	cmp	sl, r3
 800ae3a:	d102      	bne.n	800ae42 <_strtod_l+0x8aa>
 800ae3c:	3101      	adds	r1, #1
 800ae3e:	f43f adef 	beq.w	800aa20 <_strtod_l+0x488>
 800ae42:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <_strtod_l+0x93c>)
 800ae44:	ea0a 0303 	and.w	r3, sl, r3
 800ae48:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ae4c:	f04f 0800 	mov.w	r8, #0
 800ae50:	9b04      	ldr	r3, [sp, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1a2      	bne.n	800ad9c <_strtod_l+0x804>
 800ae56:	e5ed      	b.n	800aa34 <_strtod_l+0x49c>
 800ae58:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5c:	e7e9      	b.n	800ae32 <_strtod_l+0x89a>
 800ae5e:	4613      	mov	r3, r2
 800ae60:	e7e7      	b.n	800ae32 <_strtod_l+0x89a>
 800ae62:	ea53 0308 	orrs.w	r3, r3, r8
 800ae66:	d08a      	beq.n	800ad7e <_strtod_l+0x7e6>
 800ae68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6a:	b1e3      	cbz	r3, 800aea6 <_strtod_l+0x90e>
 800ae6c:	ea13 0f0a 	tst.w	r3, sl
 800ae70:	d0ee      	beq.n	800ae50 <_strtod_l+0x8b8>
 800ae72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	4640      	mov	r0, r8
 800ae78:	4649      	mov	r1, r9
 800ae7a:	b1c3      	cbz	r3, 800aeae <_strtod_l+0x916>
 800ae7c:	f7ff fb6d 	bl	800a55a <sulp>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	ec51 0b18 	vmov	r0, r1, d8
 800ae88:	f7f5 fa30 	bl	80002ec <__adddf3>
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	4689      	mov	r9, r1
 800ae90:	e7de      	b.n	800ae50 <_strtod_l+0x8b8>
 800ae92:	4013      	ands	r3, r2
 800ae94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae98:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ae9c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800aea0:	f04f 38ff 	mov.w	r8, #4294967295
 800aea4:	e7d4      	b.n	800ae50 <_strtod_l+0x8b8>
 800aea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aea8:	ea13 0f08 	tst.w	r3, r8
 800aeac:	e7e0      	b.n	800ae70 <_strtod_l+0x8d8>
 800aeae:	f7ff fb54 	bl	800a55a <sulp>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	ec51 0b18 	vmov	r0, r1, d8
 800aeba:	f7f5 fa15 	bl	80002e8 <__aeabi_dsub>
 800aebe:	2200      	movs	r2, #0
 800aec0:	2300      	movs	r3, #0
 800aec2:	4680      	mov	r8, r0
 800aec4:	4689      	mov	r9, r1
 800aec6:	f7f5 fe2f 	bl	8000b28 <__aeabi_dcmpeq>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d0c0      	beq.n	800ae50 <_strtod_l+0x8b8>
 800aece:	e618      	b.n	800ab02 <_strtod_l+0x56a>
 800aed0:	fffffc02 	.word	0xfffffc02
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	39500000 	.word	0x39500000
 800aedc:	000fffff 	.word	0x000fffff
 800aee0:	7fefffff 	.word	0x7fefffff
 800aee4:	0800d370 	.word	0x0800d370
 800aee8:	4659      	mov	r1, fp
 800aeea:	4628      	mov	r0, r5
 800aeec:	f001 fba0 	bl	800c630 <__ratio>
 800aef0:	ec57 6b10 	vmov	r6, r7, d0
 800aef4:	ee10 0a10 	vmov	r0, s0
 800aef8:	2200      	movs	r2, #0
 800aefa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aefe:	4639      	mov	r1, r7
 800af00:	f7f5 fe26 	bl	8000b50 <__aeabi_dcmple>
 800af04:	2800      	cmp	r0, #0
 800af06:	d071      	beq.n	800afec <_strtod_l+0xa54>
 800af08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d17c      	bne.n	800b008 <_strtod_l+0xa70>
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	d15a      	bne.n	800afca <_strtod_l+0xa32>
 800af14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d15d      	bne.n	800afd8 <_strtod_l+0xa40>
 800af1c:	4b90      	ldr	r3, [pc, #576]	; (800b160 <_strtod_l+0xbc8>)
 800af1e:	2200      	movs	r2, #0
 800af20:	4630      	mov	r0, r6
 800af22:	4639      	mov	r1, r7
 800af24:	f7f5 fe0a 	bl	8000b3c <__aeabi_dcmplt>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d15c      	bne.n	800afe6 <_strtod_l+0xa4e>
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	4b8c      	ldr	r3, [pc, #560]	; (800b164 <_strtod_l+0xbcc>)
 800af32:	2200      	movs	r2, #0
 800af34:	f7f5 fb90 	bl	8000658 <__aeabi_dmul>
 800af38:	4606      	mov	r6, r0
 800af3a:	460f      	mov	r7, r1
 800af3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800af40:	9606      	str	r6, [sp, #24]
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800af4c:	4b86      	ldr	r3, [pc, #536]	; (800b168 <_strtod_l+0xbd0>)
 800af4e:	ea0a 0303 	and.w	r3, sl, r3
 800af52:	930d      	str	r3, [sp, #52]	; 0x34
 800af54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af56:	4b85      	ldr	r3, [pc, #532]	; (800b16c <_strtod_l+0xbd4>)
 800af58:	429a      	cmp	r2, r3
 800af5a:	f040 8090 	bne.w	800b07e <_strtod_l+0xae6>
 800af5e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800af62:	ec49 8b10 	vmov	d0, r8, r9
 800af66:	f001 fa99 	bl	800c49c <__ulp>
 800af6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af6e:	ec51 0b10 	vmov	r0, r1, d0
 800af72:	f7f5 fb71 	bl	8000658 <__aeabi_dmul>
 800af76:	4642      	mov	r2, r8
 800af78:	464b      	mov	r3, r9
 800af7a:	f7f5 f9b7 	bl	80002ec <__adddf3>
 800af7e:	460b      	mov	r3, r1
 800af80:	4979      	ldr	r1, [pc, #484]	; (800b168 <_strtod_l+0xbd0>)
 800af82:	4a7b      	ldr	r2, [pc, #492]	; (800b170 <_strtod_l+0xbd8>)
 800af84:	4019      	ands	r1, r3
 800af86:	4291      	cmp	r1, r2
 800af88:	4680      	mov	r8, r0
 800af8a:	d944      	bls.n	800b016 <_strtod_l+0xa7e>
 800af8c:	ee18 2a90 	vmov	r2, s17
 800af90:	4b78      	ldr	r3, [pc, #480]	; (800b174 <_strtod_l+0xbdc>)
 800af92:	429a      	cmp	r2, r3
 800af94:	d104      	bne.n	800afa0 <_strtod_l+0xa08>
 800af96:	ee18 3a10 	vmov	r3, s16
 800af9a:	3301      	adds	r3, #1
 800af9c:	f43f ad40 	beq.w	800aa20 <_strtod_l+0x488>
 800afa0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b174 <_strtod_l+0xbdc>
 800afa4:	f04f 38ff 	mov.w	r8, #4294967295
 800afa8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 ff4a 	bl	800be44 <_Bfree>
 800afb0:	9905      	ldr	r1, [sp, #20]
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 ff46 	bl	800be44 <_Bfree>
 800afb8:	4659      	mov	r1, fp
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 ff42 	bl	800be44 <_Bfree>
 800afc0:	4629      	mov	r1, r5
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 ff3e 	bl	800be44 <_Bfree>
 800afc8:	e609      	b.n	800abde <_strtod_l+0x646>
 800afca:	f1b8 0f01 	cmp.w	r8, #1
 800afce:	d103      	bne.n	800afd8 <_strtod_l+0xa40>
 800afd0:	f1b9 0f00 	cmp.w	r9, #0
 800afd4:	f43f ad95 	beq.w	800ab02 <_strtod_l+0x56a>
 800afd8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b130 <_strtod_l+0xb98>
 800afdc:	4f60      	ldr	r7, [pc, #384]	; (800b160 <_strtod_l+0xbc8>)
 800afde:	ed8d 7b06 	vstr	d7, [sp, #24]
 800afe2:	2600      	movs	r6, #0
 800afe4:	e7ae      	b.n	800af44 <_strtod_l+0x9ac>
 800afe6:	4f5f      	ldr	r7, [pc, #380]	; (800b164 <_strtod_l+0xbcc>)
 800afe8:	2600      	movs	r6, #0
 800afea:	e7a7      	b.n	800af3c <_strtod_l+0x9a4>
 800afec:	4b5d      	ldr	r3, [pc, #372]	; (800b164 <_strtod_l+0xbcc>)
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	2200      	movs	r2, #0
 800aff4:	f7f5 fb30 	bl	8000658 <__aeabi_dmul>
 800aff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800affa:	4606      	mov	r6, r0
 800affc:	460f      	mov	r7, r1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d09c      	beq.n	800af3c <_strtod_l+0x9a4>
 800b002:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b006:	e79d      	b.n	800af44 <_strtod_l+0x9ac>
 800b008:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b138 <_strtod_l+0xba0>
 800b00c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b010:	ec57 6b17 	vmov	r6, r7, d7
 800b014:	e796      	b.n	800af44 <_strtod_l+0x9ac>
 800b016:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	46ca      	mov	sl, r9
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1c2      	bne.n	800afa8 <_strtod_l+0xa10>
 800b022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b028:	0d1b      	lsrs	r3, r3, #20
 800b02a:	051b      	lsls	r3, r3, #20
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d1bb      	bne.n	800afa8 <_strtod_l+0xa10>
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 fe1a 	bl	8000c6c <__aeabi_d2lz>
 800b038:	f7f5 fae0 	bl	80005fc <__aeabi_l2d>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4630      	mov	r0, r6
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 f950 	bl	80002e8 <__aeabi_dsub>
 800b048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b04a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b04e:	ea43 0308 	orr.w	r3, r3, r8
 800b052:	4313      	orrs	r3, r2
 800b054:	4606      	mov	r6, r0
 800b056:	460f      	mov	r7, r1
 800b058:	d054      	beq.n	800b104 <_strtod_l+0xb6c>
 800b05a:	a339      	add	r3, pc, #228	; (adr r3, 800b140 <_strtod_l+0xba8>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 fd6c 	bl	8000b3c <__aeabi_dcmplt>
 800b064:	2800      	cmp	r0, #0
 800b066:	f47f ace5 	bne.w	800aa34 <_strtod_l+0x49c>
 800b06a:	a337      	add	r3, pc, #220	; (adr r3, 800b148 <_strtod_l+0xbb0>)
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fd80 	bl	8000b78 <__aeabi_dcmpgt>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d095      	beq.n	800afa8 <_strtod_l+0xa10>
 800b07c:	e4da      	b.n	800aa34 <_strtod_l+0x49c>
 800b07e:	9b04      	ldr	r3, [sp, #16]
 800b080:	b333      	cbz	r3, 800b0d0 <_strtod_l+0xb38>
 800b082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b084:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b088:	d822      	bhi.n	800b0d0 <_strtod_l+0xb38>
 800b08a:	a331      	add	r3, pc, #196	; (adr r3, 800b150 <_strtod_l+0xbb8>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	4630      	mov	r0, r6
 800b092:	4639      	mov	r1, r7
 800b094:	f7f5 fd5c 	bl	8000b50 <__aeabi_dcmple>
 800b098:	b1a0      	cbz	r0, 800b0c4 <_strtod_l+0xb2c>
 800b09a:	4639      	mov	r1, r7
 800b09c:	4630      	mov	r0, r6
 800b09e:	f7f5 fd75 	bl	8000b8c <__aeabi_d2uiz>
 800b0a2:	2801      	cmp	r0, #1
 800b0a4:	bf38      	it	cc
 800b0a6:	2001      	movcc	r0, #1
 800b0a8:	f7f5 fa5c 	bl	8000564 <__aeabi_ui2d>
 800b0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	460f      	mov	r7, r1
 800b0b2:	bb23      	cbnz	r3, 800b0fe <_strtod_l+0xb66>
 800b0b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0b8:	9010      	str	r0, [sp, #64]	; 0x40
 800b0ba:	9311      	str	r3, [sp, #68]	; 0x44
 800b0bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b0c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b0cc:	1a9b      	subs	r3, r3, r2
 800b0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b0d4:	eeb0 0a48 	vmov.f32	s0, s16
 800b0d8:	eef0 0a68 	vmov.f32	s1, s17
 800b0dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b0e0:	f001 f9dc 	bl	800c49c <__ulp>
 800b0e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b0e8:	ec53 2b10 	vmov	r2, r3, d0
 800b0ec:	f7f5 fab4 	bl	8000658 <__aeabi_dmul>
 800b0f0:	ec53 2b18 	vmov	r2, r3, d8
 800b0f4:	f7f5 f8fa 	bl	80002ec <__adddf3>
 800b0f8:	4680      	mov	r8, r0
 800b0fa:	4689      	mov	r9, r1
 800b0fc:	e78d      	b.n	800b01a <_strtod_l+0xa82>
 800b0fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b102:	e7db      	b.n	800b0bc <_strtod_l+0xb24>
 800b104:	a314      	add	r3, pc, #80	; (adr r3, 800b158 <_strtod_l+0xbc0>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	f7f5 fd17 	bl	8000b3c <__aeabi_dcmplt>
 800b10e:	e7b3      	b.n	800b078 <_strtod_l+0xae0>
 800b110:	2300      	movs	r3, #0
 800b112:	930a      	str	r3, [sp, #40]	; 0x28
 800b114:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	f7ff ba7c 	b.w	800a616 <_strtod_l+0x7e>
 800b11e:	2a65      	cmp	r2, #101	; 0x65
 800b120:	f43f ab75 	beq.w	800a80e <_strtod_l+0x276>
 800b124:	2a45      	cmp	r2, #69	; 0x45
 800b126:	f43f ab72 	beq.w	800a80e <_strtod_l+0x276>
 800b12a:	2301      	movs	r3, #1
 800b12c:	f7ff bbaa 	b.w	800a884 <_strtod_l+0x2ec>
 800b130:	00000000 	.word	0x00000000
 800b134:	bff00000 	.word	0xbff00000
 800b138:	00000000 	.word	0x00000000
 800b13c:	3ff00000 	.word	0x3ff00000
 800b140:	94a03595 	.word	0x94a03595
 800b144:	3fdfffff 	.word	0x3fdfffff
 800b148:	35afe535 	.word	0x35afe535
 800b14c:	3fe00000 	.word	0x3fe00000
 800b150:	ffc00000 	.word	0xffc00000
 800b154:	41dfffff 	.word	0x41dfffff
 800b158:	94a03595 	.word	0x94a03595
 800b15c:	3fcfffff 	.word	0x3fcfffff
 800b160:	3ff00000 	.word	0x3ff00000
 800b164:	3fe00000 	.word	0x3fe00000
 800b168:	7ff00000 	.word	0x7ff00000
 800b16c:	7fe00000 	.word	0x7fe00000
 800b170:	7c9fffff 	.word	0x7c9fffff
 800b174:	7fefffff 	.word	0x7fefffff

0800b178 <strtod>:
 800b178:	460a      	mov	r2, r1
 800b17a:	4601      	mov	r1, r0
 800b17c:	4802      	ldr	r0, [pc, #8]	; (800b188 <strtod+0x10>)
 800b17e:	4b03      	ldr	r3, [pc, #12]	; (800b18c <strtod+0x14>)
 800b180:	6800      	ldr	r0, [r0, #0]
 800b182:	f7ff ba09 	b.w	800a598 <_strtod_l>
 800b186:	bf00      	nop
 800b188:	20000348 	.word	0x20000348
 800b18c:	20000190 	.word	0x20000190

0800b190 <std>:
 800b190:	2300      	movs	r3, #0
 800b192:	b510      	push	{r4, lr}
 800b194:	4604      	mov	r4, r0
 800b196:	e9c0 3300 	strd	r3, r3, [r0]
 800b19a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b19e:	6083      	str	r3, [r0, #8]
 800b1a0:	8181      	strh	r1, [r0, #12]
 800b1a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b1a4:	81c2      	strh	r2, [r0, #14]
 800b1a6:	6183      	str	r3, [r0, #24]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	305c      	adds	r0, #92	; 0x5c
 800b1ae:	f000 f8f4 	bl	800b39a <memset>
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	; (800b1e8 <std+0x58>)
 800b1b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <std+0x5c>)
 800b1b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <std+0x60>)
 800b1bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1be:	4b0d      	ldr	r3, [pc, #52]	; (800b1f4 <std+0x64>)
 800b1c0:	6323      	str	r3, [r4, #48]	; 0x30
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	; (800b1f8 <std+0x68>)
 800b1c4:	6224      	str	r4, [r4, #32]
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	d006      	beq.n	800b1d8 <std+0x48>
 800b1ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b1ce:	4294      	cmp	r4, r2
 800b1d0:	d002      	beq.n	800b1d8 <std+0x48>
 800b1d2:	33d0      	adds	r3, #208	; 0xd0
 800b1d4:	429c      	cmp	r4, r3
 800b1d6:	d105      	bne.n	800b1e4 <std+0x54>
 800b1d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e0:	f000 b974 	b.w	800b4cc <__retarget_lock_init_recursive>
 800b1e4:	bd10      	pop	{r4, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0800b315 	.word	0x0800b315
 800b1ec:	0800b337 	.word	0x0800b337
 800b1f0:	0800b36f 	.word	0x0800b36f
 800b1f4:	0800b393 	.word	0x0800b393
 800b1f8:	20001e5c 	.word	0x20001e5c

0800b1fc <stdio_exit_handler>:
 800b1fc:	4a02      	ldr	r2, [pc, #8]	; (800b208 <stdio_exit_handler+0xc>)
 800b1fe:	4903      	ldr	r1, [pc, #12]	; (800b20c <stdio_exit_handler+0x10>)
 800b200:	4803      	ldr	r0, [pc, #12]	; (800b210 <stdio_exit_handler+0x14>)
 800b202:	f000 b869 	b.w	800b2d8 <_fwalk_sglue>
 800b206:	bf00      	nop
 800b208:	20000184 	.word	0x20000184
 800b20c:	0800c845 	.word	0x0800c845
 800b210:	200002fc 	.word	0x200002fc

0800b214 <cleanup_stdio>:
 800b214:	6841      	ldr	r1, [r0, #4]
 800b216:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <cleanup_stdio+0x34>)
 800b218:	4299      	cmp	r1, r3
 800b21a:	b510      	push	{r4, lr}
 800b21c:	4604      	mov	r4, r0
 800b21e:	d001      	beq.n	800b224 <cleanup_stdio+0x10>
 800b220:	f001 fb10 	bl	800c844 <_fflush_r>
 800b224:	68a1      	ldr	r1, [r4, #8]
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <cleanup_stdio+0x38>)
 800b228:	4299      	cmp	r1, r3
 800b22a:	d002      	beq.n	800b232 <cleanup_stdio+0x1e>
 800b22c:	4620      	mov	r0, r4
 800b22e:	f001 fb09 	bl	800c844 <_fflush_r>
 800b232:	68e1      	ldr	r1, [r4, #12]
 800b234:	4b06      	ldr	r3, [pc, #24]	; (800b250 <cleanup_stdio+0x3c>)
 800b236:	4299      	cmp	r1, r3
 800b238:	d004      	beq.n	800b244 <cleanup_stdio+0x30>
 800b23a:	4620      	mov	r0, r4
 800b23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b240:	f001 bb00 	b.w	800c844 <_fflush_r>
 800b244:	bd10      	pop	{r4, pc}
 800b246:	bf00      	nop
 800b248:	20001e5c 	.word	0x20001e5c
 800b24c:	20001ec4 	.word	0x20001ec4
 800b250:	20001f2c 	.word	0x20001f2c

0800b254 <global_stdio_init.part.0>:
 800b254:	b510      	push	{r4, lr}
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <global_stdio_init.part.0+0x30>)
 800b258:	4c0b      	ldr	r4, [pc, #44]	; (800b288 <global_stdio_init.part.0+0x34>)
 800b25a:	4a0c      	ldr	r2, [pc, #48]	; (800b28c <global_stdio_init.part.0+0x38>)
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	4620      	mov	r0, r4
 800b260:	2200      	movs	r2, #0
 800b262:	2104      	movs	r1, #4
 800b264:	f7ff ff94 	bl	800b190 <std>
 800b268:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b26c:	2201      	movs	r2, #1
 800b26e:	2109      	movs	r1, #9
 800b270:	f7ff ff8e 	bl	800b190 <std>
 800b274:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b278:	2202      	movs	r2, #2
 800b27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b27e:	2112      	movs	r1, #18
 800b280:	f7ff bf86 	b.w	800b190 <std>
 800b284:	20001f94 	.word	0x20001f94
 800b288:	20001e5c 	.word	0x20001e5c
 800b28c:	0800b1fd 	.word	0x0800b1fd

0800b290 <__sfp_lock_acquire>:
 800b290:	4801      	ldr	r0, [pc, #4]	; (800b298 <__sfp_lock_acquire+0x8>)
 800b292:	f000 b91c 	b.w	800b4ce <__retarget_lock_acquire_recursive>
 800b296:	bf00      	nop
 800b298:	20001f9d 	.word	0x20001f9d

0800b29c <__sfp_lock_release>:
 800b29c:	4801      	ldr	r0, [pc, #4]	; (800b2a4 <__sfp_lock_release+0x8>)
 800b29e:	f000 b917 	b.w	800b4d0 <__retarget_lock_release_recursive>
 800b2a2:	bf00      	nop
 800b2a4:	20001f9d 	.word	0x20001f9d

0800b2a8 <__sinit>:
 800b2a8:	b510      	push	{r4, lr}
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	f7ff fff0 	bl	800b290 <__sfp_lock_acquire>
 800b2b0:	6a23      	ldr	r3, [r4, #32]
 800b2b2:	b11b      	cbz	r3, 800b2bc <__sinit+0x14>
 800b2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b8:	f7ff bff0 	b.w	800b29c <__sfp_lock_release>
 800b2bc:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <__sinit+0x28>)
 800b2be:	6223      	str	r3, [r4, #32]
 800b2c0:	4b04      	ldr	r3, [pc, #16]	; (800b2d4 <__sinit+0x2c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1f5      	bne.n	800b2b4 <__sinit+0xc>
 800b2c8:	f7ff ffc4 	bl	800b254 <global_stdio_init.part.0>
 800b2cc:	e7f2      	b.n	800b2b4 <__sinit+0xc>
 800b2ce:	bf00      	nop
 800b2d0:	0800b215 	.word	0x0800b215
 800b2d4:	20001f94 	.word	0x20001f94

0800b2d8 <_fwalk_sglue>:
 800b2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2dc:	4607      	mov	r7, r0
 800b2de:	4688      	mov	r8, r1
 800b2e0:	4614      	mov	r4, r2
 800b2e2:	2600      	movs	r6, #0
 800b2e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2e8:	f1b9 0901 	subs.w	r9, r9, #1
 800b2ec:	d505      	bpl.n	800b2fa <_fwalk_sglue+0x22>
 800b2ee:	6824      	ldr	r4, [r4, #0]
 800b2f0:	2c00      	cmp	r4, #0
 800b2f2:	d1f7      	bne.n	800b2e4 <_fwalk_sglue+0xc>
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fa:	89ab      	ldrh	r3, [r5, #12]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d907      	bls.n	800b310 <_fwalk_sglue+0x38>
 800b300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b304:	3301      	adds	r3, #1
 800b306:	d003      	beq.n	800b310 <_fwalk_sglue+0x38>
 800b308:	4629      	mov	r1, r5
 800b30a:	4638      	mov	r0, r7
 800b30c:	47c0      	blx	r8
 800b30e:	4306      	orrs	r6, r0
 800b310:	3568      	adds	r5, #104	; 0x68
 800b312:	e7e9      	b.n	800b2e8 <_fwalk_sglue+0x10>

0800b314 <__sread>:
 800b314:	b510      	push	{r4, lr}
 800b316:	460c      	mov	r4, r1
 800b318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b31c:	f000 f888 	bl	800b430 <_read_r>
 800b320:	2800      	cmp	r0, #0
 800b322:	bfab      	itete	ge
 800b324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b326:	89a3      	ldrhlt	r3, [r4, #12]
 800b328:	181b      	addge	r3, r3, r0
 800b32a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b32e:	bfac      	ite	ge
 800b330:	6563      	strge	r3, [r4, #84]	; 0x54
 800b332:	81a3      	strhlt	r3, [r4, #12]
 800b334:	bd10      	pop	{r4, pc}

0800b336 <__swrite>:
 800b336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33a:	461f      	mov	r7, r3
 800b33c:	898b      	ldrh	r3, [r1, #12]
 800b33e:	05db      	lsls	r3, r3, #23
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
 800b344:	4616      	mov	r6, r2
 800b346:	d505      	bpl.n	800b354 <__swrite+0x1e>
 800b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34c:	2302      	movs	r3, #2
 800b34e:	2200      	movs	r2, #0
 800b350:	f000 f85c 	bl	800b40c <_lseek_r>
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b35a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b35e:	81a3      	strh	r3, [r4, #12]
 800b360:	4632      	mov	r2, r6
 800b362:	463b      	mov	r3, r7
 800b364:	4628      	mov	r0, r5
 800b366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	f000 b873 	b.w	800b454 <_write_r>

0800b36e <__sseek>:
 800b36e:	b510      	push	{r4, lr}
 800b370:	460c      	mov	r4, r1
 800b372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b376:	f000 f849 	bl	800b40c <_lseek_r>
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	bf15      	itete	ne
 800b380:	6560      	strne	r0, [r4, #84]	; 0x54
 800b382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b38a:	81a3      	strheq	r3, [r4, #12]
 800b38c:	bf18      	it	ne
 800b38e:	81a3      	strhne	r3, [r4, #12]
 800b390:	bd10      	pop	{r4, pc}

0800b392 <__sclose>:
 800b392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b396:	f000 b829 	b.w	800b3ec <_close_r>

0800b39a <memset>:
 800b39a:	4402      	add	r2, r0
 800b39c:	4603      	mov	r3, r0
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d100      	bne.n	800b3a4 <memset+0xa>
 800b3a2:	4770      	bx	lr
 800b3a4:	f803 1b01 	strb.w	r1, [r3], #1
 800b3a8:	e7f9      	b.n	800b39e <memset+0x4>

0800b3aa <strcat>:
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	7814      	ldrb	r4, [r2, #0]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	3201      	adds	r2, #1
 800b3b4:	2c00      	cmp	r4, #0
 800b3b6:	d1fa      	bne.n	800b3ae <strcat+0x4>
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3c2:	2a00      	cmp	r2, #0
 800b3c4:	d1f9      	bne.n	800b3ba <strcat+0x10>
 800b3c6:	bd10      	pop	{r4, pc}

0800b3c8 <strncmp>:
 800b3c8:	b510      	push	{r4, lr}
 800b3ca:	b16a      	cbz	r2, 800b3e8 <strncmp+0x20>
 800b3cc:	3901      	subs	r1, #1
 800b3ce:	1884      	adds	r4, r0, r2
 800b3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d103      	bne.n	800b3e4 <strncmp+0x1c>
 800b3dc:	42a0      	cmp	r0, r4
 800b3de:	d001      	beq.n	800b3e4 <strncmp+0x1c>
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	d1f5      	bne.n	800b3d0 <strncmp+0x8>
 800b3e4:	1ad0      	subs	r0, r2, r3
 800b3e6:	bd10      	pop	{r4, pc}
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	e7fc      	b.n	800b3e6 <strncmp+0x1e>

0800b3ec <_close_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4d06      	ldr	r5, [pc, #24]	; (800b408 <_close_r+0x1c>)
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	602b      	str	r3, [r5, #0]
 800b3f8:	f7f6 fa95 	bl	8001926 <_close>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_close_r+0x1a>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_close_r+0x1a>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	20001f98 	.word	0x20001f98

0800b40c <_lseek_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4d07      	ldr	r5, [pc, #28]	; (800b42c <_lseek_r+0x20>)
 800b410:	4604      	mov	r4, r0
 800b412:	4608      	mov	r0, r1
 800b414:	4611      	mov	r1, r2
 800b416:	2200      	movs	r2, #0
 800b418:	602a      	str	r2, [r5, #0]
 800b41a:	461a      	mov	r2, r3
 800b41c:	f7f6 faaa 	bl	8001974 <_lseek>
 800b420:	1c43      	adds	r3, r0, #1
 800b422:	d102      	bne.n	800b42a <_lseek_r+0x1e>
 800b424:	682b      	ldr	r3, [r5, #0]
 800b426:	b103      	cbz	r3, 800b42a <_lseek_r+0x1e>
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	bd38      	pop	{r3, r4, r5, pc}
 800b42c:	20001f98 	.word	0x20001f98

0800b430 <_read_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d07      	ldr	r5, [pc, #28]	; (800b450 <_read_r+0x20>)
 800b434:	4604      	mov	r4, r0
 800b436:	4608      	mov	r0, r1
 800b438:	4611      	mov	r1, r2
 800b43a:	2200      	movs	r2, #0
 800b43c:	602a      	str	r2, [r5, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	f7f6 fa38 	bl	80018b4 <_read>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_read_r+0x1e>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_read_r+0x1e>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	20001f98 	.word	0x20001f98

0800b454 <_write_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	; (800b474 <_write_r+0x20>)
 800b458:	4604      	mov	r4, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	602a      	str	r2, [r5, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f7f6 fa43 	bl	80018ee <_write>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_write_r+0x1e>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_write_r+0x1e>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20001f98 	.word	0x20001f98

0800b478 <__errno>:
 800b478:	4b01      	ldr	r3, [pc, #4]	; (800b480 <__errno+0x8>)
 800b47a:	6818      	ldr	r0, [r3, #0]
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	20000348 	.word	0x20000348

0800b484 <__libc_init_array>:
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	4d0d      	ldr	r5, [pc, #52]	; (800b4bc <__libc_init_array+0x38>)
 800b488:	4c0d      	ldr	r4, [pc, #52]	; (800b4c0 <__libc_init_array+0x3c>)
 800b48a:	1b64      	subs	r4, r4, r5
 800b48c:	10a4      	asrs	r4, r4, #2
 800b48e:	2600      	movs	r6, #0
 800b490:	42a6      	cmp	r6, r4
 800b492:	d109      	bne.n	800b4a8 <__libc_init_array+0x24>
 800b494:	4d0b      	ldr	r5, [pc, #44]	; (800b4c4 <__libc_init_array+0x40>)
 800b496:	4c0c      	ldr	r4, [pc, #48]	; (800b4c8 <__libc_init_array+0x44>)
 800b498:	f001 fe92 	bl	800d1c0 <_init>
 800b49c:	1b64      	subs	r4, r4, r5
 800b49e:	10a4      	asrs	r4, r4, #2
 800b4a0:	2600      	movs	r6, #0
 800b4a2:	42a6      	cmp	r6, r4
 800b4a4:	d105      	bne.n	800b4b2 <__libc_init_array+0x2e>
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}
 800b4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ac:	4798      	blx	r3
 800b4ae:	3601      	adds	r6, #1
 800b4b0:	e7ee      	b.n	800b490 <__libc_init_array+0xc>
 800b4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4b6:	4798      	blx	r3
 800b4b8:	3601      	adds	r6, #1
 800b4ba:	e7f2      	b.n	800b4a2 <__libc_init_array+0x1e>
 800b4bc:	0800d6f4 	.word	0x0800d6f4
 800b4c0:	0800d6f4 	.word	0x0800d6f4
 800b4c4:	0800d6f4 	.word	0x0800d6f4
 800b4c8:	0800d6f8 	.word	0x0800d6f8

0800b4cc <__retarget_lock_init_recursive>:
 800b4cc:	4770      	bx	lr

0800b4ce <__retarget_lock_acquire_recursive>:
 800b4ce:	4770      	bx	lr

0800b4d0 <__retarget_lock_release_recursive>:
 800b4d0:	4770      	bx	lr

0800b4d2 <memcpy>:
 800b4d2:	440a      	add	r2, r1
 800b4d4:	4291      	cmp	r1, r2
 800b4d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4da:	d100      	bne.n	800b4de <memcpy+0xc>
 800b4dc:	4770      	bx	lr
 800b4de:	b510      	push	{r4, lr}
 800b4e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4e8:	4291      	cmp	r1, r2
 800b4ea:	d1f9      	bne.n	800b4e0 <memcpy+0xe>
 800b4ec:	bd10      	pop	{r4, pc}
	...

0800b4f0 <nan>:
 800b4f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b4f8 <nan+0x8>
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	00000000 	.word	0x00000000
 800b4fc:	7ff80000 	.word	0x7ff80000

0800b500 <_free_r>:
 800b500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b502:	2900      	cmp	r1, #0
 800b504:	d044      	beq.n	800b590 <_free_r+0x90>
 800b506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b50a:	9001      	str	r0, [sp, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f1a1 0404 	sub.w	r4, r1, #4
 800b512:	bfb8      	it	lt
 800b514:	18e4      	addlt	r4, r4, r3
 800b516:	f000 fc49 	bl	800bdac <__malloc_lock>
 800b51a:	4a1e      	ldr	r2, [pc, #120]	; (800b594 <_free_r+0x94>)
 800b51c:	9801      	ldr	r0, [sp, #4]
 800b51e:	6813      	ldr	r3, [r2, #0]
 800b520:	b933      	cbnz	r3, 800b530 <_free_r+0x30>
 800b522:	6063      	str	r3, [r4, #4]
 800b524:	6014      	str	r4, [r2, #0]
 800b526:	b003      	add	sp, #12
 800b528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b52c:	f000 bc44 	b.w	800bdb8 <__malloc_unlock>
 800b530:	42a3      	cmp	r3, r4
 800b532:	d908      	bls.n	800b546 <_free_r+0x46>
 800b534:	6825      	ldr	r5, [r4, #0]
 800b536:	1961      	adds	r1, r4, r5
 800b538:	428b      	cmp	r3, r1
 800b53a:	bf01      	itttt	eq
 800b53c:	6819      	ldreq	r1, [r3, #0]
 800b53e:	685b      	ldreq	r3, [r3, #4]
 800b540:	1949      	addeq	r1, r1, r5
 800b542:	6021      	streq	r1, [r4, #0]
 800b544:	e7ed      	b.n	800b522 <_free_r+0x22>
 800b546:	461a      	mov	r2, r3
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	b10b      	cbz	r3, 800b550 <_free_r+0x50>
 800b54c:	42a3      	cmp	r3, r4
 800b54e:	d9fa      	bls.n	800b546 <_free_r+0x46>
 800b550:	6811      	ldr	r1, [r2, #0]
 800b552:	1855      	adds	r5, r2, r1
 800b554:	42a5      	cmp	r5, r4
 800b556:	d10b      	bne.n	800b570 <_free_r+0x70>
 800b558:	6824      	ldr	r4, [r4, #0]
 800b55a:	4421      	add	r1, r4
 800b55c:	1854      	adds	r4, r2, r1
 800b55e:	42a3      	cmp	r3, r4
 800b560:	6011      	str	r1, [r2, #0]
 800b562:	d1e0      	bne.n	800b526 <_free_r+0x26>
 800b564:	681c      	ldr	r4, [r3, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	6053      	str	r3, [r2, #4]
 800b56a:	440c      	add	r4, r1
 800b56c:	6014      	str	r4, [r2, #0]
 800b56e:	e7da      	b.n	800b526 <_free_r+0x26>
 800b570:	d902      	bls.n	800b578 <_free_r+0x78>
 800b572:	230c      	movs	r3, #12
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	e7d6      	b.n	800b526 <_free_r+0x26>
 800b578:	6825      	ldr	r5, [r4, #0]
 800b57a:	1961      	adds	r1, r4, r5
 800b57c:	428b      	cmp	r3, r1
 800b57e:	bf04      	itt	eq
 800b580:	6819      	ldreq	r1, [r3, #0]
 800b582:	685b      	ldreq	r3, [r3, #4]
 800b584:	6063      	str	r3, [r4, #4]
 800b586:	bf04      	itt	eq
 800b588:	1949      	addeq	r1, r1, r5
 800b58a:	6021      	streq	r1, [r4, #0]
 800b58c:	6054      	str	r4, [r2, #4]
 800b58e:	e7ca      	b.n	800b526 <_free_r+0x26>
 800b590:	b003      	add	sp, #12
 800b592:	bd30      	pop	{r4, r5, pc}
 800b594:	20001fa0 	.word	0x20001fa0

0800b598 <rshift>:
 800b598:	6903      	ldr	r3, [r0, #16]
 800b59a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b59e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b5a6:	f100 0414 	add.w	r4, r0, #20
 800b5aa:	dd45      	ble.n	800b638 <rshift+0xa0>
 800b5ac:	f011 011f 	ands.w	r1, r1, #31
 800b5b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b5b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b5b8:	d10c      	bne.n	800b5d4 <rshift+0x3c>
 800b5ba:	f100 0710 	add.w	r7, r0, #16
 800b5be:	4629      	mov	r1, r5
 800b5c0:	42b1      	cmp	r1, r6
 800b5c2:	d334      	bcc.n	800b62e <rshift+0x96>
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	1eea      	subs	r2, r5, #3
 800b5ca:	4296      	cmp	r6, r2
 800b5cc:	bf38      	it	cc
 800b5ce:	2300      	movcc	r3, #0
 800b5d0:	4423      	add	r3, r4
 800b5d2:	e015      	b.n	800b600 <rshift+0x68>
 800b5d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b5d8:	f1c1 0820 	rsb	r8, r1, #32
 800b5dc:	40cf      	lsrs	r7, r1
 800b5de:	f105 0e04 	add.w	lr, r5, #4
 800b5e2:	46a1      	mov	r9, r4
 800b5e4:	4576      	cmp	r6, lr
 800b5e6:	46f4      	mov	ip, lr
 800b5e8:	d815      	bhi.n	800b616 <rshift+0x7e>
 800b5ea:	1a9a      	subs	r2, r3, r2
 800b5ec:	0092      	lsls	r2, r2, #2
 800b5ee:	3a04      	subs	r2, #4
 800b5f0:	3501      	adds	r5, #1
 800b5f2:	42ae      	cmp	r6, r5
 800b5f4:	bf38      	it	cc
 800b5f6:	2200      	movcc	r2, #0
 800b5f8:	18a3      	adds	r3, r4, r2
 800b5fa:	50a7      	str	r7, [r4, r2]
 800b5fc:	b107      	cbz	r7, 800b600 <rshift+0x68>
 800b5fe:	3304      	adds	r3, #4
 800b600:	1b1a      	subs	r2, r3, r4
 800b602:	42a3      	cmp	r3, r4
 800b604:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b608:	bf08      	it	eq
 800b60a:	2300      	moveq	r3, #0
 800b60c:	6102      	str	r2, [r0, #16]
 800b60e:	bf08      	it	eq
 800b610:	6143      	streq	r3, [r0, #20]
 800b612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b616:	f8dc c000 	ldr.w	ip, [ip]
 800b61a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b61e:	ea4c 0707 	orr.w	r7, ip, r7
 800b622:	f849 7b04 	str.w	r7, [r9], #4
 800b626:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b62a:	40cf      	lsrs	r7, r1
 800b62c:	e7da      	b.n	800b5e4 <rshift+0x4c>
 800b62e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b632:	f847 cf04 	str.w	ip, [r7, #4]!
 800b636:	e7c3      	b.n	800b5c0 <rshift+0x28>
 800b638:	4623      	mov	r3, r4
 800b63a:	e7e1      	b.n	800b600 <rshift+0x68>

0800b63c <__hexdig_fun>:
 800b63c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b640:	2b09      	cmp	r3, #9
 800b642:	d802      	bhi.n	800b64a <__hexdig_fun+0xe>
 800b644:	3820      	subs	r0, #32
 800b646:	b2c0      	uxtb	r0, r0
 800b648:	4770      	bx	lr
 800b64a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b64e:	2b05      	cmp	r3, #5
 800b650:	d801      	bhi.n	800b656 <__hexdig_fun+0x1a>
 800b652:	3847      	subs	r0, #71	; 0x47
 800b654:	e7f7      	b.n	800b646 <__hexdig_fun+0xa>
 800b656:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b65a:	2b05      	cmp	r3, #5
 800b65c:	d801      	bhi.n	800b662 <__hexdig_fun+0x26>
 800b65e:	3827      	subs	r0, #39	; 0x27
 800b660:	e7f1      	b.n	800b646 <__hexdig_fun+0xa>
 800b662:	2000      	movs	r0, #0
 800b664:	4770      	bx	lr
	...

0800b668 <__gethex>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4617      	mov	r7, r2
 800b66e:	680a      	ldr	r2, [r1, #0]
 800b670:	b085      	sub	sp, #20
 800b672:	f102 0b02 	add.w	fp, r2, #2
 800b676:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b67a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b67e:	4681      	mov	r9, r0
 800b680:	468a      	mov	sl, r1
 800b682:	9302      	str	r3, [sp, #8]
 800b684:	32fe      	adds	r2, #254	; 0xfe
 800b686:	eb02 030b 	add.w	r3, r2, fp
 800b68a:	46d8      	mov	r8, fp
 800b68c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	2830      	cmp	r0, #48	; 0x30
 800b694:	d0f7      	beq.n	800b686 <__gethex+0x1e>
 800b696:	f7ff ffd1 	bl	800b63c <__hexdig_fun>
 800b69a:	4604      	mov	r4, r0
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d138      	bne.n	800b712 <__gethex+0xaa>
 800b6a0:	49a7      	ldr	r1, [pc, #668]	; (800b940 <__gethex+0x2d8>)
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	f7ff fe8f 	bl	800b3c8 <strncmp>
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d169      	bne.n	800b784 <__gethex+0x11c>
 800b6b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b6b4:	465d      	mov	r5, fp
 800b6b6:	f7ff ffc1 	bl	800b63c <__hexdig_fun>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d064      	beq.n	800b788 <__gethex+0x120>
 800b6be:	465a      	mov	r2, fp
 800b6c0:	7810      	ldrb	r0, [r2, #0]
 800b6c2:	2830      	cmp	r0, #48	; 0x30
 800b6c4:	4690      	mov	r8, r2
 800b6c6:	f102 0201 	add.w	r2, r2, #1
 800b6ca:	d0f9      	beq.n	800b6c0 <__gethex+0x58>
 800b6cc:	f7ff ffb6 	bl	800b63c <__hexdig_fun>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	fab0 f480 	clz	r4, r0
 800b6d6:	0964      	lsrs	r4, r4, #5
 800b6d8:	465e      	mov	r6, fp
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	4642      	mov	r2, r8
 800b6de:	4615      	mov	r5, r2
 800b6e0:	3201      	adds	r2, #1
 800b6e2:	7828      	ldrb	r0, [r5, #0]
 800b6e4:	f7ff ffaa 	bl	800b63c <__hexdig_fun>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d1f8      	bne.n	800b6de <__gethex+0x76>
 800b6ec:	4994      	ldr	r1, [pc, #592]	; (800b940 <__gethex+0x2d8>)
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f7ff fe69 	bl	800b3c8 <strncmp>
 800b6f6:	b978      	cbnz	r0, 800b718 <__gethex+0xb0>
 800b6f8:	b946      	cbnz	r6, 800b70c <__gethex+0xa4>
 800b6fa:	1c6e      	adds	r6, r5, #1
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	4615      	mov	r5, r2
 800b700:	3201      	adds	r2, #1
 800b702:	7828      	ldrb	r0, [r5, #0]
 800b704:	f7ff ff9a 	bl	800b63c <__hexdig_fun>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1f8      	bne.n	800b6fe <__gethex+0x96>
 800b70c:	1b73      	subs	r3, r6, r5
 800b70e:	009e      	lsls	r6, r3, #2
 800b710:	e004      	b.n	800b71c <__gethex+0xb4>
 800b712:	2400      	movs	r4, #0
 800b714:	4626      	mov	r6, r4
 800b716:	e7e1      	b.n	800b6dc <__gethex+0x74>
 800b718:	2e00      	cmp	r6, #0
 800b71a:	d1f7      	bne.n	800b70c <__gethex+0xa4>
 800b71c:	782b      	ldrb	r3, [r5, #0]
 800b71e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b722:	2b50      	cmp	r3, #80	; 0x50
 800b724:	d13d      	bne.n	800b7a2 <__gethex+0x13a>
 800b726:	786b      	ldrb	r3, [r5, #1]
 800b728:	2b2b      	cmp	r3, #43	; 0x2b
 800b72a:	d02f      	beq.n	800b78c <__gethex+0x124>
 800b72c:	2b2d      	cmp	r3, #45	; 0x2d
 800b72e:	d031      	beq.n	800b794 <__gethex+0x12c>
 800b730:	1c69      	adds	r1, r5, #1
 800b732:	f04f 0b00 	mov.w	fp, #0
 800b736:	7808      	ldrb	r0, [r1, #0]
 800b738:	f7ff ff80 	bl	800b63c <__hexdig_fun>
 800b73c:	1e42      	subs	r2, r0, #1
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	2a18      	cmp	r2, #24
 800b742:	d82e      	bhi.n	800b7a2 <__gethex+0x13a>
 800b744:	f1a0 0210 	sub.w	r2, r0, #16
 800b748:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b74c:	f7ff ff76 	bl	800b63c <__hexdig_fun>
 800b750:	f100 3cff 	add.w	ip, r0, #4294967295
 800b754:	fa5f fc8c 	uxtb.w	ip, ip
 800b758:	f1bc 0f18 	cmp.w	ip, #24
 800b75c:	d91d      	bls.n	800b79a <__gethex+0x132>
 800b75e:	f1bb 0f00 	cmp.w	fp, #0
 800b762:	d000      	beq.n	800b766 <__gethex+0xfe>
 800b764:	4252      	negs	r2, r2
 800b766:	4416      	add	r6, r2
 800b768:	f8ca 1000 	str.w	r1, [sl]
 800b76c:	b1dc      	cbz	r4, 800b7a6 <__gethex+0x13e>
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	bf14      	ite	ne
 800b774:	f04f 0800 	movne.w	r8, #0
 800b778:	f04f 0806 	moveq.w	r8, #6
 800b77c:	4640      	mov	r0, r8
 800b77e:	b005      	add	sp, #20
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	4645      	mov	r5, r8
 800b786:	4626      	mov	r6, r4
 800b788:	2401      	movs	r4, #1
 800b78a:	e7c7      	b.n	800b71c <__gethex+0xb4>
 800b78c:	f04f 0b00 	mov.w	fp, #0
 800b790:	1ca9      	adds	r1, r5, #2
 800b792:	e7d0      	b.n	800b736 <__gethex+0xce>
 800b794:	f04f 0b01 	mov.w	fp, #1
 800b798:	e7fa      	b.n	800b790 <__gethex+0x128>
 800b79a:	230a      	movs	r3, #10
 800b79c:	fb03 0002 	mla	r0, r3, r2, r0
 800b7a0:	e7d0      	b.n	800b744 <__gethex+0xdc>
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	e7e0      	b.n	800b768 <__gethex+0x100>
 800b7a6:	eba5 0308 	sub.w	r3, r5, r8
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	2b07      	cmp	r3, #7
 800b7b0:	dc0a      	bgt.n	800b7c8 <__gethex+0x160>
 800b7b2:	4648      	mov	r0, r9
 800b7b4:	f000 fb06 	bl	800bdc4 <_Balloc>
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	b940      	cbnz	r0, 800b7ce <__gethex+0x166>
 800b7bc:	4b61      	ldr	r3, [pc, #388]	; (800b944 <__gethex+0x2dc>)
 800b7be:	4602      	mov	r2, r0
 800b7c0:	21e4      	movs	r1, #228	; 0xe4
 800b7c2:	4861      	ldr	r0, [pc, #388]	; (800b948 <__gethex+0x2e0>)
 800b7c4:	f001 f876 	bl	800c8b4 <__assert_func>
 800b7c8:	3101      	adds	r1, #1
 800b7ca:	105b      	asrs	r3, r3, #1
 800b7cc:	e7ef      	b.n	800b7ae <__gethex+0x146>
 800b7ce:	f100 0a14 	add.w	sl, r0, #20
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	495a      	ldr	r1, [pc, #360]	; (800b940 <__gethex+0x2d8>)
 800b7d6:	f8cd a004 	str.w	sl, [sp, #4]
 800b7da:	469b      	mov	fp, r3
 800b7dc:	45a8      	cmp	r8, r5
 800b7de:	d342      	bcc.n	800b866 <__gethex+0x1fe>
 800b7e0:	9801      	ldr	r0, [sp, #4]
 800b7e2:	f840 bb04 	str.w	fp, [r0], #4
 800b7e6:	eba0 000a 	sub.w	r0, r0, sl
 800b7ea:	1080      	asrs	r0, r0, #2
 800b7ec:	6120      	str	r0, [r4, #16]
 800b7ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b7f2:	4658      	mov	r0, fp
 800b7f4:	f000 fbd8 	bl	800bfa8 <__hi0bits>
 800b7f8:	683d      	ldr	r5, [r7, #0]
 800b7fa:	eba8 0000 	sub.w	r0, r8, r0
 800b7fe:	42a8      	cmp	r0, r5
 800b800:	dd59      	ble.n	800b8b6 <__gethex+0x24e>
 800b802:	eba0 0805 	sub.w	r8, r0, r5
 800b806:	4641      	mov	r1, r8
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 ff67 	bl	800c6dc <__any_on>
 800b80e:	4683      	mov	fp, r0
 800b810:	b1b8      	cbz	r0, 800b842 <__gethex+0x1da>
 800b812:	f108 33ff 	add.w	r3, r8, #4294967295
 800b816:	1159      	asrs	r1, r3, #5
 800b818:	f003 021f 	and.w	r2, r3, #31
 800b81c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b820:	f04f 0b01 	mov.w	fp, #1
 800b824:	fa0b f202 	lsl.w	r2, fp, r2
 800b828:	420a      	tst	r2, r1
 800b82a:	d00a      	beq.n	800b842 <__gethex+0x1da>
 800b82c:	455b      	cmp	r3, fp
 800b82e:	dd06      	ble.n	800b83e <__gethex+0x1d6>
 800b830:	f1a8 0102 	sub.w	r1, r8, #2
 800b834:	4620      	mov	r0, r4
 800b836:	f000 ff51 	bl	800c6dc <__any_on>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d138      	bne.n	800b8b0 <__gethex+0x248>
 800b83e:	f04f 0b02 	mov.w	fp, #2
 800b842:	4641      	mov	r1, r8
 800b844:	4620      	mov	r0, r4
 800b846:	f7ff fea7 	bl	800b598 <rshift>
 800b84a:	4446      	add	r6, r8
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	42b3      	cmp	r3, r6
 800b850:	da41      	bge.n	800b8d6 <__gethex+0x26e>
 800b852:	4621      	mov	r1, r4
 800b854:	4648      	mov	r0, r9
 800b856:	f000 faf5 	bl	800be44 <_Bfree>
 800b85a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b85c:	2300      	movs	r3, #0
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b864:	e78a      	b.n	800b77c <__gethex+0x114>
 800b866:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b86a:	2a2e      	cmp	r2, #46	; 0x2e
 800b86c:	d014      	beq.n	800b898 <__gethex+0x230>
 800b86e:	2b20      	cmp	r3, #32
 800b870:	d106      	bne.n	800b880 <__gethex+0x218>
 800b872:	9b01      	ldr	r3, [sp, #4]
 800b874:	f843 bb04 	str.w	fp, [r3], #4
 800b878:	f04f 0b00 	mov.w	fp, #0
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	465b      	mov	r3, fp
 800b880:	7828      	ldrb	r0, [r5, #0]
 800b882:	9303      	str	r3, [sp, #12]
 800b884:	f7ff feda 	bl	800b63c <__hexdig_fun>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	f000 000f 	and.w	r0, r0, #15
 800b88e:	4098      	lsls	r0, r3
 800b890:	ea4b 0b00 	orr.w	fp, fp, r0
 800b894:	3304      	adds	r3, #4
 800b896:	e7a1      	b.n	800b7dc <__gethex+0x174>
 800b898:	45a8      	cmp	r8, r5
 800b89a:	d8e8      	bhi.n	800b86e <__gethex+0x206>
 800b89c:	2201      	movs	r2, #1
 800b89e:	4628      	mov	r0, r5
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	f7ff fd91 	bl	800b3c8 <strncmp>
 800b8a6:	4926      	ldr	r1, [pc, #152]	; (800b940 <__gethex+0x2d8>)
 800b8a8:	9b03      	ldr	r3, [sp, #12]
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d1df      	bne.n	800b86e <__gethex+0x206>
 800b8ae:	e795      	b.n	800b7dc <__gethex+0x174>
 800b8b0:	f04f 0b03 	mov.w	fp, #3
 800b8b4:	e7c5      	b.n	800b842 <__gethex+0x1da>
 800b8b6:	da0b      	bge.n	800b8d0 <__gethex+0x268>
 800b8b8:	eba5 0800 	sub.w	r8, r5, r0
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4642      	mov	r2, r8
 800b8c0:	4648      	mov	r0, r9
 800b8c2:	f000 fcd9 	bl	800c278 <__lshift>
 800b8c6:	eba6 0608 	sub.w	r6, r6, r8
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	f100 0a14 	add.w	sl, r0, #20
 800b8d0:	f04f 0b00 	mov.w	fp, #0
 800b8d4:	e7ba      	b.n	800b84c <__gethex+0x1e4>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	42b3      	cmp	r3, r6
 800b8da:	dd73      	ble.n	800b9c4 <__gethex+0x35c>
 800b8dc:	1b9e      	subs	r6, r3, r6
 800b8de:	42b5      	cmp	r5, r6
 800b8e0:	dc34      	bgt.n	800b94c <__gethex+0x2e4>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d023      	beq.n	800b930 <__gethex+0x2c8>
 800b8e8:	2b03      	cmp	r3, #3
 800b8ea:	d025      	beq.n	800b938 <__gethex+0x2d0>
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d115      	bne.n	800b91c <__gethex+0x2b4>
 800b8f0:	42b5      	cmp	r5, r6
 800b8f2:	d113      	bne.n	800b91c <__gethex+0x2b4>
 800b8f4:	2d01      	cmp	r5, #1
 800b8f6:	d10b      	bne.n	800b910 <__gethex+0x2a8>
 800b8f8:	9a02      	ldr	r2, [sp, #8]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	2301      	movs	r3, #1
 800b900:	6123      	str	r3, [r4, #16]
 800b902:	f8ca 3000 	str.w	r3, [sl]
 800b906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b908:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b90c:	601c      	str	r4, [r3, #0]
 800b90e:	e735      	b.n	800b77c <__gethex+0x114>
 800b910:	1e69      	subs	r1, r5, #1
 800b912:	4620      	mov	r0, r4
 800b914:	f000 fee2 	bl	800c6dc <__any_on>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d1ed      	bne.n	800b8f8 <__gethex+0x290>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4648      	mov	r0, r9
 800b920:	f000 fa90 	bl	800be44 <_Bfree>
 800b924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b926:	2300      	movs	r3, #0
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b92e:	e725      	b.n	800b77c <__gethex+0x114>
 800b930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1f2      	bne.n	800b91c <__gethex+0x2b4>
 800b936:	e7df      	b.n	800b8f8 <__gethex+0x290>
 800b938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1dc      	bne.n	800b8f8 <__gethex+0x290>
 800b93e:	e7ed      	b.n	800b91c <__gethex+0x2b4>
 800b940:	0800d338 	.word	0x0800d338
 800b944:	0800d3a0 	.word	0x0800d3a0
 800b948:	0800d3b1 	.word	0x0800d3b1
 800b94c:	f106 38ff 	add.w	r8, r6, #4294967295
 800b950:	f1bb 0f00 	cmp.w	fp, #0
 800b954:	d133      	bne.n	800b9be <__gethex+0x356>
 800b956:	f1b8 0f00 	cmp.w	r8, #0
 800b95a:	d004      	beq.n	800b966 <__gethex+0x2fe>
 800b95c:	4641      	mov	r1, r8
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 febc 	bl	800c6dc <__any_on>
 800b964:	4683      	mov	fp, r0
 800b966:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b96a:	2301      	movs	r3, #1
 800b96c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b970:	f008 081f 	and.w	r8, r8, #31
 800b974:	fa03 f308 	lsl.w	r3, r3, r8
 800b978:	4213      	tst	r3, r2
 800b97a:	4631      	mov	r1, r6
 800b97c:	4620      	mov	r0, r4
 800b97e:	bf18      	it	ne
 800b980:	f04b 0b02 	orrne.w	fp, fp, #2
 800b984:	1bad      	subs	r5, r5, r6
 800b986:	f7ff fe07 	bl	800b598 <rshift>
 800b98a:	687e      	ldr	r6, [r7, #4]
 800b98c:	f04f 0802 	mov.w	r8, #2
 800b990:	f1bb 0f00 	cmp.w	fp, #0
 800b994:	d04a      	beq.n	800ba2c <__gethex+0x3c4>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d016      	beq.n	800b9ca <__gethex+0x362>
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d018      	beq.n	800b9d2 <__gethex+0x36a>
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d109      	bne.n	800b9b8 <__gethex+0x350>
 800b9a4:	f01b 0f02 	tst.w	fp, #2
 800b9a8:	d006      	beq.n	800b9b8 <__gethex+0x350>
 800b9aa:	f8da 3000 	ldr.w	r3, [sl]
 800b9ae:	ea4b 0b03 	orr.w	fp, fp, r3
 800b9b2:	f01b 0f01 	tst.w	fp, #1
 800b9b6:	d10f      	bne.n	800b9d8 <__gethex+0x370>
 800b9b8:	f048 0810 	orr.w	r8, r8, #16
 800b9bc:	e036      	b.n	800ba2c <__gethex+0x3c4>
 800b9be:	f04f 0b01 	mov.w	fp, #1
 800b9c2:	e7d0      	b.n	800b966 <__gethex+0x2fe>
 800b9c4:	f04f 0801 	mov.w	r8, #1
 800b9c8:	e7e2      	b.n	800b990 <__gethex+0x328>
 800b9ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9cc:	f1c3 0301 	rsb	r3, r3, #1
 800b9d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d0ef      	beq.n	800b9b8 <__gethex+0x350>
 800b9d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b9dc:	f104 0214 	add.w	r2, r4, #20
 800b9e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	4694      	mov	ip, r2
 800b9ee:	f852 1b04 	ldr.w	r1, [r2], #4
 800b9f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b9f6:	d01e      	beq.n	800ba36 <__gethex+0x3ce>
 800b9f8:	3101      	adds	r1, #1
 800b9fa:	f8cc 1000 	str.w	r1, [ip]
 800b9fe:	f1b8 0f02 	cmp.w	r8, #2
 800ba02:	f104 0214 	add.w	r2, r4, #20
 800ba06:	d13d      	bne.n	800ba84 <__gethex+0x41c>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	42ab      	cmp	r3, r5
 800ba0e:	d10b      	bne.n	800ba28 <__gethex+0x3c0>
 800ba10:	1169      	asrs	r1, r5, #5
 800ba12:	2301      	movs	r3, #1
 800ba14:	f005 051f 	and.w	r5, r5, #31
 800ba18:	fa03 f505 	lsl.w	r5, r3, r5
 800ba1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba20:	421d      	tst	r5, r3
 800ba22:	bf18      	it	ne
 800ba24:	f04f 0801 	movne.w	r8, #1
 800ba28:	f048 0820 	orr.w	r8, r8, #32
 800ba2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba2e:	601c      	str	r4, [r3, #0]
 800ba30:	9b02      	ldr	r3, [sp, #8]
 800ba32:	601e      	str	r6, [r3, #0]
 800ba34:	e6a2      	b.n	800b77c <__gethex+0x114>
 800ba36:	4290      	cmp	r0, r2
 800ba38:	f842 3c04 	str.w	r3, [r2, #-4]
 800ba3c:	d8d6      	bhi.n	800b9ec <__gethex+0x384>
 800ba3e:	68a2      	ldr	r2, [r4, #8]
 800ba40:	4593      	cmp	fp, r2
 800ba42:	db17      	blt.n	800ba74 <__gethex+0x40c>
 800ba44:	6861      	ldr	r1, [r4, #4]
 800ba46:	4648      	mov	r0, r9
 800ba48:	3101      	adds	r1, #1
 800ba4a:	f000 f9bb 	bl	800bdc4 <_Balloc>
 800ba4e:	4682      	mov	sl, r0
 800ba50:	b918      	cbnz	r0, 800ba5a <__gethex+0x3f2>
 800ba52:	4b1b      	ldr	r3, [pc, #108]	; (800bac0 <__gethex+0x458>)
 800ba54:	4602      	mov	r2, r0
 800ba56:	2184      	movs	r1, #132	; 0x84
 800ba58:	e6b3      	b.n	800b7c2 <__gethex+0x15a>
 800ba5a:	6922      	ldr	r2, [r4, #16]
 800ba5c:	3202      	adds	r2, #2
 800ba5e:	f104 010c 	add.w	r1, r4, #12
 800ba62:	0092      	lsls	r2, r2, #2
 800ba64:	300c      	adds	r0, #12
 800ba66:	f7ff fd34 	bl	800b4d2 <memcpy>
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4648      	mov	r0, r9
 800ba6e:	f000 f9e9 	bl	800be44 <_Bfree>
 800ba72:	4654      	mov	r4, sl
 800ba74:	6922      	ldr	r2, [r4, #16]
 800ba76:	1c51      	adds	r1, r2, #1
 800ba78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ba7c:	6121      	str	r1, [r4, #16]
 800ba7e:	2101      	movs	r1, #1
 800ba80:	6151      	str	r1, [r2, #20]
 800ba82:	e7bc      	b.n	800b9fe <__gethex+0x396>
 800ba84:	6921      	ldr	r1, [r4, #16]
 800ba86:	4559      	cmp	r1, fp
 800ba88:	dd0b      	ble.n	800baa2 <__gethex+0x43a>
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7ff fd83 	bl	800b598 <rshift>
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	3601      	adds	r6, #1
 800ba96:	42b3      	cmp	r3, r6
 800ba98:	f6ff aedb 	blt.w	800b852 <__gethex+0x1ea>
 800ba9c:	f04f 0801 	mov.w	r8, #1
 800baa0:	e7c2      	b.n	800ba28 <__gethex+0x3c0>
 800baa2:	f015 051f 	ands.w	r5, r5, #31
 800baa6:	d0f9      	beq.n	800ba9c <__gethex+0x434>
 800baa8:	9b01      	ldr	r3, [sp, #4]
 800baaa:	441a      	add	r2, r3
 800baac:	f1c5 0520 	rsb	r5, r5, #32
 800bab0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bab4:	f000 fa78 	bl	800bfa8 <__hi0bits>
 800bab8:	42a8      	cmp	r0, r5
 800baba:	dbe6      	blt.n	800ba8a <__gethex+0x422>
 800babc:	e7ee      	b.n	800ba9c <__gethex+0x434>
 800babe:	bf00      	nop
 800bac0:	0800d3a0 	.word	0x0800d3a0

0800bac4 <L_shift>:
 800bac4:	f1c2 0208 	rsb	r2, r2, #8
 800bac8:	0092      	lsls	r2, r2, #2
 800baca:	b570      	push	{r4, r5, r6, lr}
 800bacc:	f1c2 0620 	rsb	r6, r2, #32
 800bad0:	6843      	ldr	r3, [r0, #4]
 800bad2:	6804      	ldr	r4, [r0, #0]
 800bad4:	fa03 f506 	lsl.w	r5, r3, r6
 800bad8:	432c      	orrs	r4, r5
 800bada:	40d3      	lsrs	r3, r2
 800badc:	6004      	str	r4, [r0, #0]
 800bade:	f840 3f04 	str.w	r3, [r0, #4]!
 800bae2:	4288      	cmp	r0, r1
 800bae4:	d3f4      	bcc.n	800bad0 <L_shift+0xc>
 800bae6:	bd70      	pop	{r4, r5, r6, pc}

0800bae8 <__match>:
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	6803      	ldr	r3, [r0, #0]
 800baec:	3301      	adds	r3, #1
 800baee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf2:	b914      	cbnz	r4, 800bafa <__match+0x12>
 800baf4:	6003      	str	r3, [r0, #0]
 800baf6:	2001      	movs	r0, #1
 800baf8:	bd30      	pop	{r4, r5, pc}
 800bafa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb02:	2d19      	cmp	r5, #25
 800bb04:	bf98      	it	ls
 800bb06:	3220      	addls	r2, #32
 800bb08:	42a2      	cmp	r2, r4
 800bb0a:	d0f0      	beq.n	800baee <__match+0x6>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e7f3      	b.n	800baf8 <__match+0x10>

0800bb10 <__hexnan>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	680b      	ldr	r3, [r1, #0]
 800bb16:	6801      	ldr	r1, [r0, #0]
 800bb18:	115e      	asrs	r6, r3, #5
 800bb1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb1e:	f013 031f 	ands.w	r3, r3, #31
 800bb22:	b087      	sub	sp, #28
 800bb24:	bf18      	it	ne
 800bb26:	3604      	addne	r6, #4
 800bb28:	2500      	movs	r5, #0
 800bb2a:	1f37      	subs	r7, r6, #4
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	4690      	mov	r8, r2
 800bb30:	9301      	str	r3, [sp, #4]
 800bb32:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb36:	46b9      	mov	r9, r7
 800bb38:	463c      	mov	r4, r7
 800bb3a:	9502      	str	r5, [sp, #8]
 800bb3c:	46ab      	mov	fp, r5
 800bb3e:	784a      	ldrb	r2, [r1, #1]
 800bb40:	1c4b      	adds	r3, r1, #1
 800bb42:	9303      	str	r3, [sp, #12]
 800bb44:	b342      	cbz	r2, 800bb98 <__hexnan+0x88>
 800bb46:	4610      	mov	r0, r2
 800bb48:	9105      	str	r1, [sp, #20]
 800bb4a:	9204      	str	r2, [sp, #16]
 800bb4c:	f7ff fd76 	bl	800b63c <__hexdig_fun>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d14f      	bne.n	800bbf4 <__hexnan+0xe4>
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	9905      	ldr	r1, [sp, #20]
 800bb58:	2a20      	cmp	r2, #32
 800bb5a:	d818      	bhi.n	800bb8e <__hexnan+0x7e>
 800bb5c:	9b02      	ldr	r3, [sp, #8]
 800bb5e:	459b      	cmp	fp, r3
 800bb60:	dd13      	ble.n	800bb8a <__hexnan+0x7a>
 800bb62:	454c      	cmp	r4, r9
 800bb64:	d206      	bcs.n	800bb74 <__hexnan+0x64>
 800bb66:	2d07      	cmp	r5, #7
 800bb68:	dc04      	bgt.n	800bb74 <__hexnan+0x64>
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f7ff ffa8 	bl	800bac4 <L_shift>
 800bb74:	4544      	cmp	r4, r8
 800bb76:	d950      	bls.n	800bc1a <__hexnan+0x10a>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f1a4 0904 	sub.w	r9, r4, #4
 800bb7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb82:	f8cd b008 	str.w	fp, [sp, #8]
 800bb86:	464c      	mov	r4, r9
 800bb88:	461d      	mov	r5, r3
 800bb8a:	9903      	ldr	r1, [sp, #12]
 800bb8c:	e7d7      	b.n	800bb3e <__hexnan+0x2e>
 800bb8e:	2a29      	cmp	r2, #41	; 0x29
 800bb90:	d155      	bne.n	800bc3e <__hexnan+0x12e>
 800bb92:	3102      	adds	r1, #2
 800bb94:	f8ca 1000 	str.w	r1, [sl]
 800bb98:	f1bb 0f00 	cmp.w	fp, #0
 800bb9c:	d04f      	beq.n	800bc3e <__hexnan+0x12e>
 800bb9e:	454c      	cmp	r4, r9
 800bba0:	d206      	bcs.n	800bbb0 <__hexnan+0xa0>
 800bba2:	2d07      	cmp	r5, #7
 800bba4:	dc04      	bgt.n	800bbb0 <__hexnan+0xa0>
 800bba6:	462a      	mov	r2, r5
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff ff8a 	bl	800bac4 <L_shift>
 800bbb0:	4544      	cmp	r4, r8
 800bbb2:	d934      	bls.n	800bc1e <__hexnan+0x10e>
 800bbb4:	f1a8 0204 	sub.w	r2, r8, #4
 800bbb8:	4623      	mov	r3, r4
 800bbba:	f853 1b04 	ldr.w	r1, [r3], #4
 800bbbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800bbc2:	429f      	cmp	r7, r3
 800bbc4:	d2f9      	bcs.n	800bbba <__hexnan+0xaa>
 800bbc6:	1b3b      	subs	r3, r7, r4
 800bbc8:	f023 0303 	bic.w	r3, r3, #3
 800bbcc:	3304      	adds	r3, #4
 800bbce:	3e03      	subs	r6, #3
 800bbd0:	3401      	adds	r4, #1
 800bbd2:	42a6      	cmp	r6, r4
 800bbd4:	bf38      	it	cc
 800bbd6:	2304      	movcc	r3, #4
 800bbd8:	4443      	add	r3, r8
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f843 2b04 	str.w	r2, [r3], #4
 800bbe0:	429f      	cmp	r7, r3
 800bbe2:	d2fb      	bcs.n	800bbdc <__hexnan+0xcc>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	b91b      	cbnz	r3, 800bbf0 <__hexnan+0xe0>
 800bbe8:	4547      	cmp	r7, r8
 800bbea:	d126      	bne.n	800bc3a <__hexnan+0x12a>
 800bbec:	2301      	movs	r3, #1
 800bbee:	603b      	str	r3, [r7, #0]
 800bbf0:	2005      	movs	r0, #5
 800bbf2:	e025      	b.n	800bc40 <__hexnan+0x130>
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	2d08      	cmp	r5, #8
 800bbf8:	f10b 0b01 	add.w	fp, fp, #1
 800bbfc:	dd06      	ble.n	800bc0c <__hexnan+0xfc>
 800bbfe:	4544      	cmp	r4, r8
 800bc00:	d9c3      	bls.n	800bb8a <__hexnan+0x7a>
 800bc02:	2300      	movs	r3, #0
 800bc04:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc08:	2501      	movs	r5, #1
 800bc0a:	3c04      	subs	r4, #4
 800bc0c:	6822      	ldr	r2, [r4, #0]
 800bc0e:	f000 000f 	and.w	r0, r0, #15
 800bc12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc16:	6020      	str	r0, [r4, #0]
 800bc18:	e7b7      	b.n	800bb8a <__hexnan+0x7a>
 800bc1a:	2508      	movs	r5, #8
 800bc1c:	e7b5      	b.n	800bb8a <__hexnan+0x7a>
 800bc1e:	9b01      	ldr	r3, [sp, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d0df      	beq.n	800bbe4 <__hexnan+0xd4>
 800bc24:	f1c3 0320 	rsb	r3, r3, #32
 800bc28:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2c:	40da      	lsrs	r2, r3
 800bc2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc32:	4013      	ands	r3, r2
 800bc34:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc38:	e7d4      	b.n	800bbe4 <__hexnan+0xd4>
 800bc3a:	3f04      	subs	r7, #4
 800bc3c:	e7d2      	b.n	800bbe4 <__hexnan+0xd4>
 800bc3e:	2004      	movs	r0, #4
 800bc40:	b007      	add	sp, #28
 800bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bc48 <sbrk_aligned>:
 800bc48:	b570      	push	{r4, r5, r6, lr}
 800bc4a:	4e0e      	ldr	r6, [pc, #56]	; (800bc84 <sbrk_aligned+0x3c>)
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	6831      	ldr	r1, [r6, #0]
 800bc50:	4605      	mov	r5, r0
 800bc52:	b911      	cbnz	r1, 800bc5a <sbrk_aligned+0x12>
 800bc54:	f000 fe1e 	bl	800c894 <_sbrk_r>
 800bc58:	6030      	str	r0, [r6, #0]
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	f000 fe19 	bl	800c894 <_sbrk_r>
 800bc62:	1c43      	adds	r3, r0, #1
 800bc64:	d00a      	beq.n	800bc7c <sbrk_aligned+0x34>
 800bc66:	1cc4      	adds	r4, r0, #3
 800bc68:	f024 0403 	bic.w	r4, r4, #3
 800bc6c:	42a0      	cmp	r0, r4
 800bc6e:	d007      	beq.n	800bc80 <sbrk_aligned+0x38>
 800bc70:	1a21      	subs	r1, r4, r0
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 fe0e 	bl	800c894 <_sbrk_r>
 800bc78:	3001      	adds	r0, #1
 800bc7a:	d101      	bne.n	800bc80 <sbrk_aligned+0x38>
 800bc7c:	f04f 34ff 	mov.w	r4, #4294967295
 800bc80:	4620      	mov	r0, r4
 800bc82:	bd70      	pop	{r4, r5, r6, pc}
 800bc84:	20001fa4 	.word	0x20001fa4

0800bc88 <_malloc_r>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	1ccd      	adds	r5, r1, #3
 800bc8e:	f025 0503 	bic.w	r5, r5, #3
 800bc92:	3508      	adds	r5, #8
 800bc94:	2d0c      	cmp	r5, #12
 800bc96:	bf38      	it	cc
 800bc98:	250c      	movcc	r5, #12
 800bc9a:	2d00      	cmp	r5, #0
 800bc9c:	4607      	mov	r7, r0
 800bc9e:	db01      	blt.n	800bca4 <_malloc_r+0x1c>
 800bca0:	42a9      	cmp	r1, r5
 800bca2:	d905      	bls.n	800bcb0 <_malloc_r+0x28>
 800bca4:	230c      	movs	r3, #12
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	2600      	movs	r6, #0
 800bcaa:	4630      	mov	r0, r6
 800bcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd84 <_malloc_r+0xfc>
 800bcb4:	f000 f87a 	bl	800bdac <__malloc_lock>
 800bcb8:	f8d8 3000 	ldr.w	r3, [r8]
 800bcbc:	461c      	mov	r4, r3
 800bcbe:	bb5c      	cbnz	r4, 800bd18 <_malloc_r+0x90>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7ff ffc0 	bl	800bc48 <sbrk_aligned>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	4604      	mov	r4, r0
 800bccc:	d155      	bne.n	800bd7a <_malloc_r+0xf2>
 800bcce:	f8d8 4000 	ldr.w	r4, [r8]
 800bcd2:	4626      	mov	r6, r4
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	d145      	bne.n	800bd64 <_malloc_r+0xdc>
 800bcd8:	2c00      	cmp	r4, #0
 800bcda:	d048      	beq.n	800bd6e <_malloc_r+0xe6>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	4631      	mov	r1, r6
 800bce0:	4638      	mov	r0, r7
 800bce2:	eb04 0903 	add.w	r9, r4, r3
 800bce6:	f000 fdd5 	bl	800c894 <_sbrk_r>
 800bcea:	4581      	cmp	r9, r0
 800bcec:	d13f      	bne.n	800bd6e <_malloc_r+0xe6>
 800bcee:	6821      	ldr	r1, [r4, #0]
 800bcf0:	1a6d      	subs	r5, r5, r1
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	4638      	mov	r0, r7
 800bcf6:	f7ff ffa7 	bl	800bc48 <sbrk_aligned>
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d037      	beq.n	800bd6e <_malloc_r+0xe6>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	442b      	add	r3, r5
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	f8d8 3000 	ldr.w	r3, [r8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d038      	beq.n	800bd7e <_malloc_r+0xf6>
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	42a2      	cmp	r2, r4
 800bd10:	d12b      	bne.n	800bd6a <_malloc_r+0xe2>
 800bd12:	2200      	movs	r2, #0
 800bd14:	605a      	str	r2, [r3, #4]
 800bd16:	e00f      	b.n	800bd38 <_malloc_r+0xb0>
 800bd18:	6822      	ldr	r2, [r4, #0]
 800bd1a:	1b52      	subs	r2, r2, r5
 800bd1c:	d41f      	bmi.n	800bd5e <_malloc_r+0xd6>
 800bd1e:	2a0b      	cmp	r2, #11
 800bd20:	d917      	bls.n	800bd52 <_malloc_r+0xca>
 800bd22:	1961      	adds	r1, r4, r5
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	6025      	str	r5, [r4, #0]
 800bd28:	bf18      	it	ne
 800bd2a:	6059      	strne	r1, [r3, #4]
 800bd2c:	6863      	ldr	r3, [r4, #4]
 800bd2e:	bf08      	it	eq
 800bd30:	f8c8 1000 	streq.w	r1, [r8]
 800bd34:	5162      	str	r2, [r4, r5]
 800bd36:	604b      	str	r3, [r1, #4]
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f104 060b 	add.w	r6, r4, #11
 800bd3e:	f000 f83b 	bl	800bdb8 <__malloc_unlock>
 800bd42:	f026 0607 	bic.w	r6, r6, #7
 800bd46:	1d23      	adds	r3, r4, #4
 800bd48:	1af2      	subs	r2, r6, r3
 800bd4a:	d0ae      	beq.n	800bcaa <_malloc_r+0x22>
 800bd4c:	1b9b      	subs	r3, r3, r6
 800bd4e:	50a3      	str	r3, [r4, r2]
 800bd50:	e7ab      	b.n	800bcaa <_malloc_r+0x22>
 800bd52:	42a3      	cmp	r3, r4
 800bd54:	6862      	ldr	r2, [r4, #4]
 800bd56:	d1dd      	bne.n	800bd14 <_malloc_r+0x8c>
 800bd58:	f8c8 2000 	str.w	r2, [r8]
 800bd5c:	e7ec      	b.n	800bd38 <_malloc_r+0xb0>
 800bd5e:	4623      	mov	r3, r4
 800bd60:	6864      	ldr	r4, [r4, #4]
 800bd62:	e7ac      	b.n	800bcbe <_malloc_r+0x36>
 800bd64:	4634      	mov	r4, r6
 800bd66:	6876      	ldr	r6, [r6, #4]
 800bd68:	e7b4      	b.n	800bcd4 <_malloc_r+0x4c>
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	e7cc      	b.n	800bd08 <_malloc_r+0x80>
 800bd6e:	230c      	movs	r3, #12
 800bd70:	603b      	str	r3, [r7, #0]
 800bd72:	4638      	mov	r0, r7
 800bd74:	f000 f820 	bl	800bdb8 <__malloc_unlock>
 800bd78:	e797      	b.n	800bcaa <_malloc_r+0x22>
 800bd7a:	6025      	str	r5, [r4, #0]
 800bd7c:	e7dc      	b.n	800bd38 <_malloc_r+0xb0>
 800bd7e:	605b      	str	r3, [r3, #4]
 800bd80:	deff      	udf	#255	; 0xff
 800bd82:	bf00      	nop
 800bd84:	20001fa0 	.word	0x20001fa0

0800bd88 <__ascii_mbtowc>:
 800bd88:	b082      	sub	sp, #8
 800bd8a:	b901      	cbnz	r1, 800bd8e <__ascii_mbtowc+0x6>
 800bd8c:	a901      	add	r1, sp, #4
 800bd8e:	b142      	cbz	r2, 800bda2 <__ascii_mbtowc+0x1a>
 800bd90:	b14b      	cbz	r3, 800bda6 <__ascii_mbtowc+0x1e>
 800bd92:	7813      	ldrb	r3, [r2, #0]
 800bd94:	600b      	str	r3, [r1, #0]
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	1e10      	subs	r0, r2, #0
 800bd9a:	bf18      	it	ne
 800bd9c:	2001      	movne	r0, #1
 800bd9e:	b002      	add	sp, #8
 800bda0:	4770      	bx	lr
 800bda2:	4610      	mov	r0, r2
 800bda4:	e7fb      	b.n	800bd9e <__ascii_mbtowc+0x16>
 800bda6:	f06f 0001 	mvn.w	r0, #1
 800bdaa:	e7f8      	b.n	800bd9e <__ascii_mbtowc+0x16>

0800bdac <__malloc_lock>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__malloc_lock+0x8>)
 800bdae:	f7ff bb8e 	b.w	800b4ce <__retarget_lock_acquire_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	20001f9c 	.word	0x20001f9c

0800bdb8 <__malloc_unlock>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__malloc_unlock+0x8>)
 800bdba:	f7ff bb89 	b.w	800b4d0 <__retarget_lock_release_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	20001f9c 	.word	0x20001f9c

0800bdc4 <_Balloc>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	69c6      	ldr	r6, [r0, #28]
 800bdc8:	4604      	mov	r4, r0
 800bdca:	460d      	mov	r5, r1
 800bdcc:	b976      	cbnz	r6, 800bdec <_Balloc+0x28>
 800bdce:	2010      	movs	r0, #16
 800bdd0:	f000 fda4 	bl	800c91c <malloc>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	61e0      	str	r0, [r4, #28]
 800bdd8:	b920      	cbnz	r0, 800bde4 <_Balloc+0x20>
 800bdda:	4b18      	ldr	r3, [pc, #96]	; (800be3c <_Balloc+0x78>)
 800bddc:	4818      	ldr	r0, [pc, #96]	; (800be40 <_Balloc+0x7c>)
 800bdde:	216b      	movs	r1, #107	; 0x6b
 800bde0:	f000 fd68 	bl	800c8b4 <__assert_func>
 800bde4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bde8:	6006      	str	r6, [r0, #0]
 800bdea:	60c6      	str	r6, [r0, #12]
 800bdec:	69e6      	ldr	r6, [r4, #28]
 800bdee:	68f3      	ldr	r3, [r6, #12]
 800bdf0:	b183      	cbz	r3, 800be14 <_Balloc+0x50>
 800bdf2:	69e3      	ldr	r3, [r4, #28]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdfa:	b9b8      	cbnz	r0, 800be2c <_Balloc+0x68>
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	fa01 f605 	lsl.w	r6, r1, r5
 800be02:	1d72      	adds	r2, r6, #5
 800be04:	0092      	lsls	r2, r2, #2
 800be06:	4620      	mov	r0, r4
 800be08:	f000 fd72 	bl	800c8f0 <_calloc_r>
 800be0c:	b160      	cbz	r0, 800be28 <_Balloc+0x64>
 800be0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be12:	e00e      	b.n	800be32 <_Balloc+0x6e>
 800be14:	2221      	movs	r2, #33	; 0x21
 800be16:	2104      	movs	r1, #4
 800be18:	4620      	mov	r0, r4
 800be1a:	f000 fd69 	bl	800c8f0 <_calloc_r>
 800be1e:	69e3      	ldr	r3, [r4, #28]
 800be20:	60f0      	str	r0, [r6, #12]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e4      	bne.n	800bdf2 <_Balloc+0x2e>
 800be28:	2000      	movs	r0, #0
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
 800be2c:	6802      	ldr	r2, [r0, #0]
 800be2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be32:	2300      	movs	r3, #0
 800be34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be38:	e7f7      	b.n	800be2a <_Balloc+0x66>
 800be3a:	bf00      	nop
 800be3c:	0800d411 	.word	0x0800d411
 800be40:	0800d428 	.word	0x0800d428

0800be44 <_Bfree>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	69c6      	ldr	r6, [r0, #28]
 800be48:	4605      	mov	r5, r0
 800be4a:	460c      	mov	r4, r1
 800be4c:	b976      	cbnz	r6, 800be6c <_Bfree+0x28>
 800be4e:	2010      	movs	r0, #16
 800be50:	f000 fd64 	bl	800c91c <malloc>
 800be54:	4602      	mov	r2, r0
 800be56:	61e8      	str	r0, [r5, #28]
 800be58:	b920      	cbnz	r0, 800be64 <_Bfree+0x20>
 800be5a:	4b09      	ldr	r3, [pc, #36]	; (800be80 <_Bfree+0x3c>)
 800be5c:	4809      	ldr	r0, [pc, #36]	; (800be84 <_Bfree+0x40>)
 800be5e:	218f      	movs	r1, #143	; 0x8f
 800be60:	f000 fd28 	bl	800c8b4 <__assert_func>
 800be64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be68:	6006      	str	r6, [r0, #0]
 800be6a:	60c6      	str	r6, [r0, #12]
 800be6c:	b13c      	cbz	r4, 800be7e <_Bfree+0x3a>
 800be6e:	69eb      	ldr	r3, [r5, #28]
 800be70:	6862      	ldr	r2, [r4, #4]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be78:	6021      	str	r1, [r4, #0]
 800be7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be7e:	bd70      	pop	{r4, r5, r6, pc}
 800be80:	0800d411 	.word	0x0800d411
 800be84:	0800d428 	.word	0x0800d428

0800be88 <__multadd>:
 800be88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be8c:	690d      	ldr	r5, [r1, #16]
 800be8e:	4607      	mov	r7, r0
 800be90:	460c      	mov	r4, r1
 800be92:	461e      	mov	r6, r3
 800be94:	f101 0c14 	add.w	ip, r1, #20
 800be98:	2000      	movs	r0, #0
 800be9a:	f8dc 3000 	ldr.w	r3, [ip]
 800be9e:	b299      	uxth	r1, r3
 800bea0:	fb02 6101 	mla	r1, r2, r1, r6
 800bea4:	0c1e      	lsrs	r6, r3, #16
 800bea6:	0c0b      	lsrs	r3, r1, #16
 800bea8:	fb02 3306 	mla	r3, r2, r6, r3
 800beac:	b289      	uxth	r1, r1
 800beae:	3001      	adds	r0, #1
 800beb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800beb4:	4285      	cmp	r5, r0
 800beb6:	f84c 1b04 	str.w	r1, [ip], #4
 800beba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bebe:	dcec      	bgt.n	800be9a <__multadd+0x12>
 800bec0:	b30e      	cbz	r6, 800bf06 <__multadd+0x7e>
 800bec2:	68a3      	ldr	r3, [r4, #8]
 800bec4:	42ab      	cmp	r3, r5
 800bec6:	dc19      	bgt.n	800befc <__multadd+0x74>
 800bec8:	6861      	ldr	r1, [r4, #4]
 800beca:	4638      	mov	r0, r7
 800becc:	3101      	adds	r1, #1
 800bece:	f7ff ff79 	bl	800bdc4 <_Balloc>
 800bed2:	4680      	mov	r8, r0
 800bed4:	b928      	cbnz	r0, 800bee2 <__multadd+0x5a>
 800bed6:	4602      	mov	r2, r0
 800bed8:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <__multadd+0x84>)
 800beda:	480d      	ldr	r0, [pc, #52]	; (800bf10 <__multadd+0x88>)
 800bedc:	21ba      	movs	r1, #186	; 0xba
 800bede:	f000 fce9 	bl	800c8b4 <__assert_func>
 800bee2:	6922      	ldr	r2, [r4, #16]
 800bee4:	3202      	adds	r2, #2
 800bee6:	f104 010c 	add.w	r1, r4, #12
 800beea:	0092      	lsls	r2, r2, #2
 800beec:	300c      	adds	r0, #12
 800beee:	f7ff faf0 	bl	800b4d2 <memcpy>
 800bef2:	4621      	mov	r1, r4
 800bef4:	4638      	mov	r0, r7
 800bef6:	f7ff ffa5 	bl	800be44 <_Bfree>
 800befa:	4644      	mov	r4, r8
 800befc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf00:	3501      	adds	r5, #1
 800bf02:	615e      	str	r6, [r3, #20]
 800bf04:	6125      	str	r5, [r4, #16]
 800bf06:	4620      	mov	r0, r4
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	0800d3a0 	.word	0x0800d3a0
 800bf10:	0800d428 	.word	0x0800d428

0800bf14 <__s2b>:
 800bf14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf18:	460c      	mov	r4, r1
 800bf1a:	4615      	mov	r5, r2
 800bf1c:	461f      	mov	r7, r3
 800bf1e:	2209      	movs	r2, #9
 800bf20:	3308      	adds	r3, #8
 800bf22:	4606      	mov	r6, r0
 800bf24:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf28:	2100      	movs	r1, #0
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	db09      	blt.n	800bf44 <__s2b+0x30>
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff ff47 	bl	800bdc4 <_Balloc>
 800bf36:	b940      	cbnz	r0, 800bf4a <__s2b+0x36>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	4b19      	ldr	r3, [pc, #100]	; (800bfa0 <__s2b+0x8c>)
 800bf3c:	4819      	ldr	r0, [pc, #100]	; (800bfa4 <__s2b+0x90>)
 800bf3e:	21d3      	movs	r1, #211	; 0xd3
 800bf40:	f000 fcb8 	bl	800c8b4 <__assert_func>
 800bf44:	0052      	lsls	r2, r2, #1
 800bf46:	3101      	adds	r1, #1
 800bf48:	e7f0      	b.n	800bf2c <__s2b+0x18>
 800bf4a:	9b08      	ldr	r3, [sp, #32]
 800bf4c:	6143      	str	r3, [r0, #20]
 800bf4e:	2d09      	cmp	r5, #9
 800bf50:	f04f 0301 	mov.w	r3, #1
 800bf54:	6103      	str	r3, [r0, #16]
 800bf56:	dd16      	ble.n	800bf86 <__s2b+0x72>
 800bf58:	f104 0909 	add.w	r9, r4, #9
 800bf5c:	46c8      	mov	r8, r9
 800bf5e:	442c      	add	r4, r5
 800bf60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf64:	4601      	mov	r1, r0
 800bf66:	3b30      	subs	r3, #48	; 0x30
 800bf68:	220a      	movs	r2, #10
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7ff ff8c 	bl	800be88 <__multadd>
 800bf70:	45a0      	cmp	r8, r4
 800bf72:	d1f5      	bne.n	800bf60 <__s2b+0x4c>
 800bf74:	f1a5 0408 	sub.w	r4, r5, #8
 800bf78:	444c      	add	r4, r9
 800bf7a:	1b2d      	subs	r5, r5, r4
 800bf7c:	1963      	adds	r3, r4, r5
 800bf7e:	42bb      	cmp	r3, r7
 800bf80:	db04      	blt.n	800bf8c <__s2b+0x78>
 800bf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf86:	340a      	adds	r4, #10
 800bf88:	2509      	movs	r5, #9
 800bf8a:	e7f6      	b.n	800bf7a <__s2b+0x66>
 800bf8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf90:	4601      	mov	r1, r0
 800bf92:	3b30      	subs	r3, #48	; 0x30
 800bf94:	220a      	movs	r2, #10
 800bf96:	4630      	mov	r0, r6
 800bf98:	f7ff ff76 	bl	800be88 <__multadd>
 800bf9c:	e7ee      	b.n	800bf7c <__s2b+0x68>
 800bf9e:	bf00      	nop
 800bfa0:	0800d3a0 	.word	0x0800d3a0
 800bfa4:	0800d428 	.word	0x0800d428

0800bfa8 <__hi0bits>:
 800bfa8:	0c03      	lsrs	r3, r0, #16
 800bfaa:	041b      	lsls	r3, r3, #16
 800bfac:	b9d3      	cbnz	r3, 800bfe4 <__hi0bits+0x3c>
 800bfae:	0400      	lsls	r0, r0, #16
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfb6:	bf04      	itt	eq
 800bfb8:	0200      	lsleq	r0, r0, #8
 800bfba:	3308      	addeq	r3, #8
 800bfbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfc0:	bf04      	itt	eq
 800bfc2:	0100      	lsleq	r0, r0, #4
 800bfc4:	3304      	addeq	r3, #4
 800bfc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfca:	bf04      	itt	eq
 800bfcc:	0080      	lsleq	r0, r0, #2
 800bfce:	3302      	addeq	r3, #2
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	db05      	blt.n	800bfe0 <__hi0bits+0x38>
 800bfd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfd8:	f103 0301 	add.w	r3, r3, #1
 800bfdc:	bf08      	it	eq
 800bfde:	2320      	moveq	r3, #32
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	4770      	bx	lr
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	e7e4      	b.n	800bfb2 <__hi0bits+0xa>

0800bfe8 <__lo0bits>:
 800bfe8:	6803      	ldr	r3, [r0, #0]
 800bfea:	f013 0207 	ands.w	r2, r3, #7
 800bfee:	d00c      	beq.n	800c00a <__lo0bits+0x22>
 800bff0:	07d9      	lsls	r1, r3, #31
 800bff2:	d422      	bmi.n	800c03a <__lo0bits+0x52>
 800bff4:	079a      	lsls	r2, r3, #30
 800bff6:	bf49      	itett	mi
 800bff8:	085b      	lsrmi	r3, r3, #1
 800bffa:	089b      	lsrpl	r3, r3, #2
 800bffc:	6003      	strmi	r3, [r0, #0]
 800bffe:	2201      	movmi	r2, #1
 800c000:	bf5c      	itt	pl
 800c002:	6003      	strpl	r3, [r0, #0]
 800c004:	2202      	movpl	r2, #2
 800c006:	4610      	mov	r0, r2
 800c008:	4770      	bx	lr
 800c00a:	b299      	uxth	r1, r3
 800c00c:	b909      	cbnz	r1, 800c012 <__lo0bits+0x2a>
 800c00e:	0c1b      	lsrs	r3, r3, #16
 800c010:	2210      	movs	r2, #16
 800c012:	b2d9      	uxtb	r1, r3
 800c014:	b909      	cbnz	r1, 800c01a <__lo0bits+0x32>
 800c016:	3208      	adds	r2, #8
 800c018:	0a1b      	lsrs	r3, r3, #8
 800c01a:	0719      	lsls	r1, r3, #28
 800c01c:	bf04      	itt	eq
 800c01e:	091b      	lsreq	r3, r3, #4
 800c020:	3204      	addeq	r2, #4
 800c022:	0799      	lsls	r1, r3, #30
 800c024:	bf04      	itt	eq
 800c026:	089b      	lsreq	r3, r3, #2
 800c028:	3202      	addeq	r2, #2
 800c02a:	07d9      	lsls	r1, r3, #31
 800c02c:	d403      	bmi.n	800c036 <__lo0bits+0x4e>
 800c02e:	085b      	lsrs	r3, r3, #1
 800c030:	f102 0201 	add.w	r2, r2, #1
 800c034:	d003      	beq.n	800c03e <__lo0bits+0x56>
 800c036:	6003      	str	r3, [r0, #0]
 800c038:	e7e5      	b.n	800c006 <__lo0bits+0x1e>
 800c03a:	2200      	movs	r2, #0
 800c03c:	e7e3      	b.n	800c006 <__lo0bits+0x1e>
 800c03e:	2220      	movs	r2, #32
 800c040:	e7e1      	b.n	800c006 <__lo0bits+0x1e>
	...

0800c044 <__i2b>:
 800c044:	b510      	push	{r4, lr}
 800c046:	460c      	mov	r4, r1
 800c048:	2101      	movs	r1, #1
 800c04a:	f7ff febb 	bl	800bdc4 <_Balloc>
 800c04e:	4602      	mov	r2, r0
 800c050:	b928      	cbnz	r0, 800c05e <__i2b+0x1a>
 800c052:	4b05      	ldr	r3, [pc, #20]	; (800c068 <__i2b+0x24>)
 800c054:	4805      	ldr	r0, [pc, #20]	; (800c06c <__i2b+0x28>)
 800c056:	f240 1145 	movw	r1, #325	; 0x145
 800c05a:	f000 fc2b 	bl	800c8b4 <__assert_func>
 800c05e:	2301      	movs	r3, #1
 800c060:	6144      	str	r4, [r0, #20]
 800c062:	6103      	str	r3, [r0, #16]
 800c064:	bd10      	pop	{r4, pc}
 800c066:	bf00      	nop
 800c068:	0800d3a0 	.word	0x0800d3a0
 800c06c:	0800d428 	.word	0x0800d428

0800c070 <__multiply>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	4691      	mov	r9, r2
 800c076:	690a      	ldr	r2, [r1, #16]
 800c078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	bfb8      	it	lt
 800c080:	460b      	movlt	r3, r1
 800c082:	460c      	mov	r4, r1
 800c084:	bfbc      	itt	lt
 800c086:	464c      	movlt	r4, r9
 800c088:	4699      	movlt	r9, r3
 800c08a:	6927      	ldr	r7, [r4, #16]
 800c08c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	6861      	ldr	r1, [r4, #4]
 800c094:	eb07 060a 	add.w	r6, r7, sl
 800c098:	42b3      	cmp	r3, r6
 800c09a:	b085      	sub	sp, #20
 800c09c:	bfb8      	it	lt
 800c09e:	3101      	addlt	r1, #1
 800c0a0:	f7ff fe90 	bl	800bdc4 <_Balloc>
 800c0a4:	b930      	cbnz	r0, 800c0b4 <__multiply+0x44>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	4b44      	ldr	r3, [pc, #272]	; (800c1bc <__multiply+0x14c>)
 800c0aa:	4845      	ldr	r0, [pc, #276]	; (800c1c0 <__multiply+0x150>)
 800c0ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c0b0:	f000 fc00 	bl	800c8b4 <__assert_func>
 800c0b4:	f100 0514 	add.w	r5, r0, #20
 800c0b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0bc:	462b      	mov	r3, r5
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4543      	cmp	r3, r8
 800c0c2:	d321      	bcc.n	800c108 <__multiply+0x98>
 800c0c4:	f104 0314 	add.w	r3, r4, #20
 800c0c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0cc:	f109 0314 	add.w	r3, r9, #20
 800c0d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0d4:	9202      	str	r2, [sp, #8]
 800c0d6:	1b3a      	subs	r2, r7, r4
 800c0d8:	3a15      	subs	r2, #21
 800c0da:	f022 0203 	bic.w	r2, r2, #3
 800c0de:	3204      	adds	r2, #4
 800c0e0:	f104 0115 	add.w	r1, r4, #21
 800c0e4:	428f      	cmp	r7, r1
 800c0e6:	bf38      	it	cc
 800c0e8:	2204      	movcc	r2, #4
 800c0ea:	9201      	str	r2, [sp, #4]
 800c0ec:	9a02      	ldr	r2, [sp, #8]
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d80c      	bhi.n	800c10e <__multiply+0x9e>
 800c0f4:	2e00      	cmp	r6, #0
 800c0f6:	dd03      	ble.n	800c100 <__multiply+0x90>
 800c0f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d05b      	beq.n	800c1b8 <__multiply+0x148>
 800c100:	6106      	str	r6, [r0, #16]
 800c102:	b005      	add	sp, #20
 800c104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c108:	f843 2b04 	str.w	r2, [r3], #4
 800c10c:	e7d8      	b.n	800c0c0 <__multiply+0x50>
 800c10e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c112:	f1ba 0f00 	cmp.w	sl, #0
 800c116:	d024      	beq.n	800c162 <__multiply+0xf2>
 800c118:	f104 0e14 	add.w	lr, r4, #20
 800c11c:	46a9      	mov	r9, r5
 800c11e:	f04f 0c00 	mov.w	ip, #0
 800c122:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c126:	f8d9 1000 	ldr.w	r1, [r9]
 800c12a:	fa1f fb82 	uxth.w	fp, r2
 800c12e:	b289      	uxth	r1, r1
 800c130:	fb0a 110b 	mla	r1, sl, fp, r1
 800c134:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c138:	f8d9 2000 	ldr.w	r2, [r9]
 800c13c:	4461      	add	r1, ip
 800c13e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c142:	fb0a c20b 	mla	r2, sl, fp, ip
 800c146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c14a:	b289      	uxth	r1, r1
 800c14c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c150:	4577      	cmp	r7, lr
 800c152:	f849 1b04 	str.w	r1, [r9], #4
 800c156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c15a:	d8e2      	bhi.n	800c122 <__multiply+0xb2>
 800c15c:	9a01      	ldr	r2, [sp, #4]
 800c15e:	f845 c002 	str.w	ip, [r5, r2]
 800c162:	9a03      	ldr	r2, [sp, #12]
 800c164:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c168:	3304      	adds	r3, #4
 800c16a:	f1b9 0f00 	cmp.w	r9, #0
 800c16e:	d021      	beq.n	800c1b4 <__multiply+0x144>
 800c170:	6829      	ldr	r1, [r5, #0]
 800c172:	f104 0c14 	add.w	ip, r4, #20
 800c176:	46ae      	mov	lr, r5
 800c178:	f04f 0a00 	mov.w	sl, #0
 800c17c:	f8bc b000 	ldrh.w	fp, [ip]
 800c180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c184:	fb09 220b 	mla	r2, r9, fp, r2
 800c188:	4452      	add	r2, sl
 800c18a:	b289      	uxth	r1, r1
 800c18c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c190:	f84e 1b04 	str.w	r1, [lr], #4
 800c194:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c198:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c19c:	f8be 1000 	ldrh.w	r1, [lr]
 800c1a0:	fb09 110a 	mla	r1, r9, sl, r1
 800c1a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c1a8:	4567      	cmp	r7, ip
 800c1aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1ae:	d8e5      	bhi.n	800c17c <__multiply+0x10c>
 800c1b0:	9a01      	ldr	r2, [sp, #4]
 800c1b2:	50a9      	str	r1, [r5, r2]
 800c1b4:	3504      	adds	r5, #4
 800c1b6:	e799      	b.n	800c0ec <__multiply+0x7c>
 800c1b8:	3e01      	subs	r6, #1
 800c1ba:	e79b      	b.n	800c0f4 <__multiply+0x84>
 800c1bc:	0800d3a0 	.word	0x0800d3a0
 800c1c0:	0800d428 	.word	0x0800d428

0800c1c4 <__pow5mult>:
 800c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	4615      	mov	r5, r2
 800c1ca:	f012 0203 	ands.w	r2, r2, #3
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	460f      	mov	r7, r1
 800c1d2:	d007      	beq.n	800c1e4 <__pow5mult+0x20>
 800c1d4:	4c25      	ldr	r4, [pc, #148]	; (800c26c <__pow5mult+0xa8>)
 800c1d6:	3a01      	subs	r2, #1
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1de:	f7ff fe53 	bl	800be88 <__multadd>
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	10ad      	asrs	r5, r5, #2
 800c1e6:	d03d      	beq.n	800c264 <__pow5mult+0xa0>
 800c1e8:	69f4      	ldr	r4, [r6, #28]
 800c1ea:	b97c      	cbnz	r4, 800c20c <__pow5mult+0x48>
 800c1ec:	2010      	movs	r0, #16
 800c1ee:	f000 fb95 	bl	800c91c <malloc>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	61f0      	str	r0, [r6, #28]
 800c1f6:	b928      	cbnz	r0, 800c204 <__pow5mult+0x40>
 800c1f8:	4b1d      	ldr	r3, [pc, #116]	; (800c270 <__pow5mult+0xac>)
 800c1fa:	481e      	ldr	r0, [pc, #120]	; (800c274 <__pow5mult+0xb0>)
 800c1fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c200:	f000 fb58 	bl	800c8b4 <__assert_func>
 800c204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c208:	6004      	str	r4, [r0, #0]
 800c20a:	60c4      	str	r4, [r0, #12]
 800c20c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c214:	b94c      	cbnz	r4, 800c22a <__pow5mult+0x66>
 800c216:	f240 2171 	movw	r1, #625	; 0x271
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7ff ff12 	bl	800c044 <__i2b>
 800c220:	2300      	movs	r3, #0
 800c222:	f8c8 0008 	str.w	r0, [r8, #8]
 800c226:	4604      	mov	r4, r0
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	f04f 0900 	mov.w	r9, #0
 800c22e:	07eb      	lsls	r3, r5, #31
 800c230:	d50a      	bpl.n	800c248 <__pow5mult+0x84>
 800c232:	4639      	mov	r1, r7
 800c234:	4622      	mov	r2, r4
 800c236:	4630      	mov	r0, r6
 800c238:	f7ff ff1a 	bl	800c070 <__multiply>
 800c23c:	4639      	mov	r1, r7
 800c23e:	4680      	mov	r8, r0
 800c240:	4630      	mov	r0, r6
 800c242:	f7ff fdff 	bl	800be44 <_Bfree>
 800c246:	4647      	mov	r7, r8
 800c248:	106d      	asrs	r5, r5, #1
 800c24a:	d00b      	beq.n	800c264 <__pow5mult+0xa0>
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	b938      	cbnz	r0, 800c260 <__pow5mult+0x9c>
 800c250:	4622      	mov	r2, r4
 800c252:	4621      	mov	r1, r4
 800c254:	4630      	mov	r0, r6
 800c256:	f7ff ff0b 	bl	800c070 <__multiply>
 800c25a:	6020      	str	r0, [r4, #0]
 800c25c:	f8c0 9000 	str.w	r9, [r0]
 800c260:	4604      	mov	r4, r0
 800c262:	e7e4      	b.n	800c22e <__pow5mult+0x6a>
 800c264:	4638      	mov	r0, r7
 800c266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c26a:	bf00      	nop
 800c26c:	0800d578 	.word	0x0800d578
 800c270:	0800d411 	.word	0x0800d411
 800c274:	0800d428 	.word	0x0800d428

0800c278 <__lshift>:
 800c278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c27c:	460c      	mov	r4, r1
 800c27e:	6849      	ldr	r1, [r1, #4]
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c286:	68a3      	ldr	r3, [r4, #8]
 800c288:	4607      	mov	r7, r0
 800c28a:	4691      	mov	r9, r2
 800c28c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c290:	f108 0601 	add.w	r6, r8, #1
 800c294:	42b3      	cmp	r3, r6
 800c296:	db0b      	blt.n	800c2b0 <__lshift+0x38>
 800c298:	4638      	mov	r0, r7
 800c29a:	f7ff fd93 	bl	800bdc4 <_Balloc>
 800c29e:	4605      	mov	r5, r0
 800c2a0:	b948      	cbnz	r0, 800c2b6 <__lshift+0x3e>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	4b28      	ldr	r3, [pc, #160]	; (800c348 <__lshift+0xd0>)
 800c2a6:	4829      	ldr	r0, [pc, #164]	; (800c34c <__lshift+0xd4>)
 800c2a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c2ac:	f000 fb02 	bl	800c8b4 <__assert_func>
 800c2b0:	3101      	adds	r1, #1
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	e7ee      	b.n	800c294 <__lshift+0x1c>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f100 0114 	add.w	r1, r0, #20
 800c2bc:	f100 0210 	add.w	r2, r0, #16
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	4553      	cmp	r3, sl
 800c2c4:	db33      	blt.n	800c32e <__lshift+0xb6>
 800c2c6:	6920      	ldr	r0, [r4, #16]
 800c2c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2cc:	f104 0314 	add.w	r3, r4, #20
 800c2d0:	f019 091f 	ands.w	r9, r9, #31
 800c2d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2dc:	d02b      	beq.n	800c336 <__lshift+0xbe>
 800c2de:	f1c9 0e20 	rsb	lr, r9, #32
 800c2e2:	468a      	mov	sl, r1
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	6818      	ldr	r0, [r3, #0]
 800c2e8:	fa00 f009 	lsl.w	r0, r0, r9
 800c2ec:	4310      	orrs	r0, r2
 800c2ee:	f84a 0b04 	str.w	r0, [sl], #4
 800c2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2f6:	459c      	cmp	ip, r3
 800c2f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2fc:	d8f3      	bhi.n	800c2e6 <__lshift+0x6e>
 800c2fe:	ebac 0304 	sub.w	r3, ip, r4
 800c302:	3b15      	subs	r3, #21
 800c304:	f023 0303 	bic.w	r3, r3, #3
 800c308:	3304      	adds	r3, #4
 800c30a:	f104 0015 	add.w	r0, r4, #21
 800c30e:	4584      	cmp	ip, r0
 800c310:	bf38      	it	cc
 800c312:	2304      	movcc	r3, #4
 800c314:	50ca      	str	r2, [r1, r3]
 800c316:	b10a      	cbz	r2, 800c31c <__lshift+0xa4>
 800c318:	f108 0602 	add.w	r6, r8, #2
 800c31c:	3e01      	subs	r6, #1
 800c31e:	4638      	mov	r0, r7
 800c320:	612e      	str	r6, [r5, #16]
 800c322:	4621      	mov	r1, r4
 800c324:	f7ff fd8e 	bl	800be44 <_Bfree>
 800c328:	4628      	mov	r0, r5
 800c32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c332:	3301      	adds	r3, #1
 800c334:	e7c5      	b.n	800c2c2 <__lshift+0x4a>
 800c336:	3904      	subs	r1, #4
 800c338:	f853 2b04 	ldr.w	r2, [r3], #4
 800c33c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c340:	459c      	cmp	ip, r3
 800c342:	d8f9      	bhi.n	800c338 <__lshift+0xc0>
 800c344:	e7ea      	b.n	800c31c <__lshift+0xa4>
 800c346:	bf00      	nop
 800c348:	0800d3a0 	.word	0x0800d3a0
 800c34c:	0800d428 	.word	0x0800d428

0800c350 <__mcmp>:
 800c350:	b530      	push	{r4, r5, lr}
 800c352:	6902      	ldr	r2, [r0, #16]
 800c354:	690c      	ldr	r4, [r1, #16]
 800c356:	1b12      	subs	r2, r2, r4
 800c358:	d10e      	bne.n	800c378 <__mcmp+0x28>
 800c35a:	f100 0314 	add.w	r3, r0, #20
 800c35e:	3114      	adds	r1, #20
 800c360:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c364:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c368:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c36c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c370:	42a5      	cmp	r5, r4
 800c372:	d003      	beq.n	800c37c <__mcmp+0x2c>
 800c374:	d305      	bcc.n	800c382 <__mcmp+0x32>
 800c376:	2201      	movs	r2, #1
 800c378:	4610      	mov	r0, r2
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	4283      	cmp	r3, r0
 800c37e:	d3f3      	bcc.n	800c368 <__mcmp+0x18>
 800c380:	e7fa      	b.n	800c378 <__mcmp+0x28>
 800c382:	f04f 32ff 	mov.w	r2, #4294967295
 800c386:	e7f7      	b.n	800c378 <__mcmp+0x28>

0800c388 <__mdiff>:
 800c388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	460c      	mov	r4, r1
 800c38e:	4606      	mov	r6, r0
 800c390:	4611      	mov	r1, r2
 800c392:	4620      	mov	r0, r4
 800c394:	4690      	mov	r8, r2
 800c396:	f7ff ffdb 	bl	800c350 <__mcmp>
 800c39a:	1e05      	subs	r5, r0, #0
 800c39c:	d110      	bne.n	800c3c0 <__mdiff+0x38>
 800c39e:	4629      	mov	r1, r5
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7ff fd0f 	bl	800bdc4 <_Balloc>
 800c3a6:	b930      	cbnz	r0, 800c3b6 <__mdiff+0x2e>
 800c3a8:	4b3a      	ldr	r3, [pc, #232]	; (800c494 <__mdiff+0x10c>)
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	f240 2137 	movw	r1, #567	; 0x237
 800c3b0:	4839      	ldr	r0, [pc, #228]	; (800c498 <__mdiff+0x110>)
 800c3b2:	f000 fa7f 	bl	800c8b4 <__assert_func>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	bfa4      	itt	ge
 800c3c2:	4643      	movge	r3, r8
 800c3c4:	46a0      	movge	r8, r4
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3cc:	bfa6      	itte	ge
 800c3ce:	461c      	movge	r4, r3
 800c3d0:	2500      	movge	r5, #0
 800c3d2:	2501      	movlt	r5, #1
 800c3d4:	f7ff fcf6 	bl	800bdc4 <_Balloc>
 800c3d8:	b920      	cbnz	r0, 800c3e4 <__mdiff+0x5c>
 800c3da:	4b2e      	ldr	r3, [pc, #184]	; (800c494 <__mdiff+0x10c>)
 800c3dc:	4602      	mov	r2, r0
 800c3de:	f240 2145 	movw	r1, #581	; 0x245
 800c3e2:	e7e5      	b.n	800c3b0 <__mdiff+0x28>
 800c3e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3e8:	6926      	ldr	r6, [r4, #16]
 800c3ea:	60c5      	str	r5, [r0, #12]
 800c3ec:	f104 0914 	add.w	r9, r4, #20
 800c3f0:	f108 0514 	add.w	r5, r8, #20
 800c3f4:	f100 0e14 	add.w	lr, r0, #20
 800c3f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c400:	f108 0210 	add.w	r2, r8, #16
 800c404:	46f2      	mov	sl, lr
 800c406:	2100      	movs	r1, #0
 800c408:	f859 3b04 	ldr.w	r3, [r9], #4
 800c40c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c410:	fa11 f88b 	uxtah	r8, r1, fp
 800c414:	b299      	uxth	r1, r3
 800c416:	0c1b      	lsrs	r3, r3, #16
 800c418:	eba8 0801 	sub.w	r8, r8, r1
 800c41c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c420:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c424:	fa1f f888 	uxth.w	r8, r8
 800c428:	1419      	asrs	r1, r3, #16
 800c42a:	454e      	cmp	r6, r9
 800c42c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c430:	f84a 3b04 	str.w	r3, [sl], #4
 800c434:	d8e8      	bhi.n	800c408 <__mdiff+0x80>
 800c436:	1b33      	subs	r3, r6, r4
 800c438:	3b15      	subs	r3, #21
 800c43a:	f023 0303 	bic.w	r3, r3, #3
 800c43e:	3304      	adds	r3, #4
 800c440:	3415      	adds	r4, #21
 800c442:	42a6      	cmp	r6, r4
 800c444:	bf38      	it	cc
 800c446:	2304      	movcc	r3, #4
 800c448:	441d      	add	r5, r3
 800c44a:	4473      	add	r3, lr
 800c44c:	469e      	mov	lr, r3
 800c44e:	462e      	mov	r6, r5
 800c450:	4566      	cmp	r6, ip
 800c452:	d30e      	bcc.n	800c472 <__mdiff+0xea>
 800c454:	f10c 0203 	add.w	r2, ip, #3
 800c458:	1b52      	subs	r2, r2, r5
 800c45a:	f022 0203 	bic.w	r2, r2, #3
 800c45e:	3d03      	subs	r5, #3
 800c460:	45ac      	cmp	ip, r5
 800c462:	bf38      	it	cc
 800c464:	2200      	movcc	r2, #0
 800c466:	4413      	add	r3, r2
 800c468:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c46c:	b17a      	cbz	r2, 800c48e <__mdiff+0x106>
 800c46e:	6107      	str	r7, [r0, #16]
 800c470:	e7a4      	b.n	800c3bc <__mdiff+0x34>
 800c472:	f856 8b04 	ldr.w	r8, [r6], #4
 800c476:	fa11 f288 	uxtah	r2, r1, r8
 800c47a:	1414      	asrs	r4, r2, #16
 800c47c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c480:	b292      	uxth	r2, r2
 800c482:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c486:	f84e 2b04 	str.w	r2, [lr], #4
 800c48a:	1421      	asrs	r1, r4, #16
 800c48c:	e7e0      	b.n	800c450 <__mdiff+0xc8>
 800c48e:	3f01      	subs	r7, #1
 800c490:	e7ea      	b.n	800c468 <__mdiff+0xe0>
 800c492:	bf00      	nop
 800c494:	0800d3a0 	.word	0x0800d3a0
 800c498:	0800d428 	.word	0x0800d428

0800c49c <__ulp>:
 800c49c:	b082      	sub	sp, #8
 800c49e:	ed8d 0b00 	vstr	d0, [sp]
 800c4a2:	9a01      	ldr	r2, [sp, #4]
 800c4a4:	4b0f      	ldr	r3, [pc, #60]	; (800c4e4 <__ulp+0x48>)
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dc08      	bgt.n	800c4c2 <__ulp+0x26>
 800c4b0:	425b      	negs	r3, r3
 800c4b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c4b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c4ba:	da04      	bge.n	800c4c6 <__ulp+0x2a>
 800c4bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4c0:	4113      	asrs	r3, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	e008      	b.n	800c4d8 <__ulp+0x3c>
 800c4c6:	f1a2 0314 	sub.w	r3, r2, #20
 800c4ca:	2b1e      	cmp	r3, #30
 800c4cc:	bfda      	itte	le
 800c4ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c4d2:	40da      	lsrle	r2, r3
 800c4d4:	2201      	movgt	r2, #1
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4610      	mov	r0, r2
 800c4dc:	ec41 0b10 	vmov	d0, r0, r1
 800c4e0:	b002      	add	sp, #8
 800c4e2:	4770      	bx	lr
 800c4e4:	7ff00000 	.word	0x7ff00000

0800c4e8 <__b2d>:
 800c4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ec:	6906      	ldr	r6, [r0, #16]
 800c4ee:	f100 0814 	add.w	r8, r0, #20
 800c4f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c4f6:	1f37      	subs	r7, r6, #4
 800c4f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	f7ff fd53 	bl	800bfa8 <__hi0bits>
 800c502:	f1c0 0320 	rsb	r3, r0, #32
 800c506:	280a      	cmp	r0, #10
 800c508:	600b      	str	r3, [r1, #0]
 800c50a:	491b      	ldr	r1, [pc, #108]	; (800c578 <__b2d+0x90>)
 800c50c:	dc15      	bgt.n	800c53a <__b2d+0x52>
 800c50e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c512:	fa22 f30c 	lsr.w	r3, r2, ip
 800c516:	45b8      	cmp	r8, r7
 800c518:	ea43 0501 	orr.w	r5, r3, r1
 800c51c:	bf34      	ite	cc
 800c51e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c522:	2300      	movcs	r3, #0
 800c524:	3015      	adds	r0, #21
 800c526:	fa02 f000 	lsl.w	r0, r2, r0
 800c52a:	fa23 f30c 	lsr.w	r3, r3, ip
 800c52e:	4303      	orrs	r3, r0
 800c530:	461c      	mov	r4, r3
 800c532:	ec45 4b10 	vmov	d0, r4, r5
 800c536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c53a:	45b8      	cmp	r8, r7
 800c53c:	bf3a      	itte	cc
 800c53e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c542:	f1a6 0708 	subcc.w	r7, r6, #8
 800c546:	2300      	movcs	r3, #0
 800c548:	380b      	subs	r0, #11
 800c54a:	d012      	beq.n	800c572 <__b2d+0x8a>
 800c54c:	f1c0 0120 	rsb	r1, r0, #32
 800c550:	fa23 f401 	lsr.w	r4, r3, r1
 800c554:	4082      	lsls	r2, r0
 800c556:	4322      	orrs	r2, r4
 800c558:	4547      	cmp	r7, r8
 800c55a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c55e:	bf8c      	ite	hi
 800c560:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c564:	2200      	movls	r2, #0
 800c566:	4083      	lsls	r3, r0
 800c568:	40ca      	lsrs	r2, r1
 800c56a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c56e:	4313      	orrs	r3, r2
 800c570:	e7de      	b.n	800c530 <__b2d+0x48>
 800c572:	ea42 0501 	orr.w	r5, r2, r1
 800c576:	e7db      	b.n	800c530 <__b2d+0x48>
 800c578:	3ff00000 	.word	0x3ff00000

0800c57c <__d2b>:
 800c57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c580:	460f      	mov	r7, r1
 800c582:	2101      	movs	r1, #1
 800c584:	ec59 8b10 	vmov	r8, r9, d0
 800c588:	4616      	mov	r6, r2
 800c58a:	f7ff fc1b 	bl	800bdc4 <_Balloc>
 800c58e:	4604      	mov	r4, r0
 800c590:	b930      	cbnz	r0, 800c5a0 <__d2b+0x24>
 800c592:	4602      	mov	r2, r0
 800c594:	4b24      	ldr	r3, [pc, #144]	; (800c628 <__d2b+0xac>)
 800c596:	4825      	ldr	r0, [pc, #148]	; (800c62c <__d2b+0xb0>)
 800c598:	f240 310f 	movw	r1, #783	; 0x30f
 800c59c:	f000 f98a 	bl	800c8b4 <__assert_func>
 800c5a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5a8:	bb2d      	cbnz	r5, 800c5f6 <__d2b+0x7a>
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	f1b8 0300 	subs.w	r3, r8, #0
 800c5b0:	d026      	beq.n	800c600 <__d2b+0x84>
 800c5b2:	4668      	mov	r0, sp
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	f7ff fd17 	bl	800bfe8 <__lo0bits>
 800c5ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5be:	b1e8      	cbz	r0, 800c5fc <__d2b+0x80>
 800c5c0:	f1c0 0320 	rsb	r3, r0, #32
 800c5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c8:	430b      	orrs	r3, r1
 800c5ca:	40c2      	lsrs	r2, r0
 800c5cc:	6163      	str	r3, [r4, #20]
 800c5ce:	9201      	str	r2, [sp, #4]
 800c5d0:	9b01      	ldr	r3, [sp, #4]
 800c5d2:	61a3      	str	r3, [r4, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bf14      	ite	ne
 800c5d8:	2202      	movne	r2, #2
 800c5da:	2201      	moveq	r2, #1
 800c5dc:	6122      	str	r2, [r4, #16]
 800c5de:	b1bd      	cbz	r5, 800c610 <__d2b+0x94>
 800c5e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5e4:	4405      	add	r5, r0
 800c5e6:	603d      	str	r5, [r7, #0]
 800c5e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5ec:	6030      	str	r0, [r6, #0]
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	b003      	add	sp, #12
 800c5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5fa:	e7d6      	b.n	800c5aa <__d2b+0x2e>
 800c5fc:	6161      	str	r1, [r4, #20]
 800c5fe:	e7e7      	b.n	800c5d0 <__d2b+0x54>
 800c600:	a801      	add	r0, sp, #4
 800c602:	f7ff fcf1 	bl	800bfe8 <__lo0bits>
 800c606:	9b01      	ldr	r3, [sp, #4]
 800c608:	6163      	str	r3, [r4, #20]
 800c60a:	3020      	adds	r0, #32
 800c60c:	2201      	movs	r2, #1
 800c60e:	e7e5      	b.n	800c5dc <__d2b+0x60>
 800c610:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c614:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c618:	6038      	str	r0, [r7, #0]
 800c61a:	6918      	ldr	r0, [r3, #16]
 800c61c:	f7ff fcc4 	bl	800bfa8 <__hi0bits>
 800c620:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c624:	e7e2      	b.n	800c5ec <__d2b+0x70>
 800c626:	bf00      	nop
 800c628:	0800d3a0 	.word	0x0800d3a0
 800c62c:	0800d428 	.word	0x0800d428

0800c630 <__ratio>:
 800c630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	4688      	mov	r8, r1
 800c636:	4669      	mov	r1, sp
 800c638:	4681      	mov	r9, r0
 800c63a:	f7ff ff55 	bl	800c4e8 <__b2d>
 800c63e:	a901      	add	r1, sp, #4
 800c640:	4640      	mov	r0, r8
 800c642:	ec55 4b10 	vmov	r4, r5, d0
 800c646:	f7ff ff4f 	bl	800c4e8 <__b2d>
 800c64a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c64e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c652:	eba3 0c02 	sub.w	ip, r3, r2
 800c656:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c65a:	1a9b      	subs	r3, r3, r2
 800c65c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c660:	ec51 0b10 	vmov	r0, r1, d0
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfd6      	itet	le
 800c668:	460a      	movle	r2, r1
 800c66a:	462a      	movgt	r2, r5
 800c66c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c670:	468b      	mov	fp, r1
 800c672:	462f      	mov	r7, r5
 800c674:	bfd4      	ite	le
 800c676:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c67a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c67e:	4620      	mov	r0, r4
 800c680:	ee10 2a10 	vmov	r2, s0
 800c684:	465b      	mov	r3, fp
 800c686:	4639      	mov	r1, r7
 800c688:	f7f4 f910 	bl	80008ac <__aeabi_ddiv>
 800c68c:	ec41 0b10 	vmov	d0, r0, r1
 800c690:	b003      	add	sp, #12
 800c692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c696 <__copybits>:
 800c696:	3901      	subs	r1, #1
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	1149      	asrs	r1, r1, #5
 800c69c:	6914      	ldr	r4, [r2, #16]
 800c69e:	3101      	adds	r1, #1
 800c6a0:	f102 0314 	add.w	r3, r2, #20
 800c6a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c6a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c6ac:	1f05      	subs	r5, r0, #4
 800c6ae:	42a3      	cmp	r3, r4
 800c6b0:	d30c      	bcc.n	800c6cc <__copybits+0x36>
 800c6b2:	1aa3      	subs	r3, r4, r2
 800c6b4:	3b11      	subs	r3, #17
 800c6b6:	f023 0303 	bic.w	r3, r3, #3
 800c6ba:	3211      	adds	r2, #17
 800c6bc:	42a2      	cmp	r2, r4
 800c6be:	bf88      	it	hi
 800c6c0:	2300      	movhi	r3, #0
 800c6c2:	4418      	add	r0, r3
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4288      	cmp	r0, r1
 800c6c8:	d305      	bcc.n	800c6d6 <__copybits+0x40>
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800c6d4:	e7eb      	b.n	800c6ae <__copybits+0x18>
 800c6d6:	f840 3b04 	str.w	r3, [r0], #4
 800c6da:	e7f4      	b.n	800c6c6 <__copybits+0x30>

0800c6dc <__any_on>:
 800c6dc:	f100 0214 	add.w	r2, r0, #20
 800c6e0:	6900      	ldr	r0, [r0, #16]
 800c6e2:	114b      	asrs	r3, r1, #5
 800c6e4:	4298      	cmp	r0, r3
 800c6e6:	b510      	push	{r4, lr}
 800c6e8:	db11      	blt.n	800c70e <__any_on+0x32>
 800c6ea:	dd0a      	ble.n	800c702 <__any_on+0x26>
 800c6ec:	f011 011f 	ands.w	r1, r1, #31
 800c6f0:	d007      	beq.n	800c702 <__any_on+0x26>
 800c6f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6f6:	fa24 f001 	lsr.w	r0, r4, r1
 800c6fa:	fa00 f101 	lsl.w	r1, r0, r1
 800c6fe:	428c      	cmp	r4, r1
 800c700:	d10b      	bne.n	800c71a <__any_on+0x3e>
 800c702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c706:	4293      	cmp	r3, r2
 800c708:	d803      	bhi.n	800c712 <__any_on+0x36>
 800c70a:	2000      	movs	r0, #0
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	4603      	mov	r3, r0
 800c710:	e7f7      	b.n	800c702 <__any_on+0x26>
 800c712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c716:	2900      	cmp	r1, #0
 800c718:	d0f5      	beq.n	800c706 <__any_on+0x2a>
 800c71a:	2001      	movs	r0, #1
 800c71c:	e7f6      	b.n	800c70c <__any_on+0x30>

0800c71e <__ascii_wctomb>:
 800c71e:	b149      	cbz	r1, 800c734 <__ascii_wctomb+0x16>
 800c720:	2aff      	cmp	r2, #255	; 0xff
 800c722:	bf85      	ittet	hi
 800c724:	238a      	movhi	r3, #138	; 0x8a
 800c726:	6003      	strhi	r3, [r0, #0]
 800c728:	700a      	strbls	r2, [r1, #0]
 800c72a:	f04f 30ff 	movhi.w	r0, #4294967295
 800c72e:	bf98      	it	ls
 800c730:	2001      	movls	r0, #1
 800c732:	4770      	bx	lr
 800c734:	4608      	mov	r0, r1
 800c736:	4770      	bx	lr

0800c738 <__sflush_r>:
 800c738:	898a      	ldrh	r2, [r1, #12]
 800c73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c73e:	4605      	mov	r5, r0
 800c740:	0710      	lsls	r0, r2, #28
 800c742:	460c      	mov	r4, r1
 800c744:	d458      	bmi.n	800c7f8 <__sflush_r+0xc0>
 800c746:	684b      	ldr	r3, [r1, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	dc05      	bgt.n	800c758 <__sflush_r+0x20>
 800c74c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dc02      	bgt.n	800c758 <__sflush_r+0x20>
 800c752:	2000      	movs	r0, #0
 800c754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	d0f9      	beq.n	800c752 <__sflush_r+0x1a>
 800c75e:	2300      	movs	r3, #0
 800c760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c764:	682f      	ldr	r7, [r5, #0]
 800c766:	6a21      	ldr	r1, [r4, #32]
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	d032      	beq.n	800c7d2 <__sflush_r+0x9a>
 800c76c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	075a      	lsls	r2, r3, #29
 800c772:	d505      	bpl.n	800c780 <__sflush_r+0x48>
 800c774:	6863      	ldr	r3, [r4, #4]
 800c776:	1ac0      	subs	r0, r0, r3
 800c778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c77a:	b10b      	cbz	r3, 800c780 <__sflush_r+0x48>
 800c77c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c77e:	1ac0      	subs	r0, r0, r3
 800c780:	2300      	movs	r3, #0
 800c782:	4602      	mov	r2, r0
 800c784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c786:	6a21      	ldr	r1, [r4, #32]
 800c788:	4628      	mov	r0, r5
 800c78a:	47b0      	blx	r6
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	89a3      	ldrh	r3, [r4, #12]
 800c790:	d106      	bne.n	800c7a0 <__sflush_r+0x68>
 800c792:	6829      	ldr	r1, [r5, #0]
 800c794:	291d      	cmp	r1, #29
 800c796:	d82b      	bhi.n	800c7f0 <__sflush_r+0xb8>
 800c798:	4a29      	ldr	r2, [pc, #164]	; (800c840 <__sflush_r+0x108>)
 800c79a:	410a      	asrs	r2, r1
 800c79c:	07d6      	lsls	r6, r2, #31
 800c79e:	d427      	bmi.n	800c7f0 <__sflush_r+0xb8>
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	6062      	str	r2, [r4, #4]
 800c7a4:	04d9      	lsls	r1, r3, #19
 800c7a6:	6922      	ldr	r2, [r4, #16]
 800c7a8:	6022      	str	r2, [r4, #0]
 800c7aa:	d504      	bpl.n	800c7b6 <__sflush_r+0x7e>
 800c7ac:	1c42      	adds	r2, r0, #1
 800c7ae:	d101      	bne.n	800c7b4 <__sflush_r+0x7c>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	b903      	cbnz	r3, 800c7b6 <__sflush_r+0x7e>
 800c7b4:	6560      	str	r0, [r4, #84]	; 0x54
 800c7b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7b8:	602f      	str	r7, [r5, #0]
 800c7ba:	2900      	cmp	r1, #0
 800c7bc:	d0c9      	beq.n	800c752 <__sflush_r+0x1a>
 800c7be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7c2:	4299      	cmp	r1, r3
 800c7c4:	d002      	beq.n	800c7cc <__sflush_r+0x94>
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	f7fe fe9a 	bl	800b500 <_free_r>
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	6360      	str	r0, [r4, #52]	; 0x34
 800c7d0:	e7c0      	b.n	800c754 <__sflush_r+0x1c>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	47b0      	blx	r6
 800c7d8:	1c41      	adds	r1, r0, #1
 800c7da:	d1c8      	bne.n	800c76e <__sflush_r+0x36>
 800c7dc:	682b      	ldr	r3, [r5, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0c5      	beq.n	800c76e <__sflush_r+0x36>
 800c7e2:	2b1d      	cmp	r3, #29
 800c7e4:	d001      	beq.n	800c7ea <__sflush_r+0xb2>
 800c7e6:	2b16      	cmp	r3, #22
 800c7e8:	d101      	bne.n	800c7ee <__sflush_r+0xb6>
 800c7ea:	602f      	str	r7, [r5, #0]
 800c7ec:	e7b1      	b.n	800c752 <__sflush_r+0x1a>
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7f4:	81a3      	strh	r3, [r4, #12]
 800c7f6:	e7ad      	b.n	800c754 <__sflush_r+0x1c>
 800c7f8:	690f      	ldr	r7, [r1, #16]
 800c7fa:	2f00      	cmp	r7, #0
 800c7fc:	d0a9      	beq.n	800c752 <__sflush_r+0x1a>
 800c7fe:	0793      	lsls	r3, r2, #30
 800c800:	680e      	ldr	r6, [r1, #0]
 800c802:	bf08      	it	eq
 800c804:	694b      	ldreq	r3, [r1, #20]
 800c806:	600f      	str	r7, [r1, #0]
 800c808:	bf18      	it	ne
 800c80a:	2300      	movne	r3, #0
 800c80c:	eba6 0807 	sub.w	r8, r6, r7
 800c810:	608b      	str	r3, [r1, #8]
 800c812:	f1b8 0f00 	cmp.w	r8, #0
 800c816:	dd9c      	ble.n	800c752 <__sflush_r+0x1a>
 800c818:	6a21      	ldr	r1, [r4, #32]
 800c81a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c81c:	4643      	mov	r3, r8
 800c81e:	463a      	mov	r2, r7
 800c820:	4628      	mov	r0, r5
 800c822:	47b0      	blx	r6
 800c824:	2800      	cmp	r0, #0
 800c826:	dc06      	bgt.n	800c836 <__sflush_r+0xfe>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c82e:	81a3      	strh	r3, [r4, #12]
 800c830:	f04f 30ff 	mov.w	r0, #4294967295
 800c834:	e78e      	b.n	800c754 <__sflush_r+0x1c>
 800c836:	4407      	add	r7, r0
 800c838:	eba8 0800 	sub.w	r8, r8, r0
 800c83c:	e7e9      	b.n	800c812 <__sflush_r+0xda>
 800c83e:	bf00      	nop
 800c840:	dfbffffe 	.word	0xdfbffffe

0800c844 <_fflush_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	690b      	ldr	r3, [r1, #16]
 800c848:	4605      	mov	r5, r0
 800c84a:	460c      	mov	r4, r1
 800c84c:	b913      	cbnz	r3, 800c854 <_fflush_r+0x10>
 800c84e:	2500      	movs	r5, #0
 800c850:	4628      	mov	r0, r5
 800c852:	bd38      	pop	{r3, r4, r5, pc}
 800c854:	b118      	cbz	r0, 800c85e <_fflush_r+0x1a>
 800c856:	6a03      	ldr	r3, [r0, #32]
 800c858:	b90b      	cbnz	r3, 800c85e <_fflush_r+0x1a>
 800c85a:	f7fe fd25 	bl	800b2a8 <__sinit>
 800c85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0f3      	beq.n	800c84e <_fflush_r+0xa>
 800c866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c868:	07d0      	lsls	r0, r2, #31
 800c86a:	d404      	bmi.n	800c876 <_fflush_r+0x32>
 800c86c:	0599      	lsls	r1, r3, #22
 800c86e:	d402      	bmi.n	800c876 <_fflush_r+0x32>
 800c870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c872:	f7fe fe2c 	bl	800b4ce <__retarget_lock_acquire_recursive>
 800c876:	4628      	mov	r0, r5
 800c878:	4621      	mov	r1, r4
 800c87a:	f7ff ff5d 	bl	800c738 <__sflush_r>
 800c87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c880:	07da      	lsls	r2, r3, #31
 800c882:	4605      	mov	r5, r0
 800c884:	d4e4      	bmi.n	800c850 <_fflush_r+0xc>
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	059b      	lsls	r3, r3, #22
 800c88a:	d4e1      	bmi.n	800c850 <_fflush_r+0xc>
 800c88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c88e:	f7fe fe1f 	bl	800b4d0 <__retarget_lock_release_recursive>
 800c892:	e7dd      	b.n	800c850 <_fflush_r+0xc>

0800c894 <_sbrk_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d06      	ldr	r5, [pc, #24]	; (800c8b0 <_sbrk_r+0x1c>)
 800c898:	2300      	movs	r3, #0
 800c89a:	4604      	mov	r4, r0
 800c89c:	4608      	mov	r0, r1
 800c89e:	602b      	str	r3, [r5, #0]
 800c8a0:	f7f5 f876 	bl	8001990 <_sbrk>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d102      	bne.n	800c8ae <_sbrk_r+0x1a>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	b103      	cbz	r3, 800c8ae <_sbrk_r+0x1a>
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}
 800c8b0:	20001f98 	.word	0x20001f98

0800c8b4 <__assert_func>:
 800c8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8b6:	4614      	mov	r4, r2
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <__assert_func+0x2c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4605      	mov	r5, r0
 800c8c0:	68d8      	ldr	r0, [r3, #12]
 800c8c2:	b14c      	cbz	r4, 800c8d8 <__assert_func+0x24>
 800c8c4:	4b07      	ldr	r3, [pc, #28]	; (800c8e4 <__assert_func+0x30>)
 800c8c6:	9100      	str	r1, [sp, #0]
 800c8c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8cc:	4906      	ldr	r1, [pc, #24]	; (800c8e8 <__assert_func+0x34>)
 800c8ce:	462b      	mov	r3, r5
 800c8d0:	f000 f82c 	bl	800c92c <fiprintf>
 800c8d4:	f000 f83c 	bl	800c950 <abort>
 800c8d8:	4b04      	ldr	r3, [pc, #16]	; (800c8ec <__assert_func+0x38>)
 800c8da:	461c      	mov	r4, r3
 800c8dc:	e7f3      	b.n	800c8c6 <__assert_func+0x12>
 800c8de:	bf00      	nop
 800c8e0:	20000348 	.word	0x20000348
 800c8e4:	0800d685 	.word	0x0800d685
 800c8e8:	0800d692 	.word	0x0800d692
 800c8ec:	0800d6c0 	.word	0x0800d6c0

0800c8f0 <_calloc_r>:
 800c8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8f2:	fba1 2402 	umull	r2, r4, r1, r2
 800c8f6:	b94c      	cbnz	r4, 800c90c <_calloc_r+0x1c>
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	9201      	str	r2, [sp, #4]
 800c8fc:	f7ff f9c4 	bl	800bc88 <_malloc_r>
 800c900:	9a01      	ldr	r2, [sp, #4]
 800c902:	4605      	mov	r5, r0
 800c904:	b930      	cbnz	r0, 800c914 <_calloc_r+0x24>
 800c906:	4628      	mov	r0, r5
 800c908:	b003      	add	sp, #12
 800c90a:	bd30      	pop	{r4, r5, pc}
 800c90c:	220c      	movs	r2, #12
 800c90e:	6002      	str	r2, [r0, #0]
 800c910:	2500      	movs	r5, #0
 800c912:	e7f8      	b.n	800c906 <_calloc_r+0x16>
 800c914:	4621      	mov	r1, r4
 800c916:	f7fe fd40 	bl	800b39a <memset>
 800c91a:	e7f4      	b.n	800c906 <_calloc_r+0x16>

0800c91c <malloc>:
 800c91c:	4b02      	ldr	r3, [pc, #8]	; (800c928 <malloc+0xc>)
 800c91e:	4601      	mov	r1, r0
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	f7ff b9b1 	b.w	800bc88 <_malloc_r>
 800c926:	bf00      	nop
 800c928:	20000348 	.word	0x20000348

0800c92c <fiprintf>:
 800c92c:	b40e      	push	{r1, r2, r3}
 800c92e:	b503      	push	{r0, r1, lr}
 800c930:	4601      	mov	r1, r0
 800c932:	ab03      	add	r3, sp, #12
 800c934:	4805      	ldr	r0, [pc, #20]	; (800c94c <fiprintf+0x20>)
 800c936:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	f000 f837 	bl	800c9b0 <_vfiprintf_r>
 800c942:	b002      	add	sp, #8
 800c944:	f85d eb04 	ldr.w	lr, [sp], #4
 800c948:	b003      	add	sp, #12
 800c94a:	4770      	bx	lr
 800c94c:	20000348 	.word	0x20000348

0800c950 <abort>:
 800c950:	b508      	push	{r3, lr}
 800c952:	2006      	movs	r0, #6
 800c954:	f000 fb94 	bl	800d080 <raise>
 800c958:	2001      	movs	r0, #1
 800c95a:	f7f4 ffa1 	bl	80018a0 <_exit>

0800c95e <__sfputc_r>:
 800c95e:	6893      	ldr	r3, [r2, #8]
 800c960:	3b01      	subs	r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	b410      	push	{r4}
 800c966:	6093      	str	r3, [r2, #8]
 800c968:	da08      	bge.n	800c97c <__sfputc_r+0x1e>
 800c96a:	6994      	ldr	r4, [r2, #24]
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	db01      	blt.n	800c974 <__sfputc_r+0x16>
 800c970:	290a      	cmp	r1, #10
 800c972:	d103      	bne.n	800c97c <__sfputc_r+0x1e>
 800c974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c978:	f000 bac4 	b.w	800cf04 <__swbuf_r>
 800c97c:	6813      	ldr	r3, [r2, #0]
 800c97e:	1c58      	adds	r0, r3, #1
 800c980:	6010      	str	r0, [r2, #0]
 800c982:	7019      	strb	r1, [r3, #0]
 800c984:	4608      	mov	r0, r1
 800c986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <__sfputs_r>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	4606      	mov	r6, r0
 800c990:	460f      	mov	r7, r1
 800c992:	4614      	mov	r4, r2
 800c994:	18d5      	adds	r5, r2, r3
 800c996:	42ac      	cmp	r4, r5
 800c998:	d101      	bne.n	800c99e <__sfputs_r+0x12>
 800c99a:	2000      	movs	r0, #0
 800c99c:	e007      	b.n	800c9ae <__sfputs_r+0x22>
 800c99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a2:	463a      	mov	r2, r7
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7ff ffda 	bl	800c95e <__sfputc_r>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	d1f3      	bne.n	800c996 <__sfputs_r+0xa>
 800c9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9b0 <_vfiprintf_r>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	b09d      	sub	sp, #116	; 0x74
 800c9b8:	4614      	mov	r4, r2
 800c9ba:	4698      	mov	r8, r3
 800c9bc:	4606      	mov	r6, r0
 800c9be:	b118      	cbz	r0, 800c9c8 <_vfiprintf_r+0x18>
 800c9c0:	6a03      	ldr	r3, [r0, #32]
 800c9c2:	b90b      	cbnz	r3, 800c9c8 <_vfiprintf_r+0x18>
 800c9c4:	f7fe fc70 	bl	800b2a8 <__sinit>
 800c9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9ca:	07d9      	lsls	r1, r3, #31
 800c9cc:	d405      	bmi.n	800c9da <_vfiprintf_r+0x2a>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	059a      	lsls	r2, r3, #22
 800c9d2:	d402      	bmi.n	800c9da <_vfiprintf_r+0x2a>
 800c9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d6:	f7fe fd7a 	bl	800b4ce <__retarget_lock_acquire_recursive>
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	071b      	lsls	r3, r3, #28
 800c9de:	d501      	bpl.n	800c9e4 <_vfiprintf_r+0x34>
 800c9e0:	692b      	ldr	r3, [r5, #16]
 800c9e2:	b99b      	cbnz	r3, 800ca0c <_vfiprintf_r+0x5c>
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f000 faca 	bl	800cf80 <__swsetup_r>
 800c9ec:	b170      	cbz	r0, 800ca0c <_vfiprintf_r+0x5c>
 800c9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9f0:	07dc      	lsls	r4, r3, #31
 800c9f2:	d504      	bpl.n	800c9fe <_vfiprintf_r+0x4e>
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	b01d      	add	sp, #116	; 0x74
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	89ab      	ldrh	r3, [r5, #12]
 800ca00:	0598      	lsls	r0, r3, #22
 800ca02:	d4f7      	bmi.n	800c9f4 <_vfiprintf_r+0x44>
 800ca04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca06:	f7fe fd63 	bl	800b4d0 <__retarget_lock_release_recursive>
 800ca0a:	e7f3      	b.n	800c9f4 <_vfiprintf_r+0x44>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca10:	2320      	movs	r3, #32
 800ca12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca1a:	2330      	movs	r3, #48	; 0x30
 800ca1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cbd0 <_vfiprintf_r+0x220>
 800ca20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca24:	f04f 0901 	mov.w	r9, #1
 800ca28:	4623      	mov	r3, r4
 800ca2a:	469a      	mov	sl, r3
 800ca2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca30:	b10a      	cbz	r2, 800ca36 <_vfiprintf_r+0x86>
 800ca32:	2a25      	cmp	r2, #37	; 0x25
 800ca34:	d1f9      	bne.n	800ca2a <_vfiprintf_r+0x7a>
 800ca36:	ebba 0b04 	subs.w	fp, sl, r4
 800ca3a:	d00b      	beq.n	800ca54 <_vfiprintf_r+0xa4>
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	4622      	mov	r2, r4
 800ca40:	4629      	mov	r1, r5
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7ff ffa2 	bl	800c98c <__sfputs_r>
 800ca48:	3001      	adds	r0, #1
 800ca4a:	f000 80a9 	beq.w	800cba0 <_vfiprintf_r+0x1f0>
 800ca4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca50:	445a      	add	r2, fp
 800ca52:	9209      	str	r2, [sp, #36]	; 0x24
 800ca54:	f89a 3000 	ldrb.w	r3, [sl]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80a1 	beq.w	800cba0 <_vfiprintf_r+0x1f0>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f04f 32ff 	mov.w	r2, #4294967295
 800ca64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca68:	f10a 0a01 	add.w	sl, sl, #1
 800ca6c:	9304      	str	r3, [sp, #16]
 800ca6e:	9307      	str	r3, [sp, #28]
 800ca70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca74:	931a      	str	r3, [sp, #104]	; 0x68
 800ca76:	4654      	mov	r4, sl
 800ca78:	2205      	movs	r2, #5
 800ca7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7e:	4854      	ldr	r0, [pc, #336]	; (800cbd0 <_vfiprintf_r+0x220>)
 800ca80:	f7f3 fbde 	bl	8000240 <memchr>
 800ca84:	9a04      	ldr	r2, [sp, #16]
 800ca86:	b9d8      	cbnz	r0, 800cac0 <_vfiprintf_r+0x110>
 800ca88:	06d1      	lsls	r1, r2, #27
 800ca8a:	bf44      	itt	mi
 800ca8c:	2320      	movmi	r3, #32
 800ca8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca92:	0713      	lsls	r3, r2, #28
 800ca94:	bf44      	itt	mi
 800ca96:	232b      	movmi	r3, #43	; 0x2b
 800ca98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca9c:	f89a 3000 	ldrb.w	r3, [sl]
 800caa0:	2b2a      	cmp	r3, #42	; 0x2a
 800caa2:	d015      	beq.n	800cad0 <_vfiprintf_r+0x120>
 800caa4:	9a07      	ldr	r2, [sp, #28]
 800caa6:	4654      	mov	r4, sl
 800caa8:	2000      	movs	r0, #0
 800caaa:	f04f 0c0a 	mov.w	ip, #10
 800caae:	4621      	mov	r1, r4
 800cab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cab4:	3b30      	subs	r3, #48	; 0x30
 800cab6:	2b09      	cmp	r3, #9
 800cab8:	d94d      	bls.n	800cb56 <_vfiprintf_r+0x1a6>
 800caba:	b1b0      	cbz	r0, 800caea <_vfiprintf_r+0x13a>
 800cabc:	9207      	str	r2, [sp, #28]
 800cabe:	e014      	b.n	800caea <_vfiprintf_r+0x13a>
 800cac0:	eba0 0308 	sub.w	r3, r0, r8
 800cac4:	fa09 f303 	lsl.w	r3, r9, r3
 800cac8:	4313      	orrs	r3, r2
 800caca:	9304      	str	r3, [sp, #16]
 800cacc:	46a2      	mov	sl, r4
 800cace:	e7d2      	b.n	800ca76 <_vfiprintf_r+0xc6>
 800cad0:	9b03      	ldr	r3, [sp, #12]
 800cad2:	1d19      	adds	r1, r3, #4
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	9103      	str	r1, [sp, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bfbb      	ittet	lt
 800cadc:	425b      	neglt	r3, r3
 800cade:	f042 0202 	orrlt.w	r2, r2, #2
 800cae2:	9307      	strge	r3, [sp, #28]
 800cae4:	9307      	strlt	r3, [sp, #28]
 800cae6:	bfb8      	it	lt
 800cae8:	9204      	strlt	r2, [sp, #16]
 800caea:	7823      	ldrb	r3, [r4, #0]
 800caec:	2b2e      	cmp	r3, #46	; 0x2e
 800caee:	d10c      	bne.n	800cb0a <_vfiprintf_r+0x15a>
 800caf0:	7863      	ldrb	r3, [r4, #1]
 800caf2:	2b2a      	cmp	r3, #42	; 0x2a
 800caf4:	d134      	bne.n	800cb60 <_vfiprintf_r+0x1b0>
 800caf6:	9b03      	ldr	r3, [sp, #12]
 800caf8:	1d1a      	adds	r2, r3, #4
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	9203      	str	r2, [sp, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	bfb8      	it	lt
 800cb02:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb06:	3402      	adds	r4, #2
 800cb08:	9305      	str	r3, [sp, #20]
 800cb0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cbe0 <_vfiprintf_r+0x230>
 800cb0e:	7821      	ldrb	r1, [r4, #0]
 800cb10:	2203      	movs	r2, #3
 800cb12:	4650      	mov	r0, sl
 800cb14:	f7f3 fb94 	bl	8000240 <memchr>
 800cb18:	b138      	cbz	r0, 800cb2a <_vfiprintf_r+0x17a>
 800cb1a:	9b04      	ldr	r3, [sp, #16]
 800cb1c:	eba0 000a 	sub.w	r0, r0, sl
 800cb20:	2240      	movs	r2, #64	; 0x40
 800cb22:	4082      	lsls	r2, r0
 800cb24:	4313      	orrs	r3, r2
 800cb26:	3401      	adds	r4, #1
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2e:	4829      	ldr	r0, [pc, #164]	; (800cbd4 <_vfiprintf_r+0x224>)
 800cb30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb34:	2206      	movs	r2, #6
 800cb36:	f7f3 fb83 	bl	8000240 <memchr>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d03f      	beq.n	800cbbe <_vfiprintf_r+0x20e>
 800cb3e:	4b26      	ldr	r3, [pc, #152]	; (800cbd8 <_vfiprintf_r+0x228>)
 800cb40:	bb1b      	cbnz	r3, 800cb8a <_vfiprintf_r+0x1da>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	3307      	adds	r3, #7
 800cb46:	f023 0307 	bic.w	r3, r3, #7
 800cb4a:	3308      	adds	r3, #8
 800cb4c:	9303      	str	r3, [sp, #12]
 800cb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb50:	443b      	add	r3, r7
 800cb52:	9309      	str	r3, [sp, #36]	; 0x24
 800cb54:	e768      	b.n	800ca28 <_vfiprintf_r+0x78>
 800cb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	e7a6      	b.n	800caae <_vfiprintf_r+0xfe>
 800cb60:	2300      	movs	r3, #0
 800cb62:	3401      	adds	r4, #1
 800cb64:	9305      	str	r3, [sp, #20]
 800cb66:	4619      	mov	r1, r3
 800cb68:	f04f 0c0a 	mov.w	ip, #10
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb72:	3a30      	subs	r2, #48	; 0x30
 800cb74:	2a09      	cmp	r2, #9
 800cb76:	d903      	bls.n	800cb80 <_vfiprintf_r+0x1d0>
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0c6      	beq.n	800cb0a <_vfiprintf_r+0x15a>
 800cb7c:	9105      	str	r1, [sp, #20]
 800cb7e:	e7c4      	b.n	800cb0a <_vfiprintf_r+0x15a>
 800cb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb84:	4604      	mov	r4, r0
 800cb86:	2301      	movs	r3, #1
 800cb88:	e7f0      	b.n	800cb6c <_vfiprintf_r+0x1bc>
 800cb8a:	ab03      	add	r3, sp, #12
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	462a      	mov	r2, r5
 800cb90:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <_vfiprintf_r+0x22c>)
 800cb92:	a904      	add	r1, sp, #16
 800cb94:	4630      	mov	r0, r6
 800cb96:	f3af 8000 	nop.w
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	1c78      	adds	r0, r7, #1
 800cb9e:	d1d6      	bne.n	800cb4e <_vfiprintf_r+0x19e>
 800cba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cba2:	07d9      	lsls	r1, r3, #31
 800cba4:	d405      	bmi.n	800cbb2 <_vfiprintf_r+0x202>
 800cba6:	89ab      	ldrh	r3, [r5, #12]
 800cba8:	059a      	lsls	r2, r3, #22
 800cbaa:	d402      	bmi.n	800cbb2 <_vfiprintf_r+0x202>
 800cbac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbae:	f7fe fc8f 	bl	800b4d0 <__retarget_lock_release_recursive>
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	065b      	lsls	r3, r3, #25
 800cbb6:	f53f af1d 	bmi.w	800c9f4 <_vfiprintf_r+0x44>
 800cbba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbbc:	e71c      	b.n	800c9f8 <_vfiprintf_r+0x48>
 800cbbe:	ab03      	add	r3, sp, #12
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	462a      	mov	r2, r5
 800cbc4:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <_vfiprintf_r+0x22c>)
 800cbc6:	a904      	add	r1, sp, #16
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 f879 	bl	800ccc0 <_printf_i>
 800cbce:	e7e4      	b.n	800cb9a <_vfiprintf_r+0x1ea>
 800cbd0:	0800d6c1 	.word	0x0800d6c1
 800cbd4:	0800d6cb 	.word	0x0800d6cb
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	0800c98d 	.word	0x0800c98d
 800cbe0:	0800d6c7 	.word	0x0800d6c7

0800cbe4 <_printf_common>:
 800cbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe8:	4616      	mov	r6, r2
 800cbea:	4699      	mov	r9, r3
 800cbec:	688a      	ldr	r2, [r1, #8]
 800cbee:	690b      	ldr	r3, [r1, #16]
 800cbf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	bfb8      	it	lt
 800cbf8:	4613      	movlt	r3, r2
 800cbfa:	6033      	str	r3, [r6, #0]
 800cbfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc00:	4607      	mov	r7, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	b10a      	cbz	r2, 800cc0a <_printf_common+0x26>
 800cc06:	3301      	adds	r3, #1
 800cc08:	6033      	str	r3, [r6, #0]
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	0699      	lsls	r1, r3, #26
 800cc0e:	bf42      	ittt	mi
 800cc10:	6833      	ldrmi	r3, [r6, #0]
 800cc12:	3302      	addmi	r3, #2
 800cc14:	6033      	strmi	r3, [r6, #0]
 800cc16:	6825      	ldr	r5, [r4, #0]
 800cc18:	f015 0506 	ands.w	r5, r5, #6
 800cc1c:	d106      	bne.n	800cc2c <_printf_common+0x48>
 800cc1e:	f104 0a19 	add.w	sl, r4, #25
 800cc22:	68e3      	ldr	r3, [r4, #12]
 800cc24:	6832      	ldr	r2, [r6, #0]
 800cc26:	1a9b      	subs	r3, r3, r2
 800cc28:	42ab      	cmp	r3, r5
 800cc2a:	dc26      	bgt.n	800cc7a <_printf_common+0x96>
 800cc2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc30:	1e13      	subs	r3, r2, #0
 800cc32:	6822      	ldr	r2, [r4, #0]
 800cc34:	bf18      	it	ne
 800cc36:	2301      	movne	r3, #1
 800cc38:	0692      	lsls	r2, r2, #26
 800cc3a:	d42b      	bmi.n	800cc94 <_printf_common+0xb0>
 800cc3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc40:	4649      	mov	r1, r9
 800cc42:	4638      	mov	r0, r7
 800cc44:	47c0      	blx	r8
 800cc46:	3001      	adds	r0, #1
 800cc48:	d01e      	beq.n	800cc88 <_printf_common+0xa4>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	6922      	ldr	r2, [r4, #16]
 800cc4e:	f003 0306 	and.w	r3, r3, #6
 800cc52:	2b04      	cmp	r3, #4
 800cc54:	bf02      	ittt	eq
 800cc56:	68e5      	ldreq	r5, [r4, #12]
 800cc58:	6833      	ldreq	r3, [r6, #0]
 800cc5a:	1aed      	subeq	r5, r5, r3
 800cc5c:	68a3      	ldr	r3, [r4, #8]
 800cc5e:	bf0c      	ite	eq
 800cc60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc64:	2500      	movne	r5, #0
 800cc66:	4293      	cmp	r3, r2
 800cc68:	bfc4      	itt	gt
 800cc6a:	1a9b      	subgt	r3, r3, r2
 800cc6c:	18ed      	addgt	r5, r5, r3
 800cc6e:	2600      	movs	r6, #0
 800cc70:	341a      	adds	r4, #26
 800cc72:	42b5      	cmp	r5, r6
 800cc74:	d11a      	bne.n	800ccac <_printf_common+0xc8>
 800cc76:	2000      	movs	r0, #0
 800cc78:	e008      	b.n	800cc8c <_printf_common+0xa8>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4652      	mov	r2, sl
 800cc7e:	4649      	mov	r1, r9
 800cc80:	4638      	mov	r0, r7
 800cc82:	47c0      	blx	r8
 800cc84:	3001      	adds	r0, #1
 800cc86:	d103      	bne.n	800cc90 <_printf_common+0xac>
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc90:	3501      	adds	r5, #1
 800cc92:	e7c6      	b.n	800cc22 <_printf_common+0x3e>
 800cc94:	18e1      	adds	r1, r4, r3
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	2030      	movs	r0, #48	; 0x30
 800cc9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc9e:	4422      	add	r2, r4
 800cca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cca8:	3302      	adds	r3, #2
 800ccaa:	e7c7      	b.n	800cc3c <_printf_common+0x58>
 800ccac:	2301      	movs	r3, #1
 800ccae:	4622      	mov	r2, r4
 800ccb0:	4649      	mov	r1, r9
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	47c0      	blx	r8
 800ccb6:	3001      	adds	r0, #1
 800ccb8:	d0e6      	beq.n	800cc88 <_printf_common+0xa4>
 800ccba:	3601      	adds	r6, #1
 800ccbc:	e7d9      	b.n	800cc72 <_printf_common+0x8e>
	...

0800ccc0 <_printf_i>:
 800ccc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc4:	7e0f      	ldrb	r7, [r1, #24]
 800ccc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccc8:	2f78      	cmp	r7, #120	; 0x78
 800ccca:	4691      	mov	r9, r2
 800cccc:	4680      	mov	r8, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	469a      	mov	sl, r3
 800ccd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccd6:	d807      	bhi.n	800cce8 <_printf_i+0x28>
 800ccd8:	2f62      	cmp	r7, #98	; 0x62
 800ccda:	d80a      	bhi.n	800ccf2 <_printf_i+0x32>
 800ccdc:	2f00      	cmp	r7, #0
 800ccde:	f000 80d4 	beq.w	800ce8a <_printf_i+0x1ca>
 800cce2:	2f58      	cmp	r7, #88	; 0x58
 800cce4:	f000 80c0 	beq.w	800ce68 <_printf_i+0x1a8>
 800cce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccf0:	e03a      	b.n	800cd68 <_printf_i+0xa8>
 800ccf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccf6:	2b15      	cmp	r3, #21
 800ccf8:	d8f6      	bhi.n	800cce8 <_printf_i+0x28>
 800ccfa:	a101      	add	r1, pc, #4	; (adr r1, 800cd00 <_printf_i+0x40>)
 800ccfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd00:	0800cd59 	.word	0x0800cd59
 800cd04:	0800cd6d 	.word	0x0800cd6d
 800cd08:	0800cce9 	.word	0x0800cce9
 800cd0c:	0800cce9 	.word	0x0800cce9
 800cd10:	0800cce9 	.word	0x0800cce9
 800cd14:	0800cce9 	.word	0x0800cce9
 800cd18:	0800cd6d 	.word	0x0800cd6d
 800cd1c:	0800cce9 	.word	0x0800cce9
 800cd20:	0800cce9 	.word	0x0800cce9
 800cd24:	0800cce9 	.word	0x0800cce9
 800cd28:	0800cce9 	.word	0x0800cce9
 800cd2c:	0800ce71 	.word	0x0800ce71
 800cd30:	0800cd99 	.word	0x0800cd99
 800cd34:	0800ce2b 	.word	0x0800ce2b
 800cd38:	0800cce9 	.word	0x0800cce9
 800cd3c:	0800cce9 	.word	0x0800cce9
 800cd40:	0800ce93 	.word	0x0800ce93
 800cd44:	0800cce9 	.word	0x0800cce9
 800cd48:	0800cd99 	.word	0x0800cd99
 800cd4c:	0800cce9 	.word	0x0800cce9
 800cd50:	0800cce9 	.word	0x0800cce9
 800cd54:	0800ce33 	.word	0x0800ce33
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	1d1a      	adds	r2, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	602a      	str	r2, [r5, #0]
 800cd60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e09f      	b.n	800ceac <_printf_i+0x1ec>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	0607      	lsls	r7, r0, #24
 800cd72:	f103 0104 	add.w	r1, r3, #4
 800cd76:	6029      	str	r1, [r5, #0]
 800cd78:	d501      	bpl.n	800cd7e <_printf_i+0xbe>
 800cd7a:	681e      	ldr	r6, [r3, #0]
 800cd7c:	e003      	b.n	800cd86 <_printf_i+0xc6>
 800cd7e:	0646      	lsls	r6, r0, #25
 800cd80:	d5fb      	bpl.n	800cd7a <_printf_i+0xba>
 800cd82:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd86:	2e00      	cmp	r6, #0
 800cd88:	da03      	bge.n	800cd92 <_printf_i+0xd2>
 800cd8a:	232d      	movs	r3, #45	; 0x2d
 800cd8c:	4276      	negs	r6, r6
 800cd8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd92:	485a      	ldr	r0, [pc, #360]	; (800cefc <_printf_i+0x23c>)
 800cd94:	230a      	movs	r3, #10
 800cd96:	e012      	b.n	800cdbe <_printf_i+0xfe>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	6820      	ldr	r0, [r4, #0]
 800cd9c:	1d19      	adds	r1, r3, #4
 800cd9e:	6029      	str	r1, [r5, #0]
 800cda0:	0605      	lsls	r5, r0, #24
 800cda2:	d501      	bpl.n	800cda8 <_printf_i+0xe8>
 800cda4:	681e      	ldr	r6, [r3, #0]
 800cda6:	e002      	b.n	800cdae <_printf_i+0xee>
 800cda8:	0641      	lsls	r1, r0, #25
 800cdaa:	d5fb      	bpl.n	800cda4 <_printf_i+0xe4>
 800cdac:	881e      	ldrh	r6, [r3, #0]
 800cdae:	4853      	ldr	r0, [pc, #332]	; (800cefc <_printf_i+0x23c>)
 800cdb0:	2f6f      	cmp	r7, #111	; 0x6f
 800cdb2:	bf0c      	ite	eq
 800cdb4:	2308      	moveq	r3, #8
 800cdb6:	230a      	movne	r3, #10
 800cdb8:	2100      	movs	r1, #0
 800cdba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdbe:	6865      	ldr	r5, [r4, #4]
 800cdc0:	60a5      	str	r5, [r4, #8]
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	bfa2      	ittt	ge
 800cdc6:	6821      	ldrge	r1, [r4, #0]
 800cdc8:	f021 0104 	bicge.w	r1, r1, #4
 800cdcc:	6021      	strge	r1, [r4, #0]
 800cdce:	b90e      	cbnz	r6, 800cdd4 <_printf_i+0x114>
 800cdd0:	2d00      	cmp	r5, #0
 800cdd2:	d04b      	beq.n	800ce6c <_printf_i+0x1ac>
 800cdd4:	4615      	mov	r5, r2
 800cdd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdda:	fb03 6711 	mls	r7, r3, r1, r6
 800cdde:	5dc7      	ldrb	r7, [r0, r7]
 800cde0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cde4:	4637      	mov	r7, r6
 800cde6:	42bb      	cmp	r3, r7
 800cde8:	460e      	mov	r6, r1
 800cdea:	d9f4      	bls.n	800cdd6 <_printf_i+0x116>
 800cdec:	2b08      	cmp	r3, #8
 800cdee:	d10b      	bne.n	800ce08 <_printf_i+0x148>
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	07de      	lsls	r6, r3, #31
 800cdf4:	d508      	bpl.n	800ce08 <_printf_i+0x148>
 800cdf6:	6923      	ldr	r3, [r4, #16]
 800cdf8:	6861      	ldr	r1, [r4, #4]
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	bfde      	ittt	le
 800cdfe:	2330      	movle	r3, #48	; 0x30
 800ce00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce08:	1b52      	subs	r2, r2, r5
 800ce0a:	6122      	str	r2, [r4, #16]
 800ce0c:	f8cd a000 	str.w	sl, [sp]
 800ce10:	464b      	mov	r3, r9
 800ce12:	aa03      	add	r2, sp, #12
 800ce14:	4621      	mov	r1, r4
 800ce16:	4640      	mov	r0, r8
 800ce18:	f7ff fee4 	bl	800cbe4 <_printf_common>
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d14a      	bne.n	800ceb6 <_printf_i+0x1f6>
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
 800ce24:	b004      	add	sp, #16
 800ce26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	f043 0320 	orr.w	r3, r3, #32
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	4833      	ldr	r0, [pc, #204]	; (800cf00 <_printf_i+0x240>)
 800ce34:	2778      	movs	r7, #120	; 0x78
 800ce36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	6829      	ldr	r1, [r5, #0]
 800ce3e:	061f      	lsls	r7, r3, #24
 800ce40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce44:	d402      	bmi.n	800ce4c <_printf_i+0x18c>
 800ce46:	065f      	lsls	r7, r3, #25
 800ce48:	bf48      	it	mi
 800ce4a:	b2b6      	uxthmi	r6, r6
 800ce4c:	07df      	lsls	r7, r3, #31
 800ce4e:	bf48      	it	mi
 800ce50:	f043 0320 	orrmi.w	r3, r3, #32
 800ce54:	6029      	str	r1, [r5, #0]
 800ce56:	bf48      	it	mi
 800ce58:	6023      	strmi	r3, [r4, #0]
 800ce5a:	b91e      	cbnz	r6, 800ce64 <_printf_i+0x1a4>
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	f023 0320 	bic.w	r3, r3, #32
 800ce62:	6023      	str	r3, [r4, #0]
 800ce64:	2310      	movs	r3, #16
 800ce66:	e7a7      	b.n	800cdb8 <_printf_i+0xf8>
 800ce68:	4824      	ldr	r0, [pc, #144]	; (800cefc <_printf_i+0x23c>)
 800ce6a:	e7e4      	b.n	800ce36 <_printf_i+0x176>
 800ce6c:	4615      	mov	r5, r2
 800ce6e:	e7bd      	b.n	800cdec <_printf_i+0x12c>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	6826      	ldr	r6, [r4, #0]
 800ce74:	6961      	ldr	r1, [r4, #20]
 800ce76:	1d18      	adds	r0, r3, #4
 800ce78:	6028      	str	r0, [r5, #0]
 800ce7a:	0635      	lsls	r5, r6, #24
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	d501      	bpl.n	800ce84 <_printf_i+0x1c4>
 800ce80:	6019      	str	r1, [r3, #0]
 800ce82:	e002      	b.n	800ce8a <_printf_i+0x1ca>
 800ce84:	0670      	lsls	r0, r6, #25
 800ce86:	d5fb      	bpl.n	800ce80 <_printf_i+0x1c0>
 800ce88:	8019      	strh	r1, [r3, #0]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	6123      	str	r3, [r4, #16]
 800ce8e:	4615      	mov	r5, r2
 800ce90:	e7bc      	b.n	800ce0c <_printf_i+0x14c>
 800ce92:	682b      	ldr	r3, [r5, #0]
 800ce94:	1d1a      	adds	r2, r3, #4
 800ce96:	602a      	str	r2, [r5, #0]
 800ce98:	681d      	ldr	r5, [r3, #0]
 800ce9a:	6862      	ldr	r2, [r4, #4]
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f7f3 f9ce 	bl	8000240 <memchr>
 800cea4:	b108      	cbz	r0, 800ceaa <_printf_i+0x1ea>
 800cea6:	1b40      	subs	r0, r0, r5
 800cea8:	6060      	str	r0, [r4, #4]
 800ceaa:	6863      	ldr	r3, [r4, #4]
 800ceac:	6123      	str	r3, [r4, #16]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceb4:	e7aa      	b.n	800ce0c <_printf_i+0x14c>
 800ceb6:	6923      	ldr	r3, [r4, #16]
 800ceb8:	462a      	mov	r2, r5
 800ceba:	4649      	mov	r1, r9
 800cebc:	4640      	mov	r0, r8
 800cebe:	47d0      	blx	sl
 800cec0:	3001      	adds	r0, #1
 800cec2:	d0ad      	beq.n	800ce20 <_printf_i+0x160>
 800cec4:	6823      	ldr	r3, [r4, #0]
 800cec6:	079b      	lsls	r3, r3, #30
 800cec8:	d413      	bmi.n	800cef2 <_printf_i+0x232>
 800ceca:	68e0      	ldr	r0, [r4, #12]
 800cecc:	9b03      	ldr	r3, [sp, #12]
 800cece:	4298      	cmp	r0, r3
 800ced0:	bfb8      	it	lt
 800ced2:	4618      	movlt	r0, r3
 800ced4:	e7a6      	b.n	800ce24 <_printf_i+0x164>
 800ced6:	2301      	movs	r3, #1
 800ced8:	4632      	mov	r2, r6
 800ceda:	4649      	mov	r1, r9
 800cedc:	4640      	mov	r0, r8
 800cede:	47d0      	blx	sl
 800cee0:	3001      	adds	r0, #1
 800cee2:	d09d      	beq.n	800ce20 <_printf_i+0x160>
 800cee4:	3501      	adds	r5, #1
 800cee6:	68e3      	ldr	r3, [r4, #12]
 800cee8:	9903      	ldr	r1, [sp, #12]
 800ceea:	1a5b      	subs	r3, r3, r1
 800ceec:	42ab      	cmp	r3, r5
 800ceee:	dcf2      	bgt.n	800ced6 <_printf_i+0x216>
 800cef0:	e7eb      	b.n	800ceca <_printf_i+0x20a>
 800cef2:	2500      	movs	r5, #0
 800cef4:	f104 0619 	add.w	r6, r4, #25
 800cef8:	e7f5      	b.n	800cee6 <_printf_i+0x226>
 800cefa:	bf00      	nop
 800cefc:	0800d6d2 	.word	0x0800d6d2
 800cf00:	0800d6e3 	.word	0x0800d6e3

0800cf04 <__swbuf_r>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	460e      	mov	r6, r1
 800cf08:	4614      	mov	r4, r2
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	b118      	cbz	r0, 800cf16 <__swbuf_r+0x12>
 800cf0e:	6a03      	ldr	r3, [r0, #32]
 800cf10:	b90b      	cbnz	r3, 800cf16 <__swbuf_r+0x12>
 800cf12:	f7fe f9c9 	bl	800b2a8 <__sinit>
 800cf16:	69a3      	ldr	r3, [r4, #24]
 800cf18:	60a3      	str	r3, [r4, #8]
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	071a      	lsls	r2, r3, #28
 800cf1e:	d525      	bpl.n	800cf6c <__swbuf_r+0x68>
 800cf20:	6923      	ldr	r3, [r4, #16]
 800cf22:	b31b      	cbz	r3, 800cf6c <__swbuf_r+0x68>
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	6922      	ldr	r2, [r4, #16]
 800cf28:	1a98      	subs	r0, r3, r2
 800cf2a:	6963      	ldr	r3, [r4, #20]
 800cf2c:	b2f6      	uxtb	r6, r6
 800cf2e:	4283      	cmp	r3, r0
 800cf30:	4637      	mov	r7, r6
 800cf32:	dc04      	bgt.n	800cf3e <__swbuf_r+0x3a>
 800cf34:	4621      	mov	r1, r4
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7ff fc84 	bl	800c844 <_fflush_r>
 800cf3c:	b9e0      	cbnz	r0, 800cf78 <__swbuf_r+0x74>
 800cf3e:	68a3      	ldr	r3, [r4, #8]
 800cf40:	3b01      	subs	r3, #1
 800cf42:	60a3      	str	r3, [r4, #8]
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	1c5a      	adds	r2, r3, #1
 800cf48:	6022      	str	r2, [r4, #0]
 800cf4a:	701e      	strb	r6, [r3, #0]
 800cf4c:	6962      	ldr	r2, [r4, #20]
 800cf4e:	1c43      	adds	r3, r0, #1
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d004      	beq.n	800cf5e <__swbuf_r+0x5a>
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	07db      	lsls	r3, r3, #31
 800cf58:	d506      	bpl.n	800cf68 <__swbuf_r+0x64>
 800cf5a:	2e0a      	cmp	r6, #10
 800cf5c:	d104      	bne.n	800cf68 <__swbuf_r+0x64>
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4628      	mov	r0, r5
 800cf62:	f7ff fc6f 	bl	800c844 <_fflush_r>
 800cf66:	b938      	cbnz	r0, 800cf78 <__swbuf_r+0x74>
 800cf68:	4638      	mov	r0, r7
 800cf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f000 f806 	bl	800cf80 <__swsetup_r>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d0d5      	beq.n	800cf24 <__swbuf_r+0x20>
 800cf78:	f04f 37ff 	mov.w	r7, #4294967295
 800cf7c:	e7f4      	b.n	800cf68 <__swbuf_r+0x64>
	...

0800cf80 <__swsetup_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4b2a      	ldr	r3, [pc, #168]	; (800d02c <__swsetup_r+0xac>)
 800cf84:	4605      	mov	r5, r0
 800cf86:	6818      	ldr	r0, [r3, #0]
 800cf88:	460c      	mov	r4, r1
 800cf8a:	b118      	cbz	r0, 800cf94 <__swsetup_r+0x14>
 800cf8c:	6a03      	ldr	r3, [r0, #32]
 800cf8e:	b90b      	cbnz	r3, 800cf94 <__swsetup_r+0x14>
 800cf90:	f7fe f98a 	bl	800b2a8 <__sinit>
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf9a:	0718      	lsls	r0, r3, #28
 800cf9c:	d422      	bmi.n	800cfe4 <__swsetup_r+0x64>
 800cf9e:	06d9      	lsls	r1, r3, #27
 800cfa0:	d407      	bmi.n	800cfb2 <__swsetup_r+0x32>
 800cfa2:	2309      	movs	r3, #9
 800cfa4:	602b      	str	r3, [r5, #0]
 800cfa6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfaa:	81a3      	strh	r3, [r4, #12]
 800cfac:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb0:	e034      	b.n	800d01c <__swsetup_r+0x9c>
 800cfb2:	0758      	lsls	r0, r3, #29
 800cfb4:	d512      	bpl.n	800cfdc <__swsetup_r+0x5c>
 800cfb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfb8:	b141      	cbz	r1, 800cfcc <__swsetup_r+0x4c>
 800cfba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfbe:	4299      	cmp	r1, r3
 800cfc0:	d002      	beq.n	800cfc8 <__swsetup_r+0x48>
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f7fe fa9c 	bl	800b500 <_free_r>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	6363      	str	r3, [r4, #52]	; 0x34
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfd2:	81a3      	strh	r3, [r4, #12]
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	6063      	str	r3, [r4, #4]
 800cfd8:	6923      	ldr	r3, [r4, #16]
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	89a3      	ldrh	r3, [r4, #12]
 800cfde:	f043 0308 	orr.w	r3, r3, #8
 800cfe2:	81a3      	strh	r3, [r4, #12]
 800cfe4:	6923      	ldr	r3, [r4, #16]
 800cfe6:	b94b      	cbnz	r3, 800cffc <__swsetup_r+0x7c>
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cff2:	d003      	beq.n	800cffc <__swsetup_r+0x7c>
 800cff4:	4621      	mov	r1, r4
 800cff6:	4628      	mov	r0, r5
 800cff8:	f000 f884 	bl	800d104 <__smakebuf_r>
 800cffc:	89a0      	ldrh	r0, [r4, #12]
 800cffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d002:	f010 0301 	ands.w	r3, r0, #1
 800d006:	d00a      	beq.n	800d01e <__swsetup_r+0x9e>
 800d008:	2300      	movs	r3, #0
 800d00a:	60a3      	str	r3, [r4, #8]
 800d00c:	6963      	ldr	r3, [r4, #20]
 800d00e:	425b      	negs	r3, r3
 800d010:	61a3      	str	r3, [r4, #24]
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	b943      	cbnz	r3, 800d028 <__swsetup_r+0xa8>
 800d016:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d01a:	d1c4      	bne.n	800cfa6 <__swsetup_r+0x26>
 800d01c:	bd38      	pop	{r3, r4, r5, pc}
 800d01e:	0781      	lsls	r1, r0, #30
 800d020:	bf58      	it	pl
 800d022:	6963      	ldrpl	r3, [r4, #20]
 800d024:	60a3      	str	r3, [r4, #8]
 800d026:	e7f4      	b.n	800d012 <__swsetup_r+0x92>
 800d028:	2000      	movs	r0, #0
 800d02a:	e7f7      	b.n	800d01c <__swsetup_r+0x9c>
 800d02c:	20000348 	.word	0x20000348

0800d030 <_raise_r>:
 800d030:	291f      	cmp	r1, #31
 800d032:	b538      	push	{r3, r4, r5, lr}
 800d034:	4604      	mov	r4, r0
 800d036:	460d      	mov	r5, r1
 800d038:	d904      	bls.n	800d044 <_raise_r+0x14>
 800d03a:	2316      	movs	r3, #22
 800d03c:	6003      	str	r3, [r0, #0]
 800d03e:	f04f 30ff 	mov.w	r0, #4294967295
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d046:	b112      	cbz	r2, 800d04e <_raise_r+0x1e>
 800d048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d04c:	b94b      	cbnz	r3, 800d062 <_raise_r+0x32>
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 f830 	bl	800d0b4 <_getpid_r>
 800d054:	462a      	mov	r2, r5
 800d056:	4601      	mov	r1, r0
 800d058:	4620      	mov	r0, r4
 800d05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d05e:	f000 b817 	b.w	800d090 <_kill_r>
 800d062:	2b01      	cmp	r3, #1
 800d064:	d00a      	beq.n	800d07c <_raise_r+0x4c>
 800d066:	1c59      	adds	r1, r3, #1
 800d068:	d103      	bne.n	800d072 <_raise_r+0x42>
 800d06a:	2316      	movs	r3, #22
 800d06c:	6003      	str	r3, [r0, #0]
 800d06e:	2001      	movs	r0, #1
 800d070:	e7e7      	b.n	800d042 <_raise_r+0x12>
 800d072:	2400      	movs	r4, #0
 800d074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d078:	4628      	mov	r0, r5
 800d07a:	4798      	blx	r3
 800d07c:	2000      	movs	r0, #0
 800d07e:	e7e0      	b.n	800d042 <_raise_r+0x12>

0800d080 <raise>:
 800d080:	4b02      	ldr	r3, [pc, #8]	; (800d08c <raise+0xc>)
 800d082:	4601      	mov	r1, r0
 800d084:	6818      	ldr	r0, [r3, #0]
 800d086:	f7ff bfd3 	b.w	800d030 <_raise_r>
 800d08a:	bf00      	nop
 800d08c:	20000348 	.word	0x20000348

0800d090 <_kill_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d07      	ldr	r5, [pc, #28]	; (800d0b0 <_kill_r+0x20>)
 800d094:	2300      	movs	r3, #0
 800d096:	4604      	mov	r4, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	4611      	mov	r1, r2
 800d09c:	602b      	str	r3, [r5, #0]
 800d09e:	f7f4 fbef 	bl	8001880 <_kill>
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	d102      	bne.n	800d0ac <_kill_r+0x1c>
 800d0a6:	682b      	ldr	r3, [r5, #0]
 800d0a8:	b103      	cbz	r3, 800d0ac <_kill_r+0x1c>
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	bd38      	pop	{r3, r4, r5, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20001f98 	.word	0x20001f98

0800d0b4 <_getpid_r>:
 800d0b4:	f7f4 bbdc 	b.w	8001870 <_getpid>

0800d0b8 <__swhatbuf_r>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	460c      	mov	r4, r1
 800d0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c0:	2900      	cmp	r1, #0
 800d0c2:	b096      	sub	sp, #88	; 0x58
 800d0c4:	4615      	mov	r5, r2
 800d0c6:	461e      	mov	r6, r3
 800d0c8:	da0d      	bge.n	800d0e6 <__swhatbuf_r+0x2e>
 800d0ca:	89a3      	ldrh	r3, [r4, #12]
 800d0cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d0d0:	f04f 0100 	mov.w	r1, #0
 800d0d4:	bf0c      	ite	eq
 800d0d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d0da:	2340      	movne	r3, #64	; 0x40
 800d0dc:	2000      	movs	r0, #0
 800d0de:	6031      	str	r1, [r6, #0]
 800d0e0:	602b      	str	r3, [r5, #0]
 800d0e2:	b016      	add	sp, #88	; 0x58
 800d0e4:	bd70      	pop	{r4, r5, r6, pc}
 800d0e6:	466a      	mov	r2, sp
 800d0e8:	f000 f848 	bl	800d17c <_fstat_r>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	dbec      	blt.n	800d0ca <__swhatbuf_r+0x12>
 800d0f0:	9901      	ldr	r1, [sp, #4]
 800d0f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d0f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d0fa:	4259      	negs	r1, r3
 800d0fc:	4159      	adcs	r1, r3
 800d0fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d102:	e7eb      	b.n	800d0dc <__swhatbuf_r+0x24>

0800d104 <__smakebuf_r>:
 800d104:	898b      	ldrh	r3, [r1, #12]
 800d106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d108:	079d      	lsls	r5, r3, #30
 800d10a:	4606      	mov	r6, r0
 800d10c:	460c      	mov	r4, r1
 800d10e:	d507      	bpl.n	800d120 <__smakebuf_r+0x1c>
 800d110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	6123      	str	r3, [r4, #16]
 800d118:	2301      	movs	r3, #1
 800d11a:	6163      	str	r3, [r4, #20]
 800d11c:	b002      	add	sp, #8
 800d11e:	bd70      	pop	{r4, r5, r6, pc}
 800d120:	ab01      	add	r3, sp, #4
 800d122:	466a      	mov	r2, sp
 800d124:	f7ff ffc8 	bl	800d0b8 <__swhatbuf_r>
 800d128:	9900      	ldr	r1, [sp, #0]
 800d12a:	4605      	mov	r5, r0
 800d12c:	4630      	mov	r0, r6
 800d12e:	f7fe fdab 	bl	800bc88 <_malloc_r>
 800d132:	b948      	cbnz	r0, 800d148 <__smakebuf_r+0x44>
 800d134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d138:	059a      	lsls	r2, r3, #22
 800d13a:	d4ef      	bmi.n	800d11c <__smakebuf_r+0x18>
 800d13c:	f023 0303 	bic.w	r3, r3, #3
 800d140:	f043 0302 	orr.w	r3, r3, #2
 800d144:	81a3      	strh	r3, [r4, #12]
 800d146:	e7e3      	b.n	800d110 <__smakebuf_r+0xc>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	6020      	str	r0, [r4, #0]
 800d14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d150:	81a3      	strh	r3, [r4, #12]
 800d152:	9b00      	ldr	r3, [sp, #0]
 800d154:	6163      	str	r3, [r4, #20]
 800d156:	9b01      	ldr	r3, [sp, #4]
 800d158:	6120      	str	r0, [r4, #16]
 800d15a:	b15b      	cbz	r3, 800d174 <__smakebuf_r+0x70>
 800d15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d160:	4630      	mov	r0, r6
 800d162:	f000 f81d 	bl	800d1a0 <_isatty_r>
 800d166:	b128      	cbz	r0, 800d174 <__smakebuf_r+0x70>
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	f023 0303 	bic.w	r3, r3, #3
 800d16e:	f043 0301 	orr.w	r3, r3, #1
 800d172:	81a3      	strh	r3, [r4, #12]
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	431d      	orrs	r5, r3
 800d178:	81a5      	strh	r5, [r4, #12]
 800d17a:	e7cf      	b.n	800d11c <__smakebuf_r+0x18>

0800d17c <_fstat_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4d07      	ldr	r5, [pc, #28]	; (800d19c <_fstat_r+0x20>)
 800d180:	2300      	movs	r3, #0
 800d182:	4604      	mov	r4, r0
 800d184:	4608      	mov	r0, r1
 800d186:	4611      	mov	r1, r2
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	f7f4 fbd8 	bl	800193e <_fstat>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	d102      	bne.n	800d198 <_fstat_r+0x1c>
 800d192:	682b      	ldr	r3, [r5, #0]
 800d194:	b103      	cbz	r3, 800d198 <_fstat_r+0x1c>
 800d196:	6023      	str	r3, [r4, #0]
 800d198:	bd38      	pop	{r3, r4, r5, pc}
 800d19a:	bf00      	nop
 800d19c:	20001f98 	.word	0x20001f98

0800d1a0 <_isatty_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d06      	ldr	r5, [pc, #24]	; (800d1bc <_isatty_r+0x1c>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	602b      	str	r3, [r5, #0]
 800d1ac:	f7f4 fbd7 	bl	800195e <_isatty>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_isatty_r+0x1a>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_isatty_r+0x1a>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	20001f98 	.word	0x20001f98

0800d1c0 <_init>:
 800d1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c2:	bf00      	nop
 800d1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1c6:	bc08      	pop	{r3}
 800d1c8:	469e      	mov	lr, r3
 800d1ca:	4770      	bx	lr

0800d1cc <_fini>:
 800d1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ce:	bf00      	nop
 800d1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1d2:	bc08      	pop	{r3}
 800d1d4:	469e      	mov	lr, r3
 800d1d6:	4770      	bx	lr
