
AVALON_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009354  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009618  08009618  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009618  08009618  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009618  08009618  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800961c  0800961c  0001961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  20000184  080097a4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  080097a4  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133b3  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339c  00000000  00000000  00033567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00036908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00037808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279b2  00000000  00000000  00038590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eb0  00000000  00000000  0005ff42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea977  00000000  00000000  00072df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  0015d7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009514 	.word	0x08009514

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009514 	.word	0x08009514

08000218 <AT25X041B_Init>:
#include "at25x041b.h"
#include "main.h"



uint8_t AT25X041B_Init(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t CS_PORT,uint32_t CS_PIN){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	/*@Function use to init the memory and check if the read and write is working
	 * by looking into the device id an manufacturer
	 */

	uint8_t txBuffer[1] = {0};
 8000226:	2300      	movs	r3, #0
 8000228:	753b      	strb	r3, [r7, #20]
	uint8_t rxBuffer[2] = {0};
 800022a:	2300      	movs	r3, #0
 800022c:	823b      	strh	r3, [r7, #16]
	uint8_t result = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	75fb      	strb	r3, [r7, #23]

	//store the port and pin number into the struct
	AT25X041B->CS_PIN = CS_PIN;
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	629a      	str	r2, [r3, #40]	; 0x28
	AT25X041B->CS_PORT = CS_PORT;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	625a      	str	r2, [r3, #36]	; 0x24


	//set the cs to a high level to make sure the communication didn't start before
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000242:	4618      	mov	r0, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	b29b      	uxth	r3, r3
 800024a:	2201      	movs	r2, #1
 800024c:	4619      	mov	r1, r3
 800024e:	f001 f823 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000252:	2005      	movs	r0, #5
 8000254:	f000 fc8a 	bl	8000b6c <HAL_Delay>
	//Pull low the GPIO to start communication
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800025c:	4618      	mov	r0, r3
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	b29b      	uxth	r3, r3
 8000264:	2200      	movs	r2, #0
 8000266:	4619      	mov	r1, r3
 8000268:	f001 f816 	bl	8001298 <HAL_GPIO_WritePin>

	txBuffer[0] = RESUME_DEEP_POWER_DOWN_CMD;
 800026c:	23ab      	movs	r3, #171	; 0xab
 800026e:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI,txBuffer, 1, 100);
 8000270:	f107 0114 	add.w	r1, r7, #20
 8000274:	2364      	movs	r3, #100	; 0x64
 8000276:	2201      	movs	r2, #1
 8000278:	68f8      	ldr	r0, [r7, #12]
 800027a:	f003 fe74 	bl	8003f66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000282:	4618      	mov	r0, r3
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000288:	b29b      	uxth	r3, r3
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f001 f803 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000292:	2005      	movs	r0, #5
 8000294:	f000 fc6a 	bl	8000b6c <HAL_Delay>
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029c:	4618      	mov	r0, r3
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	f000 fff6 	bl	8001298 <HAL_GPIO_WritePin>

	txBuffer[0] = READ_ID_CMD;
 80002ac:	239f      	movs	r3, #159	; 0x9f
 80002ae:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI, txBuffer, 1, 100);
 80002b0:	f107 0114 	add.w	r1, r7, #20
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	2201      	movs	r2, #1
 80002b8:	68f8      	ldr	r0, [r7, #12]
 80002ba:	f003 fe54 	bl	8003f66 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, rxBuffer, 2, 100);
 80002be:	f107 0110 	add.w	r1, r7, #16
 80002c2:	2364      	movs	r3, #100	; 0x64
 80002c4:	2202      	movs	r2, #2
 80002c6:	68f8      	ldr	r0, [r7, #12]
 80002c8:	f003 ffbb 	bl	8004242 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4618      	mov	r0, r3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	2201      	movs	r2, #1
 80002da:	4619      	mov	r1, r3
 80002dc:	f000 ffdc 	bl	8001298 <HAL_GPIO_WritePin>

	AT25X041B->LastWrittenAddr = 0x07FFFF;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <AT25X041B_Init+0xec>)
 80002e4:	619a      	str	r2, [r3, #24]
	AT25X041B->ManufacturerId = rxBuffer[0];
 80002e6:	7c3a      	ldrb	r2, [r7, #16]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	701a      	strb	r2, [r3, #0]
	if(AT25X041B->ManufacturerId !=0x1F){
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b1f      	cmp	r3, #31
 80002f2:	d001      	beq.n	80002f8 <AT25X041B_Init+0xe0>
		result = 1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	75fb      	strb	r3, [r7, #23]
	}
	return result;
 80002f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	0007ffff 	.word	0x0007ffff

08000308 <AT25X041B_ChipErase>:

	HAL_Delay(5);
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
}

uint8_t AT25X041B_ChipErase(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 8000308:	b5b0      	push	{r4, r5, r7, lr}
 800030a:	b092      	sub	sp, #72	; 0x48
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
	/*
	 * A simple function that erase the full 4Mb of the chip return 1 if the chip erase worked 0 if not
	 */
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t result = 1;
 8000312:	2301      	movs	r3, #1
 8000314:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint32_t SECTOR_ADDR_LIST[11] = {0x07FFFF,0x07BFFF,0x079FFF,0x076FFF,0x060FFF,0x050FFF,0x040FFF,0x030FFF,0x020FFF,0x010FFF,0x000FFF};
 8000318:	4b3e      	ldr	r3, [pc, #248]	; (8000414 <AT25X041B_ChipErase+0x10c>)
 800031a:	f107 040c 	add.w	r4, r7, #12
 800031e:	461d      	mov	r5, r3
 8000320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800032c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//All sector should be unprotect first to ensure a full erase
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000330:	2300      	movs	r3, #0
 8000332:	643b      	str	r3, [r7, #64]	; 0x40
 8000334:	e00d      	b.n	8000352 <AT25X041B_ChipErase+0x4a>
		AT25X041B_UnprotectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 8000336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	3348      	adds	r3, #72	; 0x48
 800033c:	443b      	add	r3, r7
 800033e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000342:	461a      	mov	r2, r3
 8000344:	6839      	ldr	r1, [r7, #0]
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f896 	bl	8000478 <AT25X041B_UnprotectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 800034c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800034e:	3301      	adds	r3, #1
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
 8000352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000354:	2b0a      	cmp	r3, #10
 8000356:	d9ee      	bls.n	8000336 <AT25X041B_ChipErase+0x2e>
	}
	//We also need to disable write protection (don't know why but the datasheet say to do it)
	AT25X041B_WriteProtectionDisable(SPI, AT25X041B);
 8000358:	6839      	ldr	r1, [r7, #0]
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f000 f918 	bl	8000590 <AT25X041B_WriteProtectionDisable>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000364:	4618      	mov	r0, r3
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036a:	b29b      	uxth	r3, r3
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	f000 ff92 	bl	8001298 <HAL_GPIO_WritePin>

	//Send the full chip erase command
	data[0] = FULL_CHIP_ERASE_CMD;
 8000374:	23c7      	movs	r3, #199	; 0xc7
 8000376:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HAL_SPI_Transmit(SPI, data, 1, 100);
 800037a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800037e:	2364      	movs	r3, #100	; 0x64
 8000380:	2201      	movs	r2, #1
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f003 fdef 	bl	8003f66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038c:	4618      	mov	r0, r3
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000392:	b29b      	uxth	r3, r3
 8000394:	2201      	movs	r2, #1
 8000396:	4619      	mov	r1, r3
 8000398:	f000 ff7e 	bl	8001298 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 f83c 	bl	800041c <AT25X041B_ReadStatusReg_Byte1>
 80003a4:	4603      	mov	r3, r0
 80003a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//wait until the chip erase is done (check RDY/ bits)
	while(status_reg_val & 0x01 != 0x00){
 80003aa:	e006      	b.n	80003ba <AT25X041B_ChipErase+0xb2>
		status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 80003ac:	6839      	ldr	r1, [r7, #0]
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 f834 	bl	800041c <AT25X041B_ReadStatusReg_Byte1>
 80003b4:	4603      	mov	r3, r0
 80003b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(status_reg_val & 0x01 != 0x00){
 80003ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1f2      	bne.n	80003ac <AT25X041B_ChipErase+0xa4>
	}


	//All sector should be protected again
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 80003c6:	2300      	movs	r3, #0
 80003c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003ca:	e00d      	b.n	80003e8 <AT25X041B_ChipErase+0xe0>
		AT25X041B_ProtectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 80003cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	3348      	adds	r3, #72	; 0x48
 80003d2:	443b      	add	r3, r7
 80003d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80003d8:	461a      	mov	r2, r3
 80003da:	6839      	ldr	r1, [r7, #0]
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f891 	bl	8000504 <AT25X041B_ProtectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 80003e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003e4:	3301      	adds	r3, #1
 80003e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003ea:	2b0a      	cmp	r3, #10
 80003ec:	d9ee      	bls.n	80003cc <AT25X041B_ChipErase+0xc4>
	}

	//chek the EPE bit from the status register to ensure no error
	if(((status_reg_val & 0x20)>>5) == 0x01){
 80003ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003f2:	f003 0320 	and.w	r3, r3, #32
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d003      	beq.n	8000402 <AT25X041B_ChipErase+0xfa>
		//If an error occure --> return 0
		result = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000400:	e002      	b.n	8000408 <AT25X041B_ChipErase+0x100>
	}
	else{
		//if the chip erase worked then the memory is clear and the las written adress is 0 (0x7FFFF as i read the flash from max addr downto 0
		AT25X041B->LastWrittenAddr = 0x07FFFF;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <AT25X041B_ChipErase+0x110>)
 8000406:	619a      	str	r2, [r3, #24]
	}
	return result;
 8000408:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46

}
 800040c:	4618      	mov	r0, r3
 800040e:	3748      	adds	r7, #72	; 0x48
 8000410:	46bd      	mov	sp, r7
 8000412:	bdb0      	pop	{r4, r5, r7, pc}
 8000414:	0800952c 	.word	0x0800952c
 8000418:	0007ffff 	.word	0x0007ffff

0800041c <AT25X041B_ReadStatusReg_Byte1>:

uint8_t AT25X041B_ReadStatusReg_Byte1(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]

	uint8_t data[1];
	uint8_t status_reg_value[1];


	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042a:	4618      	mov	r0, r3
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000430:	b29b      	uxth	r3, r3
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	f000 ff2f 	bl	8001298 <HAL_GPIO_WritePin>

	data[0] = READ_STATUS_CMD;
 800043a:	2305      	movs	r3, #5
 800043c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 800043e:	f107 010c 	add.w	r1, r7, #12
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	2201      	movs	r2, #1
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f003 fd8d 	bl	8003f66 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, status_reg_value, 1, 100);
 800044c:	f107 0108 	add.w	r1, r7, #8
 8000450:	2364      	movs	r3, #100	; 0x64
 8000452:	2201      	movs	r2, #1
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f003 fef4 	bl	8004242 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4618      	mov	r0, r3
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000464:	b29b      	uxth	r3, r3
 8000466:	2201      	movs	r2, #1
 8000468:	4619      	mov	r1, r3
 800046a:	f000 ff15 	bl	8001298 <HAL_GPIO_WritePin>

	return status_reg_value[0];
 800046e:	7a3b      	ldrb	r3, [r7, #8]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <AT25X041B_UnprotectSector>:
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);

	return sector_status[0];
}

void AT25X041B_UnprotectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0a1b      	lsrs	r3, r3, #8
 800048e:	b2db      	uxtb	r3, r3
 8000490:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	0c1b      	lsrs	r3, r3, #16
 8000496:	b2db      	uxtb	r3, r3
 8000498:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 800049a:	68b9      	ldr	r1, [r7, #8]
 800049c:	68f8      	ldr	r0, [r7, #12]
 800049e:	f000 f877 	bl	8000590 <AT25X041B_WriteProtectionDisable>
 80004a2:	4603      	mov	r3, r0
 80004a4:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 80004a6:	7dfb      	ldrb	r3, [r7, #23]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d003      	beq.n	80004b4 <AT25X041B_UnprotectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	68f8      	ldr	r0, [r7, #12]
 80004b0:	f000 f86e 	bl	8000590 <AT25X041B_WriteProtectionDisable>
	}


	data[0] = UNPROTECT_SECTOR_CMD;
 80004b4:	2339      	movs	r3, #57	; 0x39
 80004b6:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004bc:	4618      	mov	r0, r3
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	2200      	movs	r2, #0
 80004c6:	4619      	mov	r1, r3
 80004c8:	f000 fee6 	bl	8001298 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 80004cc:	f107 0110 	add.w	r1, r7, #16
 80004d0:	2364      	movs	r3, #100	; 0x64
 80004d2:	2201      	movs	r2, #1
 80004d4:	68f8      	ldr	r0, [r7, #12]
 80004d6:	f003 fd46 	bl	8003f66 <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 80004da:	f107 0114 	add.w	r1, r7, #20
 80004de:	2364      	movs	r3, #100	; 0x64
 80004e0:	2203      	movs	r2, #3
 80004e2:	68f8      	ldr	r0, [r7, #12]
 80004e4:	f003 fd3f 	bl	8003f66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ec:	4618      	mov	r0, r3
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	f000 fece 	bl	8001298 <HAL_GPIO_WritePin>

}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <AT25X041B_ProtectSector>:

void AT25X041B_ProtectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	b2db      	uxtb	r3, r3
 800051c:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0c1b      	lsrs	r3, r3, #16
 8000522:	b2db      	uxtb	r3, r3
 8000524:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8000526:	68b9      	ldr	r1, [r7, #8]
 8000528:	68f8      	ldr	r0, [r7, #12]
 800052a:	f000 f831 	bl	8000590 <AT25X041B_WriteProtectionDisable>
 800052e:	4603      	mov	r3, r0
 8000530:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d003      	beq.n	8000540 <AT25X041B_ProtectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	68f8      	ldr	r0, [r7, #12]
 800053c:	f000 f828 	bl	8000590 <AT25X041B_WriteProtectionDisable>
	}


	data[0] = PROTECT_SECTOR_CMD;
 8000540:	2336      	movs	r3, #54	; 0x36
 8000542:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	4618      	mov	r0, r3
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800054e:	b29b      	uxth	r3, r3
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	f000 fea0 	bl	8001298 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000558:	f107 0110 	add.w	r1, r7, #16
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	2201      	movs	r2, #1
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f003 fd00 	bl	8003f66 <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 8000566:	f107 0114 	add.w	r1, r7, #20
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	2203      	movs	r2, #3
 800056e:	68f8      	ldr	r0, [r7, #12]
 8000570:	f003 fcf9 	bl	8003f66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	4618      	mov	r0, r3
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800057e:	b29b      	uxth	r3, r3
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	f000 fe88 	bl	8001298 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <AT25X041B_WriteProtectionDisable>:
		res = 0;
	}
	return res;
}

uint8_t AT25X041B_WriteProtectionDisable(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t res = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a2:	4618      	mov	r0, r3
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	2200      	movs	r2, #0
 80005ac:	4619      	mov	r1, r3
 80005ae:	f000 fe73 	bl	8001298 <HAL_GPIO_WritePin>

	data[0] = WRITE_DISABLE_CMD;
 80005b2:	2306      	movs	r3, #6
 80005b4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 80005b6:	f107 010c 	add.w	r1, r7, #12
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	2201      	movs	r2, #1
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f003 fcd1 	bl	8003f66 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c8:	4618      	mov	r0, r3
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f000 fe60 	bl	8001298 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI, AT25X041B);
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff ff1e 	bl	800041c <AT25X041B_ReadStatusReg_Byte1>
 80005e0:	4603      	mov	r3, r0
 80005e2:	73bb      	strb	r3, [r7, #14]

	//if the command didn't worked then return 0
	if(((status_reg_val&0x02)>>1) == 0x00){
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <AT25X041B_WriteProtectionDisable+0x62>
		res = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fa42 	bl	8000a8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f875 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f8ff 	bl	800080c <MX_GPIO_Init>
  MX_USB_Device_Init();
 800060e:	f008 fa2f 	bl	8008a70 <MX_USB_Device_Init>
  MX_SPI1_Init();
 8000612:	f000 f8bd 	bl	8000790 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Init the external flash */
  AT25X041B_Init(&hspi1, &external_flash, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8000616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061e:	492d      	ldr	r1, [pc, #180]	; (80006d4 <main+0xd8>)
 8000620:	482d      	ldr	r0, [pc, #180]	; (80006d8 <main+0xdc>)
 8000622:	f7ff fdf9 	bl	8000218 <AT25X041B_Init>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fe32 	bl	8001298 <HAL_GPIO_WritePin>

  /* loop to ensure user is ready to send a data */
  uint8_t Flash_confirmation[] = "Flashing data please wait ...\r\n";
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <main+0xe0>)
 8000636:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t Print_time[] = "Waiting for USB interrupt !\r\n";
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <main+0xe4>)
 800064a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000658:	c407      	stmia	r4!, {r0, r1, r2}
 800065a:	8023      	strh	r3, [r4, #0]
  uint8_t Flash_erase[] = "External flash erase please wait ... \r\n";
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <main+0xe8>)
 800065e:	1d3c      	adds	r4, r7, #4
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800066e:	e884 0003 	stmia.w	r4, {r0, r1}

  for(int i=0;i<TIME_TO_WAIT_S;i++){
 8000672:	2300      	movs	r3, #0
 8000674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000676:	e025      	b.n	80006c4 <main+0xc8>
	  if(start_of_flash){
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <main+0xec>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d014      	beq.n	80006aa <main+0xae>
		  CDC_Transmit_FS(Flash_erase, sizeof(Flash_erase));
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2128      	movs	r1, #40	; 0x28
 8000684:	4618      	mov	r0, r3
 8000686:	f008 fabb 	bl	8008c00 <CDC_Transmit_FS>
		  AT25X041B_ChipErase(&hspi1, &external_flash);
 800068a:	4912      	ldr	r1, [pc, #72]	; (80006d4 <main+0xd8>)
 800068c:	4812      	ldr	r0, [pc, #72]	; (80006d8 <main+0xdc>)
 800068e:	f7ff fe3b 	bl	8000308 <AT25X041B_ChipErase>
		  CDC_Transmit_FS(Flash_confirmation, sizeof(Flash_confirmation));
 8000692:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000696:	2120      	movs	r1, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f008 fab1 	bl	8008c00 <CDC_Transmit_FS>

		  /* Wait until we received a end of flash sequence */
		  while(end_of_flash != 1){
 800069e:	bf00      	nop
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0xf0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d1fb      	bne.n	80006a0 <main+0xa4>

		  }
		  break;
 80006a8:	e00f      	b.n	80006ca <main+0xce>
	  }
	  CDC_Transmit_FS(Print_time, sizeof(Print_time));
 80006aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ae:	211e      	movs	r1, #30
 80006b0:	4618      	mov	r0, r3
 80006b2:	f008 faa5 	bl	8008c00 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80006b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ba:	f000 fa57 	bl	8000b6c <HAL_Delay>
  for(int i=0;i<TIME_TO_WAIT_S;i++){
 80006be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c0:	3301      	adds	r3, #1
 80006c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80006c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c6:	2b09      	cmp	r3, #9
 80006c8:	ddd6      	ble.n	8000678 <main+0x7c>
  }

  JumpToApplication(APP_ADDRESS);
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <main+0xf4>)
 80006cc:	f000 f8d0 	bl	8000870 <JumpToApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0xd4>
 80006d2:	bf00      	nop
 80006d4:	20000208 	.word	0x20000208
 80006d8:	200001a4 	.word	0x200001a4
 80006dc:	08009558 	.word	0x08009558
 80006e0:	08009578 	.word	0x08009578
 80006e4:	08009598 	.word	0x08009598
 80006e8:	200001a0 	.word	0x200001a0
 80006ec:	200001a1 	.word	0x200001a1
 80006f0:	08004000 	.word	0x08004000

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	2238      	movs	r2, #56	; 0x38
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f008 feee 	bl	80094e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000716:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071a:	f002 fb09 	bl	8002d30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800071e:	2322      	movs	r3, #34	; 0x22
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2340      	movs	r3, #64	; 0x40
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000738:	2304      	movs	r3, #4
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800073c:	234b      	movs	r3, #75	; 0x4b
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fc13 	bl	8002f7c <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800075c:	f000 f8ba 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2303      	movs	r3, #3
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2104      	movs	r1, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f002 ff17 	bl	80035ac <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 f8a6 	bl	80008d4 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_SPI1_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_SPI1_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_SPI1_Init+0x74>)
 800079c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI1_Init+0x74>)
 80007aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_SPI1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI1_Init+0x74>)
 80007be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI1_Init+0x74>)
 80007c6:	2228      	movs	r2, #40	; 0x28
 80007c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI1_Init+0x74>)
 80007de:	2207      	movs	r2, #7
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_SPI1_Init+0x74>)
 80007f0:	f003 fb0e 	bl	8003e10 <HAL_SPI_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f86b 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200001a4 	.word	0x200001a4
 8000808:	40013000 	.word	0x40013000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_GPIO_Init+0x60>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <MX_GPIO_Init+0x60>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_GPIO_Init+0x60>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fd29 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 8000846:	f44f 7340 	mov.w	r3, #768	; 0x300
 800084a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f000 fab6 	bl	8000dd0 <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <JumpToApplication>:

/* USER CODE BEGIN 4 */
void JumpToApplication(uint32_t application_addr){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

	  /*Init a function pointer*/
	  uint32_t go_address = *((volatile uint32_t*) (application_addr + 4));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3304      	adds	r3, #4
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	617b      	str	r3, [r7, #20]
	  void (*jump_to_app)(void) = (void *)go_address;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	613b      	str	r3, [r7, #16]

	  /*Uninit all peripheral use by the bootloader*/
	  HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fc22 	bl	80010d4 <HAL_GPIO_DeInit>

	  /*Disable clock*/
	  HAL_RCC_DeInit();
 8000890:	f002 faf2 	bl	8002e78 <HAL_RCC_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop

	  /*disable all IRQ*/
	  __disable_irq();

	  /*Relocate vector table*/
	  SCB->VTOR = application_addr;
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <JumpToApplication+0x5c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6093      	str	r3, [r2, #8]

	  /*Set main stack pointer pas sure*/
	  __set_MSP(*(volatile uint32_t*) application_addr);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f383 8808 	msr	MSP, r3
}
 80008aa:	bf00      	nop

	  /*Reset systick timer*/
	  SysTick->CTRL = 0;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <JumpToApplication+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <JumpToApplication+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <JumpToApplication+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]

	  /*Jump*/
	  jump_to_app();
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	4798      	blx	r3
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	; 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_SPI_MspInit+0x7c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d128      	bne.n	800099c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_SPI_MspInit+0x80>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_SPI_MspInit+0x80>)
 8000950:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000954:	6613      	str	r3, [r2, #96]	; 0x60
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_SPI_MspInit+0x80>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_SPI_MspInit+0x80>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_SPI_MspInit+0x80>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_SPI_MspInit+0x80>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800097a:	23e0      	movs	r3, #224	; 0xe0
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098a:	2305      	movs	r3, #5
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f000 fa1a 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40013000 	.word	0x40013000
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f89a 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <USB_LP_IRQHandler+0x10>)
 8000a06:	f000 fd66 	bl	80014d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20001770 	.word	0x20001770

08000a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a62:	f7ff ffd7 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f008 fd19 	bl	800949c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fdc7 	bl	80005fc <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000a7c:	08009620 	.word	0x08009620
  ldr r2, =_sbss
 8000a80:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000a84:	20001c84 	.word	0x20001c84

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f95b 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f80e 	bl	8000abc <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff ff18 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_InitTick+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d022      	beq.n	8000b16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_InitTick+0x6c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_InitTick+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f966 	bl	8000db6 <HAL_SYSTICK_Config>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10f      	bne.n	8000b10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d809      	bhi.n	8000b0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	f000 f932 	bl	8000d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_InitTick+0x70>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e004      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000234 	.word	0x20000234
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000234 	.word	0x20000234

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d004      	beq.n	8000b90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_Delay+0x40>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b90:	bf00      	nop
 8000b92:	f7ff ffdf 	bl	8000b54 <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d8f7      	bhi.n	8000b92 <HAL_Delay+0x26>
  {
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff29 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff40 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff33 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa4 	bl	8000d0c <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dde:	e15a      	b.n	8001096 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 814c 	beq.w	8001090 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d005      	beq.n	8000e10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	f003 0201 	and.w	r2, r3, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d017      	beq.n	8000eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d123      	bne.n	8000f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	6939      	ldr	r1, [r7, #16]
 8000efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0203 	and.w	r2, r3, #3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 80a6 	beq.w	8001090 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	4b5b      	ldr	r3, [pc, #364]	; (80010b4 <HAL_GPIO_Init+0x2e4>)
 8000f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f48:	4a5a      	ldr	r2, [pc, #360]	; (80010b4 <HAL_GPIO_Init+0x2e4>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f50:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <HAL_GPIO_Init+0x2e4>)
 8000f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f86:	d01f      	beq.n	8000fc8 <HAL_GPIO_Init+0x1f8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x2ec>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d019      	beq.n	8000fc4 <HAL_GPIO_Init+0x1f4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_GPIO_Init+0x2f0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d013      	beq.n	8000fc0 <HAL_GPIO_Init+0x1f0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4a      	ldr	r2, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x2f4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00d      	beq.n	8000fbc <HAL_GPIO_Init+0x1ec>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <HAL_GPIO_Init+0x2f8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x1e8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_GPIO_Init+0x2fc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	e00a      	b.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	e008      	b.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e004      	b.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e002      	b.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	f002 0203 	and.w	r2, r2, #3
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	4093      	lsls	r3, r2
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fda:	4937      	ldr	r1, [pc, #220]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800100c:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <HAL_GPIO_Init+0x300>)
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <HAL_GPIO_Init+0x300>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <HAL_GPIO_Init+0x300>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f47f ae9d 	bne.w	8000de0 <HAL_GPIO_Init+0x10>
  }
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	48001000 	.word	0x48001000
 80010cc:	48001400 	.word	0x48001400
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80010e2:	e0bd      	b.n	8001260 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80010e4:	2201      	movs	r2, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80b0 	beq.w	800125a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a60      	ldr	r2, [pc, #384]	; (800127c <HAL_GPIO_DeInit+0x1a8>)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001122:	d01f      	beq.n	8001164 <HAL_GPIO_DeInit+0x90>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a56      	ldr	r2, [pc, #344]	; (8001280 <HAL_GPIO_DeInit+0x1ac>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d019      	beq.n	8001160 <HAL_GPIO_DeInit+0x8c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a55      	ldr	r2, [pc, #340]	; (8001284 <HAL_GPIO_DeInit+0x1b0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d013      	beq.n	800115c <HAL_GPIO_DeInit+0x88>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a54      	ldr	r2, [pc, #336]	; (8001288 <HAL_GPIO_DeInit+0x1b4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d00d      	beq.n	8001158 <HAL_GPIO_DeInit+0x84>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a53      	ldr	r2, [pc, #332]	; (800128c <HAL_GPIO_DeInit+0x1b8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d007      	beq.n	8001154 <HAL_GPIO_DeInit+0x80>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a52      	ldr	r2, [pc, #328]	; (8001290 <HAL_GPIO_DeInit+0x1bc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <HAL_GPIO_DeInit+0x7c>
 800114c:	2305      	movs	r3, #5
 800114e:	e00a      	b.n	8001166 <HAL_GPIO_DeInit+0x92>
 8001150:	2306      	movs	r3, #6
 8001152:	e008      	b.n	8001166 <HAL_GPIO_DeInit+0x92>
 8001154:	2304      	movs	r3, #4
 8001156:	e006      	b.n	8001166 <HAL_GPIO_DeInit+0x92>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <HAL_GPIO_DeInit+0x92>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_DeInit+0x92>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_DeInit+0x92>
 8001164:	2300      	movs	r3, #0
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	429a      	cmp	r2, r3
 8001174:	d132      	bne.n	80011dc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	4945      	ldr	r1, [pc, #276]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 8001180:	4013      	ands	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001184:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	4941      	ldr	r1, [pc, #260]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 800118e:	4013      	ands	r3, r2
 8001190:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	493e      	ldr	r1, [pc, #248]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 800119c:	4013      	ands	r3, r2
 800119e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	493a      	ldr	r1, [pc, #232]	; (8001294 <HAL_GPIO_DeInit+0x1c0>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <HAL_GPIO_DeInit+0x1a8>)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43da      	mvns	r2, r3
 80011ce:	482b      	ldr	r0, [pc, #172]	; (800127c <HAL_GPIO_DeInit+0x1a8>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	400a      	ands	r2, r1
 80011d6:	3302      	adds	r3, #2
 80011d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2103      	movs	r1, #3
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	08d2      	lsrs	r2, r2, #3
 8001210:	4019      	ands	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2103      	movs	r1, #3
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	2101      	movs	r1, #1
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2103      	movs	r1, #3
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
    }

    position++;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	f47f af3b 	bne.w	80010e4 <HAL_GPIO_DeInit+0x10>
  }
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40010000 	.word	0x40010000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	48001000 	.word	0x48001000
 8001290:	48001400 	.word	0x48001400
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af06      	add	r7, sp, #24
 80012ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e0d7      	b.n	800148a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f007 fdce 	bl	8008e90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fcb4 	bl	8004c6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e04c      	b.n	80013a6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	3301      	adds	r3, #1
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	b298      	uxth	r0, r3
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	3336      	adds	r3, #54	; 0x36
 800134a:	4602      	mov	r2, r0
 800134c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3303      	adds	r3, #3
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	3338      	adds	r3, #56	; 0x38
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	333c      	adds	r3, #60	; 0x3c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	3340      	adds	r3, #64	; 0x40
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3ad      	bcc.n	800130c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e044      	b.n	8001440 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3301      	adds	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	d3b5      	bcc.n	80013b6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	687e      	ldr	r6, [r7, #4]
 8001452:	466d      	mov	r5, sp
 8001454:	f106 0410 	add.w	r4, r6, #16
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	1d33      	adds	r3, r6, #4
 8001462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f003 fc1d 	bl	8004ca4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d102      	bne.n	8001488 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f001 fc29 	bl	8002cda <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001492 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_PCD_Start+0x16>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e012      	b.n	80014ce <HAL_PCD_Start+0x3c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fbc3 	bl	8004c40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fddc 	bl	800707c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fde1 	bl	80070aa <USB_ReadInterrupts>
 80014e8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fb26 	bl	8001b46 <PCD_EP_ISR_Handler>

    return;
 80014fa:	e110      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d013      	beq.n	800152e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001518:	b292      	uxth	r2, r2
 800151a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f007 fd47 	bl	8008fb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001524:	2100      	movs	r1, #0
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f8fc 	bl	8001724 <HAL_PCD_SetAddress>

    return;
 800152c:	e0f7      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00c      	beq.n	8001552 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800154a:	b292      	uxth	r2, r2
 800154c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001550:	e0e5      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00c      	beq.n	8001576 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001564:	b29a      	uxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800156e:	b292      	uxth	r2, r2
 8001570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001574:	e0d3      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d034      	beq.n	80015ea <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0204 	bic.w	r2, r2, #4
 8001592:	b292      	uxth	r2, r2
 8001594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0208 	bic.w	r2, r2, #8
 80015aa:	b292      	uxth	r2, r2
 80015ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f007 fee9 	bl	800939c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f007 fd2a 	bl	8009024 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015e2:	b292      	uxth	r2, r2
 80015e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015e8:	e099      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d027      	beq.n	8001644 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0208 	orr.w	r2, r2, #8
 8001606:	b292      	uxth	r2, r2
 8001608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161e:	b292      	uxth	r2, r2
 8001620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0204 	orr.w	r2, r2, #4
 8001636:	b292      	uxth	r2, r2
 8001638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f007 fcd7 	bl	8008ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001642:	e06c      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164a:	2b00      	cmp	r3, #0
 800164c:	d040      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001656:	b29a      	uxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001660:	b292      	uxth	r2, r2
 8001662:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d12b      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001678:	b29a      	uxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0204 	orr.w	r2, r2, #4
 8001682:	b292      	uxth	r2, r2
 8001684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0208 	orr.w	r2, r2, #8
 800169a:	b292      	uxth	r2, r2
 800169c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016be:	2101      	movs	r1, #1
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f007 fe6b 	bl	800939c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80016c6:	e02a      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f007 fc91 	bl	8008ff0 <HAL_PCD_SuspendCallback>
    return;
 80016ce:	e026      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00f      	beq.n	80016fa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016ec:	b292      	uxth	r2, r2
 80016ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f007 fc4f 	bl	8008f96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016f8:	e011      	b.n	800171e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00c      	beq.n	800171e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001716:	b292      	uxth	r2, r2
 8001718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800171c:	bf00      	nop
  }
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_PCD_SetAddress+0x1a>
 800173a:	2302      	movs	r3, #2
 800173c:	e013      	b.n	8001766 <HAL_PCD_SetAddress+0x42>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fc7c 	bl	8007054 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	4608      	mov	r0, r1
 8001778:	4611      	mov	r1, r2
 800177a:	461a      	mov	r2, r3
 800177c:	4603      	mov	r3, r0
 800177e:	70fb      	strb	r3, [r7, #3]
 8001780:	460b      	mov	r3, r1
 8001782:	803b      	strh	r3, [r7, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800178c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da0e      	bge.n	80017b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	705a      	strb	r2, [r3, #1]
 80017b0:	e00e      	b.n	80017d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 0207 	and.w	r2, r3, #7
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017dc:	883a      	ldrh	r2, [r7, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	78ba      	ldrb	r2, [r7, #2]
 80017e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017fa:	78bb      	ldrb	r3, [r7, #2]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d102      	bne.n	8001806 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_PCD_EP_Open+0xa6>
 8001810:	2302      	movs	r3, #2
 8001812:	e00e      	b.n	8001832 <HAL_PCD_EP_Open+0xc4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fa60 	bl	8004ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001830:	7afb      	ldrb	r3, [r7, #11]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da0e      	bge.n	800186c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	705a      	strb	r2, [r3, #1]
 800186a:	e00e      	b.n	800188a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 0207 	and.w	r2, r3, #7
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	b2da      	uxtb	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_PCD_EP_Close+0x6a>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e00e      	b.n	80018c2 <HAL_PCD_EP_Close+0x88>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fdac 	bl	8005410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2200      	movs	r2, #0
 8001902:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2200      	movs	r2, #0
 8001908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	b2da      	uxtb	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6979      	ldr	r1, [r7, #20]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 ff5f 	bl	80057ea <USB_EPStartXfer>
 800192c:	e005      	b.n	800193a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6979      	ldr	r1, [r7, #20]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 ff58 	bl	80057ea <USB_EPStartXfer>
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 0207 	and.w	r2, r3, #7
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2201      	movs	r2, #1
 80019be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 ff04 	bl	80057ea <USB_EPStartXfer>
 80019e2:	e005      	b.n	80019f0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fefd 	bl	80057ea <USB_EPStartXfer>
  }

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 0207 	and.w	r2, r3, #7
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d901      	bls.n	8001a18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e03e      	b.n	8001a96 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da0e      	bge.n	8001a3e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	705a      	strb	r2, [r3, #1]
 8001a3c:	e00c      	b.n	8001a58 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_PCD_EP_SetStall+0x7e>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e00e      	b.n	8001a96 <HAL_PCD_EP_SetStall+0x9c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 f9e5 	bl	8006e56 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 020f 	and.w	r2, r3, #15
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d901      	bls.n	8001abc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e040      	b.n	8001b3e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da0e      	bge.n	8001ae2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	e00e      	b.n	8001b00 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 0207 	and.w	r2, r3, #7
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_EP_ClrStall+0x82>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e00e      	b.n	8001b3e <HAL_PCD_EP_ClrStall+0xa0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f005 f9e2 	bl	8006ef8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b096      	sub	sp, #88	; 0x58
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b4e:	e39c      	b.n	800228a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001b6a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 815e 	bne.w	8001e30 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d150      	bne.n	8001c22 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b90:	81fb      	strh	r3, [r7, #14]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3328      	adds	r3, #40	; 0x28
 8001ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	441a      	add	r2, r3
 8001bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bde:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001be0:	2100      	movs	r1, #0
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f007 f9bd 	bl	8008f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 834a 	beq.w	800228a <PCD_EP_ISR_Handler+0x744>
 8001bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 8345 	bne.w	800228a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c20:	e333      	b.n	800228a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c28:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d032      	beq.n	8001ca6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c66:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c74:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c78:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f005 fa67 	bl	800714e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	823b      	strh	r3, [r7, #16]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	8a3a      	ldrh	r2, [r7, #16]
 8001c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f007 f932 	bl	8008f08 <HAL_PCD_SetupStageCallback>
 8001ca4:	e2f1      	b.n	800228a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ca6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f280 82ed 	bge.w	800228a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	83fb      	strh	r3, [r7, #30]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	8bfa      	ldrh	r2, [r7, #30]
 8001cc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <PCD_EP_ISR_Handler+0x1ec>
 8001cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d015      	beq.n	8001d32 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0c:	6959      	ldr	r1, [r3, #20]
 8001d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d10:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d14:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f005 fa19 	bl	800714e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	441a      	add	r2, r3
 8001d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d28:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f007 f8fd 	bl	8008f2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 82a3 	bne.w	800228a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4413      	add	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b3e      	cmp	r3, #62	; 0x3e
 8001d6a:	d918      	bls.n	8001d9e <PCD_EP_ISR_Handler+0x258>
 8001d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
 8001d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <PCD_EP_ISR_Handler+0x240>
 8001d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d82:	3b01      	subs	r3, #1
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
 8001d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	029b      	lsls	r3, r3, #10
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	e029      	b.n	8001df2 <PCD_EP_ISR_Handler+0x2ac>
 8001d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d112      	bne.n	8001dcc <PCD_EP_ISR_Handler+0x286>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	e012      	b.n	8001df2 <PCD_EP_ISR_Handler+0x2ac>
 8001dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <PCD_EP_ISR_Handler+0x2a0>
 8001de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de2:	3301      	adds	r3, #1
 8001de4:	647b      	str	r3, [r7, #68]	; 0x44
 8001de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	029b      	lsls	r3, r3, #10
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e02:	827b      	strh	r3, [r7, #18]
 8001e04:	8a7b      	ldrh	r3, [r7, #18]
 8001e06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e0a:	827b      	strh	r3, [r7, #18]
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e12:	827b      	strh	r3, [r7, #18]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	8a7b      	ldrh	r3, [r7, #18]
 8001e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	8013      	strh	r3, [r2, #0]
 8001e2e:	e22c      	b.n	800228a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e44:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f280 80f6 	bge.w	800203a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e64:	4013      	ands	r3, r2
 8001e66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001e7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e80:	b292      	uxth	r2, r2
 8001e82:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e84:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9c:	7b1b      	ldrb	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d123      	bne.n	8001eea <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001eca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 808e 	beq.w	8001ff0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eda:	6959      	ldr	r1, [r3, #20]
 8001edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ede:	88da      	ldrh	r2, [r3, #6]
 8001ee0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ee4:	f005 f933 	bl	800714e <USB_ReadPMA>
 8001ee8:	e082      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d10a      	bne.n	8001f08 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ef2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f9d3 	bl	80022a6 <HAL_PCD_EP_DB_Receive>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001f06:	e073      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	441a      	add	r2, r3
 8001f34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d022      	beq.n	8001fac <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001f8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d02c      	beq.n	8001ff0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9c:	6959      	ldr	r1, [r3, #20]
 8001f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa0:	891a      	ldrh	r2, [r3, #8]
 8001fa2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fa6:	f005 f8d2 	bl	800714e <USB_ReadPMA>
 8001faa:	e021      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001fd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	6959      	ldr	r1, [r3, #20]
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	895a      	ldrh	r2, [r3, #10]
 8001fe8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fec:	f005 f8af 	bl	800714e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ff8:	441a      	add	r2, r3
 8001ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ffc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002006:	441a      	add	r2, r3
 8002008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800200c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <PCD_EP_ISR_Handler+0x4da>
 8002014:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	429a      	cmp	r2, r3
 800201e:	d206      	bcs.n	800202e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f006 ff80 	bl	8008f2c <HAL_PCD_DataOutStageCallback>
 800202c:	e005      	b.n	800203a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fbd8 	bl	80057ea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800203a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8121 	beq.w	800228a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002048:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002076:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	441a      	add	r2, r3
 8002088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800208c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002094:	b29b      	uxth	r3, r3
 8002096:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	2b02      	cmp	r3, #2
 800209e:	f000 80a2 	beq.w	80021e6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80020a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80020a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020aa:	7b1b      	ldrb	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8093 	beq.w	80021d8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d046      	beq.n	800214c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d126      	bne.n	8002114 <PCD_EP_ISR_Handler+0x5ce>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	4413      	add	r3, r2
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	00da      	lsls	r2, r3, #3
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	4413      	add	r3, r2
 80020e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210c:	b29a      	uxth	r2, r3
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	801a      	strh	r2, [r3, #0]
 8002112:	e061      	b.n	80021d8 <PCD_EP_ISR_Handler+0x692>
 8002114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d15d      	bne.n	80021d8 <PCD_EP_ISR_Handler+0x692>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	4413      	add	r3, r2
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	00da      	lsls	r2, r3, #3
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	4413      	add	r3, r2
 800213e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	e045      	b.n	80021d8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d126      	bne.n	80021a8 <PCD_EP_ISR_Handler+0x662>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002168:	b29b      	uxth	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	4413      	add	r3, r2
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
 8002172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	00da      	lsls	r2, r3, #3
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	4413      	add	r3, r2
 800217c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800218c:	b29a      	uxth	r2, r3
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	801a      	strh	r2, [r3, #0]
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	e017      	b.n	80021d8 <PCD_EP_ISR_Handler+0x692>
 80021a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d113      	bne.n	80021d8 <PCD_EP_ISR_Handler+0x692>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021be:	4413      	add	r3, r2
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	00da      	lsls	r2, r3, #3
 80021c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ca:	4413      	add	r3, r2
 80021cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80021d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d4:	2200      	movs	r2, #0
 80021d6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f006 febf 	bl	8008f62 <HAL_PCD_DataInStageCallback>
 80021e4:	e051      	b.n	800228a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d144      	bne.n	800227c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	4413      	add	r3, r2
 800220c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800221a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002222:	429a      	cmp	r2, r3
 8002224:	d907      	bls.n	8002236 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800222e:	1ad2      	subs	r2, r2, r3
 8002230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002232:	619a      	str	r2, [r3, #24]
 8002234:	e002      	b.n	800223c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f006 fe89 	bl	8008f62 <HAL_PCD_DataInStageCallback>
 8002250:	e01b      	b.n	800228a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800225a:	441a      	add	r2, r3
 800225c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002268:	441a      	add	r2, r3
 800226a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fab8 	bl	80057ea <USB_EPStartXfer>
 800227a:	e006      	b.n	800228a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800227c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002280:	461a      	mov	r2, r3
 8002282:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f917 	bl	80024b8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002292:	b29b      	uxth	r3, r3
 8002294:	b21b      	sxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	f6ff ac5a 	blt.w	8001b50 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3758      	adds	r7, #88	; 0x58
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b088      	sub	sp, #32
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	4613      	mov	r3, r2
 80022b2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d07c      	beq.n	80023b8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	8b7b      	ldrh	r3, [r7, #26]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d306      	bcc.n	80022fc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	8b7b      	ldrh	r3, [r7, #26]
 80022f4:	1ad2      	subs	r2, r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	619a      	str	r2, [r3, #24]
 80022fa:	e002      	b.n	8002302 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d123      	bne.n	8002352 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002324:	833b      	strh	r3, [r7, #24]
 8002326:	8b3b      	ldrh	r3, [r7, #24]
 8002328:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800232c:	833b      	strh	r3, [r7, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	441a      	add	r2, r3
 800233c:	8b3b      	ldrh	r3, [r7, #24]
 800233e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234e:	b29b      	uxth	r3, r3
 8002350:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01f      	beq.n	800239c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	82fb      	strh	r3, [r7, #22]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	441a      	add	r2, r3
 8002386:	8afb      	ldrh	r3, [r7, #22]
 8002388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800238c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002398:	b29b      	uxth	r3, r3
 800239a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800239c:	8b7b      	ldrh	r3, [r7, #26]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8085 	beq.w	80024ae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6959      	ldr	r1, [r3, #20]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	891a      	ldrh	r2, [r3, #8]
 80023b0:	8b7b      	ldrh	r3, [r7, #26]
 80023b2:	f004 fecc 	bl	800714e <USB_ReadPMA>
 80023b6:	e07a      	b.n	80024ae <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	8b7b      	ldrh	r3, [r7, #26]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d306      	bcc.n	80023f6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	8b7b      	ldrh	r3, [r7, #26]
 80023ee:	1ad2      	subs	r2, r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	619a      	str	r2, [r3, #24]
 80023f4:	e002      	b.n	80023fc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d123      	bne.n	800244c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	83fb      	strh	r3, [r7, #30]
 8002420:	8bfb      	ldrh	r3, [r7, #30]
 8002422:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002426:	83fb      	strh	r3, [r7, #30]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	441a      	add	r2, r3
 8002436:	8bfb      	ldrh	r3, [r7, #30]
 8002438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800243c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002448:	b29b      	uxth	r3, r3
 800244a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11f      	bne.n	8002496 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002470:	83bb      	strh	r3, [r7, #28]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	441a      	add	r2, r3
 8002480:	8bbb      	ldrh	r3, [r7, #28]
 8002482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002492:	b29b      	uxth	r3, r3
 8002494:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002496:	8b7b      	ldrh	r3, [r7, #26]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	6959      	ldr	r1, [r3, #20]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	895a      	ldrh	r2, [r3, #10]
 80024a8:	8b7b      	ldrh	r3, [r7, #26]
 80024aa:	f004 fe50 	bl	800714e <USB_ReadPMA>
    }
  }

  return count;
 80024ae:	8b7b      	ldrh	r3, [r7, #26]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0a2      	sub	sp, #136	; 0x88
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 81c5 	beq.w	800285c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002502:	429a      	cmp	r2, r3
 8002504:	d907      	bls.n	8002516 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800250e:	1ad2      	subs	r2, r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	619a      	str	r2, [r3, #24]
 8002514:	e002      	b.n	800251c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 80b9 	bne.w	8002698 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d126      	bne.n	800257c <HAL_PCD_EP_DB_Transmit+0xc4>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	4413      	add	r3, r2
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	00da      	lsls	r2, r3, #3
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	4413      	add	r3, r2
 8002550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002560:	b29a      	uxth	r2, r3
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002574:	b29a      	uxth	r2, r3
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e01a      	b.n	80025b2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d116      	bne.n	80025b2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	4413      	add	r3, r2
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	00da      	lsls	r2, r3, #3
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d126      	bne.n	800260e <HAL_PCD_EP_DB_Transmit+0x156>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4413      	add	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	00da      	lsls	r2, r3, #3
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
 80025e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002606:	b29a      	uxth	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	e017      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x186>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d113      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x186>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261e:	b29b      	uxth	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	4413      	add	r3, r2
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	00da      	lsls	r2, r3, #3
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	4413      	add	r3, r2
 8002632:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2200      	movs	r2, #0
 800263c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f006 fc8c 	bl	8008f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 82d2 	beq.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002670:	827b      	strh	r3, [r7, #18]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	8a7b      	ldrh	r3, [r7, #18]
 8002682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002692:	b29b      	uxth	r3, r3
 8002694:	8013      	strh	r3, [r2, #0]
 8002696:	e2b0      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d021      	beq.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	441a      	add	r2, r3
 80026ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 8284 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026fa:	441a      	add	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002708:	441a      	add	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	429a      	cmp	r2, r3
 8002718:	d309      	bcc.n	800272e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002726:	1ad2      	subs	r2, r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	621a      	str	r2, [r3, #32]
 800272c:	e015      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002736:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800273a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002744:	e009      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d155      	bne.n	800280e <HAL_PCD_EP_DB_Transmit+0x356>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	63bb      	str	r3, [r7, #56]	; 0x38
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	4413      	add	r3, r2
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00da      	lsls	r2, r3, #3
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	4413      	add	r3, r2
 8002784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
 800278a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278c:	2b3e      	cmp	r3, #62	; 0x3e
 800278e:	d916      	bls.n	80027be <HAL_PCD_EP_DB_Transmit+0x306>
 8002790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
 8002796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80027a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a2:	3b01      	subs	r3, #1
 80027a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	e043      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x38e>
 80027be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d112      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x332>
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e02d      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x38e>
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_PCD_EP_DB_Transmit+0x348>
 80027fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fc:	3301      	adds	r3, #1
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002802:	b29b      	uxth	r3, r3
 8002804:	029b      	lsls	r3, r3, #10
 8002806:	b29a      	uxth	r2, r3
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	801a      	strh	r2, [r3, #0]
 800280c:	e01b      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x38e>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d117      	bne.n	8002846 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	643b      	str	r3, [r7, #64]	; 0x40
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282a:	4413      	add	r3, r2
 800282c:	643b      	str	r3, [r7, #64]	; 0x40
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	00da      	lsls	r2, r3, #3
 8002834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002836:	4413      	add	r3, r2
 8002838:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002840:	b29a      	uxth	r2, r3
 8002842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002844:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6959      	ldr	r1, [r3, #20]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	891a      	ldrh	r2, [r3, #8]
 8002852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	f004 fc38 	bl	80070ca <USB_WritePMA>
 800285a:	e1ce      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288c:	429a      	cmp	r2, r3
 800288e:	d307      	bcc.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	619a      	str	r2, [r3, #24]
 800289e:	e002      	b.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 80c4 	bne.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	785b      	ldrb	r3, [r3, #1]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d126      	bne.n	8002906 <HAL_PCD_EP_DB_Transmit+0x44e>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028cc:	4413      	add	r3, r2
 80028ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	00da      	lsls	r2, r3, #3
 80028d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d8:	4413      	add	r3, r2
 80028da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028de:	667b      	str	r3, [r7, #100]	; 0x64
 80028e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fe:	b29a      	uxth	r2, r3
 8002900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002902:	801a      	strh	r2, [r3, #0]
 8002904:	e01a      	b.n	800293c <HAL_PCD_EP_DB_Transmit+0x484>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d116      	bne.n	800293c <HAL_PCD_EP_DB_Transmit+0x484>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	673b      	str	r3, [r7, #112]	; 0x70
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002922:	4413      	add	r3, r2
 8002924:	673b      	str	r3, [r7, #112]	; 0x70
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	00da      	lsls	r2, r3, #3
 800292c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800292e:	4413      	add	r3, r2
 8002930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002938:	2200      	movs	r2, #0
 800293a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	785b      	ldrb	r3, [r3, #1]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d12f      	bne.n	80029aa <HAL_PCD_EP_DB_Transmit+0x4f2>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002962:	4413      	add	r3, r2
 8002964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	00da      	lsls	r2, r3, #3
 800296e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002972:	4413      	add	r3, r2
 8002974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800297c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002988:	b29a      	uxth	r2, r3
 800298a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	e017      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x522>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d113      	bne.n	80029da <HAL_PCD_EP_DB_Transmit+0x522>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029c0:	4413      	add	r3, r2
 80029c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	00da      	lsls	r2, r3, #3
 80029ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029cc:	4413      	add	r3, r2
 80029ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80029d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d6:	2200      	movs	r2, #0
 80029d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f006 fabe 	bl	8008f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 8104 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	8013      	strh	r3, [r2, #0]
 8002a36:	e0e0      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d121      	bne.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f040 80b4 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aa8:	441a      	add	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d309      	bcc.n	8002ace <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac6:	1ad2      	subs	r2, r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	621a      	str	r2, [r3, #32]
 8002acc:	e015      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002ad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ada:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ae4:	e009      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	663b      	str	r3, [r7, #96]	; 0x60
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d155      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1c:	4413      	add	r3, r2
 8002b1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	00da      	lsls	r2, r3, #3
 8002b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b28:	4413      	add	r3, r2
 8002b2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b32:	2b3e      	cmp	r3, #62	; 0x3e
 8002b34:	d916      	bls.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x694>
 8002b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	677b      	str	r3, [r7, #116]	; 0x74
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	029b      	lsls	r3, r3, #10
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e040      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d112      	bne.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	e02a      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	677b      	str	r3, [r7, #116]	; 0x74
 8002b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	677b      	str	r3, [r7, #116]	; 0x74
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e018      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d114      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bca:	4413      	add	r3, r2
 8002bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	00da      	lsls	r2, r3, #3
 8002bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6959      	ldr	r1, [r3, #20]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	895a      	ldrh	r2, [r3, #10]
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f004 fa68 	bl	80070ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c14:	823b      	strh	r3, [r7, #16]
 8002c16:	8a3b      	ldrh	r3, [r7, #16]
 8002c18:	f083 0310 	eor.w	r3, r3, #16
 8002c1c:	823b      	strh	r3, [r7, #16]
 8002c1e:	8a3b      	ldrh	r3, [r7, #16]
 8002c20:	f083 0320 	eor.w	r3, r3, #32
 8002c24:	823b      	strh	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	441a      	add	r2, r3
 8002c34:	8a3b      	ldrh	r3, [r7, #16]
 8002c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3788      	adds	r7, #136	; 0x88
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	4613      	mov	r3, r2
 8002c64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e009      	b.n	8002c9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c8a:	897a      	ldrh	r2, [r7, #10]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c9e:	893b      	ldrh	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	80da      	strh	r2, [r3, #6]
 8002cb2:	e00b      	b.n	8002ccc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d141      	bne.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3e:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	d131      	bne.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d4c:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d52:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5c:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d64:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2232      	movs	r2, #50	; 0x32
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	4a3f      	ldr	r2, [pc, #252]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	0c9b      	lsrs	r3, r3, #18
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d82:	e002      	b.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d8a:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d96:	d102      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f2      	bne.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9e:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d158      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e057      	b.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db0:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db6:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dc0:	e04d      	b.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc8:	d141      	bne.n	8002e4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d131      	bne.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dde:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2232      	movs	r2, #50	; 0x32
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	0c9b      	lsrs	r3, r3, #18
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0e:	e002      	b.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e22:	d102      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f2      	bne.n	8002e10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d112      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e011      	b.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e4c:	e007      	b.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	20000000 	.word	0x20000000
 8002e74:	431bde83 	.word	0x431bde83

08002e78 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e7e:	f7fd fe69 	bl	8000b54 <HAL_GetTick>
 8002e82:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e84:	4b39      	ldr	r3, [pc, #228]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a38      	ldr	r2, [pc, #224]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fd fe5f 	bl	8000b54 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e05f      	b.n	8002f64 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eba:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ebc:	f7fd fe4a 	bl	8000b54 <HAL_GetTick>
 8002ec0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f7fd fe43 	bl	8000b54 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e041      	b.n	8002f64 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d1ee      	bne.n	8002eca <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002eec:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_DeInit+0xf8>)
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_RCC_DeInit+0xfc>)
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_RCC_DeInit+0x100>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fde0 	bl	8000abc <HAL_InitTick>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e02e      	b.n	8002f64 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002f0e:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f16:	f7fd fe1d 	bl	8000b54 <HAL_GetTick>
 8002f1a:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7fd fe19 	bl	8000b54 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e019      	b.n	8002f64 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_RCC_DeInit+0xf4>)
 8002f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	20000000 	.word	0x20000000
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e306      	b.n	800359c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d075      	beq.n	8003086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9a:	4b97      	ldr	r3, [pc, #604]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa4:	4b94      	ldr	r3, [pc, #592]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_OscConfig+0x3e>
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d002      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x44>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	4b8d      	ldr	r3, [pc, #564]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d05b      	beq.n	8003084 <HAL_RCC_OscConfig+0x108>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d157      	bne.n	8003084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e2e1      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x74>
 8002fe2:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a84      	ldr	r2, [pc, #528]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x98>
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a7e      	ldr	r2, [pc, #504]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b7c      	ldr	r3, [pc, #496]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a7b      	ldr	r2, [pc, #492]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8003014:	4b78      	ldr	r3, [pc, #480]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a77      	ldr	r2, [pc, #476]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a74      	ldr	r2, [pc, #464]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fd fd8e 	bl	8000b54 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fd fd8a 	bl	8000b54 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e2a6      	b.n	800359c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xc0>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fd fd7a 	bl	8000b54 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fd fd76 	bl	8000b54 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e292      	b.n	800359c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003076:	4b60      	ldr	r3, [pc, #384]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0xe8>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d075      	beq.n	800317e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003092:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800309c:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_OscConfig+0x136>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_OscConfig+0x13c>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d11f      	bne.n	80030f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b8:	4b4f      	ldr	r3, [pc, #316]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_OscConfig+0x154>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e265      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	4946      	ldr	r1, [pc, #280]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030e4:	4b45      	ldr	r3, [pc, #276]	; (80031fc <HAL_RCC_OscConfig+0x280>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fce7 	bl	8000abc <HAL_InitTick>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d043      	beq.n	800317c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e251      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d023      	beq.n	8003148 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003100:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a3c      	ldr	r2, [pc, #240]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fd fd22 	bl	8000b54 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003114:	f7fd fd1e 	bl	8000b54 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e23a      	b.n	800359c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003126:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	492d      	ldr	r1, [pc, #180]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
 8003146:	e01a      	b.n	800317e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 800314e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fd fcfe 	bl	8000b54 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315c:	f7fd fcfa 	bl	8000b54 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e216      	b.n	800359c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x1e0>
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d041      	beq.n	800320e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01c      	beq.n	80031cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 8003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003198:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fd fcd7 	bl	8000b54 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fd fcd3 	bl	8000b54 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1ef      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0ef      	beq.n	80031aa <HAL_RCC_OscConfig+0x22e>
 80031ca:	e020      	b.n	800320e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fd fcba 	bl	8000b54 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e2:	e00d      	b.n	8003200 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fd fcb6 	bl	8000b54 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d906      	bls.n	8003200 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1d2      	b.n	800359c <HAL_RCC_OscConfig+0x620>
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003200:	4b8c      	ldr	r3, [pc, #560]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ea      	bne.n	80031e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 80a6 	beq.w	8003368 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003220:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_OscConfig+0x2b4>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x2b6>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	4b7f      	ldr	r3, [pc, #508]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a7e      	ldr	r2, [pc, #504]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
 8003242:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800324e:	2301      	movs	r3, #1
 8003250:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	4b79      	ldr	r3, [pc, #484]	; (8003438 <HAL_RCC_OscConfig+0x4bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325e:	4b76      	ldr	r3, [pc, #472]	; (8003438 <HAL_RCC_OscConfig+0x4bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a75      	ldr	r2, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x4bc>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fd fc73 	bl	8000b54 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fd fc6f 	bl	8000b54 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e18b      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <HAL_RCC_OscConfig+0x4bc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d108      	bne.n	80032aa <HAL_RCC_OscConfig+0x32e>
 8003298:	4b66      	ldr	r3, [pc, #408]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	4a65      	ldr	r2, [pc, #404]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a8:	e024      	b.n	80032f4 <HAL_RCC_OscConfig+0x378>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d110      	bne.n	80032d4 <HAL_RCC_OscConfig+0x358>
 80032b2:	4b60      	ldr	r3, [pc, #384]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	4a5e      	ldr	r2, [pc, #376]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c2:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	4a5a      	ldr	r2, [pc, #360]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d2:	e00f      	b.n	80032f4 <HAL_RCC_OscConfig+0x378>
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	4a56      	ldr	r2, [pc, #344]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fd fc2a 	bl	8000b54 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003302:	e00a      	b.n	800331a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fd fc26 	bl	8000b54 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e140      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331a:	4b46      	ldr	r3, [pc, #280]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ed      	beq.n	8003304 <HAL_RCC_OscConfig+0x388>
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fd fc13 	bl	8000b54 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003330:	e00a      	b.n	8003348 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fd fc0f 	bl	8000b54 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e129      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003348:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ed      	bne.n	8003332 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003356:	7ffb      	ldrb	r3, [r7, #31]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a34      	ldr	r2, [pc, #208]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003366:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d03c      	beq.n	80033ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800337c:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 800337e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003382:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fd fbe2 	bl	8000b54 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003394:	f7fd fbde 	bl	8000b54 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0fa      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80033a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ef      	beq.n	8003394 <HAL_RCC_OscConfig+0x418>
 80033b4:	e01b      	b.n	80033ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033b6:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fd fbc5 	bl	8000b54 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ce:	f7fd fbc1 	bl	8000b54 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0dd      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80033e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1ef      	bne.n	80033ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80d1 	beq.w	800359a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b0c      	cmp	r3, #12
 8003402:	f000 808b 	beq.w	800351c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d15e      	bne.n	80034cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a08      	ldr	r2, [pc, #32]	; (8003434 <HAL_RCC_OscConfig+0x4b8>)
 8003414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fd fb9b 	bl	8000b54 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	e00c      	b.n	800343c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003422:	f7fd fb97 	bl	8000b54 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d905      	bls.n	800343c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0b3      	b.n	800359c <HAL_RCC_OscConfig+0x620>
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800343c:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ec      	bne.n	8003422 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003448:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <HAL_RCC_OscConfig+0x62c>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6a11      	ldr	r1, [r2, #32]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003458:	3a01      	subs	r2, #1
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003462:	0212      	lsls	r2, r2, #8
 8003464:	4311      	orrs	r1, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800346a:	0852      	lsrs	r2, r2, #1
 800346c:	3a01      	subs	r2, #1
 800346e:	0552      	lsls	r2, r2, #21
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0652      	lsls	r2, r2, #25
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003482:	06d2      	lsls	r2, r2, #27
 8003484:	430a      	orrs	r2, r1
 8003486:	4947      	ldr	r1, [pc, #284]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 8003488:	4313      	orrs	r3, r2
 800348a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800348c:	4b45      	ldr	r3, [pc, #276]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a44      	ldr	r2, [pc, #272]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 8003492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003496:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a41      	ldr	r2, [pc, #260]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 800349e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fb56 	bl	8000b54 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fd fb52 	bl	8000b54 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e06e      	b.n	800359c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x530>
 80034ca:	e066      	b.n	800359a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a34      	ldr	r2, [pc, #208]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 80034d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034e4:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a2e      	ldr	r2, [pc, #184]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 80034ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fb2e 	bl	8000b54 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fd fb2a 	bl	8000b54 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e046      	b.n	800359c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350e:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x580>
 800351a:	e03e      	b.n	800359a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e039      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <HAL_RCC_OscConfig+0x628>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0203 	and.w	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	429a      	cmp	r2, r3
 800353a:	d12c      	bne.n	8003596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	3b01      	subs	r3, #1
 8003548:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d123      	bne.n	8003596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d11b      	bne.n	8003596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d113      	bne.n	8003596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	3b01      	subs	r3, #1
 800357c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d109      	bne.n	8003596 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	019f800c 	.word	0x019f800c

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e11e      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b91      	ldr	r3, [pc, #580]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b8e      	ldr	r3, [pc, #568]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	498c      	ldr	r1, [pc, #560]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b8a      	ldr	r3, [pc, #552]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e106      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d073      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d129      	bne.n	800365c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003608:	4b81      	ldr	r3, [pc, #516]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0f4      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003618:	f000 f966 	bl	80038e8 <RCC_GetSysClockFreqFromPLLSource>
 800361c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4a7c      	ldr	r2, [pc, #496]	; (8003814 <HAL_RCC_ClockConfig+0x268>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d93f      	bls.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003626:	4b7a      	ldr	r3, [pc, #488]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d033      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d12f      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003646:	4b72      	ldr	r3, [pc, #456]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	4a70      	ldr	r2, [pc, #448]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e024      	b.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d107      	bne.n	8003674 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003664:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0c6      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003674:	4b66      	ldr	r3, [pc, #408]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0be      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003684:	f000 f8ce 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8003688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4a61      	ldr	r2, [pc, #388]	; (8003814 <HAL_RCC_ClockConfig+0x268>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d909      	bls.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003692:	4b5f      	ldr	r3, [pc, #380]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369a:	4a5d      	ldr	r2, [pc, #372]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 800369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4957      	ldr	r1, [pc, #348]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fd fa4c 	bl	8000b54 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fd fa48 	bl	8000b54 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e095      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d023      	beq.n	800373c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800370a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003718:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003720:	4a3b      	ldr	r2, [pc, #236]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003726:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b39      	ldr	r3, [pc, #228]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4936      	ldr	r1, [pc, #216]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
 800373a:	e008      	b.n	800374e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d105      	bne.n	800374e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003742:	4b33      	ldr	r3, [pc, #204]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4a32      	ldr	r2, [pc, #200]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374e:	4b2f      	ldr	r3, [pc, #188]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d21d      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375c:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 020f 	bic.w	r2, r3, #15
 8003764:	4929      	ldr	r1, [pc, #164]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800376c:	f7fd f9f2 	bl	8000b54 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fd f9ee 	bl	8000b54 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e03b      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d1ed      	bne.n	8003774 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4917      	ldr	r1, [pc, #92]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490f      	ldr	r1, [pc, #60]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037d6:	f000 f825 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490c      	ldr	r1, [pc, #48]	; (8003818 <HAL_RCC_ClockConfig+0x26c>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x270>)
 80037f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_ClockConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd f95e 	bl	8000abc <HAL_InitTick>
 8003800:	4603      	mov	r3, r0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40022000 	.word	0x40022000
 8003810:	40021000 	.word	0x40021000
 8003814:	04c4b400 	.word	0x04c4b400
 8003818:	08009608 	.word	0x08009608
 800381c:	20000000 	.word	0x20000000
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800382a:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d102      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	e047      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d102      	bne.n	800384e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003848:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e03e      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d136      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3301      	adds	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d10c      	bne.n	8003892 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003878:	4a1a      	ldr	r2, [pc, #104]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	4a16      	ldr	r2, [pc, #88]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003882:	68d2      	ldr	r2, [r2, #12]
 8003884:	0a12      	lsrs	r2, r2, #8
 8003886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	617b      	str	r3, [r7, #20]
      break;
 8003890:	e00c      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	0a12      	lsrs	r2, r2, #8
 80038a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]
      break;
 80038aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0e5b      	lsrs	r3, r3, #25
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	e001      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038cc:	693b      	ldr	r3, [r7, #16]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	3301      	adds	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d10c      	bne.n	8003926 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003916:	68d2      	ldr	r2, [r2, #12]
 8003918:	0a12      	lsrs	r2, r2, #8
 800391a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	617b      	str	r3, [r7, #20]
    break;
 8003924:	e00c      	b.n	8003940 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003930:	68d2      	ldr	r2, [r2, #12]
 8003932:	0a12      	lsrs	r2, r2, #8
 8003934:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	617b      	str	r3, [r7, #20]
    break;
 800393e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0e5b      	lsrs	r3, r3, #25
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800395a:	687b      	ldr	r3, [r7, #4]
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40021000 	.word	0x40021000
 800396c:	007a1200 	.word	0x007a1200
 8003970:	00f42400 	.word	0x00f42400

08003974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800397c:	2300      	movs	r3, #0
 800397e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003980:	2300      	movs	r3, #0
 8003982:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8098 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	4b40      	ldr	r3, [pc, #256]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	4a3f      	ldr	r2, [pc, #252]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6593      	str	r3, [r2, #88]	; 0x58
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a39      	ldr	r2, [pc, #228]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ca:	f7fd f8c3 	bl	8000b54 <HAL_GetTick>
 80039ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d0:	e009      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d2:	f7fd f8bf 	bl	8000b54 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d902      	bls.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	74fb      	strb	r3, [r7, #19]
        break;
 80039e4:	e005      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e6:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ef      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d159      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01e      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d019      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a14:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a20:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a30:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a40:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d016      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7fd f87f 	bl	8000b54 <HAL_GetTick>
 8003a56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a58:	e00b      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fd f87b 	bl	8000b54 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d902      	bls.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a70:	e006      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ec      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	74bb      	strb	r3, [r7, #18]
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab0:	7c7b      	ldrb	r3, [r7, #17]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4ba7      	ldr	r3, [pc, #668]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4aa6      	ldr	r2, [pc, #664]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ace:	4ba1      	ldr	r3, [pc, #644]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f023 0203 	bic.w	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	499d      	ldr	r1, [pc, #628]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003af0:	4b98      	ldr	r3, [pc, #608]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 020c 	bic.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4995      	ldr	r1, [pc, #596]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b12:	4b90      	ldr	r3, [pc, #576]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	498c      	ldr	r1, [pc, #560]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b34:	4b87      	ldr	r3, [pc, #540]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	4984      	ldr	r1, [pc, #528]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b56:	4b7f      	ldr	r3, [pc, #508]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	497b      	ldr	r1, [pc, #492]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b78:	4b76      	ldr	r3, [pc, #472]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	4973      	ldr	r1, [pc, #460]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9a:	4b6e      	ldr	r3, [pc, #440]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	496a      	ldr	r1, [pc, #424]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bbc:	4b65      	ldr	r3, [pc, #404]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4962      	ldr	r1, [pc, #392]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	4959      	ldr	r1, [pc, #356]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c00:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	4951      	ldr	r1, [pc, #324]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c22:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4948      	ldr	r1, [pc, #288]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c44:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4940      	ldr	r1, [pc, #256]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c64:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a3a      	ldr	r2, [pc, #232]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	4932      	ldr	r1, [pc, #200]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	4924      	ldr	r1, [pc, #144]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d019      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4908      	ldr	r1, [pc, #32]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d42:	d109      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a02      	ldr	r2, [pc, #8]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4e:	60d3      	str	r3, [r2, #12]
 8003d50:	e002      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d64:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	4926      	ldr	r1, [pc, #152]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d82:	d105      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003daa:	4918      	ldr	r1, [pc, #96]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	490a      	ldr	r1, [pc, #40]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003df2:	d105      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e00:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e09d      	b.n	8003f5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e32:	d009      	beq.n	8003e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]
 8003e3a:	e005      	b.n	8003e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc fd60 	bl	8000928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e88:	d902      	bls.n	8003e90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e002      	b.n	8003e96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e9e:	d007      	beq.n	8003eb0 <HAL_SPI_Init+0xa0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	ea42 0103 	orr.w	r1, r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 0204 	and.w	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f2c:	ea42 0103 	orr.w	r1, r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_SPI_Transmit+0x22>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e158      	b.n	800423a <HAL_SPI_Transmit+0x2d4>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f90:	f7fc fde0 	bl	8000b54 <HAL_GetTick>
 8003f94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003faa:	e13d      	b.n	8004228 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0x52>
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fbc:	e134      	b.n	8004228 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	88fa      	ldrh	r2, [r7, #6]
 8003fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004008:	d10f      	bne.n	800402a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d007      	beq.n	8004048 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004050:	d94b      	bls.n	80040ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_Transmit+0xfa>
 800405a:	8afb      	ldrh	r3, [r7, #22]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d13e      	bne.n	80040de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004084:	e02b      	b.n	80040de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b02      	cmp	r3, #2
 8004092:	d112      	bne.n	80040ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	881a      	ldrh	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	1c9a      	adds	r2, r3, #2
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040b8:	e011      	b.n	80040de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ba:	f7fc fd4b 	bl	8000b54 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d803      	bhi.n	80040d2 <HAL_SPI_Transmit+0x16c>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d102      	bne.n	80040d8 <HAL_SPI_Transmit+0x172>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040dc:	e0a4      	b.n	8004228 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ce      	bne.n	8004086 <HAL_SPI_Transmit+0x120>
 80040e8:	e07c      	b.n	80041e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_SPI_Transmit+0x192>
 80040f2:	8afb      	ldrh	r3, [r7, #22]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d170      	bne.n	80041da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d912      	bls.n	8004128 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b02      	subs	r3, #2
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004126:	e058      	b.n	80041da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800414e:	e044      	b.n	80041da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d12b      	bne.n	80041b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d912      	bls.n	800418e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	881a      	ldrh	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	1c9a      	adds	r2, r3, #2
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b02      	subs	r3, #2
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800418c:	e025      	b.n	80041da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041b4:	e011      	b.n	80041da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041b6:	f7fc fccd 	bl	8000b54 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d803      	bhi.n	80041ce <HAL_SPI_Transmit+0x268>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d102      	bne.n	80041d4 <HAL_SPI_Transmit+0x26e>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041d8:	e026      	b.n	8004228 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1b5      	bne.n	8004150 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	6839      	ldr	r1, [r7, #0]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fce3 	bl	8004bb4 <SPI_EndRxTxTransaction>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e000      	b.n	8004228 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004238:	7ffb      	ldrb	r3, [r7, #31]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af02      	add	r7, sp, #8
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425e:	d112      	bne.n	8004286 <HAL_SPI_Receive+0x44>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10e      	bne.n	8004286 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2204      	movs	r2, #4
 800426c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f910 	bl	80044a2 <HAL_SPI_TransmitReceive>
 8004282:	4603      	mov	r3, r0
 8004284:	e109      	b.n	800449a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_SPI_Receive+0x52>
 8004290:	2302      	movs	r3, #2
 8004292:	e102      	b.n	800449a <HAL_SPI_Receive+0x258>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800429c:	f7fc fc5a 	bl	8000b54 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042b2:	e0e9      	b.n	8004488 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_Receive+0x7e>
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042c4:	e0e0      	b.n	8004488 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2204      	movs	r2, #4
 80042ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004310:	d908      	bls.n	8004324 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	e007      	b.n	8004334 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004332:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433c:	d10f      	bne.n	800435e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d007      	beq.n	800437c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004384:	d867      	bhi.n	8004456 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004386:	e030      	b.n	80043ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d117      	bne.n	80043c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f103 020c 	add.w	r2, r3, #12
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80043c4:	e011      	b.n	80043ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c6:	f7fc fbc5 	bl	8000b54 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d803      	bhi.n	80043de <HAL_SPI_Receive+0x19c>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d102      	bne.n	80043e4 <HAL_SPI_Receive+0x1a2>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043e8:	e04e      	b.n	8004488 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1c8      	bne.n	8004388 <HAL_SPI_Receive+0x146>
 80043f6:	e034      	b.n	8004462 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d115      	bne.n	8004432 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	b292      	uxth	r2, r2
 8004412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004430:	e011      	b.n	8004456 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004432:	f7fc fb8f 	bl	8000b54 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d803      	bhi.n	800444a <HAL_SPI_Receive+0x208>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d102      	bne.n	8004450 <HAL_SPI_Receive+0x20e>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004454:	e018      	b.n	8004488 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ca      	bne.n	80043f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fb4c 	bl	8004b04 <SPI_EndRxTransaction>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
 8004484:	e000      	b.n	8004488 <HAL_SPI_Receive+0x246>
  }

error :
 8004486:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b08a      	sub	sp, #40	; 0x28
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044b0:	2301      	movs	r3, #1
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x26>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e1fb      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x41e>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d0:	f7fc fb40 	bl	8000b54 <HAL_GetTick>
 80044d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044e8:	887b      	ldrh	r3, [r7, #2]
 80044ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044ec:	7efb      	ldrb	r3, [r7, #27]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d00e      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x6e>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f8:	d106      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x66>
 8004502:	7efb      	ldrb	r3, [r7, #27]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d003      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004508:	2302      	movs	r3, #2
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800450e:	e1cd      	b.n	80048ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x80>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x80>
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004528:	e1c0      	b.n	80048ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b04      	cmp	r3, #4
 8004534:	d003      	beq.n	800453e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2205      	movs	r2, #5
 800453a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	887a      	ldrh	r2, [r7, #2]
 800454e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004580:	d802      	bhi.n	8004588 <HAL_SPI_TransmitReceive+0xe6>
 8004582:	8a3b      	ldrh	r3, [r7, #16]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d908      	bls.n	800459a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	e007      	b.n	80045aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d0:	d97c      	bls.n	80046cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x13e>
 80045da:	8a7b      	ldrh	r3, [r7, #18]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d169      	bne.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004604:	e056      	b.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d11b      	bne.n	800464c <HAL_SPI_TransmitReceive+0x1aa>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_SPI_TransmitReceive+0x1aa>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	2b01      	cmp	r3, #1
 8004622:	d113      	bne.n	800464c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b01      	cmp	r3, #1
 8004658:	d11c      	bne.n	8004694 <HAL_SPI_TransmitReceive+0x1f2>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	b292      	uxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004694:	f7fc fa5e 	bl	8000b54 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d807      	bhi.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d003      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046b2:	e0fb      	b.n	80048ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1a3      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x164>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d19d      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x164>
 80046ca:	e0df      	b.n	800488c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_SPI_TransmitReceive+0x23a>
 80046d4:	8a7b      	ldrh	r3, [r7, #18]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f040 80cb 	bne.w	8004872 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d912      	bls.n	800470c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	1c9a      	adds	r2, r3, #2
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b02      	subs	r3, #2
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	87da      	strh	r2, [r3, #62]	; 0x3e
 800470a:	e0b2      	b.n	8004872 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004732:	e09e      	b.n	8004872 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d134      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x30a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02f      	beq.n	80047ac <HAL_SPI_TransmitReceive+0x30a>
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2b01      	cmp	r3, #1
 8004750:	d12c      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d912      	bls.n	8004782 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	1c9a      	adds	r2, r3, #2
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b02      	subs	r3, #2
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004780:	e012      	b.n	80047a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d148      	bne.n	800484c <HAL_SPI_TransmitReceive+0x3aa>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d042      	beq.n	800484c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d923      	bls.n	800481a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	b292      	uxth	r2, r2
 80047de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b02      	subs	r3, #2
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d81f      	bhi.n	8004848 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	e016      	b.n	8004848 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f103 020c 	add.w	r2, r3, #12
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004848:	2301      	movs	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800484c:	f7fc f982 	bl	8000b54 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004858:	429a      	cmp	r2, r3
 800485a:	d803      	bhi.n	8004864 <HAL_SPI_TransmitReceive+0x3c2>
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d102      	bne.n	800486a <HAL_SPI_TransmitReceive+0x3c8>
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004870:	e01c      	b.n	80048ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f af5b 	bne.w	8004734 <HAL_SPI_TransmitReceive+0x292>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	f47f af54 	bne.w	8004734 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f98f 	bl	8004bb4 <SPI_EndRxTxTransaction>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d006      	beq.n	80048aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60
 80048a8:	e000      	b.n	80048ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3728      	adds	r7, #40	; 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048d8:	f7fc f93c 	bl	8000b54 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048e8:	f7fc f934 	bl	8000b54 <HAL_GetTick>
 80048ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048ee:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	015b      	lsls	r3, r3, #5
 80048f4:	0d1b      	lsrs	r3, r3, #20
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fe:	e054      	b.n	80049aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d050      	beq.n	80049aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004908:	f7fc f924 	bl	8000b54 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	429a      	cmp	r2, r3
 8004916:	d902      	bls.n	800491e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d13d      	bne.n	800499a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800492c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004936:	d111      	bne.n	800495c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004940:	d004      	beq.n	800494c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494a:	d107      	bne.n	800495c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004964:	d10f      	bne.n	8004986 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e017      	b.n	80049ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d19b      	bne.n	8004900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000000 	.word	0x20000000

080049d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049ea:	f7fc f8b3 	bl	8000b54 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	4413      	add	r3, r2
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80049fa:	f7fc f8ab 	bl	8000b54 <HAL_GetTick>
 80049fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a08:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	00da      	lsls	r2, r3, #3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	0d1b      	lsrs	r3, r3, #20
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a20:	e060      	b.n	8004ae4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a28:	d107      	bne.n	8004a3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d050      	beq.n	8004ae4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a42:	f7fc f887 	bl	8000b54 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d902      	bls.n	8004a58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d13d      	bne.n	8004ad4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a70:	d111      	bne.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7a:	d004      	beq.n	8004a86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d107      	bne.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9e:	d10f      	bne.n	8004ac0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004abe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e010      	b.n	8004af6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d196      	bne.n	8004a22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3728      	adds	r7, #40	; 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000000 	.word	0x20000000

08004b04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b18:	d111      	bne.n	8004b3e <SPI_EndRxTransaction+0x3a>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b22:	d004      	beq.n	8004b2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2c:	d107      	bne.n	8004b3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2180      	movs	r1, #128	; 0x80
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff febd 	bl	80048c8 <SPI_WaitFlagStateUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e023      	b.n	8004bac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6c:	d11d      	bne.n	8004baa <SPI_EndRxTransaction+0xa6>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b76:	d004      	beq.n	8004b82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	d113      	bne.n	8004baa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff22 	bl	80049d8 <SPI_WaitFifoStateUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e000      	b.n	8004bac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ff03 	bl	80049d8 <SPI_WaitFifoStateUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bdc:	f043 0220 	orr.w	r2, r3, #32
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e027      	b.n	8004c38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fe68 	bl	80048c8 <SPI_WaitFlagStateUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e014      	b.n	8004c38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff fedc 	bl	80049d8 <SPI_WaitFifoStateUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e000      	b.n	8004c38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c50:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c76:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	f107 0014 	add.w	r0, r7, #20
 8004cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	b004      	add	sp, #16
 8004ce4:	4770      	bx	lr
	...

08004ce8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b09d      	sub	sp, #116	; 0x74
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	78db      	ldrb	r3, [r3, #3]
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d81f      	bhi.n	8004d5a <USB_ActivateEndpoint+0x72>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <USB_ActivateEndpoint+0x38>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004d63 	.word	0x08004d63
 8004d2c:	08004d3f 	.word	0x08004d3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d3c:	e012      	b.n	8004d64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d4a:	e00b      	b.n	8004d64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d58:	e004      	b.n	8004d64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004d60:	e000      	b.n	8004d64 <USB_ActivateEndpoint+0x7c>
      break;
 8004d62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	b21b      	sxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	b21a      	sxth	r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b21b      	sxth	r3, r3
 8004da6:	4313      	orrs	r3, r2
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	7b1b      	ldrb	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f040 8149 	bne.w	800506c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8084 	beq.w	8004eec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	4413      	add	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	00da      	lsls	r2, r3, #3
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	88db      	ldrh	r3, [r3, #6]
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	827b      	strh	r3, [r7, #18]
 8004e26:	8a7b      	ldrh	r3, [r7, #18]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <USB_ActivateEndpoint+0x180>
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	823b      	strh	r3, [r7, #16]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	8a3b      	ldrh	r3, [r7, #16]
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	78db      	ldrb	r3, [r3, #3]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d020      	beq.n	8004eb2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e86:	81bb      	strh	r3, [r7, #12]
 8004e88:	89bb      	ldrh	r3, [r7, #12]
 8004e8a:	f083 0320 	eor.w	r3, r3, #32
 8004e8e:	81bb      	strh	r3, [r7, #12]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	441a      	add	r2, r3
 8004e9a:	89bb      	ldrh	r3, [r7, #12]
 8004e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]
 8004eb0:	e2a6      	b.n	8005400 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec8:	81fb      	strh	r3, [r7, #14]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	89fb      	ldrh	r3, [r7, #14]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
 8004eea:	e289      	b.n	8005400 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	4413      	add	r3, r2
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	00da      	lsls	r2, r3, #3
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	4413      	add	r3, r2
 8004f0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	88db      	ldrh	r3, [r3, #6]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	4413      	add	r3, r2
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	00da      	lsls	r2, r3, #3
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b3e      	cmp	r3, #62	; 0x3e
 8004f4a:	d918      	bls.n	8004f7e <USB_ActivateEndpoint+0x296>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <USB_ActivateEndpoint+0x27e>
 8004f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f62:	3b01      	subs	r3, #1
 8004f64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	029b      	lsls	r3, r3, #10
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	e029      	b.n	8004fd2 <USB_ActivateEndpoint+0x2ea>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d112      	bne.n	8004fac <USB_ActivateEndpoint+0x2c4>
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e012      	b.n	8004fd2 <USB_ActivateEndpoint+0x2ea>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <USB_ActivateEndpoint+0x2de>
 8004fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01b      	beq.n	8005022 <USB_ActivateEndpoint+0x33a>
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005000:	843b      	strh	r3, [r7, #32]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	8c3b      	ldrh	r3, [r7, #32]
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	83fb      	strh	r3, [r7, #30]
 800503a:	8bfb      	ldrh	r3, [r7, #30]
 800503c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005040:	83fb      	strh	r3, [r7, #30]
 8005042:	8bfb      	ldrh	r3, [r7, #30]
 8005044:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005048:	83fb      	strh	r3, [r7, #30]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	8bfb      	ldrh	r3, [r7, #30]
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]
 800506a:	e1c9      	b.n	8005400 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	78db      	ldrb	r3, [r3, #3]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d11e      	bne.n	80050b2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]
 80050b0:	e01d      	b.n	80050ee <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fe:	4413      	add	r3, r2
 8005100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	00da      	lsls	r2, r3, #3
 8005108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510a:	4413      	add	r3, r2
 800510c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005110:	65bb      	str	r3, [r7, #88]	; 0x58
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	891b      	ldrh	r3, [r3, #8]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	b29b      	uxth	r3, r3
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	657b      	str	r3, [r7, #84]	; 0x54
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512c:	b29b      	uxth	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005132:	4413      	add	r3, r2
 8005134:	657b      	str	r3, [r7, #84]	; 0x54
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	00da      	lsls	r2, r3, #3
 800513c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513e:	4413      	add	r3, r2
 8005140:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005144:	653b      	str	r3, [r7, #80]	; 0x50
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	895b      	ldrh	r3, [r3, #10]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	b29b      	uxth	r3, r3
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005154:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f040 8093 	bne.w	8005286 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005170:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <USB_ActivateEndpoint+0x4cc>
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01b      	beq.n	8005204 <USB_ActivateEndpoint+0x51c>
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80051f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005200:	b29b      	uxth	r3, r3
 8005202:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	873b      	strh	r3, [r7, #56]	; 0x38
 800521c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800521e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005222:	873b      	strh	r3, [r7, #56]	; 0x38
 8005224:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005226:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800522a:	873b      	strh	r3, [r7, #56]	; 0x38
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005262:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]
 8005284:	e0bc      	b.n	8005400 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800529a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01d      	beq.n	80052de <USB_ActivateEndpoint+0x5f6>
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	441a      	add	r2, r3
 80052c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80052ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01d      	beq.n	8005336 <USB_ActivateEndpoint+0x64e>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005332:	b29b      	uxth	r3, r3
 8005334:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	78db      	ldrb	r3, [r3, #3]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d024      	beq.n	8005388 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005354:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005358:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800535c:	f083 0320 	eor.w	r3, r3, #32
 8005360:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
 8005386:	e01d      	b.n	80053c4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	441a      	add	r2, r3
 80053e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005400:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005404:	4618      	mov	r0, r3
 8005406:	3774      	adds	r7, #116	; 0x74
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005410:	b480      	push	{r7}
 8005412:	b08d      	sub	sp, #52	; 0x34
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	7b1b      	ldrb	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 808e 	bne.w	8005540 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d044      	beq.n	80054b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	81bb      	strh	r3, [r7, #12]
 800543a:	89bb      	ldrh	r3, [r7, #12]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01b      	beq.n	800547c <USB_DeactivateEndpoint+0x6c>
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	817b      	strh	r3, [r7, #10]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	897b      	ldrh	r3, [r7, #10]
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005492:	813b      	strh	r3, [r7, #8]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	893b      	ldrh	r3, [r7, #8]
 80054a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	8013      	strh	r3, [r2, #0]
 80054b4:	e192      	b.n	80057dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	827b      	strh	r3, [r7, #18]
 80054c4:	8a7b      	ldrh	r3, [r7, #18]
 80054c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01b      	beq.n	8005506 <USB_DeactivateEndpoint+0xf6>
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e4:	823b      	strh	r3, [r7, #16]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	441a      	add	r2, r3
 80054f0:	8a3b      	ldrh	r3, [r7, #16]
 80054f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005502:	b29b      	uxth	r3, r3
 8005504:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	81fb      	strh	r3, [r7, #14]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	441a      	add	r2, r3
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]
 800553e:	e14d      	b.n	80057dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 80a5 	bne.w	8005694 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	843b      	strh	r3, [r7, #32]
 8005558:	8c3b      	ldrh	r3, [r7, #32]
 800555a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01b      	beq.n	800559a <USB_DeactivateEndpoint+0x18a>
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	83fb      	strh	r3, [r7, #30]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	8bfb      	ldrh	r3, [r7, #30]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	83bb      	strh	r3, [r7, #28]
 80055a8:	8bbb      	ldrh	r3, [r7, #28]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <USB_DeactivateEndpoint+0x1da>
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	837b      	strh	r3, [r7, #26]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8b7b      	ldrh	r3, [r7, #26]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	833b      	strh	r3, [r7, #24]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	8b3b      	ldrh	r3, [r7, #24]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	82fb      	strh	r3, [r7, #22]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	8afb      	ldrh	r3, [r7, #22]
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005670:	82bb      	strh	r3, [r7, #20]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	441a      	add	r2, r3
 800567c:	8abb      	ldrh	r3, [r7, #20]
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]
 8005692:	e0a3      	b.n	80057dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01b      	beq.n	80056e4 <USB_DeactivateEndpoint+0x2d4>
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80056f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <USB_DeactivateEndpoint+0x324>
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	853b      	strh	r3, [r7, #40]	; 0x28
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	441a      	add	r2, r3
 8005756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005782:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3734      	adds	r7, #52	; 0x34
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b0c2      	sub	sp, #264	; 0x108
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057f8:	6018      	str	r0, [r3, #0]
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005802:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 867b 	bne.w	800650c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	d908      	bls.n	8005844 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005842:	e007      	b.n	8005854 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	7b1b      	ldrb	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d13a      	bne.n	80058da <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6959      	ldr	r1, [r3, #20]
 8005870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	88da      	ldrh	r2, [r3, #6]
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005880:	b29b      	uxth	r3, r3
 8005882:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005886:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	f001 fc1d 	bl	80070ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4413      	add	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	00da      	lsls	r2, r3, #3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	f000 bde3 	b.w	80064a0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	78db      	ldrb	r3, [r3, #3]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	f040 843a 	bne.w	8006160 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a1a      	ldr	r2, [r3, #32]
 80058f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	429a      	cmp	r2, r3
 8005906:	f240 83b7 	bls.w	8006078 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800590a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800595e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 81b3 	beq.w	8005d12 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d16d      	bne.n	8005aa4 <USB_EPStartXfer+0x2ba>
 80059c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	4413      	add	r3, r2
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	00da      	lsls	r2, r3, #3
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a08:	2b3e      	cmp	r3, #62	; 0x3e
 8005a0a:	d91c      	bls.n	8005a46 <USB_EPStartXfer+0x25c>
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <USB_EPStartXfer+0x242>
 8005a22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a26:	3b01      	subs	r3, #1
 8005a28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e053      	b.n	8005aee <USB_EPStartXfer+0x304>
 8005a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d112      	bne.n	8005a74 <USB_EPStartXfer+0x28a>
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e03c      	b.n	8005aee <USB_EPStartXfer+0x304>
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <USB_EPStartXfer+0x2aa>
 8005a8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	029b      	lsls	r3, r3, #10
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e024      	b.n	8005aee <USB_EPStartXfer+0x304>
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d11c      	bne.n	8005aee <USB_EPStartXfer+0x304>
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	4413      	add	r3, r2
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	00da      	lsls	r2, r3, #3
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	4413      	add	r3, r2
 8005ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	895b      	ldrh	r3, [r3, #10]
 8005afa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6959      	ldr	r1, [r3, #20]
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f001 fad4 	bl	80070ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b32:	441a      	add	r2, r3
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d90f      	bls.n	8005b7c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6c:	1ad2      	subs	r2, r2, r3
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	621a      	str	r2, [r3, #32]
 8005b7a:	e00e      	b.n	8005b9a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d16d      	bne.n	8005c86 <USB_EPStartXfer+0x49c>
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	4413      	add	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	00da      	lsls	r2, r3, #3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bea:	2b3e      	cmp	r3, #62	; 0x3e
 8005bec:	d91c      	bls.n	8005c28 <USB_EPStartXfer+0x43e>
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <USB_EPStartXfer+0x424>
 8005c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e059      	b.n	8005cdc <USB_EPStartXfer+0x4f2>
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d112      	bne.n	8005c56 <USB_EPStartXfer+0x46c>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e042      	b.n	8005cdc <USB_EPStartXfer+0x4f2>
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <USB_EPStartXfer+0x48c>
 8005c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c70:	3301      	adds	r3, #1
 8005c72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e02a      	b.n	8005cdc <USB_EPStartXfer+0x4f2>
 8005c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d122      	bne.n	8005cdc <USB_EPStartXfer+0x4f2>
 8005c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	623b      	str	r3, [r7, #32]
 8005cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	00da      	lsls	r2, r3, #3
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	891b      	ldrh	r3, [r3, #8]
 8005ce8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6959      	ldr	r1, [r3, #20]
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	f001 f9dd 	bl	80070ca <USB_WritePMA>
 8005d10:	e3c6      	b.n	80064a0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d16d      	bne.n	8005dfe <USB_EPStartXfer+0x614>
 8005d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d42:	4413      	add	r3, r2
 8005d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	00da      	lsls	r2, r3, #3
 8005d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d62:	2b3e      	cmp	r3, #62	; 0x3e
 8005d64:	d91c      	bls.n	8005da0 <USB_EPStartXfer+0x5b6>
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <USB_EPStartXfer+0x59c>
 8005d7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d80:	3b01      	subs	r3, #1
 8005d82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e059      	b.n	8005e54 <USB_EPStartXfer+0x66a>
 8005da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d112      	bne.n	8005dce <USB_EPStartXfer+0x5e4>
 8005da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db6:	801a      	strh	r2, [r3, #0]
 8005db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e042      	b.n	8005e54 <USB_EPStartXfer+0x66a>
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <USB_EPStartXfer+0x604>
 8005de4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e02a      	b.n	8005e54 <USB_EPStartXfer+0x66a>
 8005dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d122      	bne.n	8005e54 <USB_EPStartXfer+0x66a>
 8005e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	653b      	str	r3, [r7, #80]	; 0x50
 8005e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2e:	4413      	add	r3, r2
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	00da      	lsls	r2, r3, #3
 8005e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	891b      	ldrh	r3, [r3, #8]
 8005e60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6959      	ldr	r1, [r3, #20]
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e82:	6800      	ldr	r0, [r0, #0]
 8005e84:	f001 f921 	bl	80070ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e98:	441a      	add	r2, r3
 8005e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a1a      	ldr	r2, [r3, #32]
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d90f      	bls.n	8005ee2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	621a      	str	r2, [r3, #32]
 8005ee0:	e00e      	b.n	8005f00 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2200      	movs	r2, #0
 8005efe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d16d      	bne.n	8005ff8 <USB_EPStartXfer+0x80e>
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	4413      	add	r3, r2
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	00da      	lsls	r2, r3, #3
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	4413      	add	r3, r2
 8005f52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f5e:	d91c      	bls.n	8005f9a <USB_EPStartXfer+0x7b0>
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <USB_EPStartXfer+0x796>
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	029b      	lsls	r3, r3, #10
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e053      	b.n	8006042 <USB_EPStartXfer+0x858>
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d112      	bne.n	8005fc8 <USB_EPStartXfer+0x7de>
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	e03c      	b.n	8006042 <USB_EPStartXfer+0x858>
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <USB_EPStartXfer+0x7fe>
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	029b      	lsls	r3, r3, #10
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e024      	b.n	8006042 <USB_EPStartXfer+0x858>
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d11c      	bne.n	8006042 <USB_EPStartXfer+0x858>
 8006008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006016:	b29b      	uxth	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601c:	4413      	add	r3, r2
 800601e:	643b      	str	r3, [r7, #64]	; 0x40
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	00da      	lsls	r2, r3, #3
 800602e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006030:	4413      	add	r3, r2
 8006032:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603c:	b29a      	uxth	r2, r3
 800603e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006040:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6959      	ldr	r1, [r3, #20]
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006062:	b29b      	uxth	r3, r3
 8006064:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006068:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800606c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006070:	6800      	ldr	r0, [r0, #0]
 8006072:	f001 f82a 	bl	80070ca <USB_WritePMA>
 8006076:	e213      	b.n	80064a0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	441a      	add	r2, r3
 80060cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006104:	4413      	add	r3, r2
 8006106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	00da      	lsls	r2, r3, #3
 8006116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006118:	4413      	add	r3, r2
 800611a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800611e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	b29a      	uxth	r2, r3
 8006126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006128:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800612a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	891b      	ldrh	r3, [r3, #8]
 8006136:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800613a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6959      	ldr	r1, [r3, #20]
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614a:	b29b      	uxth	r3, r3
 800614c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006150:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006154:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006158:	6800      	ldr	r0, [r0, #0]
 800615a:	f000 ffb6 	bl	80070ca <USB_WritePMA>
 800615e:	e19f      	b.n	80064a0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006170:	1ad2      	subs	r2, r2, r3
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80bc 	beq.w	800631e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	673b      	str	r3, [r7, #112]	; 0x70
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d16d      	bne.n	800629e <USB_EPStartXfer+0xab4>
 80061c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061dc:	b29b      	uxth	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e2:	4413      	add	r3, r2
 80061e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	00da      	lsls	r2, r3, #3
 80061f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061fc:	667b      	str	r3, [r7, #100]	; 0x64
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	2b3e      	cmp	r3, #62	; 0x3e
 8006204:	d91c      	bls.n	8006240 <USB_EPStartXfer+0xa56>
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <USB_EPStartXfer+0xa3c>
 800621c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006220:	3b01      	subs	r3, #1
 8006222:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006226:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e053      	b.n	80062e8 <USB_EPStartXfer+0xafe>
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	2b00      	cmp	r3, #0
 8006246:	d112      	bne.n	800626e <USB_EPStartXfer+0xa84>
 8006248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006252:	b29a      	uxth	r2, r3
 8006254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006266:	b29a      	uxth	r2, r3
 8006268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	e03c      	b.n	80062e8 <USB_EPStartXfer+0xafe>
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <USB_EPStartXfer+0xaa4>
 8006284:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006288:	3301      	adds	r3, #1
 800628a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800628e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006292:	b29b      	uxth	r3, r3
 8006294:	029b      	lsls	r3, r3, #10
 8006296:	b29a      	uxth	r2, r3
 8006298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e024      	b.n	80062e8 <USB_EPStartXfer+0xafe>
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d11c      	bne.n	80062e8 <USB_EPStartXfer+0xafe>
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062bc:	b29b      	uxth	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062c2:	4413      	add	r3, r2
 80062c4:	673b      	str	r3, [r7, #112]	; 0x70
 80062c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	00da      	lsls	r2, r3, #3
 80062d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062d6:	4413      	add	r3, r2
 80062d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	895b      	ldrh	r3, [r3, #10]
 80062f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6959      	ldr	r1, [r3, #20]
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006308:	b29b      	uxth	r3, r3
 800630a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800630e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006312:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006316:	6800      	ldr	r0, [r0, #0]
 8006318:	f000 fed7 	bl	80070ca <USB_WritePMA>
 800631c:	e0c0      	b.n	80064a0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d16d      	bne.n	800640a <USB_EPStartXfer+0xc20>
 800632e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	67fb      	str	r3, [r7, #124]	; 0x7c
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800634e:	4413      	add	r3, r2
 8006350:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	00da      	lsls	r2, r3, #3
 8006360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006362:	4413      	add	r3, r2
 8006364:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006368:	67bb      	str	r3, [r7, #120]	; 0x78
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636e:	2b3e      	cmp	r3, #62	; 0x3e
 8006370:	d91c      	bls.n	80063ac <USB_EPStartXfer+0xbc2>
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <USB_EPStartXfer+0xba8>
 8006388:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800638c:	3b01      	subs	r3, #1
 800638e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006392:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006396:	b29b      	uxth	r3, r3
 8006398:	029b      	lsls	r3, r3, #10
 800639a:	b29b      	uxth	r3, r3
 800639c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e05f      	b.n	800646c <USB_EPStartXfer+0xc82>
 80063ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d112      	bne.n	80063da <USB_EPStartXfer+0xbf0>
 80063b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063be:	b29a      	uxth	r2, r3
 80063c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	e048      	b.n	800646c <USB_EPStartXfer+0xc82>
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <USB_EPStartXfer+0xc10>
 80063f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063fe:	b29b      	uxth	r3, r3
 8006400:	029b      	lsls	r3, r3, #10
 8006402:	b29a      	uxth	r2, r3
 8006404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e030      	b.n	800646c <USB_EPStartXfer+0xc82>
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d128      	bne.n	800646c <USB_EPStartXfer+0xc82>
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800643e:	4413      	add	r3, r2
 8006440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	00da      	lsls	r2, r3, #3
 8006452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006456:	4413      	add	r3, r2
 8006458:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800645c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800646a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800646c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	891b      	ldrh	r3, [r3, #8]
 8006478:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6959      	ldr	r1, [r3, #20]
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	b29b      	uxth	r3, r3
 800648e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006492:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006496:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	f000 fe15 	bl	80070ca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	817b      	strh	r3, [r7, #10]
 80064c8:	897b      	ldrh	r3, [r7, #10]
 80064ca:	f083 0310 	eor.w	r3, r3, #16
 80064ce:	817b      	strh	r3, [r7, #10]
 80064d0:	897b      	ldrh	r3, [r7, #10]
 80064d2:	f083 0320 	eor.w	r3, r3, #32
 80064d6:	817b      	strh	r3, [r7, #10]
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]
 8006508:	f000 bc9f 	b.w	8006e4a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800650c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	7b1b      	ldrb	r3, [r3, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 80ae 	bne.w	800667a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d917      	bls.n	800656a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800654a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	619a      	str	r2, [r3, #24]
 8006568:	e00e      	b.n	8006588 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2200      	movs	r2, #0
 8006586:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065ac:	4413      	add	r3, r2
 80065ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	00da      	lsls	r2, r3, #3
 80065c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d2:	2b3e      	cmp	r3, #62	; 0x3e
 80065d4:	d91d      	bls.n	8006612 <USB_EPStartXfer+0xe28>
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <USB_EPStartXfer+0xe0c>
 80065ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065f0:	3b01      	subs	r3, #1
 80065f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e3e1      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	2b00      	cmp	r3, #0
 8006618:	d116      	bne.n	8006648 <USB_EPStartXfer+0xe5e>
 800661a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006626:	b29a      	uxth	r2, r3
 8006628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	e3c6      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <USB_EPStartXfer+0xe7e>
 800665e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006662:	3301      	adds	r3, #1
 8006664:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006668:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800666c:	b29b      	uxth	r3, r3
 800666e:	029b      	lsls	r3, r3, #10
 8006670:	b29a      	uxth	r2, r3
 8006672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e3ad      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800667a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	78db      	ldrb	r3, [r3, #3]
 8006686:	2b02      	cmp	r3, #2
 8006688:	f040 8200 	bne.w	8006a8c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 8091 	bne.w	80067c0 <USB_EPStartXfer+0xfd6>
 800669e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066c2:	4413      	add	r3, r2
 80066c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	00da      	lsls	r2, r3, #3
 80066d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066da:	4413      	add	r3, r2
 80066dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b3e      	cmp	r3, #62	; 0x3e
 80066f2:	d925      	bls.n	8006740 <USB_EPStartXfer+0xf56>
 80066f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <USB_EPStartXfer+0xf3a>
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	3b01      	subs	r3, #1
 8006720:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	b29b      	uxth	r3, r3
 800672a:	029b      	lsls	r3, r3, #10
 800672c:	b29b      	uxth	r3, r3
 800672e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006736:	b29a      	uxth	r2, r3
 8006738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e074      	b.n	800682a <USB_EPStartXfer+0x1040>
 8006740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d116      	bne.n	800677e <USB_EPStartXfer+0xf94>
 8006750:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	e055      	b.n	800682a <USB_EPStartXfer+0x1040>
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d004      	beq.n	80067ae <USB_EPStartXfer+0xfc4>
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	3301      	adds	r3, #1
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e034      	b.n	800682a <USB_EPStartXfer+0x1040>
 80067c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d12c      	bne.n	800682a <USB_EPStartXfer+0x1040>
 80067d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067f4:	4413      	add	r3, r2
 80067f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	00da      	lsls	r2, r3, #3
 8006808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800680c:	4413      	add	r3, r2
 800680e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 8091 	bne.w	800696c <USB_EPStartXfer+0x1182>
 800684a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800686e:	4413      	add	r3, r2
 8006870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	00da      	lsls	r2, r3, #3
 8006882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006886:	4413      	add	r3, r2
 8006888:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800688c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b3e      	cmp	r3, #62	; 0x3e
 800689e:	d925      	bls.n	80068ec <USB_EPStartXfer+0x1102>
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <USB_EPStartXfer+0x10e6>
 80068c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ca:	3b01      	subs	r3, #1
 80068cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	029b      	lsls	r3, r3, #10
 80068d8:	b29b      	uxth	r3, r3
 80068da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e06d      	b.n	80069c8 <USB_EPStartXfer+0x11de>
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d116      	bne.n	800692a <USB_EPStartXfer+0x1140>
 80068fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006908:	b29a      	uxth	r2, r3
 800690a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006920:	b29a      	uxth	r2, r3
 8006922:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	e04e      	b.n	80069c8 <USB_EPStartXfer+0x11de>
 800692a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <USB_EPStartXfer+0x1170>
 8006950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800695a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695e:	b29b      	uxth	r3, r3
 8006960:	029b      	lsls	r3, r3, #10
 8006962:	b29a      	uxth	r2, r3
 8006964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e02d      	b.n	80069c8 <USB_EPStartXfer+0x11de>
 800696c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d125      	bne.n	80069c8 <USB_EPStartXfer+0x11de>
 800697c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006992:	4413      	add	r3, r2
 8006994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00da      	lsls	r2, r3, #3
 80069a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069aa:	4413      	add	r3, r2
 80069ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069c6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 81fe 	beq.w	8006dd6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80069da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <USB_EPStartXfer+0x1228>
 8006a06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 81db 	bne.w	8006dd6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 81d4 	bne.w	8006dd6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a54:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	8013      	strh	r3, [r2, #0]
 8006a8a:	e1a4      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	78db      	ldrb	r3, [r3, #3]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	f040 819a 	bne.w	8006dd2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d917      	bls.n	8006aea <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	619a      	str	r2, [r3, #24]
 8006ae8:	e00e      	b.n	8006b08 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d178      	bne.n	8006c0a <USB_EPStartXfer+0x1420>
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	461a      	mov	r2, r3
 8006b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	00da      	lsls	r2, r3, #3
 8006b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b54:	4413      	add	r3, r2
 8006b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	2b3e      	cmp	r3, #62	; 0x3e
 8006b64:	d91d      	bls.n	8006ba2 <USB_EPStartXfer+0x13b8>
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <USB_EPStartXfer+0x139c>
 8006b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b80:	3b01      	subs	r3, #1
 8006b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	029b      	lsls	r3, r3, #10
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e064      	b.n	8006c6c <USB_EPStartXfer+0x1482>
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d116      	bne.n	8006bd8 <USB_EPStartXfer+0x13ee>
 8006baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e049      	b.n	8006c6c <USB_EPStartXfer+0x1482>
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <USB_EPStartXfer+0x140e>
 8006bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	029b      	lsls	r3, r3, #10
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e030      	b.n	8006c6c <USB_EPStartXfer+0x1482>
 8006c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d128      	bne.n	8006c6c <USB_EPStartXfer+0x1482>
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c3e:	4413      	add	r3, r2
 8006c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	00da      	lsls	r2, r3, #3
 8006c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c56:	4413      	add	r3, r2
 8006c58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d178      	bne.n	8006d7c <USB_EPStartXfer+0x1592>
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cae:	4413      	add	r3, r2
 8006cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	00da      	lsls	r2, r3, #3
 8006cc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd6:	d91d      	bls.n	8006d14 <USB_EPStartXfer+0x152a>
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <USB_EPStartXfer+0x150e>
 8006cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	029b      	lsls	r3, r3, #10
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e060      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d116      	bne.n	8006d4a <USB_EPStartXfer+0x1560>
 8006d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d46:	801a      	strh	r2, [r3, #0]
 8006d48:	e045      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <USB_EPStartXfer+0x1580>
 8006d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d64:	3301      	adds	r3, #1
 8006d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	029b      	lsls	r3, r3, #10
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e02c      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
 8006d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d124      	bne.n	8006dd6 <USB_EPStartXfer+0x15ec>
 8006d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006da2:	4413      	add	r3, r2
 8006da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	00da      	lsls	r2, r3, #3
 8006db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dba:	4413      	add	r3, r2
 8006dbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dce:	801a      	strh	r2, [r3, #0]
 8006dd0:	e001      	b.n	8006dd6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e03a      	b.n	8006e4c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	441a      	add	r2, r3
 8006e32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d020      	beq.n	8006eaa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7e:	81bb      	strh	r3, [r7, #12]
 8006e80:	89bb      	ldrh	r3, [r7, #12]
 8006e82:	f083 0310 	eor.w	r3, r3, #16
 8006e86:	81bb      	strh	r3, [r7, #12]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	89bb      	ldrh	r3, [r7, #12]
 8006e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	8013      	strh	r3, [r2, #0]
 8006ea8:	e01f      	b.n	8006eea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec0:	81fb      	strh	r3, [r7, #14]
 8006ec2:	89fb      	ldrh	r3, [r7, #14]
 8006ec4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ec8:	81fb      	strh	r3, [r7, #14]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	441a      	add	r2, r3
 8006ed4:	89fb      	ldrh	r3, [r7, #14]
 8006ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	7b1b      	ldrb	r3, [r3, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 809d 	bne.w	8007046 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d04c      	beq.n	8006fae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	823b      	strh	r3, [r7, #16]
 8006f22:	8a3b      	ldrh	r3, [r7, #16]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01b      	beq.n	8006f64 <USB_EPClearStall+0x6c>
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	81fb      	strh	r3, [r7, #14]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	441a      	add	r2, r3
 8006f4e:	89fb      	ldrh	r3, [r7, #14]
 8006f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	78db      	ldrb	r3, [r3, #3]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d06c      	beq.n	8007046 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f82:	81bb      	strh	r3, [r7, #12]
 8006f84:	89bb      	ldrh	r3, [r7, #12]
 8006f86:	f083 0320 	eor.w	r3, r3, #32
 8006f8a:	81bb      	strh	r3, [r7, #12]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	441a      	add	r2, r3
 8006f96:	89bb      	ldrh	r3, [r7, #12]
 8006f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8013      	strh	r3, [r2, #0]
 8006fac:	e04b      	b.n	8007046 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	82fb      	strh	r3, [r7, #22]
 8006fbc:	8afb      	ldrh	r3, [r7, #22]
 8006fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01b      	beq.n	8006ffe <USB_EPClearStall+0x106>
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fdc:	82bb      	strh	r3, [r7, #20]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	8abb      	ldrh	r3, [r7, #20]
 8006fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007014:	827b      	strh	r3, [r7, #18]
 8007016:	8a7b      	ldrh	r3, [r7, #18]
 8007018:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800701c:	827b      	strh	r3, [r7, #18]
 800701e:	8a7b      	ldrh	r3, [r7, #18]
 8007020:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007024:	827b      	strh	r3, [r7, #18]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	441a      	add	r2, r3
 8007030:	8a7b      	ldrh	r3, [r7, #18]
 8007032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007042:	b29b      	uxth	r3, r3
 8007044:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2280      	movs	r2, #128	; 0x80
 800706a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800708a:	b29b      	uxth	r3, r3
 800708c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80070bc:	68fb      	ldr	r3, [r7, #12]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b08d      	sub	sp, #52	; 0x34
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	4611      	mov	r1, r2
 80070d6:	461a      	mov	r2, r3
 80070d8:	460b      	mov	r3, r1
 80070da:	80fb      	strh	r3, [r7, #6]
 80070dc:	4613      	mov	r3, r2
 80070de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070e0:	88bb      	ldrh	r3, [r7, #4]
 80070e2:	3301      	adds	r3, #1
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007100:	e01b      	b.n	800713a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	3301      	adds	r3, #1
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	b29b      	uxth	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	b29a      	uxth	r2, r3
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	3302      	adds	r3, #2
 800712c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	3301      	adds	r3, #1
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	3b01      	subs	r3, #1
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e0      	bne.n	8007102 <USB_WritePMA+0x38>
  }
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	3734      	adds	r7, #52	; 0x34
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800714e:	b480      	push	{r7}
 8007150:	b08b      	sub	sp, #44	; 0x2c
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	4611      	mov	r1, r2
 800715a:	461a      	mov	r2, r3
 800715c:	460b      	mov	r3, r1
 800715e:	80fb      	strh	r3, [r7, #6]
 8007160:	4613      	mov	r3, r2
 8007162:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007164:	88bb      	ldrh	r3, [r7, #4]
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	b29b      	uxth	r3, r3
 800716a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007174:	88fa      	ldrh	r2, [r7, #6]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800717e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
 8007184:	e018      	b.n	80071b8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	3302      	adds	r3, #2
 8007192:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	3301      	adds	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	0a1b      	lsrs	r3, r3, #8
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	3301      	adds	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	3b01      	subs	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e3      	bne.n	8007186 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80071be:	88bb      	ldrh	r3, [r7, #4]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	701a      	strb	r2, [r3, #0]
  }
}
 80071da:	bf00      	nop
 80071dc:	372c      	adds	r7, #44	; 0x2c
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071f2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071f6:	f002 f907 	bl	8009408 <USBD_static_malloc>
 80071fa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800720a:	2302      	movs	r3, #2
 800720c:	e066      	b.n	80072dc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d119      	bne.n	8007252 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800721e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007222:	2202      	movs	r2, #2
 8007224:	2181      	movs	r1, #129	; 0x81
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 ff93 	bl	8009152 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007236:	2202      	movs	r2, #2
 8007238:	2101      	movs	r1, #1
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 ff89 	bl	8009152 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2210      	movs	r2, #16
 800724c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007250:	e016      	b.n	8007280 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	2202      	movs	r2, #2
 8007256:	2181      	movs	r1, #129	; 0x81
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 ff7a 	bl	8009152 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007264:	2340      	movs	r3, #64	; 0x40
 8007266:	2202      	movs	r2, #2
 8007268:	2101      	movs	r1, #1
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 ff71 	bl	8009152 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2210      	movs	r2, #16
 800727c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007280:	2308      	movs	r3, #8
 8007282:	2203      	movs	r2, #3
 8007284:	2182      	movs	r1, #130	; 0x82
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 ff63 	bl	8009152 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7c1b      	ldrb	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072c0:	2101      	movs	r1, #1
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f002 f835 	bl	8009332 <USBD_LL_PrepareReceive>
 80072c8:	e007      	b.n	80072da <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072d0:	2340      	movs	r3, #64	; 0x40
 80072d2:	2101      	movs	r1, #1
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f002 f82c 	bl	8009332 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072f0:	2181      	movs	r1, #129	; 0x81
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 ff53 	bl	800919e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072fe:	2101      	movs	r1, #1
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 ff4c 	bl	800919e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800730e:	2182      	movs	r1, #130	; 0x82
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 ff44 	bl	800919e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00e      	beq.n	800734e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007340:	4618      	mov	r0, r3
 8007342:	f002 f86f 	bl	8009424 <USBD_static_free>
    pdev->pClassData = NULL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007368:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	e0af      	b.n	80074e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007388:	2b00      	cmp	r3, #0
 800738a:	d03f      	beq.n	800740c <USBD_CDC_Setup+0xb4>
 800738c:	2b20      	cmp	r3, #32
 800738e:	f040 809f 	bne.w	80074d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d02e      	beq.n	80073f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b25b      	sxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	da16      	bge.n	80073d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80073b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	88d2      	ldrh	r2, [r2, #6]
 80073b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	88db      	ldrh	r3, [r3, #6]
 80073bc:	2b07      	cmp	r3, #7
 80073be:	bf28      	it	cs
 80073c0:	2307      	movcs	r3, #7
 80073c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	89fa      	ldrh	r2, [r7, #14]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 facf 	bl	800896e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80073d0:	e085      	b.n	80074de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	785a      	ldrb	r2, [r3, #1]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	88db      	ldrh	r3, [r3, #6]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80073e8:	6939      	ldr	r1, [r7, #16]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	88db      	ldrh	r3, [r3, #6]
 80073ee:	461a      	mov	r2, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fae8 	bl	80089c6 <USBD_CtlPrepareRx>
      break;
 80073f6:	e072      	b.n	80074de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	7850      	ldrb	r0, [r2, #1]
 8007404:	2200      	movs	r2, #0
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	4798      	blx	r3
      break;
 800740a:	e068      	b.n	80074de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b0b      	cmp	r3, #11
 8007412:	d852      	bhi.n	80074ba <USBD_CDC_Setup+0x162>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <USBD_CDC_Setup+0xc4>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	0800744d 	.word	0x0800744d
 8007420:	080074c9 	.word	0x080074c9
 8007424:	080074bb 	.word	0x080074bb
 8007428:	080074bb 	.word	0x080074bb
 800742c:	080074bb 	.word	0x080074bb
 8007430:	080074bb 	.word	0x080074bb
 8007434:	080074bb 	.word	0x080074bb
 8007438:	080074bb 	.word	0x080074bb
 800743c:	080074bb 	.word	0x080074bb
 8007440:	080074bb 	.word	0x080074bb
 8007444:	08007477 	.word	0x08007477
 8007448:	080074a1 	.word	0x080074a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b03      	cmp	r3, #3
 8007456:	d107      	bne.n	8007468 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007458:	f107 030a 	add.w	r3, r7, #10
 800745c:	2202      	movs	r2, #2
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 fa84 	bl	800896e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007466:	e032      	b.n	80074ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fa0e 	bl	800888c <USBD_CtlError>
            ret = USBD_FAIL;
 8007470:	2303      	movs	r3, #3
 8007472:	75fb      	strb	r3, [r7, #23]
          break;
 8007474:	e02b      	b.n	80074ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d107      	bne.n	8007492 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007482:	f107 030d 	add.w	r3, r7, #13
 8007486:	2201      	movs	r2, #1
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fa6f 	bl	800896e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007490:	e01d      	b.n	80074ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f9f9 	bl	800888c <USBD_CtlError>
            ret = USBD_FAIL;
 800749a:	2303      	movs	r3, #3
 800749c:	75fb      	strb	r3, [r7, #23]
          break;
 800749e:	e016      	b.n	80074ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d00f      	beq.n	80074cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 f9ec 	bl	800888c <USBD_CtlError>
            ret = USBD_FAIL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074b8:	e008      	b.n	80074cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 f9e5 	bl	800888c <USBD_CtlError>
          ret = USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	75fb      	strb	r3, [r7, #23]
          break;
 80074c6:	e002      	b.n	80074ce <USBD_CDC_Setup+0x176>
          break;
 80074c8:	bf00      	nop
 80074ca:	e008      	b.n	80074de <USBD_CDC_Setup+0x186>
          break;
 80074cc:	bf00      	nop
      }
      break;
 80074ce:	e006      	b.n	80074de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 f9da 	bl	800888c <USBD_CtlError>
      ret = USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	75fb      	strb	r3, [r7, #23]
      break;
 80074dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007506:	2303      	movs	r3, #3
 8007508:	e04f      	b.n	80075aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007510:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	3318      	adds	r3, #24
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d029      	beq.n	800757c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	3318      	adds	r3, #24
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	78f9      	ldrb	r1, [r7, #3]
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	460b      	mov	r3, r1
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4403      	add	r3, r0
 8007548:	3338      	adds	r3, #56	; 0x38
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007556:	2b00      	cmp	r3, #0
 8007558:	d110      	bne.n	800757c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	3318      	adds	r3, #24
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800756e:	78f9      	ldrb	r1, [r7, #3]
 8007570:	2300      	movs	r3, #0
 8007572:	2200      	movs	r2, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 febb 	bl	80092f0 <USBD_LL_Transmit>
 800757a:	e015      	b.n	80075a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e015      	b.n	8007600 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 fecb 	bl	8009374 <USBD_LL_GetRxDataSize>
 80075de:	4602      	mov	r2, r0
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80075fa:	4611      	mov	r1, r2
 80075fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007616:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800761e:	2303      	movs	r3, #3
 8007620:	e01b      	b.n	800765a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d015      	beq.n	8007658 <USBD_CDC_EP0_RxReady+0x50>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007632:	2bff      	cmp	r3, #255	; 0xff
 8007634:	d010      	beq.n	8007658 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007644:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800764c:	b292      	uxth	r2, r2
 800764e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2243      	movs	r2, #67	; 0x43
 8007670:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007672:	4b03      	ldr	r3, [pc, #12]	; (8007680 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000094 	.word	0x20000094

08007684 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2243      	movs	r2, #67	; 0x43
 8007690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007692:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	20000050 	.word	0x20000050

080076a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2243      	movs	r2, #67	; 0x43
 80076b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80076b2:	4b03      	ldr	r3, [pc, #12]	; (80076c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	200000d8 	.word	0x200000d8

080076c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	220a      	movs	r2, #10
 80076d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076d2:	4b03      	ldr	r3, [pc, #12]	; (80076e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	2000000c 	.word	0x2000000c

080076e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e004      	b.n	8007702 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800770e:	b480      	push	{r7}
 8007710:	b087      	sub	sp, #28
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007720:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007728:	2303      	movs	r3, #3
 800772a:	e008      	b.n	800773e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800775a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	e004      	b.n	8007770 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800778a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800779a:	2303      	movs	r3, #3
 800779c:	e01a      	b.n	80077d4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d114      	bne.n	80077d2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80077c6:	2181      	movs	r1, #129	; 0x81
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fd91 	bl	80092f0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e016      	b.n	8007828 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7c1b      	ldrb	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d109      	bne.n	8007816 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800780c:	2101      	movs	r1, #1
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fd8f 	bl	8009332 <USBD_LL_PrepareReceive>
 8007814:	e007      	b.n	8007826 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800781c:	2340      	movs	r3, #64	; 0x40
 800781e:	2101      	movs	r1, #1
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 fd86 	bl	8009332 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	e01f      	b.n	8007888 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	79fa      	ldrb	r2, [r7, #7]
 800787a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f001 fbed 	bl	800905c <USBD_LL_Init>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007886:	7dfb      	ldrb	r3, [r7, #23]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e016      	b.n	80078d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	f107 020e 	add.w	r2, r7, #14
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	4602      	mov	r2, r0
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 fc18 	bl	800911c <USBD_LL_Start>
 80078ec:	4603      	mov	r3, r0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	4611      	mov	r1, r2
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
  }

  return USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 ff46 	bl	8008818 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d01a      	beq.n	80079e6 <USBD_LL_SetupStage+0x72>
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d822      	bhi.n	80079fa <USBD_LL_SetupStage+0x86>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <USBD_LL_SetupStage+0x4a>
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d00a      	beq.n	80079d2 <USBD_LL_SetupStage+0x5e>
 80079bc:	e01d      	b.n	80079fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9ee 	bl	8007da8 <USBD_StdDevReq>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]
      break;
 80079d0:	e020      	b.n	8007a14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa52 	bl	8007e84 <USBD_StdItfReq>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]
      break;
 80079e4:	e016      	b.n	8007a14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa91 	bl	8007f16 <USBD_StdEPReq>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]
      break;
 80079f8:	e00c      	b.n	8007a14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 fbe7 	bl	80091dc <USBD_LL_StallEP>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73fb      	strb	r3, [r7, #15]
      break;
 8007a12:	bf00      	nop
  }

  return ret;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b086      	sub	sp, #24
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	460b      	mov	r3, r1
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d138      	bne.n	8007aa4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d14a      	bne.n	8007ada <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d913      	bls.n	8007a78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	1ad2      	subs	r2, r2, r3
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	4293      	cmp	r3, r2
 8007a68:	bf28      	it	cs
 8007a6a:	4613      	movcs	r3, r2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 ffc5 	bl	8008a00 <USBD_CtlContinueRx>
 8007a76:	e030      	b.n	8007ada <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d10b      	bne.n	8007a9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 ffc0 	bl	8008a22 <USBD_CtlSendStatus>
 8007aa2:	e01a      	b.n	8007ada <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d114      	bne.n	8007ada <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	7afa      	ldrb	r2, [r7, #11]
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	4798      	blx	r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	e000      	b.n	8007adc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	460b      	mov	r3, r1
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d16b      	bne.n	8007bd0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3314      	adds	r3, #20
 8007afc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d156      	bne.n	8007bb6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d914      	bls.n	8007b3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	1ad2      	subs	r2, r2, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 ff3a 	bl	80089a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b30:	2300      	movs	r3, #0
 8007b32:	2200      	movs	r2, #0
 8007b34:	2100      	movs	r1, #0
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f001 fbfb 	bl	8009332 <USBD_LL_PrepareReceive>
 8007b3c:	e03b      	b.n	8007bb6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d11c      	bne.n	8007b84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d316      	bcc.n	8007b84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d20f      	bcs.n	8007b84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b64:	2200      	movs	r2, #0
 8007b66:	2100      	movs	r1, #0
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 ff1b 	bl	80089a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b76:	2300      	movs	r3, #0
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f001 fbd8 	bl	8009332 <USBD_LL_PrepareReceive>
 8007b82:	e018      	b.n	8007bb6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d10b      	bne.n	8007ba8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ba8:	2180      	movs	r1, #128	; 0x80
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f001 fb16 	bl	80091dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 ff49 	bl	8008a48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d122      	bne.n	8007c06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff fe98 	bl	80078f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bce:	e01a      	b.n	8007c06 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d114      	bne.n	8007c06 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	7afa      	ldrb	r2, [r7, #11]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	4798      	blx	r3
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	e000      	b.n	8007c08 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e02f      	b.n	8007ca4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00f      	beq.n	8007c6e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6852      	ldr	r2, [r2, #4]
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	4611      	mov	r1, r2
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c6e:	2340      	movs	r3, #64	; 0x40
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fa6c 	bl	8009152 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2240      	movs	r2, #64	; 0x40
 8007c86:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c8a:	2340      	movs	r3, #64	; 0x40
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fa5e 	bl	8009152 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2240      	movs	r2, #64	; 0x40
 8007ca0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d106      	bne.n	8007d1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e012      	b.n	8007d64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d10b      	bne.n	8007d62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	3301      	adds	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d8a:	8a3b      	ldrh	r3, [r7, #16]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	b21a      	sxth	r2, r3
 8007d90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	b21b      	sxth	r3, r3
 8007d98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d005      	beq.n	8007dce <USBD_StdDevReq+0x26>
 8007dc2:	2b40      	cmp	r3, #64	; 0x40
 8007dc4:	d853      	bhi.n	8007e6e <USBD_StdDevReq+0xc6>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <USBD_StdDevReq+0x3a>
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d14f      	bne.n	8007e6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]
      break;
 8007de0:	e04a      	b.n	8007e78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	785b      	ldrb	r3, [r3, #1]
 8007de6:	2b09      	cmp	r3, #9
 8007de8:	d83b      	bhi.n	8007e62 <USBD_StdDevReq+0xba>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <USBD_StdDevReq+0x48>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007e59 	.word	0x08007e59
 8007df8:	08007e63 	.word	0x08007e63
 8007dfc:	08007e4f 	.word	0x08007e4f
 8007e00:	08007e63 	.word	0x08007e63
 8007e04:	08007e23 	.word	0x08007e23
 8007e08:	08007e19 	.word	0x08007e19
 8007e0c:	08007e63 	.word	0x08007e63
 8007e10:	08007e3b 	.word	0x08007e3b
 8007e14:	08007e2d 	.word	0x08007e2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f9de 	bl	80081dc <USBD_GetDescriptor>
          break;
 8007e20:	e024      	b.n	8007e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fb6d 	bl	8008504 <USBD_SetAddress>
          break;
 8007e2a:	e01f      	b.n	8007e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fbac 	bl	800858c <USBD_SetConfig>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]
          break;
 8007e38:	e018      	b.n	8007e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc4b 	bl	80086d8 <USBD_GetConfig>
          break;
 8007e42:	e013      	b.n	8007e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fc7c 	bl	8008744 <USBD_GetStatus>
          break;
 8007e4c:	e00e      	b.n	8007e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fcab 	bl	80087ac <USBD_SetFeature>
          break;
 8007e56:	e009      	b.n	8007e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fcba 	bl	80087d4 <USBD_ClrFeature>
          break;
 8007e60:	e004      	b.n	8007e6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fd11 	bl	800888c <USBD_CtlError>
          break;
 8007e6a:	bf00      	nop
      }
      break;
 8007e6c:	e004      	b.n	8007e78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fd0b 	bl	800888c <USBD_CtlError>
      break;
 8007e76:	bf00      	nop
  }

  return ret;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop

08007e84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e9a:	2b40      	cmp	r3, #64	; 0x40
 8007e9c:	d005      	beq.n	8007eaa <USBD_StdItfReq+0x26>
 8007e9e:	2b40      	cmp	r3, #64	; 0x40
 8007ea0:	d82f      	bhi.n	8007f02 <USBD_StdItfReq+0x7e>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <USBD_StdItfReq+0x26>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d12b      	bne.n	8007f02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d81d      	bhi.n	8007ef4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	889b      	ldrh	r3, [r3, #4]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d813      	bhi.n	8007eea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	88db      	ldrh	r3, [r3, #6]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d110      	bne.n	8007efe <USBD_StdItfReq+0x7a>
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10d      	bne.n	8007efe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fd9d 	bl	8008a22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ee8:	e009      	b.n	8007efe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fccd 	bl	800888c <USBD_CtlError>
          break;
 8007ef2:	e004      	b.n	8007efe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fcc8 	bl	800888c <USBD_CtlError>
          break;
 8007efc:	e000      	b.n	8007f00 <USBD_StdItfReq+0x7c>
          break;
 8007efe:	bf00      	nop
      }
      break;
 8007f00:	e004      	b.n	8007f0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fcc1 	bl	800888c <USBD_CtlError>
      break;
 8007f0a:	bf00      	nop
  }

  return ret;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	889b      	ldrh	r3, [r3, #4]
 8007f28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f32:	2b40      	cmp	r3, #64	; 0x40
 8007f34:	d007      	beq.n	8007f46 <USBD_StdEPReq+0x30>
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	f200 8145 	bhi.w	80081c6 <USBD_StdEPReq+0x2b0>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00c      	beq.n	8007f5a <USBD_StdEPReq+0x44>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	f040 8140 	bne.w	80081c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	4798      	blx	r3
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]
      break;
 8007f58:	e13a      	b.n	80081d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d007      	beq.n	8007f72 <USBD_StdEPReq+0x5c>
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	f300 8129 	bgt.w	80081ba <USBD_StdEPReq+0x2a4>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d07f      	beq.n	800806c <USBD_StdEPReq+0x156>
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d03c      	beq.n	8007fea <USBD_StdEPReq+0xd4>
 8007f70:	e123      	b.n	80081ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d002      	beq.n	8007f84 <USBD_StdEPReq+0x6e>
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d016      	beq.n	8007fb0 <USBD_StdEPReq+0x9a>
 8007f82:	e02c      	b.n	8007fde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00d      	beq.n	8007fa6 <USBD_StdEPReq+0x90>
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b80      	cmp	r3, #128	; 0x80
 8007f8e:	d00a      	beq.n	8007fa6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 f921 	bl	80091dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f9a:	2180      	movs	r1, #128	; 0x80
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f91d 	bl	80091dc <USBD_LL_StallEP>
 8007fa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fa4:	e020      	b.n	8007fe8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fc6f 	bl	800888c <USBD_CtlError>
              break;
 8007fae:	e01b      	b.n	8007fe8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	885b      	ldrh	r3, [r3, #2]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10e      	bne.n	8007fd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_StdEPReq+0xc0>
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b80      	cmp	r3, #128	; 0x80
 8007fc2:	d008      	beq.n	8007fd6 <USBD_StdEPReq+0xc0>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	88db      	ldrh	r3, [r3, #6]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f903 	bl	80091dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fd23 	bl	8008a22 <USBD_CtlSendStatus>

              break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc53 	bl	800888c <USBD_CtlError>
              break;
 8007fe6:	bf00      	nop
          }
          break;
 8007fe8:	e0ec      	b.n	80081c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d002      	beq.n	8007ffc <USBD_StdEPReq+0xe6>
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d016      	beq.n	8008028 <USBD_StdEPReq+0x112>
 8007ffa:	e030      	b.n	800805e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <USBD_StdEPReq+0x108>
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b80      	cmp	r3, #128	; 0x80
 8008006:	d00a      	beq.n	800801e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f8e5 	bl	80091dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008012:	2180      	movs	r1, #128	; 0x80
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 f8e1 	bl	80091dc <USBD_LL_StallEP>
 800801a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800801c:	e025      	b.n	800806a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fc33 	bl	800888c <USBD_CtlError>
              break;
 8008026:	e020      	b.n	800806a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	885b      	ldrh	r3, [r3, #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d11b      	bne.n	8008068 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008036:	2b00      	cmp	r3, #0
 8008038:	d004      	beq.n	8008044 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 f8eb 	bl	800921a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fcec 	bl	8008a22 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4798      	blx	r3
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800805c:	e004      	b.n	8008068 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fc13 	bl	800888c <USBD_CtlError>
              break;
 8008066:	e000      	b.n	800806a <USBD_StdEPReq+0x154>
              break;
 8008068:	bf00      	nop
          }
          break;
 800806a:	e0ab      	b.n	80081c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d002      	beq.n	800807e <USBD_StdEPReq+0x168>
 8008078:	2b03      	cmp	r3, #3
 800807a:	d032      	beq.n	80080e2 <USBD_StdEPReq+0x1cc>
 800807c:	e097      	b.n	80081ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <USBD_StdEPReq+0x17e>
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b80      	cmp	r3, #128	; 0x80
 8008088:	d004      	beq.n	8008094 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fbfd 	bl	800888c <USBD_CtlError>
                break;
 8008092:	e091      	b.n	80081b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008098:	2b00      	cmp	r3, #0
 800809a:	da0b      	bge.n	80080b4 <USBD_StdEPReq+0x19e>
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	3310      	adds	r3, #16
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	4413      	add	r3, r2
 80080b0:	3304      	adds	r3, #4
 80080b2:	e00b      	b.n	80080cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	3304      	adds	r3, #4
 80080cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2202      	movs	r2, #2
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fc47 	bl	800896e <USBD_CtlSendData>
              break;
 80080e0:	e06a      	b.n	80081b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da11      	bge.n	800810e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	f003 020f 	and.w	r2, r3, #15
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	3324      	adds	r3, #36	; 0x24
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d117      	bne.n	8008134 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fbc0 	bl	800888c <USBD_CtlError>
                  break;
 800810c:	e054      	b.n	80081b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	f003 020f 	and.w	r2, r3, #15
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d104      	bne.n	8008134 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fbad 	bl	800888c <USBD_CtlError>
                  break;
 8008132:	e041      	b.n	80081b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da0b      	bge.n	8008154 <USBD_StdEPReq+0x23e>
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	3310      	adds	r3, #16
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	e00b      	b.n	800816c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	3304      	adds	r3, #4
 800816c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <USBD_StdEPReq+0x264>
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b80      	cmp	r3, #128	; 0x80
 8008178:	d103      	bne.n	8008182 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e00e      	b.n	80081a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f866 	bl	8009258 <USBD_LL_IsStallEP>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2201      	movs	r2, #1
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	e002      	b.n	80081a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2202      	movs	r2, #2
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fbe1 	bl	800896e <USBD_CtlSendData>
              break;
 80081ac:	e004      	b.n	80081b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fb6b 	bl	800888c <USBD_CtlError>
              break;
 80081b6:	bf00      	nop
          }
          break;
 80081b8:	e004      	b.n	80081c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fb65 	bl	800888c <USBD_CtlError>
          break;
 80081c2:	bf00      	nop
      }
      break;
 80081c4:	e004      	b.n	80081d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fb5f 	bl	800888c <USBD_CtlError>
      break;
 80081ce:	bf00      	nop
  }

  return ret;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	2b0e      	cmp	r3, #14
 80081fe:	f200 8152 	bhi.w	80084a6 <USBD_GetDescriptor+0x2ca>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <USBD_GetDescriptor+0x2c>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008279 	.word	0x08008279
 800820c:	08008291 	.word	0x08008291
 8008210:	080082d1 	.word	0x080082d1
 8008214:	080084a7 	.word	0x080084a7
 8008218:	080084a7 	.word	0x080084a7
 800821c:	08008447 	.word	0x08008447
 8008220:	08008473 	.word	0x08008473
 8008224:	080084a7 	.word	0x080084a7
 8008228:	080084a7 	.word	0x080084a7
 800822c:	080084a7 	.word	0x080084a7
 8008230:	080084a7 	.word	0x080084a7
 8008234:	080084a7 	.word	0x080084a7
 8008238:	080084a7 	.word	0x080084a7
 800823c:	080084a7 	.word	0x080084a7
 8008240:	08008245 	.word	0x08008245
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	7c12      	ldrb	r2, [r2, #16]
 800825c:	f107 0108 	add.w	r1, r7, #8
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
 8008264:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008266:	e126      	b.n	80084b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fb0e 	bl	800888c <USBD_CtlError>
        err++;
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	3301      	adds	r3, #1
 8008274:	72fb      	strb	r3, [r7, #11]
      break;
 8008276:	e11e      	b.n	80084b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	7c12      	ldrb	r2, [r2, #16]
 8008284:	f107 0108 	add.w	r1, r7, #8
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
 800828c:	60f8      	str	r0, [r7, #12]
      break;
 800828e:	e112      	b.n	80084b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	7c1b      	ldrb	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10d      	bne.n	80082b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	f107 0208 	add.w	r2, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	2202      	movs	r2, #2
 80082b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082b2:	e100      	b.n	80084b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	f107 0208 	add.w	r2, r7, #8
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
 80082c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3301      	adds	r3, #1
 80082ca:	2202      	movs	r2, #2
 80082cc:	701a      	strb	r2, [r3, #0]
      break;
 80082ce:	e0f2      	b.n	80084b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	885b      	ldrh	r3, [r3, #2]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b05      	cmp	r3, #5
 80082d8:	f200 80ac 	bhi.w	8008434 <USBD_GetDescriptor+0x258>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <USBD_GetDescriptor+0x108>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	080082fd 	.word	0x080082fd
 80082e8:	08008331 	.word	0x08008331
 80082ec:	08008365 	.word	0x08008365
 80082f0:	08008399 	.word	0x08008399
 80082f4:	080083cd 	.word	0x080083cd
 80082f8:	08008401 	.word	0x08008401
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00b      	beq.n	8008320 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	7c12      	ldrb	r2, [r2, #16]
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831e:	e091      	b.n	8008444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fab2 	bl	800888c <USBD_CtlError>
            err++;
 8008328:	7afb      	ldrb	r3, [r7, #11]
 800832a:	3301      	adds	r3, #1
 800832c:	72fb      	strb	r3, [r7, #11]
          break;
 800832e:	e089      	b.n	8008444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	7c12      	ldrb	r2, [r2, #16]
 8008348:	f107 0108 	add.w	r1, r7, #8
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
 8008350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008352:	e077      	b.n	8008444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa98 	bl	800888c <USBD_CtlError>
            err++;
 800835c:	7afb      	ldrb	r3, [r7, #11]
 800835e:	3301      	adds	r3, #1
 8008360:	72fb      	strb	r3, [r7, #11]
          break;
 8008362:	e06f      	b.n	8008444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	7c12      	ldrb	r2, [r2, #16]
 800837c:	f107 0108 	add.w	r1, r7, #8
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008386:	e05d      	b.n	8008444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa7e 	bl	800888c <USBD_CtlError>
            err++;
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	3301      	adds	r3, #1
 8008394:	72fb      	strb	r3, [r7, #11]
          break;
 8008396:	e055      	b.n	8008444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	7c12      	ldrb	r2, [r2, #16]
 80083b0:	f107 0108 	add.w	r1, r7, #8
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ba:	e043      	b.n	8008444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa64 	bl	800888c <USBD_CtlError>
            err++;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	3301      	adds	r3, #1
 80083c8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ca:	e03b      	b.n	8008444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ee:	e029      	b.n	8008444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa4a 	bl	800888c <USBD_CtlError>
            err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
          break;
 80083fe:	e021      	b.n	8008444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008422:	e00f      	b.n	8008444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa30 	bl	800888c <USBD_CtlError>
            err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
          break;
 8008432:	e007      	b.n	8008444 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa28 	bl	800888c <USBD_CtlError>
          err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008442:	bf00      	nop
      }
      break;
 8008444:	e037      	b.n	80084b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	7c1b      	ldrb	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	f107 0208 	add.w	r2, r7, #8
 800845a:	4610      	mov	r0, r2
 800845c:	4798      	blx	r3
 800845e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008460:	e029      	b.n	80084b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fa11 	bl	800888c <USBD_CtlError>
        err++;
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	3301      	adds	r3, #1
 800846e:	72fb      	strb	r3, [r7, #11]
      break;
 8008470:	e021      	b.n	80084b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	7c1b      	ldrb	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10d      	bne.n	8008496 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	f107 0208 	add.w	r2, r7, #8
 8008486:	4610      	mov	r0, r2
 8008488:	4798      	blx	r3
 800848a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	2207      	movs	r2, #7
 8008492:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008494:	e00f      	b.n	80084b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f9f7 	bl	800888c <USBD_CtlError>
        err++;
 800849e:	7afb      	ldrb	r3, [r7, #11]
 80084a0:	3301      	adds	r3, #1
 80084a2:	72fb      	strb	r3, [r7, #11]
      break;
 80084a4:	e007      	b.n	80084b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f9ef 	bl	800888c <USBD_CtlError>
      err++;
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	3301      	adds	r3, #1
 80084b2:	72fb      	strb	r3, [r7, #11]
      break;
 80084b4:	bf00      	nop
  }

  if (err != 0U)
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d11e      	bne.n	80084fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	88db      	ldrh	r3, [r3, #6]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d016      	beq.n	80084f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80084c4:	893b      	ldrh	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00e      	beq.n	80084e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	88da      	ldrh	r2, [r3, #6]
 80084ce:	893b      	ldrh	r3, [r7, #8]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	bf28      	it	cs
 80084d4:	4613      	movcs	r3, r2
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084da:	893b      	ldrh	r3, [r7, #8]
 80084dc:	461a      	mov	r2, r3
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fa44 	bl	800896e <USBD_CtlSendData>
 80084e6:	e009      	b.n	80084fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f9ce 	bl	800888c <USBD_CtlError>
 80084f0:	e004      	b.n	80084fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa95 	bl	8008a22 <USBD_CtlSendStatus>
 80084f8:	e000      	b.n	80084fc <USBD_GetDescriptor+0x320>
    return;
 80084fa:	bf00      	nop
  }
}
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	889b      	ldrh	r3, [r3, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d131      	bne.n	800857a <USBD_SetAddress+0x76>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	88db      	ldrh	r3, [r3, #6]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d12d      	bne.n	800857a <USBD_SetAddress+0x76>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	885b      	ldrh	r3, [r3, #2]
 8008522:	2b7f      	cmp	r3, #127	; 0x7f
 8008524:	d829      	bhi.n	800857a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	885b      	ldrh	r3, [r3, #2]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008530:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b03      	cmp	r3, #3
 800853c:	d104      	bne.n	8008548 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f9a3 	bl	800888c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008546:	e01d      	b.n	8008584 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7bfa      	ldrb	r2, [r7, #15]
 800854c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 feac 	bl	80092b2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa61 	bl	8008a22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2202      	movs	r2, #2
 800856a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856e:	e009      	b.n	8008584 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008578:	e004      	b.n	8008584 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f985 	bl	800888c <USBD_CtlError>
  }
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	885b      	ldrh	r3, [r3, #2]
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	4b4c      	ldr	r3, [pc, #304]	; (80086d4 <USBD_SetConfig+0x148>)
 80085a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085a4:	4b4b      	ldr	r3, [pc, #300]	; (80086d4 <USBD_SetConfig+0x148>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d905      	bls.n	80085b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f96c 	bl	800888c <USBD_CtlError>
    return USBD_FAIL;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e088      	b.n	80086ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d002      	beq.n	80085ca <USBD_SetConfig+0x3e>
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d025      	beq.n	8008614 <USBD_SetConfig+0x88>
 80085c8:	e071      	b.n	80086ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085ca:	4b42      	ldr	r3, [pc, #264]	; (80086d4 <USBD_SetConfig+0x148>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01c      	beq.n	800860c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80085d2:	4b40      	ldr	r3, [pc, #256]	; (80086d4 <USBD_SetConfig+0x148>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085dc:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <USBD_SetConfig+0x148>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff f992 	bl	800790c <USBD_SetClassConfig>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d004      	beq.n	80085fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f949 	bl	800888c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085fa:	e065      	b.n	80086c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa10 	bl	8008a22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2203      	movs	r2, #3
 8008606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800860a:	e05d      	b.n	80086c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa08 	bl	8008a22 <USBD_CtlSendStatus>
      break;
 8008612:	e059      	b.n	80086c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008614:	4b2f      	ldr	r3, [pc, #188]	; (80086d4 <USBD_SetConfig+0x148>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d112      	bne.n	8008642 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008624:	4b2b      	ldr	r3, [pc, #172]	; (80086d4 <USBD_SetConfig+0x148>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800862e:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <USBD_SetConfig+0x148>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff f985 	bl	8007944 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9f1 	bl	8008a22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008640:	e042      	b.n	80086c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008642:	4b24      	ldr	r3, [pc, #144]	; (80086d4 <USBD_SetConfig+0x148>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d02a      	beq.n	80086a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff f973 	bl	8007944 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800865e:	4b1d      	ldr	r3, [pc, #116]	; (80086d4 <USBD_SetConfig+0x148>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008668:	4b1a      	ldr	r3, [pc, #104]	; (80086d4 <USBD_SetConfig+0x148>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff f94c 	bl	800790c <USBD_SetClassConfig>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00f      	beq.n	800869e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f903 	bl	800888c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	b2db      	uxtb	r3, r3
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff f958 	bl	8007944 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800869c:	e014      	b.n	80086c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9bf 	bl	8008a22 <USBD_CtlSendStatus>
      break;
 80086a4:	e010      	b.n	80086c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9bb 	bl	8008a22 <USBD_CtlSendStatus>
      break;
 80086ac:	e00c      	b.n	80086c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8eb 	bl	800888c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <USBD_SetConfig+0x148>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff f941 	bl	8007944 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086c2:	2303      	movs	r3, #3
 80086c4:	73fb      	strb	r3, [r7, #15]
      break;
 80086c6:	bf00      	nop
  }

  return ret;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000238 	.word	0x20000238

080086d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d004      	beq.n	80086f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8cd 	bl	800888c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086f2:	e023      	b.n	800873c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	dc02      	bgt.n	8008706 <USBD_GetConfig+0x2e>
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc03      	bgt.n	800870c <USBD_GetConfig+0x34>
 8008704:	e015      	b.n	8008732 <USBD_GetConfig+0x5a>
 8008706:	2b03      	cmp	r3, #3
 8008708:	d00b      	beq.n	8008722 <USBD_GetConfig+0x4a>
 800870a:	e012      	b.n	8008732 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3308      	adds	r3, #8
 8008716:	2201      	movs	r2, #1
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f927 	bl	800896e <USBD_CtlSendData>
        break;
 8008720:	e00c      	b.n	800873c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3304      	adds	r3, #4
 8008726:	2201      	movs	r2, #1
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f91f 	bl	800896e <USBD_CtlSendData>
        break;
 8008730:	e004      	b.n	800873c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f8a9 	bl	800888c <USBD_CtlError>
        break;
 800873a:	bf00      	nop
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	2b02      	cmp	r3, #2
 800875a:	d81e      	bhi.n	800879a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	88db      	ldrh	r3, [r3, #6]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d004      	beq.n	800876e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f890 	bl	800888c <USBD_CtlError>
        break;
 800876c:	e01a      	b.n	80087a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f043 0202 	orr.w	r2, r3, #2
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	330c      	adds	r3, #12
 800878e:	2202      	movs	r2, #2
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f8eb 	bl	800896e <USBD_CtlSendData>
      break;
 8008798:	e004      	b.n	80087a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f875 	bl	800888c <USBD_CtlError>
      break;
 80087a2:	bf00      	nop
  }
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d106      	bne.n	80087cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f92b 	bl	8008a22 <USBD_CtlSendStatus>
  }
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d80b      	bhi.n	8008804 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	885b      	ldrh	r3, [r3, #2]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d10c      	bne.n	800880e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f910 	bl	8008a22 <USBD_CtlSendStatus>
      }
      break;
 8008802:	e004      	b.n	800880e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f840 	bl	800888c <USBD_CtlError>
      break;
 800880c:	e000      	b.n	8008810 <USBD_ClrFeature+0x3c>
      break;
 800880e:	bf00      	nop
  }
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7ff fa92 	bl	8007d6c <SWAPBYTE>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fa85 	bl	8007d6c <SWAPBYTE>
 8008862:	4603      	mov	r3, r0
 8008864:	461a      	mov	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3301      	adds	r3, #1
 800886e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fa78 	bl	8007d6c <SWAPBYTE>
 800887c:	4603      	mov	r3, r0
 800887e:	461a      	mov	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	80da      	strh	r2, [r3, #6]
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008896:	2180      	movs	r1, #128	; 0x80
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc9f 	bl	80091dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800889e:	2100      	movs	r1, #0
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fc9b 	bl	80091dc <USBD_LL_StallEP>
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d036      	beq.n	8008932 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088c8:	6938      	ldr	r0, [r7, #16]
 80088ca:	f000 f836 	bl	800893a <USBD_GetLen>
 80088ce:	4603      	mov	r3, r0
 80088d0:	3301      	adds	r3, #1
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	7812      	ldrb	r2, [r2, #0]
 80088e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	3301      	adds	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	2203      	movs	r2, #3
 80088f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	3301      	adds	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088fe:	e013      	b.n	8008928 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	3301      	adds	r3, #1
 8008910:	613b      	str	r3, [r7, #16]
    idx++;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	3301      	adds	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
    idx++;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	3301      	adds	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e7      	bne.n	8008900 <USBD_GetString+0x52>
 8008930:	e000      	b.n	8008934 <USBD_GetString+0x86>
    return;
 8008932:	bf00      	nop
  }
}
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800894a:	e005      	b.n	8008958 <USBD_GetLen+0x1e>
  {
    len++;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	3301      	adds	r3, #1
 8008950:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3301      	adds	r3, #1
 8008956:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1f5      	bne.n	800894c <USBD_GetLen+0x12>
  }

  return len;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2202      	movs	r2, #2
 800897e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	2100      	movs	r1, #0
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 fcab 	bl	80092f0 <USBD_LL_Transmit>

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fc9a 	bl	80092f0 <USBD_LL_Transmit>

  return USBD_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2203      	movs	r2, #3
 80089d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	2100      	movs	r1, #0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fc9e 	bl	8009332 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fc8d 	bl	8009332 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a32:	2300      	movs	r3, #0
 8008a34:	2200      	movs	r2, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fc59 	bl	80092f0 <USBD_LL_Transmit>

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2205      	movs	r2, #5
 8008a54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fc67 	bl	8009332 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008a74:	2200      	movs	r2, #0
 8008a76:	4912      	ldr	r1, [pc, #72]	; (8008ac0 <MX_USB_Device_Init+0x50>)
 8008a78:	4812      	ldr	r0, [pc, #72]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008a7a:	f7fe fed9 	bl	8007830 <USBD_Init>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008a84:	f7f7 ff26 	bl	80008d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008a88:	490f      	ldr	r1, [pc, #60]	; (8008ac8 <MX_USB_Device_Init+0x58>)
 8008a8a:	480e      	ldr	r0, [pc, #56]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008a8c:	f7fe ff00 	bl	8007890 <USBD_RegisterClass>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008a96:	f7f7 ff1d 	bl	80008d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008a9a:	490c      	ldr	r1, [pc, #48]	; (8008acc <MX_USB_Device_Init+0x5c>)
 8008a9c:	4809      	ldr	r0, [pc, #36]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008a9e:	f7fe fe21 	bl	80076e4 <USBD_CDC_RegisterInterface>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008aa8:	f7f7 ff14 	bl	80008d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008aac:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <MX_USB_Device_Init+0x54>)
 8008aae:	f7fe ff16 	bl	80078de <USBD_Start>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008ab8:	f7f7 ff0c 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008abc:	bf00      	nop
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000130 	.word	0x20000130
 8008ac4:	2000023c 	.word	0x2000023c
 8008ac8:	20000018 	.word	0x20000018
 8008acc:	2000011c 	.word	0x2000011c

08008ad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4905      	ldr	r1, [pc, #20]	; (8008aec <CDC_Init_FS+0x1c>)
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <CDC_Init_FS+0x20>)
 8008ada:	f7fe fe18 	bl	800770e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ade:	4905      	ldr	r1, [pc, #20]	; (8008af4 <CDC_Init_FS+0x24>)
 8008ae0:	4803      	ldr	r0, [pc, #12]	; (8008af0 <CDC_Init_FS+0x20>)
 8008ae2:	f7fe fe32 	bl	800774a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000d70 	.word	0x20000d70
 8008af0:	2000023c 	.word	0x2000023c
 8008af4:	20000570 	.word	0x20000570

08008af8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008afc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	71fb      	strb	r3, [r7, #7]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b23      	cmp	r3, #35	; 0x23
 8008b1c:	d84a      	bhi.n	8008bb4 <CDC_Control_FS+0xac>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <CDC_Control_FS+0x1c>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008bb5 	.word	0x08008bb5
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bb5 	.word	0x08008bb5
 8008b30:	08008bb5 	.word	0x08008bb5
 8008b34:	08008bb5 	.word	0x08008bb5
 8008b38:	08008bb5 	.word	0x08008bb5
 8008b3c:	08008bb5 	.word	0x08008bb5
 8008b40:	08008bb5 	.word	0x08008bb5
 8008b44:	08008bb5 	.word	0x08008bb5
 8008b48:	08008bb5 	.word	0x08008bb5
 8008b4c:	08008bb5 	.word	0x08008bb5
 8008b50:	08008bb5 	.word	0x08008bb5
 8008b54:	08008bb5 	.word	0x08008bb5
 8008b58:	08008bb5 	.word	0x08008bb5
 8008b5c:	08008bb5 	.word	0x08008bb5
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008bb5 	.word	0x08008bb5
 8008b6c:	08008bb5 	.word	0x08008bb5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bb5 	.word	0x08008bb5
 8008b78:	08008bb5 	.word	0x08008bb5
 8008b7c:	08008bb5 	.word	0x08008bb5
 8008b80:	08008bb5 	.word	0x08008bb5
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008bb5 	.word	0x08008bb5
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bb5 	.word	0x08008bb5
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bb5 	.word	0x08008bb5
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bb5 	.word	0x08008bb5
 8008bac:	08008bb5 	.word	0x08008bb5
 8008bb0:	08008bb5 	.word	0x08008bb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bb4:	bf00      	nop
  }

  return (USBD_OK);
 8008bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  start_of_flash = 1;
 8008bce:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <CDC_Receive_FS+0x30>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4808      	ldr	r0, [pc, #32]	; (8008bf8 <CDC_Receive_FS+0x34>)
 8008bd8:	f7fe fdb7 	bl	800774a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bdc:	4806      	ldr	r0, [pc, #24]	; (8008bf8 <CDC_Receive_FS+0x34>)
 8008bde:	f7fe fdfd 	bl	80077dc <USBD_CDC_ReceivePacket>
  strcat(RX_BUFFER,Buf);
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	4805      	ldr	r0, [pc, #20]	; (8008bfc <CDC_Receive_FS+0x38>)
 8008be6:	f000 fc85 	bl	80094f4 <strcat>
  return (USBD_OK);
 8008bea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	200001a0 	.word	0x200001a0
 8008bf8:	2000023c 	.word	0x2000023c
 8008bfc:	2000050c 	.word	0x2000050c

08008c00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <CDC_Transmit_FS+0x48>)
 8008c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e00b      	b.n	8008c3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c26:	887b      	ldrh	r3, [r7, #2]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4806      	ldr	r0, [pc, #24]	; (8008c48 <CDC_Transmit_FS+0x48>)
 8008c2e:	f7fe fd6e 	bl	800770e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c32:	4805      	ldr	r0, [pc, #20]	; (8008c48 <CDC_Transmit_FS+0x48>)
 8008c34:	f7fe fda2 	bl	800777c <USBD_CDC_TransmitPacket>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	2000023c 	.word	0x2000023c

08008c4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	6039      	str	r1, [r7, #0]
 8008c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2212      	movs	r2, #18
 8008c80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008c82:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	20000150 	.word	0x20000150

08008c94 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ca6:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20000164 	.word	0x20000164

08008cb8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	6039      	str	r1, [r7, #0]
 8008cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d105      	bne.n	8008cd6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	4907      	ldr	r1, [pc, #28]	; (8008cec <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cce:	4808      	ldr	r0, [pc, #32]	; (8008cf0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cd0:	f7ff fded 	bl	80088ae <USBD_GetString>
 8008cd4:	e004      	b.n	8008ce0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	4904      	ldr	r1, [pc, #16]	; (8008cec <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cda:	4805      	ldr	r0, [pc, #20]	; (8008cf0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cdc:	f7ff fde7 	bl	80088ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20001570 	.word	0x20001570
 8008cf0:	080095c0 	.word	0x080095c0

08008cf4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	4904      	ldr	r1, [pc, #16]	; (8008d14 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008d04:	4804      	ldr	r0, [pc, #16]	; (8008d18 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008d06:	f7ff fdd2 	bl	80088ae <USBD_GetString>
  return USBD_StrDesc;
 8008d0a:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20001570 	.word	0x20001570
 8008d18:	080095d8 	.word	0x080095d8

08008d1c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	221a      	movs	r2, #26
 8008d2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d2e:	f000 f843 	bl	8008db8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d32:	4b02      	ldr	r3, [pc, #8]	; (8008d3c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000168 	.word	0x20000168

08008d40 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	6039      	str	r1, [r7, #0]
 8008d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d105      	bne.n	8008d5e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	4907      	ldr	r1, [pc, #28]	; (8008d74 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d56:	4808      	ldr	r0, [pc, #32]	; (8008d78 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d58:	f7ff fda9 	bl	80088ae <USBD_GetString>
 8008d5c:	e004      	b.n	8008d68 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4904      	ldr	r1, [pc, #16]	; (8008d74 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d62:	4805      	ldr	r0, [pc, #20]	; (8008d78 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d64:	f7ff fda3 	bl	80088ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d68:	4b02      	ldr	r3, [pc, #8]	; (8008d74 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	20001570 	.word	0x20001570
 8008d78:	080095ec 	.word	0x080095ec

08008d7c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d105      	bne.n	8008d9a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4907      	ldr	r1, [pc, #28]	; (8008db0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d92:	4808      	ldr	r0, [pc, #32]	; (8008db4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d94:	f7ff fd8b 	bl	80088ae <USBD_GetString>
 8008d98:	e004      	b.n	8008da4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	4904      	ldr	r1, [pc, #16]	; (8008db0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d9e:	4805      	ldr	r0, [pc, #20]	; (8008db4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008da0:	f7ff fd85 	bl	80088ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20001570 	.word	0x20001570
 8008db4:	080095f8 	.word	0x080095f8

08008db8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <Get_SerialNum+0x44>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <Get_SerialNum+0x48>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dca:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <Get_SerialNum+0x4c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dde:	2208      	movs	r2, #8
 8008de0:	4909      	ldr	r1, [pc, #36]	; (8008e08 <Get_SerialNum+0x50>)
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 f814 	bl	8008e10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008de8:	2204      	movs	r2, #4
 8008dea:	4908      	ldr	r1, [pc, #32]	; (8008e0c <Get_SerialNum+0x54>)
 8008dec:	68b8      	ldr	r0, [r7, #8]
 8008dee:	f000 f80f 	bl	8008e10 <IntToUnicode>
  }
}
 8008df2:	bf00      	nop
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	1fff7590 	.word	0x1fff7590
 8008e00:	1fff7594 	.word	0x1fff7594
 8008e04:	1fff7598 	.word	0x1fff7598
 8008e08:	2000016a 	.word	0x2000016a
 8008e0c:	2000017a 	.word	0x2000017a

08008e10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	75fb      	strb	r3, [r7, #23]
 8008e26:	e027      	b.n	8008e78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	0f1b      	lsrs	r3, r3, #28
 8008e2c:	2b09      	cmp	r3, #9
 8008e2e:	d80b      	bhi.n	8008e48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	0f1b      	lsrs	r3, r3, #28
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	440b      	add	r3, r1
 8008e40:	3230      	adds	r2, #48	; 0x30
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	e00a      	b.n	8008e5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	0f1b      	lsrs	r3, r3, #28
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	4619      	mov	r1, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	440b      	add	r3, r1
 8008e58:	3237      	adds	r2, #55	; 0x37
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	3301      	adds	r3, #1
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	3301      	adds	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]
 8008e78:	7dfa      	ldrb	r2, [r7, #23]
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d3d3      	bcc.n	8008e28 <IntToUnicode+0x18>
  }
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b098      	sub	sp, #96	; 0x60
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e98:	f107 030c 	add.w	r3, r7, #12
 8008e9c:	2254      	movs	r2, #84	; 0x54
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fb1f 	bl	80094e4 <memset>
  if(pcdHandle->Instance==USB)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <HAL_PCD_MspInit+0x70>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d122      	bne.n	8008ef6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008eb4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008eba:	f107 030c 	add.w	r3, r7, #12
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fa fd58 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008eca:	f7f7 fd03 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ece:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <HAL_PCD_MspInit+0x74>)
 8008ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed2:	4a0c      	ldr	r2, [pc, #48]	; (8008f04 <HAL_PCD_MspInit+0x74>)
 8008ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8008eda:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <HAL_PCD_MspInit+0x74>)
 8008edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ee2:	60bb      	str	r3, [r7, #8]
 8008ee4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2100      	movs	r1, #0
 8008eea:	2014      	movs	r0, #20
 8008eec:	f7f7 ff3b 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008ef0:	2014      	movs	r0, #20
 8008ef2:	f7f7 ff52 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ef6:	bf00      	nop
 8008ef8:	3760      	adds	r7, #96	; 0x60
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	40005c00 	.word	0x40005c00
 8008f04:	40021000 	.word	0x40021000

08008f08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fe fd28 	bl	8007974 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	440b      	add	r3, r1
 8008f4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	4619      	mov	r1, r3
 8008f56:	f7fe fd62 	bl	8007a1e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	440b      	add	r3, r1
 8008f82:	333c      	adds	r3, #60	; 0x3c
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f7fe fdab 	bl	8007ae4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe febf 	bl	8007d28 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d001      	beq.n	8008fca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fc6:	f7f7 fc85 	bl	80008d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fd0:	7bfa      	ldrb	r2, [r7, #15]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fe69 	bl	8007cac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe fe15 	bl	8007c10 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fe64 	bl	8007ccc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800900c:	4b04      	ldr	r3, [pc, #16]	; (8009020 <HAL_PCD_SuspendCallback+0x30>)
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	4a03      	ldr	r2, [pc, #12]	; (8009020 <HAL_PCD_SuspendCallback+0x30>)
 8009012:	f043 0306 	orr.w	r3, r3, #6
 8009016:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	e000ed00 	.word	0xe000ed00

08009024 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009034:	4b08      	ldr	r3, [pc, #32]	; (8009058 <HAL_PCD_ResumeCallback+0x34>)
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	4a07      	ldr	r2, [pc, #28]	; (8009058 <HAL_PCD_ResumeCallback+0x34>)
 800903a:	f023 0306 	bic.w	r3, r3, #6
 800903e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009040:	f000 f9fa 	bl	8009438 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe fe54 	bl	8007cf8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	e000ed00 	.word	0xe000ed00

0800905c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009064:	4a2b      	ldr	r2, [pc, #172]	; (8009114 <USBD_LL_Init+0xb8>)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a29      	ldr	r2, [pc, #164]	; (8009114 <USBD_LL_Init+0xb8>)
 8009070:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009074:	4b27      	ldr	r3, [pc, #156]	; (8009114 <USBD_LL_Init+0xb8>)
 8009076:	4a28      	ldr	r2, [pc, #160]	; (8009118 <USBD_LL_Init+0xbc>)
 8009078:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800907a:	4b26      	ldr	r3, [pc, #152]	; (8009114 <USBD_LL_Init+0xb8>)
 800907c:	2208      	movs	r2, #8
 800907e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009080:	4b24      	ldr	r3, [pc, #144]	; (8009114 <USBD_LL_Init+0xb8>)
 8009082:	2202      	movs	r2, #2
 8009084:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009086:	4b23      	ldr	r3, [pc, #140]	; (8009114 <USBD_LL_Init+0xb8>)
 8009088:	2202      	movs	r2, #2
 800908a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800908c:	4b21      	ldr	r3, [pc, #132]	; (8009114 <USBD_LL_Init+0xb8>)
 800908e:	2200      	movs	r2, #0
 8009090:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009092:	4b20      	ldr	r3, [pc, #128]	; (8009114 <USBD_LL_Init+0xb8>)
 8009094:	2200      	movs	r2, #0
 8009096:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009098:	4b1e      	ldr	r3, [pc, #120]	; (8009114 <USBD_LL_Init+0xb8>)
 800909a:	2200      	movs	r2, #0
 800909c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800909e:	4b1d      	ldr	r3, [pc, #116]	; (8009114 <USBD_LL_Init+0xb8>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80090a4:	481b      	ldr	r0, [pc, #108]	; (8009114 <USBD_LL_Init+0xb8>)
 80090a6:	f7f8 f90f 	bl	80012c8 <HAL_PCD_Init>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80090b0:	f7f7 fc10 	bl	80008d4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ba:	2318      	movs	r3, #24
 80090bc:	2200      	movs	r2, #0
 80090be:	2100      	movs	r1, #0
 80090c0:	f7f9 fdc8 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ca:	2358      	movs	r3, #88	; 0x58
 80090cc:	2200      	movs	r2, #0
 80090ce:	2180      	movs	r1, #128	; 0x80
 80090d0:	f7f9 fdc0 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090da:	23c0      	movs	r3, #192	; 0xc0
 80090dc:	2200      	movs	r2, #0
 80090de:	2181      	movs	r1, #129	; 0x81
 80090e0:	f7f9 fdb8 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090ee:	2200      	movs	r2, #0
 80090f0:	2101      	movs	r1, #1
 80090f2:	f7f9 fdaf 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009100:	2200      	movs	r2, #0
 8009102:	2182      	movs	r1, #130	; 0x82
 8009104:	f7f9 fda6 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20001770 	.word	0x20001770
 8009118:	40005c00 	.word	0x40005c00

0800911c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009132:	4618      	mov	r0, r3
 8009134:	f7f8 f9ad 	bl	8001492 <HAL_PCD_Start>
 8009138:	4603      	mov	r3, r0
 800913a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f980 	bl	8009444 <USBD_Get_USB_Status>
 8009144:	4603      	mov	r3, r0
 8009146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009148:	7bbb      	ldrb	r3, [r7, #14]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	4608      	mov	r0, r1
 800915c:	4611      	mov	r1, r2
 800915e:	461a      	mov	r2, r3
 8009160:	4603      	mov	r3, r0
 8009162:	70fb      	strb	r3, [r7, #3]
 8009164:	460b      	mov	r3, r1
 8009166:	70bb      	strb	r3, [r7, #2]
 8009168:	4613      	mov	r3, r2
 800916a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800917a:	78bb      	ldrb	r3, [r7, #2]
 800917c:	883a      	ldrh	r2, [r7, #0]
 800917e:	78f9      	ldrb	r1, [r7, #3]
 8009180:	f7f8 faf5 	bl	800176e <HAL_PCD_EP_Open>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f95a 	bl	8009444 <USBD_Get_USB_Status>
 8009190:	4603      	mov	r3, r0
 8009192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009194:	7bbb      	ldrb	r3, [r7, #14]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091b8:	78fa      	ldrb	r2, [r7, #3]
 80091ba:	4611      	mov	r1, r2
 80091bc:	4618      	mov	r0, r3
 80091be:	f7f8 fb3c 	bl	800183a <HAL_PCD_EP_Close>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 f93b 	bl	8009444 <USBD_Get_USB_Status>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f8 fbfd 	bl	80019fa <HAL_PCD_EP_SetStall>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f91c 	bl	8009444 <USBD_Get_USB_Status>
 800920c:	4603      	mov	r3, r0
 800920e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009210:	7bbb      	ldrb	r3, [r7, #14]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7f8 fc30 	bl	8001a9e <HAL_PCD_EP_ClrStall>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f8fd 	bl	8009444 <USBD_Get_USB_Status>
 800924a:	4603      	mov	r3, r0
 800924c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800926a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800926c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009270:	2b00      	cmp	r3, #0
 8009272:	da0c      	bge.n	800928e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	440b      	add	r3, r1
 8009288:	3302      	adds	r3, #2
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	e00b      	b.n	80092a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009294:	68f9      	ldr	r1, [r7, #12]
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	440b      	add	r3, r1
 80092a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80092a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092cc:	78fa      	ldrb	r2, [r7, #3]
 80092ce:	4611      	mov	r1, r2
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7f8 fa27 	bl	8001724 <HAL_PCD_SetAddress>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f8b1 	bl	8009444 <USBD_Get_USB_Status>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	607a      	str	r2, [r7, #4]
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	460b      	mov	r3, r1
 80092fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800930e:	7af9      	ldrb	r1, [r7, #11]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	f7f8 fb2e 	bl	8001974 <HAL_PCD_EP_Transmit>
 8009318:	4603      	mov	r3, r0
 800931a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f890 	bl	8009444 <USBD_Get_USB_Status>
 8009324:	4603      	mov	r3, r0
 8009326:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009328:	7dbb      	ldrb	r3, [r7, #22]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b086      	sub	sp, #24
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
 800933e:	460b      	mov	r3, r1
 8009340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009350:	7af9      	ldrb	r1, [r7, #11]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	f7f8 fab8 	bl	80018ca <HAL_PCD_EP_Receive>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 f86f 	bl	8009444 <USBD_Get_USB_Status>
 8009366:	4603      	mov	r3, r0
 8009368:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800936a:	7dbb      	ldrb	r3, [r7, #22]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f7f8 fada 	bl	8001944 <HAL_PCD_EP_GetRxCount>
 8009390:	4603      	mov	r3, r0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <HAL_PCDEx_LPM_Callback+0x18>
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d013      	beq.n	80093da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80093b2:	e023      	b.n	80093fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d007      	beq.n	80093cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80093bc:	f000 f83c 	bl	8009438 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c0:	4b10      	ldr	r3, [pc, #64]	; (8009404 <HAL_PCDEx_LPM_Callback+0x68>)
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	4a0f      	ldr	r2, [pc, #60]	; (8009404 <HAL_PCDEx_LPM_Callback+0x68>)
 80093c6:	f023 0306 	bic.w	r3, r3, #6
 80093ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe fc90 	bl	8007cf8 <USBD_LL_Resume>
    break;
 80093d8:	e010      	b.n	80093fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe fc73 	bl	8007ccc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093ee:	4b05      	ldr	r3, [pc, #20]	; (8009404 <HAL_PCDEx_LPM_Callback+0x68>)
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	4a04      	ldr	r2, [pc, #16]	; (8009404 <HAL_PCDEx_LPM_Callback+0x68>)
 80093f4:	f043 0306 	orr.w	r3, r3, #6
 80093f8:	6113      	str	r3, [r2, #16]
    break;
 80093fa:	bf00      	nop
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed00 	.word	0xe000ed00

08009408 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009410:	4b03      	ldr	r3, [pc, #12]	; (8009420 <USBD_static_malloc+0x18>)
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20001a64 	.word	0x20001a64

08009424 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]

}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800943c:	f7f7 f95a 	bl	80006f4 <SystemClock_Config>
}
 8009440:	bf00      	nop
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	2b03      	cmp	r3, #3
 8009456:	d817      	bhi.n	8009488 <USBD_Get_USB_Status+0x44>
 8009458:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <USBD_Get_USB_Status+0x1c>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	08009471 	.word	0x08009471
 8009464:	08009477 	.word	0x08009477
 8009468:	0800947d 	.word	0x0800947d
 800946c:	08009483 	.word	0x08009483
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
    break;
 8009474:	e00b      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009476:	2303      	movs	r3, #3
 8009478:	73fb      	strb	r3, [r7, #15]
    break;
 800947a:	e008      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800947c:	2301      	movs	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
    break;
 8009480:	e005      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009482:	2303      	movs	r3, #3
 8009484:	73fb      	strb	r3, [r7, #15]
    break;
 8009486:	e002      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009488:	2303      	movs	r3, #3
 800948a:	73fb      	strb	r3, [r7, #15]
    break;
 800948c:	bf00      	nop
  }
  return usb_status;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <__libc_init_array>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4d0d      	ldr	r5, [pc, #52]	; (80094d4 <__libc_init_array+0x38>)
 80094a0:	4c0d      	ldr	r4, [pc, #52]	; (80094d8 <__libc_init_array+0x3c>)
 80094a2:	1b64      	subs	r4, r4, r5
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	2600      	movs	r6, #0
 80094a8:	42a6      	cmp	r6, r4
 80094aa:	d109      	bne.n	80094c0 <__libc_init_array+0x24>
 80094ac:	4d0b      	ldr	r5, [pc, #44]	; (80094dc <__libc_init_array+0x40>)
 80094ae:	4c0c      	ldr	r4, [pc, #48]	; (80094e0 <__libc_init_array+0x44>)
 80094b0:	f000 f830 	bl	8009514 <_init>
 80094b4:	1b64      	subs	r4, r4, r5
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	2600      	movs	r6, #0
 80094ba:	42a6      	cmp	r6, r4
 80094bc:	d105      	bne.n	80094ca <__libc_init_array+0x2e>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c4:	4798      	blx	r3
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7ee      	b.n	80094a8 <__libc_init_array+0xc>
 80094ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ce:	4798      	blx	r3
 80094d0:	3601      	adds	r6, #1
 80094d2:	e7f2      	b.n	80094ba <__libc_init_array+0x1e>
 80094d4:	08009618 	.word	0x08009618
 80094d8:	08009618 	.word	0x08009618
 80094dc:	08009618 	.word	0x08009618
 80094e0:	0800961c 	.word	0x0800961c

080094e4 <memset>:
 80094e4:	4402      	add	r2, r0
 80094e6:	4603      	mov	r3, r0
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d100      	bne.n	80094ee <memset+0xa>
 80094ec:	4770      	bx	lr
 80094ee:	f803 1b01 	strb.w	r1, [r3], #1
 80094f2:	e7f9      	b.n	80094e8 <memset+0x4>

080094f4 <strcat>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4602      	mov	r2, r0
 80094f8:	7814      	ldrb	r4, [r2, #0]
 80094fa:	4613      	mov	r3, r2
 80094fc:	3201      	adds	r2, #1
 80094fe:	2c00      	cmp	r4, #0
 8009500:	d1fa      	bne.n	80094f8 <strcat+0x4>
 8009502:	3b01      	subs	r3, #1
 8009504:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009508:	f803 2f01 	strb.w	r2, [r3, #1]!
 800950c:	2a00      	cmp	r2, #0
 800950e:	d1f9      	bne.n	8009504 <strcat+0x10>
 8009510:	bd10      	pop	{r4, pc}
	...

08009514 <_init>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr

08009520 <_fini>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr
