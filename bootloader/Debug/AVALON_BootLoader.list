
AVALON_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf60  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800d140  0800d140  0001d140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d65c  0800d65c  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d65c  0800d65c  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d65c  0800d65c  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d65c  0800d65c  0001d65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d660  0800d660  0001d660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800d664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  2000034c  0800d9b0  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  0800d9b0  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fd2  00000000  00000000  000203bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e4  00000000  00000000  00033391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00036b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbf  00000000  00000000  00037b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002834f  00000000  00000000  00038707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014496  00000000  00000000  00060a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4d2  00000000  00000000  00074eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000501c  00000000  00000000  001613c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001663dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d128 	.word	0x0800d128

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	0800d128 	.word	0x0800d128

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2lz>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2300      	movs	r3, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	460d      	mov	r5, r1
 8000c76:	f7ff ff61 	bl	8000b3c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x1c>
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fcd7 	bl	8000658 <__aeabi_dmul>
 8000caa:	f7ff ff6f 	bl	8000b8c <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc58 	bl	8000564 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fcce 	bl	8000658 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fb10 	bl	80002e8 <__aeabi_dsub>
 8000cc8:	f7ff ff60 	bl	8000b8c <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <AT25X041B_Init>:
#include "at25x041b.h"
#include "main.h"



uint8_t AT25X041B_Init(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t CS_PORT,uint32_t CS_PIN){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	603b      	str	r3, [r7, #0]
	/*@Function use to init the memory and check if the read and write is working
	 * by looking into the device id an manufacturer
	 */

	uint8_t txBuffer[1] = {0};
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	753b      	strb	r3, [r7, #20]
	uint8_t rxBuffer[2] = {0};
 8000cea:	2300      	movs	r3, #0
 8000cec:	823b      	strh	r3, [r7, #16]
	uint8_t result = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]

	//store the port and pin number into the struct
	AT25X041B->CS_PIN = CS_PIN;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
	AT25X041B->CS_PORT = CS_PORT;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24


	//set the cs to a high level to make sure the communication didn't start before
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	4618      	mov	r0, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f001 fa93 	bl	8002238 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d12:	2005      	movs	r0, #5
 8000d14:	f000 fefa 	bl	8001b0c <HAL_Delay>
	//Pull low the GPIO to start communication
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	f001 fa86 	bl	8002238 <HAL_GPIO_WritePin>

	txBuffer[0] = RESUME_DEEP_POWER_DOWN_CMD;
 8000d2c:	23ab      	movs	r3, #171	; 0xab
 8000d2e:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI,txBuffer, 1, 100);
 8000d30:	f107 0114 	add.w	r1, r7, #20
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	2201      	movs	r2, #1
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f004 f8e4 	bl	8004f06 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	4618      	mov	r0, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f001 fa73 	bl	8002238 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d52:	2005      	movs	r0, #5
 8000d54:	f000 feda 	bl	8001b0c <HAL_Delay>
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	f001 fa66 	bl	8002238 <HAL_GPIO_WritePin>

	txBuffer[0] = READ_ID_CMD;
 8000d6c:	239f      	movs	r3, #159	; 0x9f
 8000d6e:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI, txBuffer, 1, 100);
 8000d70:	f107 0114 	add.w	r1, r7, #20
 8000d74:	2364      	movs	r3, #100	; 0x64
 8000d76:	2201      	movs	r2, #1
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f004 f8c4 	bl	8004f06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, rxBuffer, 2, 100);
 8000d7e:	f107 0110 	add.w	r1, r7, #16
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2202      	movs	r2, #2
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f004 fa2b 	bl	80051e2 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f001 fa4c 	bl	8002238 <HAL_GPIO_WritePin>

	AT25X041B->LastWrittenAddr = 0x07FFFF;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <AT25X041B_Init+0xec>)
 8000da4:	619a      	str	r2, [r3, #24]
	AT25X041B->ManufacturerId = rxBuffer[0];
 8000da6:	7c3a      	ldrb	r2, [r7, #16]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	701a      	strb	r2, [r3, #0]
	if(AT25X041B->ManufacturerId !=0x1F){
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b1f      	cmp	r3, #31
 8000db2:	d001      	beq.n	8000db8 <AT25X041B_Init+0xe0>
		result = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	75fb      	strb	r3, [r7, #23]
	}
	return result;
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	0007ffff 	.word	0x0007ffff

08000dc8 <AT25X041B_ChipErase>:

	HAL_Delay(5);
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
}

uint8_t AT25X041B_ChipErase(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b092      	sub	sp, #72	; 0x48
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	/*
	 * A simple function that erase the full 4Mb of the chip return 1 if the chip erase worked 0 if not
	 */
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t result = 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint32_t SECTOR_ADDR_LIST[11] = {0x07FFFF,0x07BFFF,0x079FFF,0x076FFF,0x060FFF,0x050FFF,0x040FFF,0x030FFF,0x020FFF,0x010FFF,0x000FFF};
 8000dd8:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <AT25X041B_ChipErase+0x10c>)
 8000dda:	f107 040c 	add.w	r4, r7, #12
 8000dde:	461d      	mov	r5, r3
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//All sector should be unprotect first to ensure a full erase
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
 8000df4:	e00d      	b.n	8000e12 <AT25X041B_ChipErase+0x4a>
		AT25X041B_UnprotectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 8000df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	3348      	adds	r3, #72	; 0x48
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e02:	461a      	mov	r2, r3
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f8ec 	bl	8000fe4 <AT25X041B_UnprotectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e0e:	3301      	adds	r3, #1
 8000e10:	643b      	str	r3, [r7, #64]	; 0x40
 8000e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e14:	2b0a      	cmp	r3, #10
 8000e16:	d9ee      	bls.n	8000df6 <AT25X041B_ChipErase+0x2e>
	}
	//We also need to disable write protection (don't know why but the datasheet say to do it)
	AT25X041B_WriteProtectionDisable(SPI, AT25X041B);
 8000e18:	6839      	ldr	r1, [r7, #0]
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f96e 	bl	80010fc <AT25X041B_WriteProtectionDisable>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	4618      	mov	r0, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f001 fa02 	bl	8002238 <HAL_GPIO_WritePin>

	//Send the full chip erase command
	data[0] = FULL_CHIP_ERASE_CMD;
 8000e34:	23c7      	movs	r3, #199	; 0xc7
 8000e36:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000e3a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	2201      	movs	r2, #1
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f004 f85f 	bl	8004f06 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	f001 f9ee 	bl	8002238 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f83c 	bl	8000edc <AT25X041B_ReadStatusReg_Byte1>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//wait until the chip erase is done (check RDY/ bits)
	while(status_reg_val & 0x01 != 0x00){
 8000e6a:	e006      	b.n	8000e7a <AT25X041B_ChipErase+0xb2>
		status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f834 	bl	8000edc <AT25X041B_ReadStatusReg_Byte1>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(status_reg_val & 0x01 != 0x00){
 8000e7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f2      	bne.n	8000e6c <AT25X041B_ChipErase+0xa4>
	}


	//All sector should be protected again
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e8a:	e00d      	b.n	8000ea8 <AT25X041B_ChipErase+0xe0>
		AT25X041B_ProtectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 8000e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	3348      	adds	r3, #72	; 0x48
 8000e92:	443b      	add	r3, r7
 8000e94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f8e7 	bl	8001070 <AT25X041B_ProtectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eaa:	2b0a      	cmp	r3, #10
 8000eac:	d9ee      	bls.n	8000e8c <AT25X041B_ChipErase+0xc4>
	}

	//chek the EPE bit from the status register to ensure no error
	if(((status_reg_val & 0x20)>>5) == 0x01){
 8000eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <AT25X041B_ChipErase+0xfa>
		//If an error occure --> return 0
		result = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000ec0:	e002      	b.n	8000ec8 <AT25X041B_ChipErase+0x100>
	}
	else{
		//if the chip erase worked then the memory is clear and the las written adress is 0 (0x7FFFF as i read the flash from max addr downto 0
		AT25X041B->LastWrittenAddr = 0x07FFFF;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <AT25X041B_ChipErase+0x110>)
 8000ec6:	619a      	str	r2, [r3, #24]
	}
	return result;
 8000ec8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46

}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3748      	adds	r7, #72	; 0x48
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed4:	0800d140 	.word	0x0800d140
 8000ed8:	0007ffff 	.word	0x0007ffff

08000edc <AT25X041B_ReadStatusReg_Byte1>:

uint8_t AT25X041B_ReadStatusReg_Byte1(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]

	uint8_t data[1];
	uint8_t status_reg_value[1];


	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	4618      	mov	r0, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f001 f99f 	bl	8002238 <HAL_GPIO_WritePin>

	data[0] = READ_STATUS_CMD;
 8000efa:	2305      	movs	r3, #5
 8000efc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000efe:	f107 010c 	add.w	r1, r7, #12
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f003 fffd 	bl	8004f06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, status_reg_value, 1, 100);
 8000f0c:	f107 0108 	add.w	r1, r7, #8
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f004 f964 	bl	80051e2 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f001 f985 	bl	8002238 <HAL_GPIO_WritePin>

	return status_reg_value[0];
 8000f2e:	7a3b      	ldrb	r3, [r7, #8]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <AT25X041B_WriteMemory8>:
	AT25X041B_ProtectSector(SPI, AT25X041B, addr);

	return memory_value[0];
}

void AT25X041B_WriteMemory8(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr,uint8_t data_in){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	70fb      	strb	r3, [r7, #3]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t data_in_array[1];

	//Split the 23 bits addr into 3*8bits
	addr8bit[2] = (addr & 0xFF);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	77bb      	strb	r3, [r7, #30]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	777b      	strb	r3, [r7, #29]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	773b      	strb	r3, [r7, #28]
	data_in_array[0] = data_in;
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	753b      	strb	r3, [r7, #20]

	//Before reading the sector should be first unprotected
	AT25X041B_UnprotectSector(SPI, AT25X041B, addr);
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f83d 	bl	8000fe4 <AT25X041B_UnprotectSector>

	//We should send a write protection disable
	AT25X041B_WriteProtectionDisable(SPI, AT25X041B);
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f8c5 	bl	80010fc <AT25X041B_WriteProtectionDisable>


	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	4618      	mov	r0, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	f001 f959 	bl	8002238 <HAL_GPIO_WritePin>

	data[0] = WRITE_BYTE_CMD;
 8000f86:	2302      	movs	r3, #2
 8000f88:	763b      	strb	r3, [r7, #24]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000f8a:	f107 0118 	add.w	r1, r7, #24
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	2201      	movs	r2, #1
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f003 ffb7 	bl	8004f06 <HAL_SPI_Transmit>
	//write the 23bit addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 8000f98:	f107 011c 	add.w	r1, r7, #28
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f003 ffb0 	bl	8004f06 <HAL_SPI_Transmit>
	//send the data to write
	HAL_SPI_Transmit(SPI,data_in_array,1,100);
 8000fa6:	f107 0114 	add.w	r1, r7, #20
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	2201      	movs	r2, #1
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f003 ffa9 	bl	8004f06 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	4618      	mov	r0, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f001 f938 	bl	8002238 <HAL_GPIO_WritePin>

	AT25X041B->LastWrittenAddr--;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	619a      	str	r2, [r3, #24]

	//When everything is done the sector should be protected again
	AT25X041B_ProtectSector(SPI, AT25X041B, addr);
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 f84a 	bl	8001070 <AT25X041B_ProtectSector>


}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <AT25X041B_UnprotectSector>:
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);

	return sector_status[0];
}

void AT25X041B_UnprotectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0c1b      	lsrs	r3, r3, #16
 8001002:	b2db      	uxtb	r3, r3
 8001004:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f877 	bl	80010fc <AT25X041B_WriteProtectionDisable>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d003      	beq.n	8001020 <AT25X041B_UnprotectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 f86e 	bl	80010fc <AT25X041B_WriteProtectionDisable>
	}


	data[0] = UNPROTECT_SECTOR_CMD;
 8001020:	2339      	movs	r3, #57	; 0x39
 8001022:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	4618      	mov	r0, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	b29b      	uxth	r3, r3
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	f001 f900 	bl	8002238 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8001038:	f107 0110 	add.w	r1, r7, #16
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	2201      	movs	r2, #1
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f003 ff60 	bl	8004f06 <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 8001046:	f107 0114 	add.w	r1, r7, #20
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	2203      	movs	r2, #3
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f003 ff59 	bl	8004f06 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	4618      	mov	r0, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f001 f8e8 	bl	8002238 <HAL_GPIO_WritePin>

}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <AT25X041B_ProtectSector>:

void AT25X041B_ProtectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	b2db      	uxtb	r3, r3
 8001088:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	b2db      	uxtb	r3, r3
 8001090:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f831 	bl	80010fc <AT25X041B_WriteProtectionDisable>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d003      	beq.n	80010ac <AT25X041B_ProtectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f828 	bl	80010fc <AT25X041B_WriteProtectionDisable>
	}


	data[0] = PROTECT_SECTOR_CMD;
 80010ac:	2336      	movs	r3, #54	; 0x36
 80010ae:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	4618      	mov	r0, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	f001 f8ba 	bl	8002238 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 80010c4:	f107 0110 	add.w	r1, r7, #16
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	2201      	movs	r2, #1
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f003 ff1a 	bl	8004f06 <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 80010d2:	f107 0114 	add.w	r1, r7, #20
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	2203      	movs	r2, #3
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f003 ff13 	bl	8004f06 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	4618      	mov	r0, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	f001 f8a2 	bl	8002238 <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <AT25X041B_WriteProtectionDisable>:
		res = 0;
	}
	return res;
}

uint8_t AT25X041B_WriteProtectionDisable(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t res = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	4618      	mov	r0, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	b29b      	uxth	r3, r3
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f001 f88d 	bl	8002238 <HAL_GPIO_WritePin>

	data[0] = WRITE_DISABLE_CMD;
 800111e:	2306      	movs	r3, #6
 8001120:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8001122:	f107 010c 	add.w	r1, r7, #12
 8001126:	2364      	movs	r3, #100	; 0x64
 8001128:	2201      	movs	r2, #1
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f003 feeb 	bl	8004f06 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	4618      	mov	r0, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	b29b      	uxth	r3, r3
 800113c:	2201      	movs	r2, #1
 800113e:	4619      	mov	r1, r3
 8001140:	f001 f87a 	bl	8002238 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI, AT25X041B);
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fec8 	bl	8000edc <AT25X041B_ReadStatusReg_Byte1>
 800114c:	4603      	mov	r3, r0
 800114e:	73bb      	strb	r3, [r7, #14]

	//if the command didn't worked then return 0
	if(((status_reg_val&0x02)>>1) == 0x00){
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <AT25X041B_WriteProtectionDisable+0x62>
		res = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <WriteCoordinateFlash>:

void WriteCoordinateFlash(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,coord_t coordinate){
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	6178      	str	r0, [r7, #20]
 8001170:	6139      	str	r1, [r7, #16]
 8001172:	eef0 6a40 	vmov.f32	s13, s0
 8001176:	eeb0 7a60 	vmov.f32	s14, s1
 800117a:	eef0 7a41 	vmov.f32	s15, s2
 800117e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001182:	ed87 7a02 	vstr	s14, [r7, #8]
 8001186:	edc7 7a03 	vstr	s15, [r7, #12]
		float longitude;
		uint8_t longitude_byte[4];
	} longitude_u;

	//Affect the coordinate to the union
	longitude_u.longitude = coordinate.longitude;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	61bb      	str	r3, [r7, #24]
	latitude_u.latitude = coordinate.latitude;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	61fb      	str	r3, [r7, #28]
	altitude_u.altitude = coordinate.altitude;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	623b      	str	r3, [r7, #32]

	//Store all data's into the memory
	for(int i=0;i<sizeof(altitude_u.altitude_byte);i++){
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800119a:	e00e      	b.n	80011ba <WriteCoordinateFlash+0x52>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr, altitude_u.altitude_byte[i]);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	6999      	ldr	r1, [r3, #24]
 80011a0:	f107 0220 	add.w	r2, r7, #32
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	460a      	mov	r2, r1
 80011ac:	6939      	ldr	r1, [r7, #16]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff fec2 	bl	8000f38 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(altitude_u.altitude_byte);i++){
 80011b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b6:	3301      	adds	r3, #1
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d9ed      	bls.n	800119c <WriteCoordinateFlash+0x34>
	}

	for(int i=0;i<sizeof(latitude_u.latitude_byte);i++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c4:	e00e      	b.n	80011e4 <WriteCoordinateFlash+0x7c>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr,latitude_u.latitude_byte[i]);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6999      	ldr	r1, [r3, #24]
 80011ca:	f107 021c 	add.w	r2, r7, #28
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	460a      	mov	r2, r1
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f7ff fead 	bl	8000f38 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(latitude_u.latitude_byte);i++){
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	3301      	adds	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d9ed      	bls.n	80011c6 <WriteCoordinateFlash+0x5e>
	}

	for(int i=0;i<sizeof(longitude_u.longitude_byte);i++){
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	e00e      	b.n	800120e <WriteCoordinateFlash+0xa6>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr, longitude_u.longitude_byte[i]);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6999      	ldr	r1, [r3, #24]
 80011f4:	f107 0218 	add.w	r2, r7, #24
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	460a      	mov	r2, r1
 8001200:	6939      	ldr	r1, [r7, #16]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff fe98 	bl	8000f38 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(longitude_u.longitude_byte);i++){
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	3301      	adds	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	2b03      	cmp	r3, #3
 8001212:	d9ed      	bls.n	80011f0 <WriteCoordinateFlash+0x88>
	}

}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b0b4      	sub	sp, #208	; 0xd0
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 fc00 	bl	8001a2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f8e9 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 f973 	bl	8001518 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8001232:	f008 fbed 	bl	8009a10 <MX_USB_Device_Init>
  MX_SPI1_Init();
 8001236:	f000 f931 	bl	800149c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Init the external flash */
  if(AT25X041B_Init(&hspi1, &external_flash, SPI1_CS_GPIO_Port, SPI1_CS_Pin) != 0x00){
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001242:	4961      	ldr	r1, [pc, #388]	; (80013c8 <main+0x1a8>)
 8001244:	4861      	ldr	r0, [pc, #388]	; (80013cc <main+0x1ac>)
 8001246:	f7ff fd47 	bl	8000cd8 <AT25X041B_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <main+0x34>
	  Error_Handler();
 8001250:	f000 fa4b 	bl	80016ea <Error_Handler>
  }

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f000 ffeb 	bl	8002238 <HAL_GPIO_WritePin>

  /* loop to ensure user is ready to send a data */
  uint8_t Flash_confirmation[] = "Flashing data please wait ...\r\n";
 8001262:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <main+0x1b0>)
 8001264:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001268:	461d      	mov	r5, r3
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t Print_time[] = "Waiting for USB interrupt !\r\n";
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <main+0x1b4>)
 8001278:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800127c:	461d      	mov	r5, r3
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001286:	c407      	stmia	r4!, {r0, r1, r2}
 8001288:	8023      	strh	r3, [r4, #0]
  uint8_t Flash_erase[] = "External flash erase please wait ... \r\n";
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <main+0x1b8>)
 800128c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001290:	461d      	mov	r5, r3
 8001292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800129e:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t Jumping_to_app[] = "Jumping to application !\r\n";
 80012a2:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <main+0x1bc>)
 80012a4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80012a8:	461d      	mov	r5, r3
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b2:	c403      	stmia	r4!, {r0, r1}
 80012b4:	8022      	strh	r2, [r4, #0]
 80012b6:	3402      	adds	r4, #2
 80012b8:	0c13      	lsrs	r3, r2, #16
 80012ba:	7023      	strb	r3, [r4, #0]
  uint8_t Error1[] = "An error occurred while erasing external flash !\r\n";
 80012bc:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <main+0x1c0>)
 80012be:	f107 0414 	add.w	r4, r7, #20
 80012c2:	461d      	mov	r5, r3
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	8022      	strh	r2, [r4, #0]
 80012d6:	3402      	adds	r4, #2
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	7023      	strb	r3, [r4, #0]
  uint8_t Write_confirmation[] = "Flash successful\r\n";
 80012dc:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <main+0x1c4>)
 80012de:	463c      	mov	r4, r7
 80012e0:	461d      	mov	r5, r3
 80012e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	8022      	strh	r2, [r4, #0]
 80012ec:	3402      	adds	r4, #2
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	7023      	strb	r3, [r4, #0]

  for(int i=0;i<TIME_TO_WAIT_S;i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012f8:	e058      	b.n	80013ac <main+0x18c>
	  if(start_of_flash){
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <main+0x1c8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d045      	beq.n	800138e <main+0x16e>
		  CDC_Transmit_FS(Flash_erase, sizeof(Flash_erase));
 8001302:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001306:	2128      	movs	r1, #40	; 0x28
 8001308:	4618      	mov	r0, r3
 800130a:	f008 fc89 	bl	8009c20 <CDC_Transmit_FS>
		  if( AT25X041B_ChipErase(&hspi1, &external_flash) == 0x01){
 800130e:	492e      	ldr	r1, [pc, #184]	; (80013c8 <main+0x1a8>)
 8001310:	482e      	ldr	r0, [pc, #184]	; (80013cc <main+0x1ac>)
 8001312:	f7ff fd59 	bl	8000dc8 <AT25X041B_ChipErase>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d106      	bne.n	800132a <main+0x10a>
			  CDC_Transmit_FS(Flash_confirmation, sizeof(Flash_confirmation));
 800131c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001320:	2120      	movs	r1, #32
 8001322:	4618      	mov	r0, r3
 8001324:	f008 fc7c 	bl	8009c20 <CDC_Transmit_FS>
 8001328:	e02c      	b.n	8001384 <main+0x164>
		  }
		  else{
			  CDC_Transmit_FS(Error1, sizeof(Error1));
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2133      	movs	r1, #51	; 0x33
 8001330:	4618      	mov	r0, r3
 8001332:	f008 fc75 	bl	8009c20 <CDC_Transmit_FS>
		  }

		  /* Wait until we received a end of flash sequence */
		  while(end_of_flash != 1){
 8001336:	e025      	b.n	8001384 <main+0x164>

			  /* Wait until a full coordinate has been send, it must end with \r\n */
			  if(end_of_coordinate == 0x01){
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <main+0x1cc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d121      	bne.n	8001384 <main+0x164>
				  /* convert RX buffer into coordinate */
				  Rx_Buffer_Processing(RX_BUFFER,&coordinate);
 8001340:	492b      	ldr	r1, [pc, #172]	; (80013f0 <main+0x1d0>)
 8001342:	482c      	ldr	r0, [pc, #176]	; (80013f4 <main+0x1d4>)
 8001344:	f000 f94c 	bl	80015e0 <Rx_Buffer_Processing>

				  /* Flash the external flash */
				  WriteCoordinateFlash(&hspi1, &external_flash,coordinate);
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <main+0x1d0>)
 800134a:	edd3 6a00 	vldr	s13, [r3]
 800134e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001352:	edd3 7a02 	vldr	s15, [r3, #8]
 8001356:	eeb0 0a66 	vmov.f32	s0, s13
 800135a:	eef0 0a47 	vmov.f32	s1, s14
 800135e:	eeb0 1a67 	vmov.f32	s2, s15
 8001362:	4919      	ldr	r1, [pc, #100]	; (80013c8 <main+0x1a8>)
 8001364:	4819      	ldr	r0, [pc, #100]	; (80013cc <main+0x1ac>)
 8001366:	f7ff feff 	bl	8001168 <WriteCoordinateFlash>
				  end_of_coordinate = 0;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <main+0x1cc>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
				  memset(RX_BUFFER, 0, sizeof(RX_BUFFER));
 8001370:	2264      	movs	r2, #100	; 0x64
 8001372:	2100      	movs	r1, #0
 8001374:	481f      	ldr	r0, [pc, #124]	; (80013f4 <main+0x1d4>)
 8001376:	f009 ffc4 	bl	800b302 <memset>
				  CDC_Transmit_FS(Write_confirmation, sizeof(Write_confirmation));
 800137a:	463b      	mov	r3, r7
 800137c:	2113      	movs	r1, #19
 800137e:	4618      	mov	r0, r3
 8001380:	f008 fc4e 	bl	8009c20 <CDC_Transmit_FS>
		  while(end_of_flash != 1){
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <main+0x1d8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1d5      	bne.n	8001338 <main+0x118>
			  }
		  }
		  break;
 800138c:	e012      	b.n	80013b4 <main+0x194>
	  }
	  CDC_Transmit_FS(Print_time, sizeof(Print_time));
 800138e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001392:	211e      	movs	r1, #30
 8001394:	4618      	mov	r0, r3
 8001396:	f008 fc43 	bl	8009c20 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f000 fbb5 	bl	8001b0c <HAL_Delay>
  for(int i=0;i<TIME_TO_WAIT_S;i++){
 80013a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013a6:	3301      	adds	r3, #1
 80013a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	dda2      	ble.n	80012fa <main+0xda>
  }


  CDC_Transmit_FS(Jumping_to_app, sizeof(Jumping_to_app));
 80013b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b8:	211b      	movs	r1, #27
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 fc30 	bl	8009c20 <CDC_Transmit_FS>
  JumpToApplication(APP_ADDRESS);
 80013c0:	480e      	ldr	r0, [pc, #56]	; (80013fc <main+0x1dc>)
 80013c2:	f000 f8db 	bl	800157c <JumpToApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <main+0x1a6>
 80013c8:	200003d0 	.word	0x200003d0
 80013cc:	2000036c 	.word	0x2000036c
 80013d0:	0800d16c 	.word	0x0800d16c
 80013d4:	0800d18c 	.word	0x0800d18c
 80013d8:	0800d1ac 	.word	0x0800d1ac
 80013dc:	0800d1d4 	.word	0x0800d1d4
 80013e0:	0800d1f0 	.word	0x0800d1f0
 80013e4:	0800d224 	.word	0x0800d224
 80013e8:	20000368 	.word	0x20000368
 80013ec:	2000036a 	.word	0x2000036a
 80013f0:	200003fc 	.word	0x200003fc
 80013f4:	200006e4 	.word	0x200006e4
 80013f8:	20000369 	.word	0x20000369
 80013fc:	0800e000 	.word	0x0800e000

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	2238      	movs	r2, #56	; 0x38
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f009 ff77 	bl	800b302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001422:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001426:	f002 fc53 	bl	8003cd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800142a:	2322      	movs	r3, #34	; 0x22
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001440:	2302      	movs	r3, #2
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001444:	2304      	movs	r3, #4
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001448:	234b      	movs	r3, #75	; 0x4b
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fd5d 	bl	8003f1c <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001468:	f000 f93f 	bl	80016ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2303      	movs	r3, #3
 8001472:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2104      	movs	r1, #4
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f861 	bl	800454c <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001490:	f000 f92b 	bl	80016ea <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	3750      	adds	r7, #80	; 0x50
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_SPI1_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_SPI1_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_SPI1_Init+0x74>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_SPI1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_SPI1_Init+0x74>)
 80014b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_SPI1_Init+0x74>)
 80014be:	2202      	movs	r2, #2
 80014c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_SPI1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_SPI1_Init+0x74>)
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_SPI1_Init+0x74>)
 80014d2:	2228      	movs	r2, #40	; 0x28
 80014d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_SPI1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_SPI1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_SPI1_Init+0x74>)
 80014ea:	2207      	movs	r2, #7
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_SPI1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_SPI1_Init+0x74>)
 80014fc:	f003 fc58 	bl	8004db0 <HAL_SPI_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 f8f0 	bl	80016ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000036c 	.word	0x2000036c
 8001514:	40013000 	.word	0x40013000

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_GPIO_Init+0x60>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <MX_GPIO_Init+0x60>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_GPIO_Init+0x60>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 7140 	mov.w	r1, #768	; 0x300
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f000 fe73 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 8001552:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f000 fc00 	bl	8001d70 <HAL_GPIO_Init>

}
 8001570:	bf00      	nop
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000

0800157c <JumpToApplication>:

/* USER CODE BEGIN 4 */
void JumpToApplication(uint32_t application_addr){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	  /*Init a function pointer*/
	  uint32_t go_address = *((volatile uint32_t*) (application_addr + 4));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3304      	adds	r3, #4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	617b      	str	r3, [r7, #20]
	  void (*jump_to_app)(void) = (void *)go_address;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]

	  /*Uninit all peripheral use by the bootloader*/
	  HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8001590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f000 fd6c 	bl	8002074 <HAL_GPIO_DeInit>

	  /*Disable clock*/
	  HAL_RCC_DeInit();
 800159c:	f002 fc3c 	bl	8003e18 <HAL_RCC_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop

	  /*disable all IRQ*/
	  __disable_irq();

	  /*Relocate vector table*/
	  SCB->VTOR = application_addr;
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <JumpToApplication+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6093      	str	r3, [r2, #8]

	  /*Set main stack pointer pas sure*/
	  __set_MSP(*(volatile uint32_t*) application_addr);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f383 8808 	msr	MSP, r3
}
 80015b6:	bf00      	nop

	  /*Reset systick timer*/
	  SysTick->CTRL = 0;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <JumpToApplication+0x60>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <JumpToApplication+0x60>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <JumpToApplication+0x60>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
		//#error "In order to jump correctly the app should be relocated at different @ - please allow more than (2048byte*4)=16384 byte -- probably around 40 or 42 kB "
	  /*Jump*/
	  jump_to_app();
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4798      	blx	r3
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <Rx_Buffer_Processing>:
 * @method latitude,longitude,altitude\r\n
 * @param RX_BUFFER any size buffer (should end with a \0)
 * @param coord is the output coordinate pointer
 * @output 0 if success 1 else
 */
uint8_t Rx_Buffer_Processing(uint8_t RX_BUFFER[],coord_t *output){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]

	uint8_t temp_string[30] = {0x0};
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	831a      	strh	r2, [r3, #24]
	uint8_t temp_char[2] = {0x0};
 8001602:	2300      	movs	r3, #0
 8001604:	81bb      	strh	r3, [r7, #12]
	uint16_t counter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	86fb      	strh	r3, [r7, #54]	; 0x36

	for(int i=0;i<3;i++){
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
 800160e:	e064      	b.n	80016da <Rx_Buffer_Processing+0xfa>

		while((RX_BUFFER[counter] != ',')&&(RX_BUFFER[counter] != '\r')){
			temp_char[0] = RX_BUFFER[counter];
 8001610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	733b      	strb	r3, [r7, #12]
			temp_char[1] = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	737b      	strb	r3, [r7, #13]
			strcat(temp_string,temp_char);
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f009 fe72 	bl	800b312 <strcat>
			counter++;
 800162e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001630:	3301      	adds	r3, #1
 8001632:	86fb      	strh	r3, [r7, #54]	; 0x36
		while((RX_BUFFER[counter] != ',')&&(RX_BUFFER[counter] != '\r')){
 8001634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b2c      	cmp	r3, #44	; 0x2c
 800163e:	d005      	beq.n	800164c <Rx_Buffer_Processing+0x6c>
 8001640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b0d      	cmp	r3, #13
 800164a:	d1e1      	bne.n	8001610 <Rx_Buffer_Processing+0x30>
		}

		switch (i) {
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	2b02      	cmp	r3, #2
 8001650:	d027      	beq.n	80016a2 <Rx_Buffer_Processing+0xc2>
 8001652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001654:	2b02      	cmp	r3, #2
 8001656:	dc33      	bgt.n	80016c0 <Rx_Buffer_Processing+0xe0>
 8001658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <Rx_Buffer_Processing+0x86>
 800165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001660:	2b01      	cmp	r3, #1
 8001662:	d00f      	beq.n	8001684 <Rx_Buffer_Processing+0xa4>
 8001664:	e02c      	b.n	80016c0 <Rx_Buffer_Processing+0xe0>
			case 0:
				output->latitude = atof(temp_string);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4618      	mov	r0, r3
 800166c:	f008 ff26 	bl	800a4bc <atof>
 8001670:	ec53 2b10 	vmov	r2, r3, d0
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff faa8 	bl	8000bcc <__aeabi_d2f>
 800167c:	4602      	mov	r2, r0
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
				break;
 8001682:	e01d      	b.n	80016c0 <Rx_Buffer_Processing+0xe0>
			case 1:
				output->longitude = atof(temp_string);
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4618      	mov	r0, r3
 800168a:	f008 ff17 	bl	800a4bc <atof>
 800168e:	ec53 2b10 	vmov	r2, r3, d0
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa99 	bl	8000bcc <__aeabi_d2f>
 800169a:	4602      	mov	r2, r0
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	605a      	str	r2, [r3, #4]
				break;
 80016a0:	e00e      	b.n	80016c0 <Rx_Buffer_Processing+0xe0>
			case 2:
				output->altitude = atof(temp_string);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4618      	mov	r0, r3
 80016a8:	f008 ff08 	bl	800a4bc <atof>
 80016ac:	ec53 2b10 	vmov	r2, r3, d0
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa8a 	bl	8000bcc <__aeabi_d2f>
 80016b8:	4602      	mov	r2, r0
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	609a      	str	r2, [r3, #8]
				break;
 80016be:	bf00      	nop
		}
		counter++;
 80016c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016c2:	3301      	adds	r3, #1
 80016c4:	86fb      	strh	r3, [r7, #54]	; 0x36
		memset(temp_string, 0, sizeof(temp_string));
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	221e      	movs	r2, #30
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f009 fe17 	bl	800b302 <memset>
	for(int i=0;i<3;i++){
 80016d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d6:	3301      	adds	r3, #1
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	2b02      	cmp	r3, #2
 80016de:	dda9      	ble.n	8001634 <Rx_Buffer_Processing+0x54>
	}
	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3738      	adds	r7, #56	; 0x38
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016ee:	b672      	cpsid	i
}
 80016f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <Error_Handler+0x8>

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x44>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_MspInit+0x44>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6613      	str	r3, [r2, #96]	; 0x60
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_MspInit+0x44>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_MspInit+0x44>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_MspInit+0x44>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x44>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <HAL_SPI_MspInit+0x7c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d128      	bne.n	80017b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_SPI_MspInit+0x80>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <HAL_SPI_MspInit+0x80>)
 8001764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001768:	6613      	str	r3, [r2, #96]	; 0x60
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_SPI_MspInit+0x80>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_SPI_MspInit+0x80>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <HAL_SPI_MspInit+0x80>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_SPI_MspInit+0x80>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800178e:	23e0      	movs	r3, #224	; 0xe0
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179e:	2305      	movs	r3, #5
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ac:	f000 fae0 	bl	8001d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	; 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40013000 	.word	0x40013000
 80017bc:	40021000 	.word	0x40021000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 f960 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USB_LP_IRQHandler+0x10>)
 800181a:	f000 fe2c 	bl	8002476 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20001948 	.word	0x20001948

08001828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_kill>:

int _kill(int pid, int sig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001842:	f009 fdcd 	bl	800b3e0 <__errno>
 8001846:	4603      	mov	r3, r0
 8001848:	2216      	movs	r2, #22
 800184a:	601a      	str	r2, [r3, #0]
  return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_exit>:

void _exit (int status)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffe7 	bl	8001838 <_kill>
  while (1) {}    /* Make sure we hang here */
 800186a:	e7fe      	b.n	800186a <_exit+0x12>

0800186c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	4601      	mov	r1, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf0      	blt.n	800187e <_read+0x12>
  }

  return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e009      	b.n	80018cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf1      	blt.n	80018b8 <_write+0x12>
  }
  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001906:	605a      	str	r2, [r3, #4]
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_isatty>:

int _isatty(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f009 fd32 	bl	800b3e0 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20020000 	.word	0x20020000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000408 	.word	0x20000408
 80019b0:	20001fa8 	.word	0x20001fa8

080019b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80019de:	490e      	ldr	r1, [pc, #56]	; (8001a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <LoopForever+0xe>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f4:	4c0b      	ldr	r4, [pc, #44]	; (8001a24 <LoopForever+0x16>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a02:	f7ff ffd7 	bl	80019b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f009 fcf1 	bl	800b3ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a0a:	f7ff fc09 	bl	8001220 <main>

08001a0e <LoopForever>:

LoopForever:
    b LoopForever
 8001a0e:	e7fe      	b.n	8001a0e <LoopForever>
  ldr   r0, =_estack
 8001a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001a1c:	0800d664 	.word	0x0800d664
  ldr r2, =_sbss
 8001a20:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001a24:	20001fa8 	.word	0x20001fa8

08001a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC1_2_IRQHandler>

08001a2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f95b 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a3a:	200f      	movs	r0, #15
 8001a3c:	f000 f80e 	bl	8001a5c <HAL_InitTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	e001      	b.n	8001a50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a4c:	f7ff fe52 	bl	80016f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a50:	79fb      	ldrb	r3, [r7, #7]

}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_InitTick+0x68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d022      	beq.n	8001ab6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_InitTick+0x6c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_InitTick+0x68>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f966 	bl	8001d56 <HAL_SYSTICK_Config>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10f      	bne.n	8001ab0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	d809      	bhi.n	8001aaa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a96:	2200      	movs	r2, #0
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9e:	f000 f932 	bl	8001d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_InitTick+0x70>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	e007      	b.n	8001aba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	e004      	b.n	8001aba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e001      	b.n	8001aba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_IncTick+0x20>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_IncTick+0x1c>)
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	2000040c 	.word	0x2000040c
 8001af0:	20000008 	.word	0x20000008

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_GetTick+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	2000040c 	.word	0x2000040c

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff ffee 	bl	8001af4 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d004      	beq.n	8001b30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_Delay+0x40>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b30:	bf00      	nop
 8001b32:	f7ff ffdf 	bl	8001af4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d8f7      	bhi.n	8001b32 <HAL_Delay+0x26>
  {
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000008 	.word	0x20000008

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff29 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff40 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff90 	bl	8001c44 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5f 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff33 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa4 	bl	8001cac <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d7e:	e15a      	b.n	8002036 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 814c 	beq.w	8002030 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d005      	beq.n	8001db0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d130      	bne.n	8001e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de6:	2201      	movs	r2, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	091b      	lsrs	r3, r3, #4
 8001dfc:	f003 0201 	and.w	r2, r3, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d017      	beq.n	8001e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d123      	bne.n	8001ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	6939      	ldr	r1, [r7, #16]
 8001e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0203 	and.w	r2, r3, #3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80a6 	beq.w	8002030 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_GPIO_Init+0x2e4>)
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee8:	4a5a      	ldr	r2, [pc, #360]	; (8002054 <HAL_GPIO_Init+0x2e4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6613      	str	r3, [r2, #96]	; 0x60
 8001ef0:	4b58      	ldr	r3, [pc, #352]	; (8002054 <HAL_GPIO_Init+0x2e4>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efc:	4a56      	ldr	r2, [pc, #344]	; (8002058 <HAL_GPIO_Init+0x2e8>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f26:	d01f      	beq.n	8001f68 <HAL_GPIO_Init+0x1f8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x2ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d019      	beq.n	8001f64 <HAL_GPIO_Init+0x1f4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x2f0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_GPIO_Init+0x1f0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x2f4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00d      	beq.n	8001f5c <HAL_GPIO_Init+0x1ec>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a49      	ldr	r2, [pc, #292]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d007      	beq.n	8001f58 <HAL_GPIO_Init+0x1e8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_GPIO_Init+0x2fc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_GPIO_Init+0x1e4>
 8001f50:	2305      	movs	r3, #5
 8001f52:	e00a      	b.n	8001f6a <HAL_GPIO_Init+0x1fa>
 8001f54:	2306      	movs	r3, #6
 8001f56:	e008      	b.n	8001f6a <HAL_GPIO_Init+0x1fa>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x1fa>
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x1fa>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x1fa>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x1fa>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7a:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_GPIO_Init+0x2e8>)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_GPIO_Init+0x300>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_GPIO_Init+0x300>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_GPIO_Init+0x300>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fd6:	4a26      	ldr	r2, [pc, #152]	; (8002070 <HAL_GPIO_Init+0x300>)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_GPIO_Init+0x300>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_GPIO_Init+0x300>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_GPIO_Init+0x300>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_GPIO_Init+0x300>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	f47f ae9d 	bne.w	8001d80 <HAL_GPIO_Init+0x10>
  }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40021000 	.word	0x40021000
 8002058:	40010000 	.word	0x40010000
 800205c:	48000400 	.word	0x48000400
 8002060:	48000800 	.word	0x48000800
 8002064:	48000c00 	.word	0x48000c00
 8002068:	48001000 	.word	0x48001000
 800206c:	48001400 	.word	0x48001400
 8002070:	40010400 	.word	0x40010400

08002074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002082:	e0bd      	b.n	8002200 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002084:	2201      	movs	r2, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80b0 	beq.w	80021fa <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800209a:	4a60      	ldr	r2, [pc, #384]	; (800221c <HAL_GPIO_DeInit+0x1a8>)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020c2:	d01f      	beq.n	8002104 <HAL_GPIO_DeInit+0x90>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a56      	ldr	r2, [pc, #344]	; (8002220 <HAL_GPIO_DeInit+0x1ac>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d019      	beq.n	8002100 <HAL_GPIO_DeInit+0x8c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a55      	ldr	r2, [pc, #340]	; (8002224 <HAL_GPIO_DeInit+0x1b0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_GPIO_DeInit+0x88>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_GPIO_DeInit+0x1b4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00d      	beq.n	80020f8 <HAL_GPIO_DeInit+0x84>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a53      	ldr	r2, [pc, #332]	; (800222c <HAL_GPIO_DeInit+0x1b8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <HAL_GPIO_DeInit+0x80>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_GPIO_DeInit+0x7c>
 80020ec:	2305      	movs	r3, #5
 80020ee:	e00a      	b.n	8002106 <HAL_GPIO_DeInit+0x92>
 80020f0:	2306      	movs	r3, #6
 80020f2:	e008      	b.n	8002106 <HAL_GPIO_DeInit+0x92>
 80020f4:	2304      	movs	r3, #4
 80020f6:	e006      	b.n	8002106 <HAL_GPIO_DeInit+0x92>
 80020f8:	2303      	movs	r3, #3
 80020fa:	e004      	b.n	8002106 <HAL_GPIO_DeInit+0x92>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e002      	b.n	8002106 <HAL_GPIO_DeInit+0x92>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_GPIO_DeInit+0x92>
 8002104:	2300      	movs	r3, #0
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	f002 0203 	and.w	r2, r2, #3
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	4093      	lsls	r3, r2
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	429a      	cmp	r2, r3
 8002114:	d132      	bne.n	800217c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	4945      	ldr	r1, [pc, #276]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 8002120:	4013      	ands	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	4941      	ldr	r1, [pc, #260]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 800212e:	4013      	ands	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002132:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	493e      	ldr	r1, [pc, #248]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 800213c:	4013      	ands	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002140:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	493a      	ldr	r1, [pc, #232]	; (8002234 <HAL_GPIO_DeInit+0x1c0>)
 800214a:	4013      	ands	r3, r2
 800214c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800215e:	4a2f      	ldr	r2, [pc, #188]	; (800221c <HAL_GPIO_DeInit+0x1a8>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43da      	mvns	r2, r3
 800216e:	482b      	ldr	r0, [pc, #172]	; (800221c <HAL_GPIO_DeInit+0x1a8>)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	400a      	ands	r2, r1
 8002176:	3302      	adds	r3, #2
 8002178:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2103      	movs	r1, #3
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	4019      	ands	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2103      	movs	r1, #3
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2101      	movs	r1, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2103      	movs	r1, #3
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f af3b 	bne.w	8002084 <HAL_GPIO_DeInit+0x10>
  }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	48001000 	.word	0x48001000
 8002230:	48001400 	.word	0x48001400
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002254:	e002      	b.n	800225c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b08b      	sub	sp, #44	; 0x2c
 800226c:	af06      	add	r7, sp, #24
 800226e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0d7      	b.n	800242a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f007 fe0e 	bl	8009eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2203      	movs	r2, #3
 8002298:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fcb4 	bl	8005c0e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e04c      	b.n	8002346 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3301      	adds	r3, #1
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	b298      	uxth	r0, r3
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3336      	adds	r3, #54	; 0x36
 80022ea:	4602      	mov	r2, r0
 80022ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	3303      	adds	r3, #3
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	3338      	adds	r3, #56	; 0x38
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	333c      	adds	r3, #60	; 0x3c
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	3340      	adds	r3, #64	; 0x40
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	3301      	adds	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3ad      	bcc.n	80022ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e044      	b.n	80023e0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	3301      	adds	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3b5      	bcc.n	8002356 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	687e      	ldr	r6, [r7, #4]
 80023f2:	466d      	mov	r5, sp
 80023f4:	f106 0410 	add.w	r4, r6, #16
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	602b      	str	r3, [r5, #0]
 8002400:	1d33      	adds	r3, r6, #4
 8002402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002404:	6838      	ldr	r0, [r7, #0]
 8002406:	f003 fc1d 	bl	8005c44 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f001 fc29 	bl	8003c7a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002432 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_PCD_Start+0x16>
 8002444:	2302      	movs	r3, #2
 8002446:	e012      	b.n	800246e <HAL_PCD_Start+0x3c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fbc3 	bl	8005be0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f005 fddc 	bl	800801c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f005 fde1 	bl	800804a <USB_ReadInterrupts>
 8002488:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fb26 	bl	8002ae6 <PCD_EP_ISR_Handler>

    return;
 800249a:	e110      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d013      	beq.n	80024ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b8:	b292      	uxth	r2, r2
 80024ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f007 fd87 	bl	8009fd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024c4:	2100      	movs	r1, #0
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8fc 	bl	80026c4 <HAL_PCD_SetAddress>

    return;
 80024cc:	e0f7      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00c      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024ea:	b292      	uxth	r2, r2
 80024ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024f0:	e0e5      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00c      	beq.n	8002516 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800250e:	b292      	uxth	r2, r2
 8002510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002514:	e0d3      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d034      	beq.n	800258a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	b292      	uxth	r2, r2
 8002534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0208 	bic.w	r2, r2, #8
 800254a:	b292      	uxth	r2, r2
 800254c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002562:	2100      	movs	r1, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f007 ff29 	bl	800a3bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f007 fd6a 	bl	800a044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002582:	b292      	uxth	r2, r2
 8002584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002588:	e099      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002590:	2b00      	cmp	r3, #0
 8002592:	d027      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0208 	orr.w	r2, r2, #8
 80025a6:	b292      	uxth	r2, r2
 80025a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025be:	b292      	uxth	r2, r2
 80025c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0204 	orr.w	r2, r2, #4
 80025d6:	b292      	uxth	r2, r2
 80025d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f007 fd17 	bl	800a010 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025e2:	e06c      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d040      	beq.n	8002670 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002600:	b292      	uxth	r2, r2
 8002602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d12b      	bne.n	8002668 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0204 	orr.w	r2, r2, #4
 8002622:	b292      	uxth	r2, r2
 8002624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0208 	orr.w	r2, r2, #8
 800263a:	b292      	uxth	r2, r2
 800263c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002650:	b29b      	uxth	r3, r3
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800265e:	2101      	movs	r1, #1
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f007 feab 	bl	800a3bc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002666:	e02a      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f007 fcd1 	bl	800a010 <HAL_PCD_SuspendCallback>
    return;
 800266e:	e026      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00f      	beq.n	800269a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002682:	b29a      	uxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800268c:	b292      	uxth	r2, r2
 800268e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f007 fc8f 	bl	8009fb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002698:	e011      	b.n	80026be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026b6:	b292      	uxth	r2, r2
 80026b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026bc:	bf00      	nop
  }
}
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_SetAddress+0x1a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e013      	b.n	8002706 <HAL_PCD_SetAddress+0x42>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f005 fc7c 	bl	8007ff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	4608      	mov	r0, r1
 8002718:	4611      	mov	r1, r2
 800271a:	461a      	mov	r2, r3
 800271c:	4603      	mov	r3, r0
 800271e:	70fb      	strb	r3, [r7, #3]
 8002720:	460b      	mov	r3, r1
 8002722:	803b      	strh	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800272c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da0e      	bge.n	8002752 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	705a      	strb	r2, [r3, #1]
 8002750:	e00e      	b.n	8002770 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 0207 	and.w	r2, r3, #7
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800277c:	883a      	ldrh	r2, [r7, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	78ba      	ldrb	r2, [r7, #2]
 8002786:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800279a:	78bb      	ldrb	r3, [r7, #2]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_PCD_EP_Open+0xa6>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e00e      	b.n	80027d2 <HAL_PCD_EP_Open+0xc4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fa60 	bl	8005c88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80027d0:	7afb      	ldrb	r3, [r7, #11]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da0e      	bge.n	800280c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	705a      	strb	r2, [r3, #1]
 800280a:	e00e      	b.n	800282a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 0207 	and.w	r2, r3, #7
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_PCD_EP_Close+0x6a>
 8002840:	2302      	movs	r3, #2
 8002842:	e00e      	b.n	8002862 <HAL_PCD_EP_Close+0x88>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68f9      	ldr	r1, [r7, #12]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 fdac 	bl	80063b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	460b      	mov	r3, r1
 8002878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287a:	7afb      	ldrb	r3, [r7, #11]
 800287c:	f003 0207 	and.w	r2, r3, #7
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2200      	movs	r2, #0
 80028a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6979      	ldr	r1, [r7, #20]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 ff5f 	bl	800678a <USB_EPStartXfer>
 80028cc:	e005      	b.n	80028da <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6979      	ldr	r1, [r7, #20]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 ff58 	bl	800678a <USB_EPStartXfer>
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 0207 	and.w	r2, r3, #7
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	460b      	mov	r3, r1
 8002922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2201      	movs	r2, #1
 800295e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	b2da      	uxtb	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6979      	ldr	r1, [r7, #20]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 ff04 	bl	800678a <USB_EPStartXfer>
 8002982:	e005      	b.n	8002990 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6979      	ldr	r1, [r7, #20]
 800298a:	4618      	mov	r0, r3
 800298c:	f003 fefd 	bl	800678a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	f003 0207 	and.w	r2, r3, #7
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d901      	bls.n	80029b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e03e      	b.n	8002a36 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da0e      	bge.n	80029de <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	705a      	strb	r2, [r3, #1]
 80029dc:	e00c      	b.n	80029f8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_PCD_EP_SetStall+0x7e>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e00e      	b.n	8002a36 <HAL_PCD_EP_SetStall+0x9c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68f9      	ldr	r1, [r7, #12]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f005 f9e5 	bl	8007df6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d901      	bls.n	8002a5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e040      	b.n	8002ade <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da0e      	bge.n	8002a82 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	705a      	strb	r2, [r3, #1]
 8002a80:	e00e      	b.n	8002aa0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 0207 	and.w	r2, r3, #7
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_PCD_EP_ClrStall+0x82>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e00e      	b.n	8002ade <HAL_PCD_EP_ClrStall+0xa0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68f9      	ldr	r1, [r7, #12]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f005 f9e2 	bl	8007e98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b096      	sub	sp, #88	; 0x58
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aee:	e39c      	b.n	800322a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002afc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002b0a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 815e 	bne.w	8002dd0 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d150      	bne.n	8002bc2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b30:	81fb      	strh	r3, [r7, #14]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	89fb      	ldrh	r3, [r7, #14]
 8002b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3328      	adds	r3, #40	; 0x28
 8002b48:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b80:	2100      	movs	r1, #0
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f007 f9fd 	bl	8009f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 834a 	beq.w	800322a <PCD_EP_ISR_Handler+0x744>
 8002b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 8345 	bne.w	800322a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bc0:	e333      	b.n	800322a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bd4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d032      	beq.n	8002c46 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c06:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c14:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c18:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f005 fa67 	bl	80080ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	823b      	strh	r3, [r7, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	8a3a      	ldrh	r2, [r7, #16]
 8002c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c3a:	b292      	uxth	r2, r2
 8002c3c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f007 f972 	bl	8009f28 <HAL_PCD_SetupStageCallback>
 8002c44:	e2f1      	b.n	800322a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c46:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f280 82ed 	bge.w	800322a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	83fb      	strh	r3, [r7, #30]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	8bfa      	ldrh	r2, [r7, #30]
 8002c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c94:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d019      	beq.n	8002cd2 <PCD_EP_ISR_Handler+0x1ec>
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	6959      	ldr	r1, [r3, #20]
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f005 fa19 	bl	80080ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	441a      	add	r2, r3
 8002cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f007 f93d 	bl	8009f4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 82a3 	bne.w	800322a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b3e      	cmp	r3, #62	; 0x3e
 8002d0a:	d918      	bls.n	8002d3e <PCD_EP_ISR_Handler+0x258>
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	647b      	str	r3, [r7, #68]	; 0x44
 8002d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <PCD_EP_ISR_Handler+0x240>
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	3b01      	subs	r3, #1
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
 8002d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	e029      	b.n	8002d92 <PCD_EP_ISR_Handler+0x2ac>
 8002d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d112      	bne.n	8002d6c <PCD_EP_ISR_Handler+0x286>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	e012      	b.n	8002d92 <PCD_EP_ISR_Handler+0x2ac>
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	647b      	str	r3, [r7, #68]	; 0x44
 8002d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <PCD_EP_ISR_Handler+0x2a0>
 8002d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d82:	3301      	adds	r3, #1
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
 8002d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	827b      	strh	r3, [r7, #18]
 8002da4:	8a7b      	ldrh	r3, [r7, #18]
 8002da6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002daa:	827b      	strh	r3, [r7, #18]
 8002dac:	8a7b      	ldrh	r3, [r7, #18]
 8002dae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002db2:	827b      	strh	r3, [r7, #18]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	8a7b      	ldrh	r3, [r7, #18]
 8002dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	8013      	strh	r3, [r2, #0]
 8002dce:	e22c      	b.n	800322a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002de4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f280 80f6 	bge.w	8002fda <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e04:	4013      	ands	r3, r2
 8002e06:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e20:	b292      	uxth	r2, r2
 8002e22:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e24:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3c:	7b1b      	ldrb	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d123      	bne.n	8002e8a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002e6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 808e 	beq.w	8002f90 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7a:	6959      	ldr	r1, [r3, #20]
 8002e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7e:	88da      	ldrh	r2, [r3, #6]
 8002e80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e84:	f005 f933 	bl	80080ee <USB_ReadPMA>
 8002e88:	e082      	b.n	8002f90 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8c:	78db      	ldrb	r3, [r3, #3]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d10a      	bne.n	8002ea8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e92:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e96:	461a      	mov	r2, r3
 8002e98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9d3 	bl	8003246 <HAL_PCD_EP_DB_Receive>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002ea6:	e073      	b.n	8002f90 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d022      	beq.n	8002f4c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002f2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d02c      	beq.n	8002f90 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3c:	6959      	ldr	r1, [r3, #20]
 8002f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f40:	891a      	ldrh	r2, [r3, #8]
 8002f42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f46:	f005 f8d2 	bl	80080ee <USB_ReadPMA>
 8002f4a:	e021      	b.n	8002f90 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f70:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002f74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f82:	6959      	ldr	r1, [r3, #20]
 8002f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f86:	895a      	ldrh	r2, [r3, #10]
 8002f88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f8c:	f005 f8af 	bl	80080ee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f98:	441a      	add	r2, r3
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fa6:	441a      	add	r2, r3
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <PCD_EP_ISR_Handler+0x4da>
 8002fb4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d206      	bcs.n	8002fce <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f006 ffc0 	bl	8009f4c <HAL_PCD_DataOutStageCallback>
 8002fcc:	e005      	b.n	8002fda <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fbd8 	bl	800678a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8121 	beq.w	800322a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002fe8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	441a      	add	r2, r3
 8003028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800302c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003034:	b29b      	uxth	r3, r3
 8003036:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303a:	78db      	ldrb	r3, [r3, #3]
 800303c:	2b02      	cmp	r3, #2
 800303e:	f000 80a2 	beq.w	8003186 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	7b1b      	ldrb	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8093 	beq.w	8003178 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003052:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d046      	beq.n	80030ec <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d126      	bne.n	80030b4 <PCD_EP_ISR_Handler+0x5ce>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003074:	b29b      	uxth	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	4413      	add	r3, r2
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	00da      	lsls	r2, r3, #3
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	4413      	add	r3, r2
 8003088:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003098:	b29a      	uxth	r2, r3
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	e061      	b.n	8003178 <PCD_EP_ISR_Handler+0x692>
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d15d      	bne.n	8003178 <PCD_EP_ISR_Handler+0x692>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	4413      	add	r3, r2
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00da      	lsls	r2, r3, #3
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	4413      	add	r3, r2
 80030de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	2200      	movs	r2, #0
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	e045      	b.n	8003178 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d126      	bne.n	8003148 <PCD_EP_ISR_Handler+0x662>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003108:	b29b      	uxth	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310e:	4413      	add	r3, r2
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
 8003112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	00da      	lsls	r2, r3, #3
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	4413      	add	r3, r2
 800311c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800312c:	b29a      	uxth	r2, r3
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800313c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003140:	b29a      	uxth	r2, r3
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	e017      	b.n	8003178 <PCD_EP_ISR_Handler+0x692>
 8003148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314a:	785b      	ldrb	r3, [r3, #1]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d113      	bne.n	8003178 <PCD_EP_ISR_Handler+0x692>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	4413      	add	r3, r2
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	00da      	lsls	r2, r3, #3
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	4413      	add	r3, r2
 800316c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	2200      	movs	r2, #0
 8003176:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f006 feff 	bl	8009f82 <HAL_PCD_DataInStageCallback>
 8003184:	e051      	b.n	800322a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003186:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d144      	bne.n	800321c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d907      	bls.n	80031d6 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80031c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	619a      	str	r2, [r3, #24]
 80031d4:	e002      	b.n	80031dc <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f006 fec9 	bl	8009f82 <HAL_PCD_DataInStageCallback>
 80031f0:	e01b      	b.n	800322a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80031f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031fa:	441a      	add	r2, r3
 80031fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003208:	441a      	add	r2, r3
 800320a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fab8 	bl	800678a <USB_EPStartXfer>
 800321a:	e006      	b.n	800322a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800321c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003220:	461a      	mov	r2, r3
 8003222:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f917 	bl	8003458 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003232:	b29b      	uxth	r3, r3
 8003234:	b21b      	sxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	f6ff ac5a 	blt.w	8002af0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3758      	adds	r7, #88	; 0x58
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b088      	sub	sp, #32
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	4613      	mov	r3, r2
 8003252:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d07c      	beq.n	8003358 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003266:	b29b      	uxth	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	4413      	add	r3, r2
 8003278:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003282:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	8b7b      	ldrh	r3, [r7, #26]
 800328a:	429a      	cmp	r2, r3
 800328c:	d306      	bcc.n	800329c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	8b7b      	ldrh	r3, [r7, #26]
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	619a      	str	r2, [r3, #24]
 800329a:	e002      	b.n	80032a2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d123      	bne.n	80032f2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c4:	833b      	strh	r3, [r7, #24]
 80032c6:	8b3b      	ldrh	r3, [r7, #24]
 80032c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032cc:	833b      	strh	r3, [r7, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	8b3b      	ldrh	r3, [r7, #24]
 80032de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01f      	beq.n	800333c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	82fb      	strh	r3, [r7, #22]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	441a      	add	r2, r3
 8003326:	8afb      	ldrh	r3, [r7, #22]
 8003328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003338:	b29b      	uxth	r3, r3
 800333a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800333c:	8b7b      	ldrh	r3, [r7, #26]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8085 	beq.w	800344e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6959      	ldr	r1, [r3, #20]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	891a      	ldrh	r2, [r3, #8]
 8003350:	8b7b      	ldrh	r3, [r7, #26]
 8003352:	f004 fecc 	bl	80080ee <USB_ReadPMA>
 8003356:	e07a      	b.n	800344e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003360:	b29b      	uxth	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	4413      	add	r3, r2
 8003372:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800337c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	8b7b      	ldrh	r3, [r7, #26]
 8003384:	429a      	cmp	r2, r3
 8003386:	d306      	bcc.n	8003396 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	619a      	str	r2, [r3, #24]
 8003394:	e002      	b.n	800339c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d123      	bne.n	80033ec <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	83fb      	strh	r3, [r7, #30]
 80033c0:	8bfb      	ldrh	r3, [r7, #30]
 80033c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033c6:	83fb      	strh	r3, [r7, #30]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	8bfb      	ldrh	r3, [r7, #30]
 80033d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d11f      	bne.n	8003436 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003410:	83bb      	strh	r3, [r7, #28]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	8bbb      	ldrh	r3, [r7, #28]
 8003422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003436:	8b7b      	ldrh	r3, [r7, #26]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6959      	ldr	r1, [r3, #20]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	895a      	ldrh	r2, [r3, #10]
 8003448:	8b7b      	ldrh	r3, [r7, #26]
 800344a:	f004 fe50 	bl	80080ee <USB_ReadPMA>
    }
  }

  return count;
 800344e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b0a2      	sub	sp, #136	; 0x88
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 81c5 	beq.w	80037fc <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	4413      	add	r3, r2
 800348c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003496:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d907      	bls.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	619a      	str	r2, [r3, #24]
 80034b4:	e002      	b.n	80034bc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 80b9 	bne.w	8003638 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d126      	bne.n	800351c <HAL_PCD_EP_DB_Transmit+0xc4>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	4413      	add	r3, r2
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00da      	lsls	r2, r3, #3
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	4413      	add	r3, r2
 80034f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003500:	b29a      	uxth	r2, r3
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003514:	b29a      	uxth	r2, r3
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	801a      	strh	r2, [r3, #0]
 800351a:	e01a      	b.n	8003552 <HAL_PCD_EP_DB_Transmit+0xfa>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d116      	bne.n	8003552 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	4413      	add	r3, r2
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	00da      	lsls	r2, r3, #3
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	4413      	add	r3, r2
 8003546:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	2200      	movs	r2, #0
 8003550:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	785b      	ldrb	r3, [r3, #1]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d126      	bne.n	80035ae <HAL_PCD_EP_DB_Transmit+0x156>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4413      	add	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	00da      	lsls	r2, r3, #3
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4413      	add	r3, r2
 8003582:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003592:	b29a      	uxth	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	801a      	strh	r2, [r3, #0]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	e017      	b.n	80035de <HAL_PCD_EP_DB_Transmit+0x186>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d113      	bne.n	80035de <HAL_PCD_EP_DB_Transmit+0x186>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	4413      	add	r3, r2
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	00da      	lsls	r2, r3, #3
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	4413      	add	r3, r2
 80035d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2200      	movs	r2, #0
 80035dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f006 fccc 	bl	8009f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 82d2 	beq.w	8003b9a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003610:	827b      	strh	r3, [r7, #18]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	8a7b      	ldrh	r3, [r7, #18]
 8003622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800362a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003632:	b29b      	uxth	r3, r3
 8003634:	8013      	strh	r3, [r2, #0]
 8003636:	e2b0      	b.n	8003b9a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d021      	beq.n	8003686 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800368c:	2b01      	cmp	r3, #1
 800368e:	f040 8284 	bne.w	8003b9a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800369a:	441a      	add	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036a8:	441a      	add	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d309      	bcc.n	80036ce <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	621a      	str	r2, [r3, #32]
 80036cc:	e015      	b.n	80036fa <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d107      	bne.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80036d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036e4:	e009      	b.n	80036fa <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d155      	bne.n	80037ae <HAL_PCD_EP_DB_Transmit+0x356>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	4413      	add	r3, r2
 8003718:	63bb      	str	r3, [r7, #56]	; 0x38
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	00da      	lsls	r2, r3, #3
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	4413      	add	r3, r2
 8003724:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	2b3e      	cmp	r3, #62	; 0x3e
 800372e:	d916      	bls.n	800375e <HAL_PCD_EP_DB_Transmit+0x306>
 8003730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	64bb      	str	r3, [r7, #72]	; 0x48
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003742:	3b01      	subs	r3, #1
 8003744:	64bb      	str	r3, [r7, #72]	; 0x48
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003748:	b29b      	uxth	r3, r3
 800374a:	029b      	lsls	r3, r3, #10
 800374c:	b29b      	uxth	r3, r3
 800374e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003756:	b29a      	uxth	r2, r3
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	801a      	strh	r2, [r3, #0]
 800375c:	e043      	b.n	80037e6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800375e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003760:	2b00      	cmp	r3, #0
 8003762:	d112      	bne.n	800378a <HAL_PCD_EP_DB_Transmit+0x332>
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800376e:	b29a      	uxth	r2, r3
 8003770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003782:	b29a      	uxth	r2, r3
 8003784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003786:	801a      	strh	r2, [r3, #0]
 8003788:	e02d      	b.n	80037e6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_PCD_EP_DB_Transmit+0x348>
 800379a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379c:	3301      	adds	r3, #1
 800379e:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	029b      	lsls	r3, r3, #10
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e01b      	b.n	80037e6 <HAL_PCD_EP_DB_Transmit+0x38e>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d117      	bne.n	80037e6 <HAL_PCD_EP_DB_Transmit+0x38e>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ca:	4413      	add	r3, r2
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	00da      	lsls	r2, r3, #3
 80037d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d6:	4413      	add	r3, r2
 80037d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6959      	ldr	r1, [r3, #20]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	891a      	ldrh	r2, [r3, #8]
 80037f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f004 fc38 	bl	800806a <USB_WritePMA>
 80037fa:	e1ce      	b.n	8003b9a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003804:	b29b      	uxth	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	4413      	add	r3, r2
 8003816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003820:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800382c:	429a      	cmp	r2, r3
 800382e:	d307      	bcc.n	8003840 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	619a      	str	r2, [r3, #24]
 800383e:	e002      	b.n	8003846 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80c4 	bne.w	80039d8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	785b      	ldrb	r3, [r3, #1]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d126      	bne.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	66bb      	str	r3, [r7, #104]	; 0x68
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003866:	b29b      	uxth	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800386c:	4413      	add	r3, r2
 800386e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	00da      	lsls	r2, r3, #3
 8003876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003878:	4413      	add	r3, r2
 800387a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800387e:	667b      	str	r3, [r7, #100]	; 0x64
 8003880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800388a:	b29a      	uxth	r2, r3
 800388c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800389a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389e:	b29a      	uxth	r2, r3
 80038a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038a2:	801a      	strh	r2, [r3, #0]
 80038a4:	e01a      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x484>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d116      	bne.n	80038dc <HAL_PCD_EP_DB_Transmit+0x484>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	673b      	str	r3, [r7, #112]	; 0x70
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c2:	4413      	add	r3, r2
 80038c4:	673b      	str	r3, [r7, #112]	; 0x70
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	00da      	lsls	r2, r3, #3
 80038cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ce:	4413      	add	r3, r2
 80038d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	2200      	movs	r2, #0
 80038da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d12f      	bne.n	800394a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003902:	4413      	add	r3, r2
 8003904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	00da      	lsls	r2, r3, #3
 800390e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003912:	4413      	add	r3, r2
 8003914:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800391c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003928:	b29a      	uxth	r2, r3
 800392a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003940:	b29a      	uxth	r2, r3
 8003942:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	e017      	b.n	800397a <HAL_PCD_EP_DB_Transmit+0x522>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d113      	bne.n	800397a <HAL_PCD_EP_DB_Transmit+0x522>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003960:	4413      	add	r3, r2
 8003962:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00da      	lsls	r2, r3, #3
 800396a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800396c:	4413      	add	r3, r2
 800396e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003972:	67bb      	str	r3, [r7, #120]	; 0x78
 8003974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003976:	2200      	movs	r2, #0
 8003978:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4619      	mov	r1, r3
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f006 fafe 	bl	8009f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398c:	2b00      	cmp	r3, #0
 800398e:	f040 8104 	bne.w	8003b9a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	8013      	strh	r3, [r2, #0]
 80039d6:	e0e0      	b.n	8003b9a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d121      	bne.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	441a      	add	r2, r3
 8003a0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f040 80b4 	bne.w	8003b9a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a48:	441a      	add	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6a1a      	ldr	r2, [r3, #32]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d309      	bcc.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a66:	1ad2      	subs	r2, r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	621a      	str	r2, [r3, #32]
 8003a6c:	e015      	b.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a84:	e009      	b.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d155      	bne.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003abc:	4413      	add	r3, r2
 8003abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	00da      	lsls	r2, r3, #3
 8003ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac8:	4413      	add	r3, r2
 8003aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ace:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ad4:	d916      	bls.n	8003b04 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	677b      	str	r3, [r7, #116]	; 0x74
 8003adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_PCD_EP_DB_Transmit+0x694>
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	677b      	str	r3, [r7, #116]	; 0x74
 8003aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	029b      	lsls	r3, r3, #10
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	e040      	b.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d112      	bne.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e02a      	b.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	677b      	str	r3, [r7, #116]	; 0x74
 8003b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b42:	3301      	adds	r3, #1
 8003b44:	677b      	str	r3, [r7, #116]	; 0x74
 8003b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e018      	b.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d114      	bne.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b6a:	4413      	add	r3, r2
 8003b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	00da      	lsls	r2, r3, #3
 8003b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b76:	4413      	add	r3, r2
 8003b78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6959      	ldr	r1, [r3, #20]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	895a      	ldrh	r2, [r3, #10]
 8003b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f004 fa68 	bl	800806a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb4:	823b      	strh	r3, [r7, #16]
 8003bb6:	8a3b      	ldrh	r3, [r7, #16]
 8003bb8:	f083 0310 	eor.w	r3, r3, #16
 8003bbc:	823b      	strh	r3, [r7, #16]
 8003bbe:	8a3b      	ldrh	r3, [r7, #16]
 8003bc0:	f083 0320 	eor.w	r3, r3, #32
 8003bc4:	823b      	strh	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	441a      	add	r2, r3
 8003bd4:	8a3b      	ldrh	r3, [r7, #16]
 8003bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3788      	adds	r7, #136	; 0x88
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	4613      	mov	r3, r2
 8003c04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c06:	897b      	ldrh	r3, [r7, #10]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e009      	b.n	8003c3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c2a:	897a      	ldrh	r2, [r7, #10]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c3e:	893b      	ldrh	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2200      	movs	r2, #0
 8003c48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	80da      	strh	r2, [r3, #6]
 8003c52:	e00b      	b.n	8003c6c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2201      	movs	r2, #1
 8003c58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d141      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d131      	bne.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cec:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	4a46      	ldr	r2, [pc, #280]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cfc:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d04:	4a41      	ldr	r2, [pc, #260]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2232      	movs	r2, #50	; 0x32
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	4a3f      	ldr	r2, [pc, #252]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	0c9b      	lsrs	r3, r3, #18
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d22:	e002      	b.n	8003d2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d2a:	4b38      	ldr	r3, [pc, #224]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d102      	bne.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f2      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d158      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e057      	b.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d50:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d56:	4a2d      	ldr	r2, [pc, #180]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d60:	e04d      	b.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d141      	bne.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d6a:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d131      	bne.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d78:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7e:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d90:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2232      	movs	r2, #50	; 0x32
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	0c9b      	lsrs	r3, r3, #18
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dae:	e002      	b.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d102      	bne.n	8003dca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f2      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd6:	d112      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e011      	b.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dec:	e007      	b.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	20000000 	.word	0x20000000
 8003e14:	431bde83 	.word	0x431bde83

08003e18 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e1e:	f7fd fe69 	bl	8001af4 <HAL_GetTick>
 8003e22:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e24:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a38      	ldr	r2, [pc, #224]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fd fe5f 	bl	8001af4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e05f      	b.n	8003f04 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8003e50:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e5a:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e5c:	f7fd fe4a 	bl	8001af4 <HAL_GetTick>
 8003e60:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6a:	f7fd fe43 	bl	8001af4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e041      	b.n	8003f04 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003e8c:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_DeInit+0xf8>)
 8003e8e:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <HAL_RCC_DeInit+0xfc>)
 8003e90:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e92:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <HAL_RCC_DeInit+0x100>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fde0 	bl	8001a5c <HAL_InitTick>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e02e      	b.n	8003f04 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003ea6:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eac:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003eb6:	f7fd fe1d 	bl	8001af4 <HAL_GetTick>
 8003eba:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd fe19 	bl	8001af4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e019      	b.n	8003f04 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003ede:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <HAL_RCC_DeInit+0xf4>)
 8003efa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	20000000 	.word	0x20000000
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	20000004 	.word	0x20000004

08003f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e306      	b.n	800453c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d075      	beq.n	8004026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3a:	4b97      	ldr	r3, [pc, #604]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f44:	4b94      	ldr	r3, [pc, #592]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3e>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_OscConfig+0x44>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	4b8d      	ldr	r3, [pc, #564]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x108>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d157      	bne.n	8004024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e2e1      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x74>
 8003f82:	4b85      	ldr	r3, [pc, #532]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a84      	ldr	r2, [pc, #528]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x98>
 8003f9a:	4b7f      	ldr	r3, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7e      	ldr	r2, [pc, #504]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7b      	ldr	r2, [pc, #492]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003fb4:	4b78      	ldr	r3, [pc, #480]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a77      	ldr	r2, [pc, #476]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b75      	ldr	r3, [pc, #468]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a74      	ldr	r2, [pc, #464]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fd8e 	bl	8001af4 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fd fd8a 	bl	8001af4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e2a6      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xc0>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fd7a 	bl	8001af4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004004:	f7fd fd76 	bl	8001af4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e292      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	4b60      	ldr	r3, [pc, #384]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0xe8>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004032:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800403c:	4b56      	ldr	r3, [pc, #344]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d102      	bne.n	8004052 <HAL_RCC_OscConfig+0x136>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d002      	beq.n	8004058 <HAL_RCC_OscConfig+0x13c>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11f      	bne.n	8004098 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004058:	4b4f      	ldr	r3, [pc, #316]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x154>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e265      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b49      	ldr	r3, [pc, #292]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	4946      	ldr	r1, [pc, #280]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004084:	4b45      	ldr	r3, [pc, #276]	; (800419c <HAL_RCC_OscConfig+0x280>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd fce7 	bl	8001a5c <HAL_InitTick>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d043      	beq.n	800411c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e251      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d023      	beq.n	80040e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a3c      	ldr	r2, [pc, #240]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd fd22 	bl	8001af4 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fd fd1e 	bl	8001af4 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e23a      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	492d      	ldr	r1, [pc, #180]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
 80040e6:	e01a      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fcfe 	bl	8001af4 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fc:	f7fd fcfa 	bl	8001af4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e216      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800410e:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x1e0>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d041      	beq.n	80041ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004138:	4a17      	ldr	r2, [pc, #92]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fd fcd7 	bl	8001af4 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414a:	f7fd fcd3 	bl	8001af4 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1ef      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ef      	beq.n	800414a <HAL_RCC_OscConfig+0x22e>
 800416a:	e020      	b.n	80041ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fcba 	bl	8001af4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004182:	e00d      	b.n	80041a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fcb6 	bl	8001af4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d906      	bls.n	80041a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1d2      	b.n	800453c <HAL_RCC_OscConfig+0x620>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041a0:	4b8c      	ldr	r3, [pc, #560]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ea      	bne.n	8004184 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80a6 	beq.w	8004308 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041c0:	4b84      	ldr	r3, [pc, #528]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2b4>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x2b6>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4b7f      	ldr	r3, [pc, #508]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4a7e      	ldr	r2, [pc, #504]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
 80041e2:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4b79      	ldr	r3, [pc, #484]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fe:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a75      	ldr	r2, [pc, #468]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fd fc73 	bl	8001af4 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fd fc6f 	bl	8001af4 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e18b      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d108      	bne.n	800424a <HAL_RCC_OscConfig+0x32e>
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004248:	e024      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d110      	bne.n	8004274 <HAL_RCC_OscConfig+0x358>
 8004252:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004272:	e00f      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 8004274:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a56      	ldr	r2, [pc, #344]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d016      	beq.n	80042ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd fc2a 	bl	8001af4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fd fc26 	bl	8001af4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e140      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ba:	4b46      	ldr	r3, [pc, #280]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ed      	beq.n	80042a4 <HAL_RCC_OscConfig+0x388>
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fd fc13 	bl	8001af4 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd fc0f 	bl	8001af4 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e129      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e8:	4b3a      	ldr	r3, [pc, #232]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ed      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a34      	ldr	r2, [pc, #208]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d03c      	beq.n	800438e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01c      	beq.n	8004356 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800431c:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800431e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004322:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fd fbe2 	bl	8001af4 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004334:	f7fd fbde 	bl	8001af4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0fa      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ef      	beq.n	8004334 <HAL_RCC_OscConfig+0x418>
 8004354:	e01b      	b.n	800438e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fd fbc5 	bl	8001af4 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436e:	f7fd fbc1 	bl	8001af4 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0dd      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ef      	bne.n	800436e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80d1 	beq.w	800453a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	f000 808b 	beq.w	80044bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d15e      	bne.n	800446c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80043b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd fb9b 	bl	8001af4 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c0:	e00c      	b.n	80043dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fd fb97 	bl	8001af4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d905      	bls.n	80043dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0b3      	b.n	800453c <HAL_RCC_OscConfig+0x620>
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ec      	bne.n	80043c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e8:	4b56      	ldr	r3, [pc, #344]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4b56      	ldr	r3, [pc, #344]	; (8004548 <HAL_RCC_OscConfig+0x62c>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6a11      	ldr	r1, [r2, #32]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f8:	3a01      	subs	r2, #1
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004402:	0212      	lsls	r2, r2, #8
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	3a01      	subs	r2, #1
 800440e:	0552      	lsls	r2, r2, #21
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	3a01      	subs	r2, #1
 800441a:	0652      	lsls	r2, r2, #25
 800441c:	4311      	orrs	r1, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004422:	06d2      	lsls	r2, r2, #27
 8004424:	430a      	orrs	r2, r1
 8004426:	4947      	ldr	r1, [pc, #284]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004428:	4313      	orrs	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a44      	ldr	r2, [pc, #272]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004436:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a41      	ldr	r2, [pc, #260]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800443e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004442:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd fb56 	bl	8001af4 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fd fb52 	bl	8001af4 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e06e      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445e:	4b39      	ldr	r3, [pc, #228]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x530>
 800446a:	e066      	b.n	800453a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a34      	ldr	r2, [pc, #208]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a31      	ldr	r2, [pc, #196]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800448a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd fb2e 	bl	8001af4 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fd fb2a 	bl	8001af4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e046      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x580>
 80044ba:	e03e      	b.n	800453a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e039      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0203 	and.w	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d12c      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	3b01      	subs	r3, #1
 80044e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d123      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d11b      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d113      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	3b01      	subs	r3, #1
 800451c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d109      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	3b01      	subs	r3, #1
 8004530:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	019f800c 	.word	0x019f800c

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e11e      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b91      	ldr	r3, [pc, #580]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 020f 	bic.w	r2, r3, #15
 800457a:	498c      	ldr	r1, [pc, #560]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b8a      	ldr	r3, [pc, #552]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e106      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d073      	beq.n	8004688 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d129      	bne.n	80045fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a8:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0f4      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045b8:	f000 f966 	bl	8004888 <RCC_GetSysClockFreqFromPLLSource>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_ClockConfig+0x268>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d93f      	bls.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045c6:	4b7a      	ldr	r3, [pc, #488]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d033      	beq.n	8004646 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d12f      	bne.n	8004646 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045e6:	4b72      	ldr	r3, [pc, #456]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ee:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e024      	b.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d107      	bne.n	8004614 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0c6      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0be      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004624:	f000 f8ce 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8004628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <HAL_RCC_ClockConfig+0x268>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d909      	bls.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	4a5d      	ldr	r2, [pc, #372]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4957      	ldr	r1, [pc, #348]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004658:	f7fd fa4c 	bl	8001af4 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fd fa48 	bl	8001af4 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e095      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a42      	ldr	r2, [pc, #264]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046b8:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046c0:	4a3b      	ldr	r2, [pc, #236]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4936      	ldr	r1, [pc, #216]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
 80046da:	e008      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d105      	bne.n	80046ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046e2:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d21d      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 020f 	bic.w	r2, r3, #15
 8004704:	4929      	ldr	r1, [pc, #164]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800470c:	f7fd f9f2 	bl	8001af4 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fd f9ee 	bl	8001af4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e03b      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d1ed      	bne.n	8004714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4917      	ldr	r1, [pc, #92]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490f      	ldr	r1, [pc, #60]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004776:	f000 f825 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490c      	ldr	r1, [pc, #48]	; (80047b8 <HAL_RCC_ClockConfig+0x26c>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x270>)
 8004794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x274>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd f95e 	bl	8001a5c <HAL_InitTick>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40021000 	.word	0x40021000
 80047b4:	04c4b400 	.word	0x04c4b400
 80047b8:	0800d290 	.word	0x0800d290
 80047bc:	20000000 	.word	0x20000000
 80047c0:	20000004 	.word	0x20000004

080047c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047ca:	4b2c      	ldr	r3, [pc, #176]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d102      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e047      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d102      	bne.n	80047ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e8:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e03e      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d136      	bne.n	8004868 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	3301      	adds	r3, #1
 8004810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004818:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <HAL_RCC_GetSysClockFreq+0xc0>)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004822:	68d2      	ldr	r2, [r2, #12]
 8004824:	0a12      	lsrs	r2, r2, #8
 8004826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	617b      	str	r3, [r7, #20]
      break;
 8004830:	e00c      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	0a12      	lsrs	r2, r2, #8
 8004840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]
      break;
 800484a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0e5b      	lsrs	r3, r3, #25
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e001      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800486c:	693b      	ldr	r3, [r7, #16]
}
 800486e:	4618      	mov	r0, r3
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200

08004888 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d10c      	bne.n	80048c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048b6:	68d2      	ldr	r2, [r2, #12]
 80048b8:	0a12      	lsrs	r2, r2, #8
 80048ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	617b      	str	r3, [r7, #20]
    break;
 80048c4:	e00c      	b.n	80048e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c6:	4a12      	ldr	r2, [pc, #72]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d0:	68d2      	ldr	r2, [r2, #12]
 80048d2:	0a12      	lsrs	r2, r2, #8
 80048d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	617b      	str	r3, [r7, #20]
    break;
 80048de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	0e5b      	lsrs	r3, r3, #25
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	3301      	adds	r3, #1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048fa:	687b      	ldr	r3, [r7, #4]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	40021000 	.word	0x40021000
 800490c:	007a1200 	.word	0x007a1200
 8004910:	00f42400 	.word	0x00f42400

08004914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800491c:	2300      	movs	r3, #0
 800491e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004920:	2300      	movs	r3, #0
 8004922:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8098 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	4b43      	ldr	r3, [pc, #268]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10d      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	4a3f      	ldr	r2, [pc, #252]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	6593      	str	r3, [r2, #88]	; 0x58
 800494e:	4b3d      	ldr	r3, [pc, #244]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800495e:	4b3a      	ldr	r3, [pc, #232]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004968:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800496a:	f7fd f8c3 	bl	8001af4 <HAL_GetTick>
 800496e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004970:	e009      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004972:	f7fd f8bf 	bl	8001af4 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d902      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	74fb      	strb	r3, [r7, #19]
        break;
 8004984:	e005      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004986:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ef      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d159      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004998:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01e      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d019      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b4:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049c0:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049d0:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fd f87f 	bl	8001af4 <HAL_GetTick>
 80049f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f8:	e00b      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fd f87b 	bl	8001af4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d902      	bls.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a10:	e006      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ec      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a3c:	e008      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	74bb      	strb	r3, [r7, #18]
 8004a42:	e005      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a50:	7c7b      	ldrb	r3, [r7, #17]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4ba7      	ldr	r3, [pc, #668]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	4aa6      	ldr	r2, [pc, #664]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6e:	4ba1      	ldr	r3, [pc, #644]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f023 0203 	bic.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	499d      	ldr	r1, [pc, #628]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a90:	4b98      	ldr	r3, [pc, #608]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 020c 	bic.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4995      	ldr	r1, [pc, #596]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab2:	4b90      	ldr	r3, [pc, #576]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	498c      	ldr	r1, [pc, #560]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad4:	4b87      	ldr	r3, [pc, #540]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	4984      	ldr	r1, [pc, #528]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	497b      	ldr	r1, [pc, #492]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b18:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	4973      	ldr	r1, [pc, #460]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b3a:	4b6e      	ldr	r3, [pc, #440]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	496a      	ldr	r1, [pc, #424]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b5c:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	4962      	ldr	r1, [pc, #392]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b7e:	4b5d      	ldr	r3, [pc, #372]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	4959      	ldr	r1, [pc, #356]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ba0:	4b54      	ldr	r3, [pc, #336]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba6:	f023 0203 	bic.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	4951      	ldr	r1, [pc, #324]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bc2:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	4948      	ldr	r1, [pc, #288]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d015      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	4940      	ldr	r1, [pc, #256]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c02:	d105      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a3a      	ldr	r2, [pc, #232]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d015      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c1c:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	4932      	ldr	r1, [pc, #200]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a2c      	ldr	r2, [pc, #176]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c54:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	4924      	ldr	r1, [pc, #144]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c74:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d015      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	4916      	ldr	r1, [pc, #88]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d019      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	4908      	ldr	r1, [pc, #32]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce2:	d109      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a02      	ldr	r2, [pc, #8]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cee:	60d3      	str	r3, [r2, #12]
 8004cf0:	e002      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d04:	4b29      	ldr	r3, [pc, #164]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	4926      	ldr	r1, [pc, #152]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d22:	d105      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d24:	4b21      	ldr	r3, [pc, #132]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	4918      	ldr	r1, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d5c:	4b13      	ldr	r3, [pc, #76]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a12      	ldr	r2, [pc, #72]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d66:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d74:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d82:	490a      	ldr	r1, [pc, #40]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a04      	ldr	r2, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e09d      	b.n	8004efe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dd2:	d009      	beq.n	8004de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
 8004dda:	e005      	b.n	8004de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fc9a 	bl	800173c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e28:	d902      	bls.n	8004e30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e002      	b.n	8004e36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e3e:	d007      	beq.n	8004e50 <HAL_SPI_Init+0xa0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	ea42 0103 	orr.w	r1, r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	0c1b      	lsrs	r3, r3, #16
 8004eac:	f003 0204 	and.w	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ecc:	ea42 0103 	orr.w	r1, r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b088      	sub	sp, #32
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_SPI_Transmit+0x22>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e158      	b.n	80051da <HAL_SPI_Transmit+0x2d4>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f30:	f7fc fde0 	bl	8001af4 <HAL_GetTick>
 8004f34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
 8004f48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f4a:	e13d      	b.n	80051c8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <HAL_SPI_Transmit+0x52>
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f5c:	e134      	b.n	80051c8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2203      	movs	r2, #3
 8004f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa8:	d10f      	bne.n	8004fca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d007      	beq.n	8004fe8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ff0:	d94b      	bls.n	800508a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_SPI_Transmit+0xfa>
 8004ffa:	8afb      	ldrh	r3, [r7, #22]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d13e      	bne.n	800507e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005024:	e02b      	b.n	800507e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b02      	cmp	r3, #2
 8005032:	d112      	bne.n	800505a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005058:	e011      	b.n	800507e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800505a:	f7fc fd4b 	bl	8001af4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d803      	bhi.n	8005072 <HAL_SPI_Transmit+0x16c>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d102      	bne.n	8005078 <HAL_SPI_Transmit+0x172>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800507c:	e0a4      	b.n	80051c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ce      	bne.n	8005026 <HAL_SPI_Transmit+0x120>
 8005088:	e07c      	b.n	8005184 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Transmit+0x192>
 8005092:	8afb      	ldrh	r3, [r7, #22]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d170      	bne.n	800517a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d912      	bls.n	80050c8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	881a      	ldrh	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	1c9a      	adds	r2, r3, #2
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b02      	subs	r3, #2
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050c6:	e058      	b.n	800517a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	7812      	ldrb	r2, [r2, #0]
 80050d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050ee:	e044      	b.n	800517a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d12b      	bne.n	8005156 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d912      	bls.n	800512e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b02      	subs	r3, #2
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800512c:	e025      	b.n	800517a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	330c      	adds	r3, #12
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005154:	e011      	b.n	800517a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005156:	f7fc fccd 	bl	8001af4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d803      	bhi.n	800516e <HAL_SPI_Transmit+0x268>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d102      	bne.n	8005174 <HAL_SPI_Transmit+0x26e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005178:	e026      	b.n	80051c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1b5      	bne.n	80050f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fce3 	bl	8005b54 <SPI_EndRxTxTransaction>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e000      	b.n	80051c8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80051c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b088      	sub	sp, #32
 80051e6:	af02      	add	r7, sp, #8
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fe:	d112      	bne.n	8005226 <HAL_SPI_Receive+0x44>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10e      	bne.n	8005226 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2204      	movs	r2, #4
 800520c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f910 	bl	8005442 <HAL_SPI_TransmitReceive>
 8005222:	4603      	mov	r3, r0
 8005224:	e109      	b.n	800543a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_SPI_Receive+0x52>
 8005230:	2302      	movs	r3, #2
 8005232:	e102      	b.n	800543a <HAL_SPI_Receive+0x258>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523c:	f7fc fc5a 	bl	8001af4 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	d002      	beq.n	8005254 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800524e:	2302      	movs	r3, #2
 8005250:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005252:	e0e9      	b.n	8005428 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_SPI_Receive+0x7e>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005264:	e0e0      	b.n	8005428 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2204      	movs	r2, #4
 800526a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	88fa      	ldrh	r2, [r7, #6]
 8005286:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052b0:	d908      	bls.n	80052c4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	e007      	b.n	80052d4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	d10f      	bne.n	80052fe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d007      	beq.n	800531c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005324:	d867      	bhi.n	80053f6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005326:	e030      	b.n	800538a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	d117      	bne.n	8005366 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f103 020c 	add.w	r2, r3, #12
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005364:	e011      	b.n	800538a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005366:	f7fc fbc5 	bl	8001af4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d803      	bhi.n	800537e <HAL_SPI_Receive+0x19c>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d102      	bne.n	8005384 <HAL_SPI_Receive+0x1a2>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005388:	e04e      	b.n	8005428 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1c8      	bne.n	8005328 <HAL_SPI_Receive+0x146>
 8005396:	e034      	b.n	8005402 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d115      	bne.n	80053d2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	b292      	uxth	r2, r2
 80053b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	1c9a      	adds	r2, r3, #2
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80053d0:	e011      	b.n	80053f6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d2:	f7fc fb8f 	bl	8001af4 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d803      	bhi.n	80053ea <HAL_SPI_Receive+0x208>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Receive+0x20e>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053f4:	e018      	b.n	8005428 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1ca      	bne.n	8005398 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fb4c 	bl	8005aa4 <SPI_EndRxTransaction>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	75fb      	strb	r3, [r7, #23]
 8005424:	e000      	b.n	8005428 <HAL_SPI_Receive+0x246>
  }

error :
 8005426:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b08a      	sub	sp, #40	; 0x28
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005450:	2301      	movs	r3, #1
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x26>
 8005464:	2302      	movs	r3, #2
 8005466:	e1fb      	b.n	8005860 <HAL_SPI_TransmitReceive+0x41e>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005470:	f7fc fb40 	bl	8001af4 <HAL_GetTick>
 8005474:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800547c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800548c:	7efb      	ldrb	r3, [r7, #27]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d00e      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x6e>
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005498:	d106      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x66>
 80054a2:	7efb      	ldrb	r3, [r7, #27]
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d003      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054ae:	e1cd      	b.n	800584c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x80>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x80>
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054c8:	e1c0      	b.n	800584c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d003      	beq.n	80054de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2205      	movs	r2, #5
 80054da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	887a      	ldrh	r2, [r7, #2]
 80054ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	887a      	ldrh	r2, [r7, #2]
 80054f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	887a      	ldrh	r2, [r7, #2]
 800550a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005520:	d802      	bhi.n	8005528 <HAL_SPI_TransmitReceive+0xe6>
 8005522:	8a3b      	ldrh	r3, [r7, #16]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d908      	bls.n	800553a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005536:	605a      	str	r2, [r3, #4]
 8005538:	e007      	b.n	800554a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005548:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d007      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005570:	d97c      	bls.n	800566c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x13e>
 800557a:	8a7b      	ldrh	r3, [r7, #18]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d169      	bne.n	8005654 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	881a      	ldrh	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	1c9a      	adds	r2, r3, #2
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a4:	e056      	b.n	8005654 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d11b      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x1aa>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_SPI_TransmitReceive+0x1aa>
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d113      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	881a      	ldrh	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d11c      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x1f2>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d016      	beq.n	8005634 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	b292      	uxth	r2, r2
 8005612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	1c9a      	adds	r2, r3, #2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005630:	2301      	movs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005634:	f7fc fa5e 	bl	8001af4 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005640:	429a      	cmp	r2, r3
 8005642:	d807      	bhi.n	8005654 <HAL_SPI_TransmitReceive+0x212>
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d003      	beq.n	8005654 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005652:	e0fb      	b.n	800584c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1a3      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x164>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d19d      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x164>
 800566a:	e0df      	b.n	800582c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_SPI_TransmitReceive+0x23a>
 8005674:	8a7b      	ldrh	r3, [r7, #18]
 8005676:	2b01      	cmp	r3, #1
 8005678:	f040 80cb 	bne.w	8005812 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d912      	bls.n	80056ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b02      	subs	r3, #2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056aa:	e0b2      	b.n	8005812 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d2:	e09e      	b.n	8005812 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d134      	bne.n	800574c <HAL_SPI_TransmitReceive+0x30a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d02f      	beq.n	800574c <HAL_SPI_TransmitReceive+0x30a>
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d12c      	bne.n	800574c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d912      	bls.n	8005722 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	881a      	ldrh	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	1c9a      	adds	r2, r3, #2
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b02      	subs	r3, #2
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005720:	e012      	b.n	8005748 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	7812      	ldrb	r2, [r2, #0]
 800572e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b01      	cmp	r3, #1
 8005758:	d148      	bne.n	80057ec <HAL_SPI_TransmitReceive+0x3aa>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d042      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b01      	cmp	r3, #1
 8005770:	d923      	bls.n	80057ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	b292      	uxth	r2, r2
 800577e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	1c9a      	adds	r2, r3, #2
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b02      	subs	r3, #2
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d81f      	bhi.n	80057e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	e016      	b.n	80057e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f103 020c 	add.w	r2, r3, #12
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057e8:	2301      	movs	r3, #1
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057ec:	f7fc f982 	bl	8001af4 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d803      	bhi.n	8005804 <HAL_SPI_TransmitReceive+0x3c2>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d102      	bne.n	800580a <HAL_SPI_TransmitReceive+0x3c8>
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	2b00      	cmp	r3, #0
 8005808:	d103      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005810:	e01c      	b.n	800584c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	f47f af5b 	bne.w	80056d4 <HAL_SPI_TransmitReceive+0x292>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	f47f af54 	bne.w	80056d4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f98f 	bl	8005b54 <SPI_EndRxTxTransaction>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	661a      	str	r2, [r3, #96]	; 0x60
 8005848:	e000      	b.n	800584c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800584a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800585c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005860:	4618      	mov	r0, r3
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4613      	mov	r3, r2
 8005876:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005878:	f7fc f93c 	bl	8001af4 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	4413      	add	r3, r2
 8005886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005888:	f7fc f934 	bl	8001af4 <HAL_GetTick>
 800588c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800588e:	4b39      	ldr	r3, [pc, #228]	; (8005974 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	015b      	lsls	r3, r3, #5
 8005894:	0d1b      	lsrs	r3, r3, #20
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	fb02 f303 	mul.w	r3, r2, r3
 800589c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800589e:	e054      	b.n	800594a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d050      	beq.n	800594a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058a8:	f7fc f924 	bl	8001af4 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d902      	bls.n	80058be <SPI_WaitFlagStateUntilTimeout+0x56>
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d13d      	bne.n	800593a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d6:	d111      	bne.n	80058fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e0:	d004      	beq.n	80058ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ea:	d107      	bne.n	80058fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005904:	d10f      	bne.n	8005926 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e017      	b.n	800596a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3b01      	subs	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	429a      	cmp	r2, r3
 8005958:	bf0c      	ite	eq
 800595a:	2301      	moveq	r3, #1
 800595c:	2300      	movne	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	429a      	cmp	r2, r3
 8005966:	d19b      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000000 	.word	0x20000000

08005978 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800598a:	f7fc f8b3 	bl	8001af4 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	4413      	add	r3, r2
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800599a:	f7fc f8ab 	bl	8001af4 <HAL_GetTick>
 800599e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059a8:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00da      	lsls	r2, r3, #3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	0d1b      	lsrs	r3, r3, #20
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80059c0:	e060      	b.n	8005a84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059c8:	d107      	bne.n	80059da <SPI_WaitFifoStateUntilTimeout+0x62>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d050      	beq.n	8005a84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059e2:	f7fc f887 	bl	8001af4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d902      	bls.n	80059f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d13d      	bne.n	8005a74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a10:	d111      	bne.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a1a:	d004      	beq.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d107      	bne.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3e:	d10f      	bne.n	8005a60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e010      	b.n	8005a96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d196      	bne.n	80059c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3728      	adds	r7, #40	; 0x28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000000 	.word	0x20000000

08005aa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ab8:	d111      	bne.n	8005ade <SPI_EndRxTransaction+0x3a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d004      	beq.n	8005ace <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005acc:	d107      	bne.n	8005ade <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff febd 	bl	8005868 <SPI_WaitFlagStateUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e023      	b.n	8005b4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0c:	d11d      	bne.n	8005b4a <SPI_EndRxTransaction+0xa6>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b16:	d004      	beq.n	8005b22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b20:	d113      	bne.n	8005b4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff ff22 	bl	8005978 <SPI_WaitFifoStateUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e000      	b.n	8005b4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff ff03 	bl	8005978 <SPI_WaitFifoStateUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e027      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fe68 	bl	8005868 <SPI_WaitFlagStateUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba2:	f043 0220 	orr.w	r2, r3, #32
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e014      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff fedc 	bl	8005978 <SPI_WaitFifoStateUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e000      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bf0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005bf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c16:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005c1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c44:	b084      	sub	sp, #16
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	f107 0014 	add.w	r0, r7, #20
 8005c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	b004      	add	sp, #16
 8005c84:	4770      	bx	lr
	...

08005c88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b09d      	sub	sp, #116	; 0x74
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	78db      	ldrb	r3, [r3, #3]
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d81f      	bhi.n	8005cfa <USB_ActivateEndpoint+0x72>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USB_ActivateEndpoint+0x38>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	08005d03 	.word	0x08005d03
 8005ccc:	08005cdf 	.word	0x08005cdf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005cd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cdc:	e012      	b.n	8005d04 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cde:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ce2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005ce6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cea:	e00b      	b.n	8005d04 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005cec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cf4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cf8:	e004      	b.n	8005d04 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005d00:	e000      	b.n	8005d04 <USB_ActivateEndpoint+0x7c>
      break;
 8005d02:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	b21b      	sxth	r3, r3
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	b21a      	sxth	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b21b      	sxth	r3, r3
 8005d46:	4313      	orrs	r3, r2
 8005d48:	b21b      	sxth	r3, r3
 8005d4a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	7b1b      	ldrb	r3, [r3, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f040 8149 	bne.w	800600c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8084 	beq.w	8005e8c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	4413      	add	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	00da      	lsls	r2, r3, #3
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	88db      	ldrh	r3, [r3, #6]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	827b      	strh	r3, [r7, #18]
 8005dc6:	8a7b      	ldrh	r3, [r7, #18]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01b      	beq.n	8005e08 <USB_ActivateEndpoint+0x180>
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	823b      	strh	r3, [r7, #16]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8a3b      	ldrh	r3, [r7, #16]
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d020      	beq.n	8005e52 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	81bb      	strh	r3, [r7, #12]
 8005e28:	89bb      	ldrh	r3, [r7, #12]
 8005e2a:	f083 0320 	eor.w	r3, r3, #32
 8005e2e:	81bb      	strh	r3, [r7, #12]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	89bb      	ldrh	r3, [r7, #12]
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
 8005e50:	e2a6      	b.n	80063a0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e68:	81fb      	strh	r3, [r7, #14]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	89fb      	ldrh	r3, [r7, #14]
 8005e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	8013      	strh	r3, [r2, #0]
 8005e8a:	e289      	b.n	80063a0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	4413      	add	r3, r2
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	00da      	lsls	r2, r3, #3
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	88db      	ldrh	r3, [r3, #6]
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	4413      	add	r3, r2
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00da      	lsls	r2, r3, #3
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8005eea:	d918      	bls.n	8005f1e <USB_ActivateEndpoint+0x296>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <USB_ActivateEndpoint+0x27e>
 8005f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f02:	3b01      	subs	r3, #1
 8005f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	e029      	b.n	8005f72 <USB_ActivateEndpoint+0x2ea>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d112      	bne.n	8005f4c <USB_ActivateEndpoint+0x2c4>
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e012      	b.n	8005f72 <USB_ActivateEndpoint+0x2ea>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <USB_ActivateEndpoint+0x2de>
 8005f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f62:	3301      	adds	r3, #1
 8005f64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	029b      	lsls	r3, r3, #10
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01b      	beq.n	8005fc2 <USB_ActivateEndpoint+0x33a>
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	843b      	strh	r3, [r7, #32]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	441a      	add	r2, r3
 8005fac:	8c3b      	ldrh	r3, [r7, #32]
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	83fb      	strh	r3, [r7, #30]
 8005fda:	8bfb      	ldrh	r3, [r7, #30]
 8005fdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fe0:	83fb      	strh	r3, [r7, #30]
 8005fe2:	8bfb      	ldrh	r3, [r7, #30]
 8005fe4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fe8:	83fb      	strh	r3, [r7, #30]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	8bfb      	ldrh	r3, [r7, #30]
 8005ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]
 800600a:	e1c9      	b.n	80063a0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	78db      	ldrb	r3, [r3, #3]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d11e      	bne.n	8006052 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	441a      	add	r2, r3
 8006038:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800603c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006044:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604c:	b29b      	uxth	r3, r3
 800604e:	8013      	strh	r3, [r2, #0]
 8006050:	e01d      	b.n	800608e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006098:	b29b      	uxth	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800609e:	4413      	add	r3, r2
 80060a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	00da      	lsls	r2, r3, #3
 80060a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	891b      	ldrh	r3, [r3, #8]
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	657b      	str	r3, [r7, #84]	; 0x54
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d2:	4413      	add	r3, r2
 80060d4:	657b      	str	r3, [r7, #84]	; 0x54
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	00da      	lsls	r2, r3, #3
 80060dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060de:	4413      	add	r3, r2
 80060e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e4:	653b      	str	r3, [r7, #80]	; 0x50
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	895b      	ldrh	r3, [r3, #10]
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 8093 	bne.w	8006226 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <USB_ActivateEndpoint+0x4cc>
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800614c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006162:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01b      	beq.n	80061a4 <USB_ActivateEndpoint+0x51c>
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006182:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80061bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061c2:	873b      	strh	r3, [r7, #56]	; 0x38
 80061c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006202:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	b29b      	uxth	r3, r3
 8006222:	8013      	strh	r3, [r2, #0]
 8006224:	e0bc      	b.n	80063a0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006236:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800623a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01d      	beq.n	800627e <USB_ActivateEndpoint+0x5f6>
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006258:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800626a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627a:	b29b      	uxth	r3, r3
 800627c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800628e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01d      	beq.n	80062d6 <USB_ActivateEndpoint+0x64e>
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80062c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	78db      	ldrb	r3, [r3, #3]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d024      	beq.n	8006328 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062fc:	f083 0320 	eor.w	r3, r3, #32
 8006300:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	441a      	add	r2, r3
 800630e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006322:	b29b      	uxth	r3, r3
 8006324:	8013      	strh	r3, [r2, #0]
 8006326:	e01d      	b.n	8006364 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006360:	b29b      	uxth	r3, r3
 8006362:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80063a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3774      	adds	r7, #116	; 0x74
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b08d      	sub	sp, #52	; 0x34
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	7b1b      	ldrb	r3, [r3, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 808e 	bne.w	80064e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d044      	beq.n	8006456 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	81bb      	strh	r3, [r7, #12]
 80063da:	89bb      	ldrh	r3, [r7, #12]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01b      	beq.n	800641c <USB_DeactivateEndpoint+0x6c>
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	817b      	strh	r3, [r7, #10]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	897b      	ldrh	r3, [r7, #10]
 8006408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006418:	b29b      	uxth	r3, r3
 800641a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006432:	813b      	strh	r3, [r7, #8]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	441a      	add	r2, r3
 800643e:	893b      	ldrh	r3, [r7, #8]
 8006440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	b29b      	uxth	r3, r3
 8006452:	8013      	strh	r3, [r2, #0]
 8006454:	e192      	b.n	800677c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	827b      	strh	r3, [r7, #18]
 8006464:	8a7b      	ldrh	r3, [r7, #18]
 8006466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01b      	beq.n	80064a6 <USB_DeactivateEndpoint+0xf6>
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	823b      	strh	r3, [r7, #16]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	441a      	add	r2, r3
 8006490:	8a3b      	ldrh	r3, [r7, #16]
 8006492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800649e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064bc:	81fb      	strh	r3, [r7, #14]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	441a      	add	r2, r3
 80064c8:	89fb      	ldrh	r3, [r7, #14]
 80064ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064da:	b29b      	uxth	r3, r3
 80064dc:	8013      	strh	r3, [r2, #0]
 80064de:	e14d      	b.n	800677c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 80a5 	bne.w	8006634 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	843b      	strh	r3, [r7, #32]
 80064f8:	8c3b      	ldrh	r3, [r7, #32]
 80064fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01b      	beq.n	800653a <USB_DeactivateEndpoint+0x18a>
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006518:	83fb      	strh	r3, [r7, #30]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	8bfb      	ldrh	r3, [r7, #30]
 8006526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	83bb      	strh	r3, [r7, #28]
 8006548:	8bbb      	ldrh	r3, [r7, #28]
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01b      	beq.n	800658a <USB_DeactivateEndpoint+0x1da>
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006568:	837b      	strh	r3, [r7, #26]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	441a      	add	r2, r3
 8006574:	8b7b      	ldrh	r3, [r7, #26]
 8006576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006586:	b29b      	uxth	r3, r3
 8006588:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a0:	833b      	strh	r3, [r7, #24]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	8b3b      	ldrh	r3, [r7, #24]
 80065ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065be:	b29b      	uxth	r3, r3
 80065c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	82fb      	strh	r3, [r7, #22]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	8afb      	ldrh	r3, [r7, #22]
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	82bb      	strh	r3, [r7, #20]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	441a      	add	r2, r3
 800661c:	8abb      	ldrh	r3, [r7, #20]
 800661e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662e:	b29b      	uxth	r3, r3
 8006630:	8013      	strh	r3, [r2, #0]
 8006632:	e0a3      	b.n	800677c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006642:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <USB_DeactivateEndpoint+0x2d4>
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800667c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006692:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01b      	beq.n	80066d4 <USB_DeactivateEndpoint+0x324>
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	441a      	add	r2, r3
 80066be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	b29b      	uxth	r3, r3
 800670a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006722:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	441a      	add	r2, r3
 800672e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800673c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006740:	b29b      	uxth	r3, r3
 8006742:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	847b      	strh	r3, [r7, #34]	; 0x22
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	441a      	add	r2, r3
 8006766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006778:	b29b      	uxth	r3, r3
 800677a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3734      	adds	r7, #52	; 0x34
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b0c2      	sub	sp, #264	; 0x108
 800678e:	af00      	add	r7, sp, #0
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006798:	6018      	str	r0, [r3, #0]
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f040 867b 	bne.w	80074ac <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d908      	bls.n	80067e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067e2:	e007      	b.n	80067f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	7b1b      	ldrb	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d13a      	bne.n	800687a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6959      	ldr	r1, [r3, #20]
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	88da      	ldrh	r2, [r3, #6]
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006820:	b29b      	uxth	r3, r3
 8006822:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006826:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	f001 fc1d 	bl	800806a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	00da      	lsls	r2, r3, #3
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	f000 bde3 	b.w	8007440 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	78db      	ldrb	r3, [r3, #3]
 8006886:	2b02      	cmp	r3, #2
 8006888:	f040 843a 	bne.w	8007100 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a1a      	ldr	r2, [r3, #32]
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	f240 83b7 	bls.w	8007018 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6a1a      	ldr	r2, [r3, #32]
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 81b3 	beq.w	8006cb2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	633b      	str	r3, [r7, #48]	; 0x30
 8006958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d16d      	bne.n	8006a44 <USB_EPStartXfer+0x2ba>
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006982:	b29b      	uxth	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	4413      	add	r3, r2
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
 800698c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	00da      	lsls	r2, r3, #3
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	4413      	add	r3, r2
 800699e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	2b3e      	cmp	r3, #62	; 0x3e
 80069aa:	d91c      	bls.n	80069e6 <USB_EPStartXfer+0x25c>
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <USB_EPStartXfer+0x242>
 80069c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069c6:	3b01      	subs	r3, #1
 80069c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e053      	b.n	8006a8e <USB_EPStartXfer+0x304>
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d112      	bne.n	8006a14 <USB_EPStartXfer+0x28a>
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	e03c      	b.n	8006a8e <USB_EPStartXfer+0x304>
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <USB_EPStartXfer+0x2aa>
 8006a2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a2e:	3301      	adds	r3, #1
 8006a30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	e024      	b.n	8006a8e <USB_EPStartXfer+0x304>
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d11c      	bne.n	8006a8e <USB_EPStartXfer+0x304>
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	4413      	add	r3, r2
 8006a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00da      	lsls	r2, r3, #3
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	895b      	ldrh	r3, [r3, #10]
 8006a9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6959      	ldr	r1, [r3, #20]
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ab4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ab8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006abc:	6800      	ldr	r0, [r0, #0]
 8006abe:	f001 fad4 	bl	800806a <USB_WritePMA>
            ep->xfer_buff += len;
 8006ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad2:	441a      	add	r2, r3
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a1a      	ldr	r2, [r3, #32]
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d90f      	bls.n	8006b1c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	621a      	str	r2, [r3, #32]
 8006b1a:	e00e      	b.n	8006b3a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d16d      	bne.n	8006c26 <USB_EPStartXfer+0x49c>
 8006b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	00da      	lsls	r2, r3, #3
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b8c:	d91c      	bls.n	8006bc8 <USB_EPStartXfer+0x43e>
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <USB_EPStartXfer+0x424>
 8006ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	029b      	lsls	r3, r3, #10
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	e059      	b.n	8006c7c <USB_EPStartXfer+0x4f2>
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d112      	bne.n	8006bf6 <USB_EPStartXfer+0x46c>
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	e042      	b.n	8006c7c <USB_EPStartXfer+0x4f2>
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <USB_EPStartXfer+0x48c>
 8006c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c10:	3301      	adds	r3, #1
 8006c12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e02a      	b.n	8006c7c <USB_EPStartXfer+0x4f2>
 8006c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d122      	bne.n	8006c7c <USB_EPStartXfer+0x4f2>
 8006c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	461a      	mov	r2, r3
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	4413      	add	r3, r2
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	00da      	lsls	r2, r3, #3
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	891b      	ldrh	r3, [r3, #8]
 8006c88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6959      	ldr	r1, [r3, #20]
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ca2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ca6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006caa:	6800      	ldr	r0, [r0, #0]
 8006cac:	f001 f9dd 	bl	800806a <USB_WritePMA>
 8006cb0:	e3c6      	b.n	8007440 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d16d      	bne.n	8006d9e <USB_EPStartXfer+0x614>
 8006cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce2:	4413      	add	r3, r2
 8006ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00da      	lsls	r2, r3, #3
 8006cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d02:	2b3e      	cmp	r3, #62	; 0x3e
 8006d04:	d91c      	bls.n	8006d40 <USB_EPStartXfer+0x5b6>
 8006d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d104      	bne.n	8006d26 <USB_EPStartXfer+0x59c>
 8006d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d20:	3b01      	subs	r3, #1
 8006d22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	029b      	lsls	r3, r3, #10
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	e059      	b.n	8006df4 <USB_EPStartXfer+0x66a>
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d112      	bne.n	8006d6e <USB_EPStartXfer+0x5e4>
 8006d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	e042      	b.n	8006df4 <USB_EPStartXfer+0x66a>
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <USB_EPStartXfer+0x604>
 8006d84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e02a      	b.n	8006df4 <USB_EPStartXfer+0x66a>
 8006d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d122      	bne.n	8006df4 <USB_EPStartXfer+0x66a>
 8006dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	653b      	str	r3, [r7, #80]	; 0x50
 8006dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dce:	4413      	add	r3, r2
 8006dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	00da      	lsls	r2, r3, #3
 8006de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de2:	4413      	add	r3, r2
 8006de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	891b      	ldrh	r3, [r3, #8]
 8006e00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6959      	ldr	r1, [r3, #20]
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e1e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	f001 f921 	bl	800806a <USB_WritePMA>
            ep->xfer_buff += len;
 8006e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e38:	441a      	add	r2, r3
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6a1a      	ldr	r2, [r3, #32]
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d90f      	bls.n	8006e82 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6a1a      	ldr	r2, [r3, #32]
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	1ad2      	subs	r2, r2, r3
 8006e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	621a      	str	r2, [r3, #32]
 8006e80:	e00e      	b.n	8006ea0 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d16d      	bne.n	8006f98 <USB_EPStartXfer+0x80e>
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	4413      	add	r3, r2
 8006ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	00da      	lsls	r2, r3, #3
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	2b3e      	cmp	r3, #62	; 0x3e
 8006efe:	d91c      	bls.n	8006f3a <USB_EPStartXfer+0x7b0>
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <USB_EPStartXfer+0x796>
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	029b      	lsls	r3, r3, #10
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e053      	b.n	8006fe2 <USB_EPStartXfer+0x858>
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d112      	bne.n	8006f68 <USB_EPStartXfer+0x7de>
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e03c      	b.n	8006fe2 <USB_EPStartXfer+0x858>
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <USB_EPStartXfer+0x7fe>
 8006f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f82:	3301      	adds	r3, #1
 8006f84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	e024      	b.n	8006fe2 <USB_EPStartXfer+0x858>
 8006f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d11c      	bne.n	8006fe2 <USB_EPStartXfer+0x858>
 8006fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fbc:	4413      	add	r3, r2
 8006fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	00da      	lsls	r2, r3, #3
 8006fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	895b      	ldrh	r3, [r3, #10]
 8006fee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6959      	ldr	r1, [r3, #20]
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007002:	b29b      	uxth	r3, r3
 8007004:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007008:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800700c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007010:	6800      	ldr	r0, [r0, #0]
 8007012:	f001 f82a 	bl	800806a <USB_WritePMA>
 8007016:	e213      	b.n	8007440 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800704a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	b29b      	uxth	r3, r3
 8007082:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a4:	4413      	add	r3, r2
 80070a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	00da      	lsls	r2, r3, #3
 80070b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b8:	4413      	add	r3, r2
 80070ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070be:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	891b      	ldrh	r3, [r3, #8]
 80070d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6959      	ldr	r1, [r3, #20]
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070f8:	6800      	ldr	r0, [r0, #0]
 80070fa:	f000 ffb6 	bl	800806a <USB_WritePMA>
 80070fe:	e19f      	b.n	8007440 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a1a      	ldr	r2, [r3, #32]
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800711e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80bc 	beq.w	80072be <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	673b      	str	r3, [r7, #112]	; 0x70
 8007152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d16d      	bne.n	800723e <USB_EPStartXfer+0xab4>
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	66bb      	str	r3, [r7, #104]	; 0x68
 800716e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007182:	4413      	add	r3, r2
 8007184:	66bb      	str	r3, [r7, #104]	; 0x68
 8007186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	00da      	lsls	r2, r3, #3
 8007194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007196:	4413      	add	r3, r2
 8007198:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800719c:	667b      	str	r3, [r7, #100]	; 0x64
 800719e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a2:	2b3e      	cmp	r3, #62	; 0x3e
 80071a4:	d91c      	bls.n	80071e0 <USB_EPStartXfer+0xa56>
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071aa:	095b      	lsrs	r3, r3, #5
 80071ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <USB_EPStartXfer+0xa3c>
 80071bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071c0:	3b01      	subs	r3, #1
 80071c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d8:	b29a      	uxth	r2, r3
 80071da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	e053      	b.n	8007288 <USB_EPStartXfer+0xafe>
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d112      	bne.n	800720e <USB_EPStartXfer+0xa84>
 80071e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007206:	b29a      	uxth	r2, r3
 8007208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e03c      	b.n	8007288 <USB_EPStartXfer+0xafe>
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007212:	085b      	lsrs	r3, r3, #1
 8007214:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <USB_EPStartXfer+0xaa4>
 8007224:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007228:	3301      	adds	r3, #1
 800722a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800722e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007232:	b29b      	uxth	r3, r3
 8007234:	029b      	lsls	r3, r3, #10
 8007236:	b29a      	uxth	r2, r3
 8007238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e024      	b.n	8007288 <USB_EPStartXfer+0xafe>
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d11c      	bne.n	8007288 <USB_EPStartXfer+0xafe>
 800724e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725c:	b29b      	uxth	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007262:	4413      	add	r3, r2
 8007264:	673b      	str	r3, [r7, #112]	; 0x70
 8007266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	00da      	lsls	r2, r3, #3
 8007274:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007276:	4413      	add	r3, r2
 8007278:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800727c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007282:	b29a      	uxth	r2, r3
 8007284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007286:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	895b      	ldrh	r3, [r3, #10]
 8007294:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6959      	ldr	r1, [r3, #20]
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072b6:	6800      	ldr	r0, [r0, #0]
 80072b8:	f000 fed7 	bl	800806a <USB_WritePMA>
 80072bc:	e0c0      	b.n	8007440 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d16d      	bne.n	80073aa <USB_EPStartXfer+0xc20>
 80072ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072ee:	4413      	add	r3, r2
 80072f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	00da      	lsls	r2, r3, #3
 8007300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007302:	4413      	add	r3, r2
 8007304:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007308:	67bb      	str	r3, [r7, #120]	; 0x78
 800730a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730e:	2b3e      	cmp	r3, #62	; 0x3e
 8007310:	d91c      	bls.n	800734c <USB_EPStartXfer+0xbc2>
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <USB_EPStartXfer+0xba8>
 8007328:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800732c:	3b01      	subs	r3, #1
 800732e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007332:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007336:	b29b      	uxth	r3, r3
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	b29b      	uxth	r3, r3
 800733c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007344:	b29a      	uxth	r2, r3
 8007346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	e05f      	b.n	800740c <USB_EPStartXfer+0xc82>
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007350:	2b00      	cmp	r3, #0
 8007352:	d112      	bne.n	800737a <USB_EPStartXfer+0xbf0>
 8007354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800735e:	b29a      	uxth	r2, r3
 8007360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b29a      	uxth	r2, r3
 8007374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e048      	b.n	800740c <USB_EPStartXfer+0xc82>
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_EPStartXfer+0xc10>
 8007390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007394:	3301      	adds	r3, #1
 8007396:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800739a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800739e:	b29b      	uxth	r3, r3
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	e030      	b.n	800740c <USB_EPStartXfer+0xc82>
 80073aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	785b      	ldrb	r3, [r3, #1]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d128      	bne.n	800740c <USB_EPStartXfer+0xc82>
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073de:	4413      	add	r3, r2
 80073e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	00da      	lsls	r2, r3, #3
 80073f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073f6:	4413      	add	r3, r2
 80073f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800740a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	891b      	ldrh	r3, [r3, #8]
 8007418:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6959      	ldr	r1, [r3, #20]
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742c:	b29b      	uxth	r3, r3
 800742e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007432:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007436:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	f000 fe15 	bl	800806a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007466:	817b      	strh	r3, [r7, #10]
 8007468:	897b      	ldrh	r3, [r7, #10]
 800746a:	f083 0310 	eor.w	r3, r3, #16
 800746e:	817b      	strh	r3, [r7, #10]
 8007470:	897b      	ldrh	r3, [r7, #10]
 8007472:	f083 0320 	eor.w	r3, r3, #32
 8007476:	817b      	strh	r3, [r7, #10]
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	897b      	ldrh	r3, [r7, #10]
 8007494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	8013      	strh	r3, [r2, #0]
 80074a8:	f000 bc9f 	b.w	8007dea <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	7b1b      	ldrb	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 80ae 	bne.w	800761a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d917      	bls.n	800750a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80074da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80074ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	619a      	str	r2, [r3, #24]
 8007508:	e00e      	b.n	8007528 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007544:	b29b      	uxth	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800754c:	4413      	add	r3, r2
 800754e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	00da      	lsls	r2, r3, #3
 8007560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007564:	4413      	add	r3, r2
 8007566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800756a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	2b3e      	cmp	r3, #62	; 0x3e
 8007574:	d91d      	bls.n	80075b2 <USB_EPStartXfer+0xe28>
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <USB_EPStartXfer+0xe0c>
 800758c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007590:	3b01      	subs	r3, #1
 8007592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007596:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800759a:	b29b      	uxth	r3, r3
 800759c:	029b      	lsls	r3, r3, #10
 800759e:	b29b      	uxth	r3, r3
 80075a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	e3e1      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d116      	bne.n	80075e8 <USB_EPStartXfer+0xe5e>
 80075ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e3c6      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ec:	085b      	lsrs	r3, r3, #1
 80075ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d004      	beq.n	8007608 <USB_EPStartXfer+0xe7e>
 80075fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007602:	3301      	adds	r3, #1
 8007604:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800760c:	b29b      	uxth	r3, r3
 800760e:	029b      	lsls	r3, r3, #10
 8007610:	b29a      	uxth	r2, r3
 8007612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	e3ad      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800761a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	78db      	ldrb	r3, [r3, #3]
 8007626:	2b02      	cmp	r3, #2
 8007628:	f040 8200 	bne.w	8007a2c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800762c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f040 8091 	bne.w	8007760 <USB_EPStartXfer+0xfd6>
 800763e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007662:	4413      	add	r3, r2
 8007664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	00da      	lsls	r2, r3, #3
 8007676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800767a:	4413      	add	r3, r2
 800767c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b3e      	cmp	r3, #62	; 0x3e
 8007692:	d925      	bls.n	80076e0 <USB_EPStartXfer+0xf56>
 8007694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	095b      	lsrs	r3, r3, #5
 80076a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <USB_EPStartXfer+0xf3a>
 80076ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076be:	3b01      	subs	r3, #1
 80076c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	029b      	lsls	r3, r3, #10
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	e074      	b.n	80077ca <USB_EPStartXfer+0x1040>
 80076e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d116      	bne.n	800771e <USB_EPStartXfer+0xf94>
 80076f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	e055      	b.n	80077ca <USB_EPStartXfer+0x1040>
 800771e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <USB_EPStartXfer+0xfc4>
 8007744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007748:	3301      	adds	r3, #1
 800774a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800774e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007752:	b29b      	uxth	r3, r3
 8007754:	029b      	lsls	r3, r3, #10
 8007756:	b29a      	uxth	r2, r3
 8007758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	e034      	b.n	80077ca <USB_EPStartXfer+0x1040>
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d12c      	bne.n	80077ca <USB_EPStartXfer+0x1040>
 8007770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800777e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778c:	b29b      	uxth	r3, r3
 800778e:	461a      	mov	r2, r3
 8007790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007794:	4413      	add	r3, r2
 8007796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	00da      	lsls	r2, r3, #3
 80077a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077ac:	4413      	add	r3, r2
 80077ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	785b      	ldrb	r3, [r3, #1]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 8091 	bne.w	800790c <USB_EPStartXfer+0x1182>
 80077ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800780e:	4413      	add	r3, r2
 8007810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	00da      	lsls	r2, r3, #3
 8007822:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007826:	4413      	add	r3, r2
 8007828:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800782c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b3e      	cmp	r3, #62	; 0x3e
 800783e:	d925      	bls.n	800788c <USB_EPStartXfer+0x1102>
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2b00      	cmp	r3, #0
 8007864:	d104      	bne.n	8007870 <USB_EPStartXfer+0x10e6>
 8007866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786a:	3b01      	subs	r3, #1
 800786c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007874:	b29b      	uxth	r3, r3
 8007876:	029b      	lsls	r3, r3, #10
 8007878:	b29b      	uxth	r3, r3
 800787a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007882:	b29a      	uxth	r2, r3
 8007884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	e06d      	b.n	8007968 <USB_EPStartXfer+0x11de>
 800788c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d116      	bne.n	80078ca <USB_EPStartXfer+0x1140>
 800789c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	e04e      	b.n	8007968 <USB_EPStartXfer+0x11de>
 80078ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <USB_EPStartXfer+0x1170>
 80078f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f4:	3301      	adds	r3, #1
 80078f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fe:	b29b      	uxth	r3, r3
 8007900:	029b      	lsls	r3, r3, #10
 8007902:	b29a      	uxth	r2, r3
 8007904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	e02d      	b.n	8007968 <USB_EPStartXfer+0x11de>
 800790c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d125      	bne.n	8007968 <USB_EPStartXfer+0x11de>
 800791c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007932:	4413      	add	r3, r2
 8007934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	00da      	lsls	r2, r3, #3
 8007946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800794a:	4413      	add	r3, r2
 800794c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007966:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 81fe 	beq.w	8007d76 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800797a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800799a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800799e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <USB_EPStartXfer+0x1228>
 80079a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10d      	bne.n	80079ce <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80079b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 81db 	bne.w	8007d76 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f040 81d4 	bne.w	8007d76 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80079f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]
 8007a2a:	e1a4      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	78db      	ldrb	r3, [r3, #3]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	f040 819a 	bne.w	8007d72 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d917      	bls.n	8007a8a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	619a      	str	r2, [r3, #24]
 8007a88:	e00e      	b.n	8007aa8 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d178      	bne.n	8007baa <USB_EPStartXfer+0x1420>
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007adc:	4413      	add	r3, r2
 8007ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	00da      	lsls	r2, r3, #3
 8007af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007af4:	4413      	add	r3, r2
 8007af6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b02:	2b3e      	cmp	r3, #62	; 0x3e
 8007b04:	d91d      	bls.n	8007b42 <USB_EPStartXfer+0x13b8>
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <USB_EPStartXfer+0x139c>
 8007b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b20:	3b01      	subs	r3, #1
 8007b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	029b      	lsls	r3, r3, #10
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b3e:	801a      	strh	r2, [r3, #0]
 8007b40:	e064      	b.n	8007c0c <USB_EPStartXfer+0x1482>
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d116      	bne.n	8007b78 <USB_EPStartXfer+0x13ee>
 8007b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b5c:	801a      	strh	r2, [r3, #0]
 8007b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	e049      	b.n	8007c0c <USB_EPStartXfer+0x1482>
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <USB_EPStartXfer+0x140e>
 8007b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b92:	3301      	adds	r3, #1
 8007b94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	029b      	lsls	r3, r3, #10
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	e030      	b.n	8007c0c <USB_EPStartXfer+0x1482>
 8007baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d128      	bne.n	8007c0c <USB_EPStartXfer+0x1482>
 8007bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bde:	4413      	add	r3, r2
 8007be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	00da      	lsls	r2, r3, #3
 8007bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c0a:	801a      	strh	r2, [r3, #0]
 8007c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d178      	bne.n	8007d1c <USB_EPStartXfer+0x1592>
 8007c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c4e:	4413      	add	r3, r2
 8007c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	00da      	lsls	r2, r3, #3
 8007c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c74:	2b3e      	cmp	r3, #62	; 0x3e
 8007c76:	d91d      	bls.n	8007cb4 <USB_EPStartXfer+0x152a>
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7c:	095b      	lsrs	r3, r3, #5
 8007c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <USB_EPStartXfer+0x150e>
 8007c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c92:	3b01      	subs	r3, #1
 8007c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	029b      	lsls	r3, r3, #10
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cb0:	801a      	strh	r2, [r3, #0]
 8007cb2:	e060      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d116      	bne.n	8007cea <USB_EPStartXfer+0x1560>
 8007cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	e045      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
 8007cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <USB_EPStartXfer+0x1580>
 8007d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d04:	3301      	adds	r3, #1
 8007d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	029b      	lsls	r3, r3, #10
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	e02c      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
 8007d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d124      	bne.n	8007d76 <USB_EPStartXfer+0x15ec>
 8007d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d42:	4413      	add	r3, r2
 8007d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	00da      	lsls	r2, r3, #3
 8007d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	e001      	b.n	8007d76 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e03a      	b.n	8007dec <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007da0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007da4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007da8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007dac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007db0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007db4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	441a      	add	r2, r3
 8007dd2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d020      	beq.n	8007e4a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1e:	81bb      	strh	r3, [r7, #12]
 8007e20:	89bb      	ldrh	r3, [r7, #12]
 8007e22:	f083 0310 	eor.w	r3, r3, #16
 8007e26:	81bb      	strh	r3, [r7, #12]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	441a      	add	r2, r3
 8007e32:	89bb      	ldrh	r3, [r7, #12]
 8007e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	8013      	strh	r3, [r2, #0]
 8007e48:	e01f      	b.n	8007e8a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e60:	81fb      	strh	r3, [r7, #14]
 8007e62:	89fb      	ldrh	r3, [r7, #14]
 8007e64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e68:	81fb      	strh	r3, [r7, #14]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	441a      	add	r2, r3
 8007e74:	89fb      	ldrh	r3, [r7, #14]
 8007e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	7b1b      	ldrb	r3, [r3, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f040 809d 	bne.w	8007fe6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d04c      	beq.n	8007f4e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	823b      	strh	r3, [r7, #16]
 8007ec2:	8a3b      	ldrh	r3, [r7, #16]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01b      	beq.n	8007f04 <USB_EPClearStall+0x6c>
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee2:	81fb      	strh	r3, [r7, #14]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	89fb      	ldrh	r3, [r7, #14]
 8007ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d06c      	beq.n	8007fe6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f22:	81bb      	strh	r3, [r7, #12]
 8007f24:	89bb      	ldrh	r3, [r7, #12]
 8007f26:	f083 0320 	eor.w	r3, r3, #32
 8007f2a:	81bb      	strh	r3, [r7, #12]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	441a      	add	r2, r3
 8007f36:	89bb      	ldrh	r3, [r7, #12]
 8007f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	8013      	strh	r3, [r2, #0]
 8007f4c:	e04b      	b.n	8007fe6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	82fb      	strh	r3, [r7, #22]
 8007f5c:	8afb      	ldrh	r3, [r7, #22]
 8007f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01b      	beq.n	8007f9e <USB_EPClearStall+0x106>
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7c:	82bb      	strh	r3, [r7, #20]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	441a      	add	r2, r3
 8007f88:	8abb      	ldrh	r3, [r7, #20]
 8007f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb4:	827b      	strh	r3, [r7, #18]
 8007fb6:	8a7b      	ldrh	r3, [r7, #18]
 8007fb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fbc:	827b      	strh	r3, [r7, #18]
 8007fbe:	8a7b      	ldrh	r3, [r7, #18]
 8007fc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fc4:	827b      	strh	r3, [r7, #18]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	441a      	add	r2, r3
 8007fd0:	8a7b      	ldrh	r3, [r7, #18]
 8007fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2280      	movs	r2, #128	; 0x80
 800800a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800802a:	b29b      	uxth	r3, r3
 800802c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008034:	b29a      	uxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008058:	b29b      	uxth	r3, r3
 800805a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800805c:	68fb      	ldr	r3, [r7, #12]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800806a:	b480      	push	{r7}
 800806c:	b08d      	sub	sp, #52	; 0x34
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	4611      	mov	r1, r2
 8008076:	461a      	mov	r2, r3
 8008078:	460b      	mov	r3, r1
 800807a:	80fb      	strh	r3, [r7, #6]
 800807c:	4613      	mov	r3, r2
 800807e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008080:	88bb      	ldrh	r3, [r7, #4]
 8008082:	3301      	adds	r3, #1
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008090:	88fa      	ldrh	r2, [r7, #6]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a0:	e01b      	b.n	80080da <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	3301      	adds	r3, #1
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	3302      	adds	r3, #2
 80080cc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	3301      	adds	r3, #1
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	3b01      	subs	r3, #1
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e0      	bne.n	80080a2 <USB_WritePMA+0x38>
  }
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	3734      	adds	r7, #52	; 0x34
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b08b      	sub	sp, #44	; 0x2c
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	4611      	mov	r1, r2
 80080fa:	461a      	mov	r2, r3
 80080fc:	460b      	mov	r3, r1
 80080fe:	80fb      	strh	r3, [r7, #6]
 8008100:	4613      	mov	r3, r2
 8008102:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008104:	88bb      	ldrh	r3, [r7, #4]
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	b29b      	uxth	r3, r3
 800810a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008114:	88fa      	ldrh	r2, [r7, #6]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800811e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
 8008124:	e018      	b.n	8008158 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	3302      	adds	r3, #2
 8008132:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	3301      	adds	r3, #1
 8008140:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	0a1b      	lsrs	r3, r3, #8
 8008146:	b2da      	uxtb	r2, r3
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	3b01      	subs	r3, #1
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e3      	bne.n	8008126 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800815e:	88bb      	ldrh	r3, [r7, #4]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	b2da      	uxtb	r2, r3
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	701a      	strb	r2, [r3, #0]
  }
}
 800817a:	bf00      	nop
 800817c:	372c      	adds	r7, #44	; 0x2c
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008192:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008196:	f002 f947 	bl	800a428 <USBD_static_malloc>
 800819a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d105      	bne.n	80081ae <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80081aa:	2302      	movs	r3, #2
 80081ac:	e066      	b.n	800827c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7c1b      	ldrb	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d119      	bne.n	80081f2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c2:	2202      	movs	r2, #2
 80081c4:	2181      	movs	r1, #129	; 0x81
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 ffd3 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d6:	2202      	movs	r2, #2
 80081d8:	2101      	movs	r1, #1
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 ffc9 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2210      	movs	r2, #16
 80081ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80081f0:	e016      	b.n	8008220 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081f2:	2340      	movs	r3, #64	; 0x40
 80081f4:	2202      	movs	r2, #2
 80081f6:	2181      	movs	r1, #129	; 0x81
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 ffba 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008204:	2340      	movs	r3, #64	; 0x40
 8008206:	2202      	movs	r2, #2
 8008208:	2101      	movs	r1, #1
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 ffb1 	bl	800a172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2210      	movs	r2, #16
 800821c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008220:	2308      	movs	r3, #8
 8008222:	2203      	movs	r2, #3
 8008224:	2182      	movs	r1, #130	; 0x82
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 ffa3 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7c1b      	ldrb	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800825c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008260:	2101      	movs	r1, #1
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f002 f875 	bl	800a352 <USBD_LL_PrepareReceive>
 8008268:	e007      	b.n	800827a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008270:	2340      	movs	r3, #64	; 0x40
 8008272:	2101      	movs	r1, #1
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f002 f86c 	bl	800a352 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008290:	2181      	movs	r1, #129	; 0x81
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 ff93 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800829e:	2101      	movs	r1, #1
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 ff8c 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082ae:	2182      	movs	r1, #130	; 0x82
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 ff84 	bl	800a1be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00e      	beq.n	80082ee <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e0:	4618      	mov	r0, r3
 80082e2:	f002 f8af 	bl	800a444 <USBD_static_free>
    pdev->pClassData = NULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008308:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	e0af      	b.n	8008480 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008328:	2b00      	cmp	r3, #0
 800832a:	d03f      	beq.n	80083ac <USBD_CDC_Setup+0xb4>
 800832c:	2b20      	cmp	r3, #32
 800832e:	f040 809f 	bne.w	8008470 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d02e      	beq.n	8008398 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b25b      	sxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	da16      	bge.n	8008372 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008350:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	88d2      	ldrh	r2, [r2, #6]
 8008356:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	88db      	ldrh	r3, [r3, #6]
 800835c:	2b07      	cmp	r3, #7
 800835e:	bf28      	it	cs
 8008360:	2307      	movcs	r3, #7
 8008362:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	89fa      	ldrh	r2, [r7, #14]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 facf 	bl	800990e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008370:	e085      	b.n	800847e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	785a      	ldrb	r2, [r3, #1]
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	88db      	ldrh	r3, [r3, #6]
 8008380:	b2da      	uxtb	r2, r3
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008388:	6939      	ldr	r1, [r7, #16]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	88db      	ldrh	r3, [r3, #6]
 800838e:	461a      	mov	r2, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 fae8 	bl	8009966 <USBD_CtlPrepareRx>
      break;
 8008396:	e072      	b.n	800847e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	7850      	ldrb	r0, [r2, #1]
 80083a4:	2200      	movs	r2, #0
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	4798      	blx	r3
      break;
 80083aa:	e068      	b.n	800847e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	2b0b      	cmp	r3, #11
 80083b2:	d852      	bhi.n	800845a <USBD_CDC_Setup+0x162>
 80083b4:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <USBD_CDC_Setup+0xc4>)
 80083b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ba:	bf00      	nop
 80083bc:	080083ed 	.word	0x080083ed
 80083c0:	08008469 	.word	0x08008469
 80083c4:	0800845b 	.word	0x0800845b
 80083c8:	0800845b 	.word	0x0800845b
 80083cc:	0800845b 	.word	0x0800845b
 80083d0:	0800845b 	.word	0x0800845b
 80083d4:	0800845b 	.word	0x0800845b
 80083d8:	0800845b 	.word	0x0800845b
 80083dc:	0800845b 	.word	0x0800845b
 80083e0:	0800845b 	.word	0x0800845b
 80083e4:	08008417 	.word	0x08008417
 80083e8:	08008441 	.word	0x08008441
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d107      	bne.n	8008408 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083f8:	f107 030a 	add.w	r3, r7, #10
 80083fc:	2202      	movs	r2, #2
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 fa84 	bl	800990e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008406:	e032      	b.n	800846e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 fa0e 	bl	800982c <USBD_CtlError>
            ret = USBD_FAIL;
 8008410:	2303      	movs	r3, #3
 8008412:	75fb      	strb	r3, [r7, #23]
          break;
 8008414:	e02b      	b.n	800846e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b03      	cmp	r3, #3
 8008420:	d107      	bne.n	8008432 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008422:	f107 030d 	add.w	r3, r7, #13
 8008426:	2201      	movs	r2, #1
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fa6f 	bl	800990e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008430:	e01d      	b.n	800846e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f9f9 	bl	800982c <USBD_CtlError>
            ret = USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	75fb      	strb	r3, [r7, #23]
          break;
 800843e:	e016      	b.n	800846e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b03      	cmp	r3, #3
 800844a:	d00f      	beq.n	800846c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 f9ec 	bl	800982c <USBD_CtlError>
            ret = USBD_FAIL;
 8008454:	2303      	movs	r3, #3
 8008456:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008458:	e008      	b.n	800846c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f9e5 	bl	800982c <USBD_CtlError>
          ret = USBD_FAIL;
 8008462:	2303      	movs	r3, #3
 8008464:	75fb      	strb	r3, [r7, #23]
          break;
 8008466:	e002      	b.n	800846e <USBD_CDC_Setup+0x176>
          break;
 8008468:	bf00      	nop
 800846a:	e008      	b.n	800847e <USBD_CDC_Setup+0x186>
          break;
 800846c:	bf00      	nop
      }
      break;
 800846e:	e006      	b.n	800847e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f9da 	bl	800982c <USBD_CtlError>
      ret = USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	75fb      	strb	r3, [r7, #23]
      break;
 800847c:	bf00      	nop
  }

  return (uint8_t)ret;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800849a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e04f      	b.n	800854a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	3318      	adds	r3, #24
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d029      	beq.n	800851c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	3318      	adds	r3, #24
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	78f9      	ldrb	r1, [r7, #3]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	460b      	mov	r3, r1
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	440b      	add	r3, r1
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4403      	add	r3, r0
 80084e8:	3338      	adds	r3, #56	; 0x38
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80084f0:	fb01 f303 	mul.w	r3, r1, r3
 80084f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d110      	bne.n	800851c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	3318      	adds	r3, #24
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800850e:	78f9      	ldrb	r1, [r7, #3]
 8008510:	2300      	movs	r3, #0
 8008512:	2200      	movs	r2, #0
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 fefb 	bl	800a310 <USBD_LL_Transmit>
 800851a:	e015      	b.n	8008548 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008544:	78fa      	ldrb	r2, [r7, #3]
 8008546:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008564:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008570:	2303      	movs	r3, #3
 8008572:	e015      	b.n	80085a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 ff0b 	bl	800a394 <USBD_LL_GetRxDataSize>
 800857e:	4602      	mov	r2, r0
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800859a:	4611      	mov	r1, r2
 800859c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80085be:	2303      	movs	r3, #3
 80085c0:	e01b      	b.n	80085fa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d015      	beq.n	80085f8 <USBD_CDC_EP0_RxReady+0x50>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085d2:	2bff      	cmp	r3, #255	; 0xff
 80085d4:	d010      	beq.n	80085f8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80085e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085ec:	b292      	uxth	r2, r2
 80085ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	22ff      	movs	r2, #255	; 0xff
 80085f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2243      	movs	r2, #67	; 0x43
 8008610:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008612:	4b03      	ldr	r3, [pc, #12]	; (8008620 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	20000094 	.word	0x20000094

08008624 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2243      	movs	r2, #67	; 0x43
 8008630:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008632:	4b03      	ldr	r3, [pc, #12]	; (8008640 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000050 	.word	0x20000050

08008644 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2243      	movs	r2, #67	; 0x43
 8008650:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008652:	4b03      	ldr	r3, [pc, #12]	; (8008660 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	200000d8 	.word	0x200000d8

08008664 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	220a      	movs	r2, #10
 8008670:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008672:	4b03      	ldr	r3, [pc, #12]	; (8008680 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	2000000c 	.word	0x2000000c

08008684 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008694:	2303      	movs	r3, #3
 8008696:	e004      	b.n	80086a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b087      	sub	sp, #28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e008      	b.n	80086de <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008702:	2303      	movs	r3, #3
 8008704:	e004      	b.n	8008710 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800872a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	e01a      	b.n	8008774 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008744:	2b00      	cmp	r3, #0
 8008746:	d114      	bne.n	8008772 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2201      	movs	r2, #1
 800874c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008766:	2181      	movs	r1, #129	; 0x81
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fdd1 	bl	800a310 <USBD_LL_Transmit>

    ret = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	e016      	b.n	80087c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7c1b      	ldrb	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d109      	bne.n	80087b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ac:	2101      	movs	r1, #1
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 fdcf 	bl	800a352 <USBD_LL_PrepareReceive>
 80087b4:	e007      	b.n	80087c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087bc:	2340      	movs	r3, #64	; 0x40
 80087be:	2101      	movs	r1, #1
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fdc6 	bl	800a352 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e01f      	b.n	8008828 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	79fa      	ldrb	r2, [r7, #7]
 800881a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f001 fc2d 	bl	800a07c <USBD_LL_Init>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e016      	b.n	8008876 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	f107 020e 	add.w	r2, r7, #14
 8008868:	4610      	mov	r0, r2
 800886a:	4798      	blx	r3
 800886c:	4602      	mov	r2, r0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 fc58 	bl	800a13c <USBD_LL_Start>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088b8:	2303      	movs	r3, #3
 80088ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d007      	beq.n	800890a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	4611      	mov	r1, r2
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
  }

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 ff46 	bl	80097b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	2b02      	cmp	r3, #2
 800894e:	d01a      	beq.n	8008986 <USBD_LL_SetupStage+0x72>
 8008950:	2b02      	cmp	r3, #2
 8008952:	d822      	bhi.n	800899a <USBD_LL_SetupStage+0x86>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <USBD_LL_SetupStage+0x4a>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d00a      	beq.n	8008972 <USBD_LL_SetupStage+0x5e>
 800895c:	e01d      	b.n	800899a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f9ee 	bl	8008d48 <USBD_StdDevReq>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
      break;
 8008970:	e020      	b.n	80089b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa52 	bl	8008e24 <USBD_StdItfReq>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
      break;
 8008984:	e016      	b.n	80089b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa91 	bl	8008eb6 <USBD_StdEPReq>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
      break;
 8008998:	e00c      	b.n	80089b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fc27 	bl	800a1fc <USBD_LL_StallEP>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
      break;
 80089b2:	bf00      	nop
  }

  return ret;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b086      	sub	sp, #24
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	460b      	mov	r3, r1
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d138      	bne.n	8008a44 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d14a      	bne.n	8008a7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d913      	bls.n	8008a18 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	bf28      	it	cs
 8008a0a:	4613      	movcs	r3, r2
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 ffc5 	bl	80099a0 <USBD_CtlContinueRx>
 8008a16:	e030      	b.n	8008a7a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d10b      	bne.n	8008a3c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 ffc0 	bl	80099c2 <USBD_CtlSendStatus>
 8008a42:	e01a      	b.n	8008a7a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d114      	bne.n	8008a7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00e      	beq.n	8008a7a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	7afa      	ldrb	r2, [r7, #11]
 8008a66:	4611      	mov	r1, r2
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	4798      	blx	r3
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	e000      	b.n	8008a7c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d16b      	bne.n	8008b70 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3314      	adds	r3, #20
 8008a9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d156      	bne.n	8008b56 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d914      	bls.n	8008ade <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	1ad2      	subs	r2, r2, r3
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 ff3a 	bl	8009944 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f001 fc3b 	bl	800a352 <USBD_LL_PrepareReceive>
 8008adc:	e03b      	b.n	8008b56 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d11c      	bne.n	8008b24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d316      	bcc.n	8008b24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d20f      	bcs.n	8008b24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b04:	2200      	movs	r2, #0
 8008b06:	2100      	movs	r1, #0
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 ff1b 	bl	8009944 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b16:	2300      	movs	r3, #0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f001 fc18 	bl	800a352 <USBD_LL_PrepareReceive>
 8008b22:	e018      	b.n	8008b56 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d10b      	bne.n	8008b48 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b48:	2180      	movs	r1, #128	; 0x80
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f001 fb56 	bl	800a1fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 ff49 	bl	80099e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d122      	bne.n	8008ba6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fe98 	bl	8008896 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b6e:	e01a      	b.n	8008ba6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d114      	bne.n	8008ba6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00e      	beq.n	8008ba6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	7afa      	ldrb	r2, [r7, #11]
 8008b92:	4611      	mov	r1, r2
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	4798      	blx	r3
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	e000      	b.n	8008ba8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e02f      	b.n	8008c44 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00f      	beq.n	8008c0e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6852      	ldr	r2, [r2, #4]
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	4611      	mov	r1, r2
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	2200      	movs	r2, #0
 8008c12:	2100      	movs	r1, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 faac 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2240      	movs	r2, #64	; 0x40
 8008c26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2180      	movs	r1, #128	; 0x80
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 fa9e 	bl	800a172 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2240      	movs	r2, #64	; 0x40
 8008c40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2204      	movs	r2, #4
 8008c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d106      	bne.n	8008cba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e012      	b.n	8008d04 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d10b      	bne.n	8008d02 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d005      	beq.n	8008d02 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	3301      	adds	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d2a:	8a3b      	ldrh	r3, [r7, #16]
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	b21a      	sxth	r2, r3
 8008d30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	b21b      	sxth	r3, r3
 8008d38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d5e:	2b40      	cmp	r3, #64	; 0x40
 8008d60:	d005      	beq.n	8008d6e <USBD_StdDevReq+0x26>
 8008d62:	2b40      	cmp	r3, #64	; 0x40
 8008d64:	d853      	bhi.n	8008e0e <USBD_StdDevReq+0xc6>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <USBD_StdDevReq+0x3a>
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d14f      	bne.n	8008e0e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	4798      	blx	r3
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d80:	e04a      	b.n	8008e18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d83b      	bhi.n	8008e02 <USBD_StdDevReq+0xba>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <USBD_StdDevReq+0x48>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008de5 	.word	0x08008de5
 8008d94:	08008df9 	.word	0x08008df9
 8008d98:	08008e03 	.word	0x08008e03
 8008d9c:	08008def 	.word	0x08008def
 8008da0:	08008e03 	.word	0x08008e03
 8008da4:	08008dc3 	.word	0x08008dc3
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008e03 	.word	0x08008e03
 8008db0:	08008ddb 	.word	0x08008ddb
 8008db4:	08008dcd 	.word	0x08008dcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f9de 	bl	800917c <USBD_GetDescriptor>
          break;
 8008dc0:	e024      	b.n	8008e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fb6d 	bl	80094a4 <USBD_SetAddress>
          break;
 8008dca:	e01f      	b.n	8008e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fbac 	bl	800952c <USBD_SetConfig>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
          break;
 8008dd8:	e018      	b.n	8008e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fc4b 	bl	8009678 <USBD_GetConfig>
          break;
 8008de2:	e013      	b.n	8008e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fc7c 	bl	80096e4 <USBD_GetStatus>
          break;
 8008dec:	e00e      	b.n	8008e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fcab 	bl	800974c <USBD_SetFeature>
          break;
 8008df6:	e009      	b.n	8008e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fcba 	bl	8009774 <USBD_ClrFeature>
          break;
 8008e00:	e004      	b.n	8008e0c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fd11 	bl	800982c <USBD_CtlError>
          break;
 8008e0a:	bf00      	nop
      }
      break;
 8008e0c:	e004      	b.n	8008e18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fd0b 	bl	800982c <USBD_CtlError>
      break;
 8008e16:	bf00      	nop
  }

  return ret;
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop

08008e24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e3a:	2b40      	cmp	r3, #64	; 0x40
 8008e3c:	d005      	beq.n	8008e4a <USBD_StdItfReq+0x26>
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d82f      	bhi.n	8008ea2 <USBD_StdItfReq+0x7e>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <USBD_StdItfReq+0x26>
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d12b      	bne.n	8008ea2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d81d      	bhi.n	8008e94 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	889b      	ldrh	r3, [r3, #4]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d813      	bhi.n	8008e8a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	88db      	ldrh	r3, [r3, #6]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d110      	bne.n	8008e9e <USBD_StdItfReq+0x7a>
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10d      	bne.n	8008e9e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fd9d 	bl	80099c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e88:	e009      	b.n	8008e9e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fccd 	bl	800982c <USBD_CtlError>
          break;
 8008e92:	e004      	b.n	8008e9e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fcc8 	bl	800982c <USBD_CtlError>
          break;
 8008e9c:	e000      	b.n	8008ea0 <USBD_StdItfReq+0x7c>
          break;
 8008e9e:	bf00      	nop
      }
      break;
 8008ea0:	e004      	b.n	8008eac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fcc1 	bl	800982c <USBD_CtlError>
      break;
 8008eaa:	bf00      	nop
  }

  return ret;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	889b      	ldrh	r3, [r3, #4]
 8008ec8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed2:	2b40      	cmp	r3, #64	; 0x40
 8008ed4:	d007      	beq.n	8008ee6 <USBD_StdEPReq+0x30>
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	f200 8145 	bhi.w	8009166 <USBD_StdEPReq+0x2b0>
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00c      	beq.n	8008efa <USBD_StdEPReq+0x44>
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	f040 8140 	bne.w	8009166 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef8:	e13a      	b.n	8009170 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d007      	beq.n	8008f12 <USBD_StdEPReq+0x5c>
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	f300 8129 	bgt.w	800915a <USBD_StdEPReq+0x2a4>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d07f      	beq.n	800900c <USBD_StdEPReq+0x156>
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d03c      	beq.n	8008f8a <USBD_StdEPReq+0xd4>
 8008f10:	e123      	b.n	800915a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d002      	beq.n	8008f24 <USBD_StdEPReq+0x6e>
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d016      	beq.n	8008f50 <USBD_StdEPReq+0x9a>
 8008f22:	e02c      	b.n	8008f7e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00d      	beq.n	8008f46 <USBD_StdEPReq+0x90>
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b80      	cmp	r3, #128	; 0x80
 8008f2e:	d00a      	beq.n	8008f46 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f961 	bl	800a1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f3a:	2180      	movs	r1, #128	; 0x80
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 f95d 	bl	800a1fc <USBD_LL_StallEP>
 8008f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f44:	e020      	b.n	8008f88 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fc6f 	bl	800982c <USBD_CtlError>
              break;
 8008f4e:	e01b      	b.n	8008f88 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	885b      	ldrh	r3, [r3, #2]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10e      	bne.n	8008f76 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <USBD_StdEPReq+0xc0>
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b80      	cmp	r3, #128	; 0x80
 8008f62:	d008      	beq.n	8008f76 <USBD_StdEPReq+0xc0>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	88db      	ldrh	r3, [r3, #6]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d104      	bne.n	8008f76 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f943 	bl	800a1fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fd23 	bl	80099c2 <USBD_CtlSendStatus>

              break;
 8008f7c:	e004      	b.n	8008f88 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fc53 	bl	800982c <USBD_CtlError>
              break;
 8008f86:	bf00      	nop
          }
          break;
 8008f88:	e0ec      	b.n	8009164 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d002      	beq.n	8008f9c <USBD_StdEPReq+0xe6>
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d016      	beq.n	8008fc8 <USBD_StdEPReq+0x112>
 8008f9a:	e030      	b.n	8008ffe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00d      	beq.n	8008fbe <USBD_StdEPReq+0x108>
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b80      	cmp	r3, #128	; 0x80
 8008fa6:	d00a      	beq.n	8008fbe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 f925 	bl	800a1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fb2:	2180      	movs	r1, #128	; 0x80
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 f921 	bl	800a1fc <USBD_LL_StallEP>
 8008fba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fbc:	e025      	b.n	800900a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fc33 	bl	800982c <USBD_CtlError>
              break;
 8008fc6:	e020      	b.n	800900a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	885b      	ldrh	r3, [r3, #2]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11b      	bne.n	8009008 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 f92b 	bl	800a23a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fcec 	bl	80099c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ffc:	e004      	b.n	8009008 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fc13 	bl	800982c <USBD_CtlError>
              break;
 8009006:	e000      	b.n	800900a <USBD_StdEPReq+0x154>
              break;
 8009008:	bf00      	nop
          }
          break;
 800900a:	e0ab      	b.n	8009164 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d002      	beq.n	800901e <USBD_StdEPReq+0x168>
 8009018:	2b03      	cmp	r3, #3
 800901a:	d032      	beq.n	8009082 <USBD_StdEPReq+0x1cc>
 800901c:	e097      	b.n	800914e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <USBD_StdEPReq+0x17e>
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	2b80      	cmp	r3, #128	; 0x80
 8009028:	d004      	beq.n	8009034 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fbfd 	bl	800982c <USBD_CtlError>
                break;
 8009032:	e091      	b.n	8009158 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009038:	2b00      	cmp	r3, #0
 800903a:	da0b      	bge.n	8009054 <USBD_StdEPReq+0x19e>
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	3310      	adds	r3, #16
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	4413      	add	r3, r2
 8009050:	3304      	adds	r3, #4
 8009052:	e00b      	b.n	800906c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800905a:	4613      	mov	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	4413      	add	r3, r2
 800906a:	3304      	adds	r3, #4
 800906c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2202      	movs	r2, #2
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fc47 	bl	800990e <USBD_CtlSendData>
              break;
 8009080:	e06a      	b.n	8009158 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009086:	2b00      	cmp	r3, #0
 8009088:	da11      	bge.n	80090ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	f003 020f 	and.w	r2, r3, #15
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	3324      	adds	r3, #36	; 0x24
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d117      	bne.n	80090d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fbc0 	bl	800982c <USBD_CtlError>
                  break;
 80090ac:	e054      	b.n	8009158 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	f003 020f 	and.w	r2, r3, #15
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	4613      	mov	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	440b      	add	r3, r1
 80090c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d104      	bne.n	80090d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fbad 	bl	800982c <USBD_CtlError>
                  break;
 80090d2:	e041      	b.n	8009158 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da0b      	bge.n	80090f4 <USBD_StdEPReq+0x23e>
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	3310      	adds	r3, #16
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	4413      	add	r3, r2
 80090f0:	3304      	adds	r3, #4
 80090f2:	e00b      	b.n	800910c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	4413      	add	r3, r2
 800910a:	3304      	adds	r3, #4
 800910c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <USBD_StdEPReq+0x264>
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b80      	cmp	r3, #128	; 0x80
 8009118:	d103      	bne.n	8009122 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	e00e      	b.n	8009140 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 f8a6 	bl	800a278 <USBD_LL_IsStallEP>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2201      	movs	r2, #1
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	e002      	b.n	8009140 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2202      	movs	r2, #2
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fbe1 	bl	800990e <USBD_CtlSendData>
              break;
 800914c:	e004      	b.n	8009158 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fb6b 	bl	800982c <USBD_CtlError>
              break;
 8009156:	bf00      	nop
          }
          break;
 8009158:	e004      	b.n	8009164 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fb65 	bl	800982c <USBD_CtlError>
          break;
 8009162:	bf00      	nop
      }
      break;
 8009164:	e004      	b.n	8009170 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fb5f 	bl	800982c <USBD_CtlError>
      break;
 800916e:	bf00      	nop
  }

  return ret;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	0a1b      	lsrs	r3, r3, #8
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	2b0e      	cmp	r3, #14
 800919e:	f200 8152 	bhi.w	8009446 <USBD_GetDescriptor+0x2ca>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <USBD_GetDescriptor+0x2c>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	08009219 	.word	0x08009219
 80091ac:	08009231 	.word	0x08009231
 80091b0:	08009271 	.word	0x08009271
 80091b4:	08009447 	.word	0x08009447
 80091b8:	08009447 	.word	0x08009447
 80091bc:	080093e7 	.word	0x080093e7
 80091c0:	08009413 	.word	0x08009413
 80091c4:	08009447 	.word	0x08009447
 80091c8:	08009447 	.word	0x08009447
 80091cc:	08009447 	.word	0x08009447
 80091d0:	08009447 	.word	0x08009447
 80091d4:	08009447 	.word	0x08009447
 80091d8:	08009447 	.word	0x08009447
 80091dc:	08009447 	.word	0x08009447
 80091e0:	080091e5 	.word	0x080091e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009206:	e126      	b.n	8009456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fb0e 	bl	800982c <USBD_CtlError>
        err++;
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	3301      	adds	r3, #1
 8009214:	72fb      	strb	r3, [r7, #11]
      break;
 8009216:	e11e      	b.n	8009456 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
      break;
 800922e:	e112      	b.n	8009456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	7c1b      	ldrb	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10d      	bne.n	8009254 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	f107 0208 	add.w	r2, r7, #8
 8009244:	4610      	mov	r0, r2
 8009246:	4798      	blx	r3
 8009248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	2202      	movs	r2, #2
 8009250:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009252:	e100      	b.n	8009456 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	f107 0208 	add.w	r2, r7, #8
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
 8009264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	2202      	movs	r2, #2
 800926c:	701a      	strb	r2, [r3, #0]
      break;
 800926e:	e0f2      	b.n	8009456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	885b      	ldrh	r3, [r3, #2]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b05      	cmp	r3, #5
 8009278:	f200 80ac 	bhi.w	80093d4 <USBD_GetDescriptor+0x258>
 800927c:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <USBD_GetDescriptor+0x108>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	0800929d 	.word	0x0800929d
 8009288:	080092d1 	.word	0x080092d1
 800928c:	08009305 	.word	0x08009305
 8009290:	08009339 	.word	0x08009339
 8009294:	0800936d 	.word	0x0800936d
 8009298:	080093a1 	.word	0x080093a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7c12      	ldrb	r2, [r2, #16]
 80092b4:	f107 0108 	add.w	r1, r7, #8
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092be:	e091      	b.n	80093e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fab2 	bl	800982c <USBD_CtlError>
            err++;
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	3301      	adds	r3, #1
 80092cc:	72fb      	strb	r3, [r7, #11]
          break;
 80092ce:	e089      	b.n	80093e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7c12      	ldrb	r2, [r2, #16]
 80092e8:	f107 0108 	add.w	r1, r7, #8
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092f2:	e077      	b.n	80093e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fa98 	bl	800982c <USBD_CtlError>
            err++;
 80092fc:	7afb      	ldrb	r3, [r7, #11]
 80092fe:	3301      	adds	r3, #1
 8009300:	72fb      	strb	r3, [r7, #11]
          break;
 8009302:	e06f      	b.n	80093e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 0108 	add.w	r1, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009326:	e05d      	b.n	80093e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa7e 	bl	800982c <USBD_CtlError>
            err++;
 8009330:	7afb      	ldrb	r3, [r7, #11]
 8009332:	3301      	adds	r3, #1
 8009334:	72fb      	strb	r3, [r7, #11]
          break;
 8009336:	e055      	b.n	80093e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800935a:	e043      	b.n	80093e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa64 	bl	800982c <USBD_CtlError>
            err++;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	3301      	adds	r3, #1
 8009368:	72fb      	strb	r3, [r7, #11]
          break;
 800936a:	e03b      	b.n	80093e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7c12      	ldrb	r2, [r2, #16]
 8009384:	f107 0108 	add.w	r1, r7, #8
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938e:	e029      	b.n	80093e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa4a 	bl	800982c <USBD_CtlError>
            err++;
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	3301      	adds	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
          break;
 800939e:	e021      	b.n	80093e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	7c12      	ldrb	r2, [r2, #16]
 80093b8:	f107 0108 	add.w	r1, r7, #8
 80093bc:	4610      	mov	r0, r2
 80093be:	4798      	blx	r3
 80093c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093c2:	e00f      	b.n	80093e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fa30 	bl	800982c <USBD_CtlError>
            err++;
 80093cc:	7afb      	ldrb	r3, [r7, #11]
 80093ce:	3301      	adds	r3, #1
 80093d0:	72fb      	strb	r3, [r7, #11]
          break;
 80093d2:	e007      	b.n	80093e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa28 	bl	800982c <USBD_CtlError>
          err++;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	3301      	adds	r3, #1
 80093e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80093e2:	bf00      	nop
      }
      break;
 80093e4:	e037      	b.n	8009456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	7c1b      	ldrb	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f6:	f107 0208 	add.w	r2, r7, #8
 80093fa:	4610      	mov	r0, r2
 80093fc:	4798      	blx	r3
 80093fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009400:	e029      	b.n	8009456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fa11 	bl	800982c <USBD_CtlError>
        err++;
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	3301      	adds	r3, #1
 800940e:	72fb      	strb	r3, [r7, #11]
      break;
 8009410:	e021      	b.n	8009456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	7c1b      	ldrb	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10d      	bne.n	8009436 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	f107 0208 	add.w	r2, r7, #8
 8009426:	4610      	mov	r0, r2
 8009428:	4798      	blx	r3
 800942a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	2207      	movs	r2, #7
 8009432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009434:	e00f      	b.n	8009456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f9f7 	bl	800982c <USBD_CtlError>
        err++;
 800943e:	7afb      	ldrb	r3, [r7, #11]
 8009440:	3301      	adds	r3, #1
 8009442:	72fb      	strb	r3, [r7, #11]
      break;
 8009444:	e007      	b.n	8009456 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f9ef 	bl	800982c <USBD_CtlError>
      err++;
 800944e:	7afb      	ldrb	r3, [r7, #11]
 8009450:	3301      	adds	r3, #1
 8009452:	72fb      	strb	r3, [r7, #11]
      break;
 8009454:	bf00      	nop
  }

  if (err != 0U)
 8009456:	7afb      	ldrb	r3, [r7, #11]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d11e      	bne.n	800949a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	88db      	ldrh	r3, [r3, #6]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d016      	beq.n	8009492 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009464:	893b      	ldrh	r3, [r7, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00e      	beq.n	8009488 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	88da      	ldrh	r2, [r3, #6]
 800946e:	893b      	ldrh	r3, [r7, #8]
 8009470:	4293      	cmp	r3, r2
 8009472:	bf28      	it	cs
 8009474:	4613      	movcs	r3, r2
 8009476:	b29b      	uxth	r3, r3
 8009478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800947a:	893b      	ldrh	r3, [r7, #8]
 800947c:	461a      	mov	r2, r3
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fa44 	bl	800990e <USBD_CtlSendData>
 8009486:	e009      	b.n	800949c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9ce 	bl	800982c <USBD_CtlError>
 8009490:	e004      	b.n	800949c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fa95 	bl	80099c2 <USBD_CtlSendStatus>
 8009498:	e000      	b.n	800949c <USBD_GetDescriptor+0x320>
    return;
 800949a:	bf00      	nop
  }
}
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop

080094a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	889b      	ldrh	r3, [r3, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d131      	bne.n	800951a <USBD_SetAddress+0x76>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	88db      	ldrh	r3, [r3, #6]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d12d      	bne.n	800951a <USBD_SetAddress+0x76>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	885b      	ldrh	r3, [r3, #2]
 80094c2:	2b7f      	cmp	r3, #127	; 0x7f
 80094c4:	d829      	bhi.n	800951a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	885b      	ldrh	r3, [r3, #2]
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d104      	bne.n	80094e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f9a3 	bl	800982c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e6:	e01d      	b.n	8009524 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	7bfa      	ldrb	r2, [r7, #15]
 80094ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 feec 	bl	800a2d2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fa61 	bl	80099c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2202      	movs	r2, #2
 800950a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950e:	e009      	b.n	8009524 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009518:	e004      	b.n	8009524 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f985 	bl	800982c <USBD_CtlError>
  }
}
 8009522:	bf00      	nop
 8009524:	bf00      	nop
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	b2da      	uxtb	r2, r3
 8009540:	4b4c      	ldr	r3, [pc, #304]	; (8009674 <USBD_SetConfig+0x148>)
 8009542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009544:	4b4b      	ldr	r3, [pc, #300]	; (8009674 <USBD_SetConfig+0x148>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d905      	bls.n	8009558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f96c 	bl	800982c <USBD_CtlError>
    return USBD_FAIL;
 8009554:	2303      	movs	r3, #3
 8009556:	e088      	b.n	800966a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b02      	cmp	r3, #2
 8009562:	d002      	beq.n	800956a <USBD_SetConfig+0x3e>
 8009564:	2b03      	cmp	r3, #3
 8009566:	d025      	beq.n	80095b4 <USBD_SetConfig+0x88>
 8009568:	e071      	b.n	800964e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800956a:	4b42      	ldr	r3, [pc, #264]	; (8009674 <USBD_SetConfig+0x148>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d01c      	beq.n	80095ac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009572:	4b40      	ldr	r3, [pc, #256]	; (8009674 <USBD_SetConfig+0x148>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800957c:	4b3d      	ldr	r3, [pc, #244]	; (8009674 <USBD_SetConfig+0x148>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff f992 	bl	80088ac <USBD_SetClassConfig>
 8009588:	4603      	mov	r3, r0
 800958a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f949 	bl	800982c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800959a:	e065      	b.n	8009668 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fa10 	bl	80099c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2203      	movs	r2, #3
 80095a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095aa:	e05d      	b.n	8009668 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa08 	bl	80099c2 <USBD_CtlSendStatus>
      break;
 80095b2:	e059      	b.n	8009668 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095b4:	4b2f      	ldr	r3, [pc, #188]	; (8009674 <USBD_SetConfig+0x148>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d112      	bne.n	80095e2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095c4:	4b2b      	ldr	r3, [pc, #172]	; (8009674 <USBD_SetConfig+0x148>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ce:	4b29      	ldr	r3, [pc, #164]	; (8009674 <USBD_SetConfig+0x148>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff f985 	bl	80088e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f9f1 	bl	80099c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095e0:	e042      	b.n	8009668 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80095e2:	4b24      	ldr	r3, [pc, #144]	; (8009674 <USBD_SetConfig+0x148>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d02a      	beq.n	8009646 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff f973 	bl	80088e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095fe:	4b1d      	ldr	r3, [pc, #116]	; (8009674 <USBD_SetConfig+0x148>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009608:	4b1a      	ldr	r3, [pc, #104]	; (8009674 <USBD_SetConfig+0x148>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff f94c 	bl	80088ac <USBD_SetClassConfig>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00f      	beq.n	800963e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f903 	bl	800982c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	b2db      	uxtb	r3, r3
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7ff f958 	bl	80088e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800963c:	e014      	b.n	8009668 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f9bf 	bl	80099c2 <USBD_CtlSendStatus>
      break;
 8009644:	e010      	b.n	8009668 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f9bb 	bl	80099c2 <USBD_CtlSendStatus>
      break;
 800964c:	e00c      	b.n	8009668 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f8eb 	bl	800982c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009656:	4b07      	ldr	r3, [pc, #28]	; (8009674 <USBD_SetConfig+0x148>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7ff f941 	bl	80088e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009662:	2303      	movs	r3, #3
 8009664:	73fb      	strb	r3, [r7, #15]
      break;
 8009666:	bf00      	nop
  }

  return ret;
 8009668:	7bfb      	ldrb	r3, [r7, #15]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000410 	.word	0x20000410

08009678 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	88db      	ldrh	r3, [r3, #6]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d004      	beq.n	8009694 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f8cd 	bl	800982c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009692:	e023      	b.n	80096dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b02      	cmp	r3, #2
 800969e:	dc02      	bgt.n	80096a6 <USBD_GetConfig+0x2e>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dc03      	bgt.n	80096ac <USBD_GetConfig+0x34>
 80096a4:	e015      	b.n	80096d2 <USBD_GetConfig+0x5a>
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d00b      	beq.n	80096c2 <USBD_GetConfig+0x4a>
 80096aa:	e012      	b.n	80096d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	3308      	adds	r3, #8
 80096b6:	2201      	movs	r2, #1
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f927 	bl	800990e <USBD_CtlSendData>
        break;
 80096c0:	e00c      	b.n	80096dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3304      	adds	r3, #4
 80096c6:	2201      	movs	r2, #1
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f91f 	bl	800990e <USBD_CtlSendData>
        break;
 80096d0:	e004      	b.n	80096dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f8a9 	bl	800982c <USBD_CtlError>
        break;
 80096da:	bf00      	nop
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d81e      	bhi.n	800973a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	88db      	ldrh	r3, [r3, #6]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d004      	beq.n	800970e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f890 	bl	800982c <USBD_CtlError>
        break;
 800970c:	e01a      	b.n	8009744 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f043 0202 	orr.w	r2, r3, #2
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	330c      	adds	r3, #12
 800972e:	2202      	movs	r2, #2
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f8eb 	bl	800990e <USBD_CtlSendData>
      break;
 8009738:	e004      	b.n	8009744 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f875 	bl	800982c <USBD_CtlError>
      break;
 8009742:	bf00      	nop
  }
}
 8009744:	bf00      	nop
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	885b      	ldrh	r3, [r3, #2]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d106      	bne.n	800976c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f92b 	bl	80099c2 <USBD_CtlSendStatus>
  }
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	2b02      	cmp	r3, #2
 800978a:	d80b      	bhi.n	80097a4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	885b      	ldrh	r3, [r3, #2]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d10c      	bne.n	80097ae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f910 	bl	80099c2 <USBD_CtlSendStatus>
      }
      break;
 80097a2:	e004      	b.n	80097ae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f840 	bl	800982c <USBD_CtlError>
      break;
 80097ac:	e000      	b.n	80097b0 <USBD_ClrFeature+0x3c>
      break;
 80097ae:	bf00      	nop
  }
}
 80097b0:	bf00      	nop
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3301      	adds	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7ff fa92 	bl	8008d0c <SWAPBYTE>
 80097e8:	4603      	mov	r3, r0
 80097ea:	461a      	mov	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7ff fa85 	bl	8008d0c <SWAPBYTE>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3301      	adds	r3, #1
 800980e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3301      	adds	r3, #1
 8009814:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff fa78 	bl	8008d0c <SWAPBYTE>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	80da      	strh	r2, [r3, #6]
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009836:	2180      	movs	r1, #128	; 0x80
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fcdf 	bl	800a1fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800983e:	2100      	movs	r1, #0
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fcdb 	bl	800a1fc <USBD_LL_StallEP>
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d036      	beq.n	80098d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009868:	6938      	ldr	r0, [r7, #16]
 800986a:	f000 f836 	bl	80098da <USBD_GetLen>
 800986e:	4603      	mov	r3, r0
 8009870:	3301      	adds	r3, #1
 8009872:	b29b      	uxth	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	4413      	add	r3, r2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	7812      	ldrb	r2, [r2, #0]
 8009886:	701a      	strb	r2, [r3, #0]
  idx++;
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	3301      	adds	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	4413      	add	r3, r2
 8009894:	2203      	movs	r2, #3
 8009896:	701a      	strb	r2, [r3, #0]
  idx++;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	3301      	adds	r3, #1
 800989c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800989e:	e013      	b.n	80098c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	4413      	add	r3, r2
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	7812      	ldrb	r2, [r2, #0]
 80098aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	3301      	adds	r3, #1
 80098b0:	613b      	str	r3, [r7, #16]
    idx++;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	3301      	adds	r3, #1
 80098b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	4413      	add	r3, r2
 80098be:	2200      	movs	r2, #0
 80098c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	3301      	adds	r3, #1
 80098c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e7      	bne.n	80098a0 <USBD_GetString+0x52>
 80098d0:	e000      	b.n	80098d4 <USBD_GetString+0x86>
    return;
 80098d2:	bf00      	nop
  }
}
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098ea:	e005      	b.n	80098f8 <USBD_GetLen+0x1e>
  {
    len++;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	3301      	adds	r3, #1
 80098f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	3301      	adds	r3, #1
 80098f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1f5      	bne.n	80098ec <USBD_GetLen+0x12>
  }

  return len;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2202      	movs	r2, #2
 800991e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	2100      	movs	r1, #0
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fceb 	bl	800a310 <USBD_LL_Transmit>

  return USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	2100      	movs	r1, #0
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fcda 	bl	800a310 <USBD_LL_Transmit>

  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2203      	movs	r2, #3
 8009976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	2100      	movs	r1, #0
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fcde 	bl	800a352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	2100      	movs	r1, #0
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fccd 	bl	800a352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2204      	movs	r2, #4
 80099ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099d2:	2300      	movs	r3, #0
 80099d4:	2200      	movs	r2, #0
 80099d6:	2100      	movs	r1, #0
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fc99 	bl	800a310 <USBD_LL_Transmit>

  return USBD_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2205      	movs	r2, #5
 80099f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099f8:	2300      	movs	r3, #0
 80099fa:	2200      	movs	r2, #0
 80099fc:	2100      	movs	r1, #0
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fca7 	bl	800a352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009a14:	2200      	movs	r2, #0
 8009a16:	4912      	ldr	r1, [pc, #72]	; (8009a60 <MX_USB_Device_Init+0x50>)
 8009a18:	4812      	ldr	r0, [pc, #72]	; (8009a64 <MX_USB_Device_Init+0x54>)
 8009a1a:	f7fe fed9 	bl	80087d0 <USBD_Init>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009a24:	f7f7 fe61 	bl	80016ea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009a28:	490f      	ldr	r1, [pc, #60]	; (8009a68 <MX_USB_Device_Init+0x58>)
 8009a2a:	480e      	ldr	r0, [pc, #56]	; (8009a64 <MX_USB_Device_Init+0x54>)
 8009a2c:	f7fe ff00 	bl	8008830 <USBD_RegisterClass>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009a36:	f7f7 fe58 	bl	80016ea <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009a3a:	490c      	ldr	r1, [pc, #48]	; (8009a6c <MX_USB_Device_Init+0x5c>)
 8009a3c:	4809      	ldr	r0, [pc, #36]	; (8009a64 <MX_USB_Device_Init+0x54>)
 8009a3e:	f7fe fe21 	bl	8008684 <USBD_CDC_RegisterInterface>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009a48:	f7f7 fe4f 	bl	80016ea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009a4c:	4805      	ldr	r0, [pc, #20]	; (8009a64 <MX_USB_Device_Init+0x54>)
 8009a4e:	f7fe ff16 	bl	800887e <USBD_Start>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009a58:	f7f7 fe47 	bl	80016ea <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009a5c:	bf00      	nop
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	20000130 	.word	0x20000130
 8009a64:	20000414 	.word	0x20000414
 8009a68:	20000018 	.word	0x20000018
 8009a6c:	2000011c 	.word	0x2000011c

08009a70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a74:	2200      	movs	r2, #0
 8009a76:	4905      	ldr	r1, [pc, #20]	; (8009a8c <CDC_Init_FS+0x1c>)
 8009a78:	4805      	ldr	r0, [pc, #20]	; (8009a90 <CDC_Init_FS+0x20>)
 8009a7a:	f7fe fe18 	bl	80086ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a7e:	4905      	ldr	r1, [pc, #20]	; (8009a94 <CDC_Init_FS+0x24>)
 8009a80:	4803      	ldr	r0, [pc, #12]	; (8009a90 <CDC_Init_FS+0x20>)
 8009a82:	f7fe fe32 	bl	80086ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000f48 	.word	0x20000f48
 8009a90:	20000414 	.word	0x20000414
 8009a94:	20000748 	.word	0x20000748

08009a98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	6039      	str	r1, [r7, #0]
 8009ab2:	71fb      	strb	r3, [r7, #7]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	2b23      	cmp	r3, #35	; 0x23
 8009abc:	d84a      	bhi.n	8009b54 <CDC_Control_FS+0xac>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <CDC_Control_FS+0x1c>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009b55 	.word	0x08009b55
 8009ac8:	08009b55 	.word	0x08009b55
 8009acc:	08009b55 	.word	0x08009b55
 8009ad0:	08009b55 	.word	0x08009b55
 8009ad4:	08009b55 	.word	0x08009b55
 8009ad8:	08009b55 	.word	0x08009b55
 8009adc:	08009b55 	.word	0x08009b55
 8009ae0:	08009b55 	.word	0x08009b55
 8009ae4:	08009b55 	.word	0x08009b55
 8009ae8:	08009b55 	.word	0x08009b55
 8009aec:	08009b55 	.word	0x08009b55
 8009af0:	08009b55 	.word	0x08009b55
 8009af4:	08009b55 	.word	0x08009b55
 8009af8:	08009b55 	.word	0x08009b55
 8009afc:	08009b55 	.word	0x08009b55
 8009b00:	08009b55 	.word	0x08009b55
 8009b04:	08009b55 	.word	0x08009b55
 8009b08:	08009b55 	.word	0x08009b55
 8009b0c:	08009b55 	.word	0x08009b55
 8009b10:	08009b55 	.word	0x08009b55
 8009b14:	08009b55 	.word	0x08009b55
 8009b18:	08009b55 	.word	0x08009b55
 8009b1c:	08009b55 	.word	0x08009b55
 8009b20:	08009b55 	.word	0x08009b55
 8009b24:	08009b55 	.word	0x08009b55
 8009b28:	08009b55 	.word	0x08009b55
 8009b2c:	08009b55 	.word	0x08009b55
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b55 	.word	0x08009b55
 8009b38:	08009b55 	.word	0x08009b55
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b55 	.word	0x08009b55
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b55 	.word	0x08009b55
 8009b4c:	08009b55 	.word	0x08009b55
 8009b50:	08009b55 	.word	0x08009b55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b54:	bf00      	nop
  }

  return (USBD_OK);
 8009b56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint8_t string_check_cmplt[14] = {0x0};
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	f107 0310 	add.w	r3, r7, #16
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	605a      	str	r2, [r3, #4]
 8009b7c:	811a      	strh	r2, [r3, #8]
  start_of_flash = 1;
 8009b7e:	4b22      	ldr	r3, [pc, #136]	; (8009c08 <CDC_Receive_FS+0xa4>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	701a      	strb	r2, [r3, #0]
  end_of_coordinate = 0;
 8009b84:	4b21      	ldr	r3, [pc, #132]	; (8009c0c <CDC_Receive_FS+0xa8>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	4820      	ldr	r0, [pc, #128]	; (8009c10 <CDC_Receive_FS+0xac>)
 8009b8e:	f7fe fdac 	bl	80086ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b92:	481f      	ldr	r0, [pc, #124]	; (8009c10 <CDC_Receive_FS+0xac>)
 8009b94:	f7fe fdf2 	bl	800877c <USBD_CDC_ReceivePacket>
  strcat(RX_BUFFER,Buf);
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	481e      	ldr	r0, [pc, #120]	; (8009c14 <CDC_Receive_FS+0xb0>)
 8009b9c:	f001 fbb9 	bl	800b312 <strcat>

  /* if we found the END OF FLASH COMMAND*/
  for(int i=0;i<13;i++){
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	e00c      	b.n	8009bc0 <CDC_Receive_FS+0x5c>
	  string_check_cmplt[i] = RX_BUFFER[i];
 8009ba6:	4a1b      	ldr	r2, [pc, #108]	; (8009c14 <CDC_Receive_FS+0xb0>)
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	4413      	add	r3, r2
 8009bac:	7819      	ldrb	r1, [r3, #0]
 8009bae:	f107 020c 	add.w	r2, r7, #12
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	460a      	mov	r2, r1
 8009bb8:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<13;i++){
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	2b0c      	cmp	r3, #12
 8009bc4:	ddef      	ble.n	8009ba6 <CDC_Receive_FS+0x42>
  }
  if(strcmp(string_check_cmplt,"FLASH_CMPLT\r\n") == 0x00){
 8009bc6:	f107 030c 	add.w	r3, r7, #12
 8009bca:	4913      	ldr	r1, [pc, #76]	; (8009c18 <CDC_Receive_FS+0xb4>)
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7f6 fb27 	bl	8000220 <strcmp>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d107      	bne.n	8009be8 <CDC_Receive_FS+0x84>
	  end_of_flash = 1;
 8009bd8:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <CDC_Receive_FS+0xb8>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	701a      	strb	r2, [r3, #0]
	  /* clear the RX_BUFFER_ARRAY */
	  memset(RX_BUFFER, 0, sizeof(RX_BUFFER));
 8009bde:	2264      	movs	r2, #100	; 0x64
 8009be0:	2100      	movs	r1, #0
 8009be2:	480c      	ldr	r0, [pc, #48]	; (8009c14 <CDC_Receive_FS+0xb0>)
 8009be4:	f001 fb8d 	bl	800b302 <memset>
  }

  /* If the received char is \n then it mean end of coordinate */
  if(Buf[(*Len -1)] == '\n'){
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b0a      	cmp	r3, #10
 8009bf6:	d102      	bne.n	8009bfe <CDC_Receive_FS+0x9a>
	  end_of_coordinate = 1;
 8009bf8:	4b04      	ldr	r3, [pc, #16]	; (8009c0c <CDC_Receive_FS+0xa8>)
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	701a      	strb	r2, [r3, #0]
  }


  return (USBD_OK);
 8009bfe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3720      	adds	r7, #32
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000368 	.word	0x20000368
 8009c0c:	2000036a 	.word	0x2000036a
 8009c10:	20000414 	.word	0x20000414
 8009c14:	200006e4 	.word	0x200006e4
 8009c18:	0800d238 	.word	0x0800d238
 8009c1c:	20000369 	.word	0x20000369

08009c20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c30:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <CDC_Transmit_FS+0x48>)
 8009c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e00b      	b.n	8009c5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c46:	887b      	ldrh	r3, [r7, #2]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4806      	ldr	r0, [pc, #24]	; (8009c68 <CDC_Transmit_FS+0x48>)
 8009c4e:	f7fe fd2e 	bl	80086ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c52:	4805      	ldr	r0, [pc, #20]	; (8009c68 <CDC_Transmit_FS+0x48>)
 8009c54:	f7fe fd62 	bl	800871c <USBD_CDC_TransmitPacket>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000414 	.word	0x20000414

08009c6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
	...

08009c90 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	2212      	movs	r2, #18
 8009ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009ca2:	4b03      	ldr	r3, [pc, #12]	; (8009cb0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20000150 	.word	0x20000150

08009cb4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2204      	movs	r2, #4
 8009cc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cc6:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20000164 	.word	0x20000164

08009cd8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d105      	bne.n	8009cf6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	4907      	ldr	r1, [pc, #28]	; (8009d0c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009cee:	4808      	ldr	r0, [pc, #32]	; (8009d10 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009cf0:	f7ff fdad 	bl	800984e <USBD_GetString>
 8009cf4:	e004      	b.n	8009d00 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	4904      	ldr	r1, [pc, #16]	; (8009d0c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009cfa:	4805      	ldr	r0, [pc, #20]	; (8009d10 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009cfc:	f7ff fda7 	bl	800984e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d00:	4b02      	ldr	r3, [pc, #8]	; (8009d0c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20001748 	.word	0x20001748
 8009d10:	0800d248 	.word	0x0800d248

08009d14 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6039      	str	r1, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	4904      	ldr	r1, [pc, #16]	; (8009d34 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009d24:	4804      	ldr	r0, [pc, #16]	; (8009d38 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009d26:	f7ff fd92 	bl	800984e <USBD_GetString>
  return USBD_StrDesc;
 8009d2a:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	20001748 	.word	0x20001748
 8009d38:	0800d260 	.word	0x0800d260

08009d3c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	6039      	str	r1, [r7, #0]
 8009d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	221a      	movs	r2, #26
 8009d4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d4e:	f000 f843 	bl	8009dd8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009d52:	4b02      	ldr	r3, [pc, #8]	; (8009d5c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20000168 	.word	0x20000168

08009d60 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d6c:	79fb      	ldrb	r3, [r7, #7]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d105      	bne.n	8009d7e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4907      	ldr	r1, [pc, #28]	; (8009d94 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009d76:	4808      	ldr	r0, [pc, #32]	; (8009d98 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009d78:	f7ff fd69 	bl	800984e <USBD_GetString>
 8009d7c:	e004      	b.n	8009d88 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	4904      	ldr	r1, [pc, #16]	; (8009d94 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009d82:	4805      	ldr	r0, [pc, #20]	; (8009d98 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009d84:	f7ff fd63 	bl	800984e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d88:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20001748 	.word	0x20001748
 8009d98:	0800d274 	.word	0x0800d274

08009d9c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d105      	bne.n	8009dba <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4907      	ldr	r1, [pc, #28]	; (8009dd0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009db2:	4808      	ldr	r0, [pc, #32]	; (8009dd4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009db4:	f7ff fd4b 	bl	800984e <USBD_GetString>
 8009db8:	e004      	b.n	8009dc4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	4904      	ldr	r1, [pc, #16]	; (8009dd0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009dbe:	4805      	ldr	r0, [pc, #20]	; (8009dd4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009dc0:	f7ff fd45 	bl	800984e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dc4:	4b02      	ldr	r3, [pc, #8]	; (8009dd0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20001748 	.word	0x20001748
 8009dd4:	0800d280 	.word	0x0800d280

08009dd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009dde:	4b0f      	ldr	r3, [pc, #60]	; (8009e1c <Get_SerialNum+0x44>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009de4:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <Get_SerialNum+0x48>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009dea:	4b0e      	ldr	r3, [pc, #56]	; (8009e24 <Get_SerialNum+0x4c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4413      	add	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d009      	beq.n	8009e12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009dfe:	2208      	movs	r2, #8
 8009e00:	4909      	ldr	r1, [pc, #36]	; (8009e28 <Get_SerialNum+0x50>)
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 f814 	bl	8009e30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e08:	2204      	movs	r2, #4
 8009e0a:	4908      	ldr	r1, [pc, #32]	; (8009e2c <Get_SerialNum+0x54>)
 8009e0c:	68b8      	ldr	r0, [r7, #8]
 8009e0e:	f000 f80f 	bl	8009e30 <IntToUnicode>
  }
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	1fff7590 	.word	0x1fff7590
 8009e20:	1fff7594 	.word	0x1fff7594
 8009e24:	1fff7598 	.word	0x1fff7598
 8009e28:	2000016a 	.word	0x2000016a
 8009e2c:	2000017a 	.word	0x2000017a

08009e30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]
 8009e46:	e027      	b.n	8009e98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	0f1b      	lsrs	r3, r3, #28
 8009e4c:	2b09      	cmp	r3, #9
 8009e4e:	d80b      	bhi.n	8009e68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	0f1b      	lsrs	r3, r3, #28
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	440b      	add	r3, r1
 8009e60:	3230      	adds	r2, #48	; 0x30
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	701a      	strb	r2, [r3, #0]
 8009e66:	e00a      	b.n	8009e7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	0f1b      	lsrs	r3, r3, #28
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	4619      	mov	r1, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	440b      	add	r3, r1
 8009e78:	3237      	adds	r2, #55	; 0x37
 8009e7a:	b2d2      	uxtb	r2, r2
 8009e7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	3301      	adds	r3, #1
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	3301      	adds	r3, #1
 8009e96:	75fb      	strb	r3, [r7, #23]
 8009e98:	7dfa      	ldrb	r2, [r7, #23]
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d3d3      	bcc.n	8009e48 <IntToUnicode+0x18>
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b098      	sub	sp, #96	; 0x60
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009eb8:	f107 030c 	add.w	r3, r7, #12
 8009ebc:	2254      	movs	r2, #84	; 0x54
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f001 fa1e 	bl	800b302 <memset>
  if(pcdHandle->Instance==USB)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <HAL_PCD_MspInit+0x70>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d122      	bne.n	8009f16 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ed4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009eda:	f107 030c 	add.w	r3, r7, #12
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fa fd18 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009eea:	f7f7 fbfe 	bl	80016ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009eee:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <HAL_PCD_MspInit+0x74>)
 8009ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef2:	4a0c      	ldr	r2, [pc, #48]	; (8009f24 <HAL_PCD_MspInit+0x74>)
 8009ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8009efa:	4b0a      	ldr	r3, [pc, #40]	; (8009f24 <HAL_PCD_MspInit+0x74>)
 8009efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f02:	60bb      	str	r3, [r7, #8]
 8009f04:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009f06:	2200      	movs	r2, #0
 8009f08:	2100      	movs	r1, #0
 8009f0a:	2014      	movs	r0, #20
 8009f0c:	f7f7 fefb 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009f10:	2014      	movs	r0, #20
 8009f12:	f7f7 ff12 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f16:	bf00      	nop
 8009f18:	3760      	adds	r7, #96	; 0x60
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	40005c00 	.word	0x40005c00
 8009f24:	40021000 	.word	0x40021000

08009f28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f7fe fce8 	bl	8008914 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009f5e:	78fa      	ldrb	r2, [r7, #3]
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	440b      	add	r3, r1
 8009f6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	78fb      	ldrb	r3, [r7, #3]
 8009f74:	4619      	mov	r1, r3
 8009f76:	f7fe fd22 	bl	80089be <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	00db      	lsls	r3, r3, #3
 8009fa0:	440b      	add	r3, r1
 8009fa2:	333c      	adds	r3, #60	; 0x3c
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	78fb      	ldrb	r3, [r7, #3]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f7fe fd6b 	bl	8008a84 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009fae:	bf00      	nop
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b082      	sub	sp, #8
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fe fe7f 	bl	8008cc8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d001      	beq.n	8009fea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009fe6:	f7f7 fb80 	bl	80016ea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009ff0:	7bfa      	ldrb	r2, [r7, #15]
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fe fe29 	bl	8008c4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fdd5 	bl	8008bb0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fe24 	bl	8008c6c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a02c:	4b04      	ldr	r3, [pc, #16]	; (800a040 <HAL_PCD_SuspendCallback+0x30>)
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	4a03      	ldr	r2, [pc, #12]	; (800a040 <HAL_PCD_SuspendCallback+0x30>)
 800a032:	f043 0306 	orr.w	r3, r3, #6
 800a036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	e000ed00 	.word	0xe000ed00

0800a044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d007      	beq.n	800a064 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a054:	4b08      	ldr	r3, [pc, #32]	; (800a078 <HAL_PCD_ResumeCallback+0x34>)
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	4a07      	ldr	r2, [pc, #28]	; (800a078 <HAL_PCD_ResumeCallback+0x34>)
 800a05a:	f023 0306 	bic.w	r3, r3, #6
 800a05e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a060:	f000 f9fa 	bl	800a458 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fe14 	bl	8008c98 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	e000ed00 	.word	0xe000ed00

0800a07c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a084:	4a2b      	ldr	r2, [pc, #172]	; (800a134 <USBD_LL_Init+0xb8>)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a29      	ldr	r2, [pc, #164]	; (800a134 <USBD_LL_Init+0xb8>)
 800a090:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a094:	4b27      	ldr	r3, [pc, #156]	; (800a134 <USBD_LL_Init+0xb8>)
 800a096:	4a28      	ldr	r2, [pc, #160]	; (800a138 <USBD_LL_Init+0xbc>)
 800a098:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a09a:	4b26      	ldr	r3, [pc, #152]	; (800a134 <USBD_LL_Init+0xb8>)
 800a09c:	2208      	movs	r2, #8
 800a09e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a0a0:	4b24      	ldr	r3, [pc, #144]	; (800a134 <USBD_LL_Init+0xb8>)
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0a6:	4b23      	ldr	r3, [pc, #140]	; (800a134 <USBD_LL_Init+0xb8>)
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a0ac:	4b21      	ldr	r3, [pc, #132]	; (800a134 <USBD_LL_Init+0xb8>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a0b2:	4b20      	ldr	r3, [pc, #128]	; (800a134 <USBD_LL_Init+0xb8>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a0b8:	4b1e      	ldr	r3, [pc, #120]	; (800a134 <USBD_LL_Init+0xb8>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0be:	4b1d      	ldr	r3, [pc, #116]	; (800a134 <USBD_LL_Init+0xb8>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0c4:	481b      	ldr	r0, [pc, #108]	; (800a134 <USBD_LL_Init+0xb8>)
 800a0c6:	f7f8 f8cf 	bl	8002268 <HAL_PCD_Init>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a0d0:	f7f7 fb0b 	bl	80016ea <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0da:	2318      	movs	r3, #24
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2100      	movs	r1, #0
 800a0e0:	f7f9 fd88 	bl	8003bf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0ea:	2358      	movs	r3, #88	; 0x58
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2180      	movs	r1, #128	; 0x80
 800a0f0:	f7f9 fd80 	bl	8003bf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0fa:	23c0      	movs	r3, #192	; 0xc0
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2181      	movs	r1, #129	; 0x81
 800a100:	f7f9 fd78 	bl	8003bf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a10a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a10e:	2200      	movs	r2, #0
 800a110:	2101      	movs	r1, #1
 800a112:	f7f9 fd6f 	bl	8003bf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a120:	2200      	movs	r2, #0
 800a122:	2182      	movs	r1, #130	; 0x82
 800a124:	f7f9 fd66 	bl	8003bf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20001948 	.word	0x20001948
 800a138:	40005c00 	.word	0x40005c00

0800a13c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a152:	4618      	mov	r0, r3
 800a154:	f7f8 f96d 	bl	8002432 <HAL_PCD_Start>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f980 	bl	800a464 <USBD_Get_USB_Status>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a168:	7bbb      	ldrb	r3, [r7, #14]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	461a      	mov	r2, r3
 800a180:	4603      	mov	r3, r0
 800a182:	70fb      	strb	r3, [r7, #3]
 800a184:	460b      	mov	r3, r1
 800a186:	70bb      	strb	r3, [r7, #2]
 800a188:	4613      	mov	r3, r2
 800a18a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a19a:	78bb      	ldrb	r3, [r7, #2]
 800a19c:	883a      	ldrh	r2, [r7, #0]
 800a19e:	78f9      	ldrb	r1, [r7, #3]
 800a1a0:	f7f8 fab5 	bl	800270e <HAL_PCD_EP_Open>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 f95a 	bl	800a464 <USBD_Get_USB_Status>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f8 fafc 	bl	80027da <HAL_PCD_EP_Close>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 f93b 	bl	800a464 <USBD_Get_USB_Status>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f8 fbbd 	bl	800299a <HAL_PCD_EP_SetStall>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f91c 	bl	800a464 <USBD_Get_USB_Status>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a230:	7bbb      	ldrb	r3, [r7, #14]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7f8 fbf0 	bl	8002a3e <HAL_PCD_EP_ClrStall>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f8fd 	bl	800a464 <USBD_Get_USB_Status>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a28a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a28c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a290:	2b00      	cmp	r3, #0
 800a292:	da0c      	bge.n	800a2ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	440b      	add	r3, r1
 800a2a8:	3302      	adds	r3, #2
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	e00b      	b.n	800a2c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2b4:	68f9      	ldr	r1, [r7, #12]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	440b      	add	r3, r1
 800a2c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a2c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2ec:	78fa      	ldrb	r2, [r7, #3]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7f8 f9e7 	bl	80026c4 <HAL_PCD_SetAddress>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 f8b1 	bl	800a464 <USBD_Get_USB_Status>
 800a302:	4603      	mov	r3, r0
 800a304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a306:	7bbb      	ldrb	r3, [r7, #14]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	607a      	str	r2, [r7, #4]
 800a31a:	603b      	str	r3, [r7, #0]
 800a31c:	460b      	mov	r3, r1
 800a31e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a32e:	7af9      	ldrb	r1, [r7, #11]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	f7f8 faee 	bl	8002914 <HAL_PCD_EP_Transmit>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f890 	bl	800a464 <USBD_Get_USB_Status>
 800a344:	4603      	mov	r3, r0
 800a346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a348:	7dbb      	ldrb	r3, [r7, #22]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b086      	sub	sp, #24
 800a356:	af00      	add	r7, sp, #0
 800a358:	60f8      	str	r0, [r7, #12]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	603b      	str	r3, [r7, #0]
 800a35e:	460b      	mov	r3, r1
 800a360:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a370:	7af9      	ldrb	r1, [r7, #11]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	f7f8 fa78 	bl	800286a <HAL_PCD_EP_Receive>
 800a37a:	4603      	mov	r3, r0
 800a37c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	4618      	mov	r0, r3
 800a382:	f000 f86f 	bl	800a464 <USBD_Get_USB_Status>
 800a386:	4603      	mov	r3, r0
 800a388:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a38a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3a6:	78fa      	ldrb	r2, [r7, #3]
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7f8 fa9a 	bl	80028e4 <HAL_PCD_EP_GetRxCount>
 800a3b0:	4603      	mov	r3, r0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <HAL_PCDEx_LPM_Callback+0x18>
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d013      	beq.n	800a3fa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a3d2:	e023      	b.n	800a41c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d007      	beq.n	800a3ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a3dc:	f000 f83c 	bl	800a458 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3e0:	4b10      	ldr	r3, [pc, #64]	; (800a424 <HAL_PCDEx_LPM_Callback+0x68>)
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	4a0f      	ldr	r2, [pc, #60]	; (800a424 <HAL_PCDEx_LPM_Callback+0x68>)
 800a3e6:	f023 0306 	bic.w	r3, r3, #6
 800a3ea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fc50 	bl	8008c98 <USBD_LL_Resume>
    break;
 800a3f8:	e010      	b.n	800a41c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a400:	4618      	mov	r0, r3
 800a402:	f7fe fc33 	bl	8008c6c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <HAL_PCDEx_LPM_Callback+0x68>)
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	4a04      	ldr	r2, [pc, #16]	; (800a424 <HAL_PCDEx_LPM_Callback+0x68>)
 800a414:	f043 0306 	orr.w	r3, r3, #6
 800a418:	6113      	str	r3, [r2, #16]
    break;
 800a41a:	bf00      	nop
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	e000ed00 	.word	0xe000ed00

0800a428 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a430:	4b03      	ldr	r3, [pc, #12]	; (800a440 <USBD_static_malloc+0x18>)
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	20001c3c 	.word	0x20001c3c

0800a444 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]

}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a45c:	f7f6 ffd0 	bl	8001400 <SystemClock_Config>
}
 800a460:	bf00      	nop
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	2b03      	cmp	r3, #3
 800a476:	d817      	bhi.n	800a4a8 <USBD_Get_USB_Status+0x44>
 800a478:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <USBD_Get_USB_Status+0x1c>)
 800a47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47e:	bf00      	nop
 800a480:	0800a491 	.word	0x0800a491
 800a484:	0800a497 	.word	0x0800a497
 800a488:	0800a49d 	.word	0x0800a49d
 800a48c:	0800a4a3 	.word	0x0800a4a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]
    break;
 800a494:	e00b      	b.n	800a4ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a496:	2303      	movs	r3, #3
 800a498:	73fb      	strb	r3, [r7, #15]
    break;
 800a49a:	e008      	b.n	800a4ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a49c:	2301      	movs	r3, #1
 800a49e:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a0:	e005      	b.n	800a4ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a6:	e002      	b.n	800a4ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ac:	bf00      	nop
  }
  return usb_status;
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <atof>:
 800a4bc:	2100      	movs	r1, #0
 800a4be:	f000 be0f 	b.w	800b0e0 <strtod>

0800a4c2 <sulp>:
 800a4c2:	b570      	push	{r4, r5, r6, lr}
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	ec45 4b10 	vmov	d0, r4, r5
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	f001 ff99 	bl	800c404 <__ulp>
 800a4d2:	ec51 0b10 	vmov	r0, r1, d0
 800a4d6:	b17e      	cbz	r6, 800a4f8 <sulp+0x36>
 800a4d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd09      	ble.n	800a4f8 <sulp+0x36>
 800a4e4:	051b      	lsls	r3, r3, #20
 800a4e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	f7f6 f8b0 	bl	8000658 <__aeabi_dmul>
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	0000      	movs	r0, r0
 800a4fc:	0000      	movs	r0, r0
	...

0800a500 <_strtod_l>:
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	ed2d 8b02 	vpush	{d8}
 800a508:	b09b      	sub	sp, #108	; 0x6c
 800a50a:	4604      	mov	r4, r0
 800a50c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a50e:	2200      	movs	r2, #0
 800a510:	9216      	str	r2, [sp, #88]	; 0x58
 800a512:	460d      	mov	r5, r1
 800a514:	f04f 0800 	mov.w	r8, #0
 800a518:	f04f 0900 	mov.w	r9, #0
 800a51c:	460a      	mov	r2, r1
 800a51e:	9215      	str	r2, [sp, #84]	; 0x54
 800a520:	7811      	ldrb	r1, [r2, #0]
 800a522:	292b      	cmp	r1, #43	; 0x2b
 800a524:	d04c      	beq.n	800a5c0 <_strtod_l+0xc0>
 800a526:	d83a      	bhi.n	800a59e <_strtod_l+0x9e>
 800a528:	290d      	cmp	r1, #13
 800a52a:	d834      	bhi.n	800a596 <_strtod_l+0x96>
 800a52c:	2908      	cmp	r1, #8
 800a52e:	d834      	bhi.n	800a59a <_strtod_l+0x9a>
 800a530:	2900      	cmp	r1, #0
 800a532:	d03d      	beq.n	800a5b0 <_strtod_l+0xb0>
 800a534:	2200      	movs	r2, #0
 800a536:	920a      	str	r2, [sp, #40]	; 0x28
 800a538:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a53a:	7832      	ldrb	r2, [r6, #0]
 800a53c:	2a30      	cmp	r2, #48	; 0x30
 800a53e:	f040 80b4 	bne.w	800a6aa <_strtod_l+0x1aa>
 800a542:	7872      	ldrb	r2, [r6, #1]
 800a544:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a548:	2a58      	cmp	r2, #88	; 0x58
 800a54a:	d170      	bne.n	800a62e <_strtod_l+0x12e>
 800a54c:	9302      	str	r3, [sp, #8]
 800a54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	ab16      	add	r3, sp, #88	; 0x58
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	4a8e      	ldr	r2, [pc, #568]	; (800a790 <_strtod_l+0x290>)
 800a558:	ab17      	add	r3, sp, #92	; 0x5c
 800a55a:	a915      	add	r1, sp, #84	; 0x54
 800a55c:	4620      	mov	r0, r4
 800a55e:	f001 f837 	bl	800b5d0 <__gethex>
 800a562:	f010 070f 	ands.w	r7, r0, #15
 800a566:	4605      	mov	r5, r0
 800a568:	d005      	beq.n	800a576 <_strtod_l+0x76>
 800a56a:	2f06      	cmp	r7, #6
 800a56c:	d12a      	bne.n	800a5c4 <_strtod_l+0xc4>
 800a56e:	3601      	adds	r6, #1
 800a570:	2300      	movs	r3, #0
 800a572:	9615      	str	r6, [sp, #84]	; 0x54
 800a574:	930a      	str	r3, [sp, #40]	; 0x28
 800a576:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f040 857f 	bne.w	800b07c <_strtod_l+0xb7c>
 800a57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a580:	b1db      	cbz	r3, 800a5ba <_strtod_l+0xba>
 800a582:	4642      	mov	r2, r8
 800a584:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a588:	ec43 2b10 	vmov	d0, r2, r3
 800a58c:	b01b      	add	sp, #108	; 0x6c
 800a58e:	ecbd 8b02 	vpop	{d8}
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a596:	2920      	cmp	r1, #32
 800a598:	d1cc      	bne.n	800a534 <_strtod_l+0x34>
 800a59a:	3201      	adds	r2, #1
 800a59c:	e7bf      	b.n	800a51e <_strtod_l+0x1e>
 800a59e:	292d      	cmp	r1, #45	; 0x2d
 800a5a0:	d1c8      	bne.n	800a534 <_strtod_l+0x34>
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	910a      	str	r1, [sp, #40]	; 0x28
 800a5a6:	1c51      	adds	r1, r2, #1
 800a5a8:	9115      	str	r1, [sp, #84]	; 0x54
 800a5aa:	7852      	ldrb	r2, [r2, #1]
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	d1c3      	bne.n	800a538 <_strtod_l+0x38>
 800a5b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5b2:	9515      	str	r5, [sp, #84]	; 0x54
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 855f 	bne.w	800b078 <_strtod_l+0xb78>
 800a5ba:	4642      	mov	r2, r8
 800a5bc:	464b      	mov	r3, r9
 800a5be:	e7e3      	b.n	800a588 <_strtod_l+0x88>
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	e7ef      	b.n	800a5a4 <_strtod_l+0xa4>
 800a5c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5c6:	b13a      	cbz	r2, 800a5d8 <_strtod_l+0xd8>
 800a5c8:	2135      	movs	r1, #53	; 0x35
 800a5ca:	a818      	add	r0, sp, #96	; 0x60
 800a5cc:	f002 f817 	bl	800c5fe <__copybits>
 800a5d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f001 fbea 	bl	800bdac <_Bfree>
 800a5d8:	3f01      	subs	r7, #1
 800a5da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5dc:	2f04      	cmp	r7, #4
 800a5de:	d806      	bhi.n	800a5ee <_strtod_l+0xee>
 800a5e0:	e8df f007 	tbb	[pc, r7]
 800a5e4:	201d0314 	.word	0x201d0314
 800a5e8:	14          	.byte	0x14
 800a5e9:	00          	.byte	0x00
 800a5ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a5ee:	05e9      	lsls	r1, r5, #23
 800a5f0:	bf48      	it	mi
 800a5f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a5f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5fa:	0d1b      	lsrs	r3, r3, #20
 800a5fc:	051b      	lsls	r3, r3, #20
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1b9      	bne.n	800a576 <_strtod_l+0x76>
 800a602:	f000 feed 	bl	800b3e0 <__errno>
 800a606:	2322      	movs	r3, #34	; 0x22
 800a608:	6003      	str	r3, [r0, #0]
 800a60a:	e7b4      	b.n	800a576 <_strtod_l+0x76>
 800a60c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a610:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a614:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a618:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a61c:	e7e7      	b.n	800a5ee <_strtod_l+0xee>
 800a61e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a798 <_strtod_l+0x298>
 800a622:	e7e4      	b.n	800a5ee <_strtod_l+0xee>
 800a624:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a628:	f04f 38ff 	mov.w	r8, #4294967295
 800a62c:	e7df      	b.n	800a5ee <_strtod_l+0xee>
 800a62e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	9215      	str	r2, [sp, #84]	; 0x54
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b30      	cmp	r3, #48	; 0x30
 800a638:	d0f9      	beq.n	800a62e <_strtod_l+0x12e>
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d09b      	beq.n	800a576 <_strtod_l+0x76>
 800a63e:	2301      	movs	r3, #1
 800a640:	f04f 0a00 	mov.w	sl, #0
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a648:	930b      	str	r3, [sp, #44]	; 0x2c
 800a64a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a64e:	46d3      	mov	fp, sl
 800a650:	220a      	movs	r2, #10
 800a652:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a654:	7806      	ldrb	r6, [r0, #0]
 800a656:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a65a:	b2d9      	uxtb	r1, r3
 800a65c:	2909      	cmp	r1, #9
 800a65e:	d926      	bls.n	800a6ae <_strtod_l+0x1ae>
 800a660:	494c      	ldr	r1, [pc, #304]	; (800a794 <_strtod_l+0x294>)
 800a662:	2201      	movs	r2, #1
 800a664:	f000 fe64 	bl	800b330 <strncmp>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d030      	beq.n	800a6ce <_strtod_l+0x1ce>
 800a66c:	2000      	movs	r0, #0
 800a66e:	4632      	mov	r2, r6
 800a670:	9005      	str	r0, [sp, #20]
 800a672:	465e      	mov	r6, fp
 800a674:	4603      	mov	r3, r0
 800a676:	2a65      	cmp	r2, #101	; 0x65
 800a678:	d001      	beq.n	800a67e <_strtod_l+0x17e>
 800a67a:	2a45      	cmp	r2, #69	; 0x45
 800a67c:	d113      	bne.n	800a6a6 <_strtod_l+0x1a6>
 800a67e:	b91e      	cbnz	r6, 800a688 <_strtod_l+0x188>
 800a680:	9a04      	ldr	r2, [sp, #16]
 800a682:	4302      	orrs	r2, r0
 800a684:	d094      	beq.n	800a5b0 <_strtod_l+0xb0>
 800a686:	2600      	movs	r6, #0
 800a688:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a68a:	1c6a      	adds	r2, r5, #1
 800a68c:	9215      	str	r2, [sp, #84]	; 0x54
 800a68e:	786a      	ldrb	r2, [r5, #1]
 800a690:	2a2b      	cmp	r2, #43	; 0x2b
 800a692:	d074      	beq.n	800a77e <_strtod_l+0x27e>
 800a694:	2a2d      	cmp	r2, #45	; 0x2d
 800a696:	d078      	beq.n	800a78a <_strtod_l+0x28a>
 800a698:	f04f 0c00 	mov.w	ip, #0
 800a69c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6a0:	2909      	cmp	r1, #9
 800a6a2:	d97f      	bls.n	800a7a4 <_strtod_l+0x2a4>
 800a6a4:	9515      	str	r5, [sp, #84]	; 0x54
 800a6a6:	2700      	movs	r7, #0
 800a6a8:	e09e      	b.n	800a7e8 <_strtod_l+0x2e8>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e7c8      	b.n	800a640 <_strtod_l+0x140>
 800a6ae:	f1bb 0f08 	cmp.w	fp, #8
 800a6b2:	bfd8      	it	le
 800a6b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a6b6:	f100 0001 	add.w	r0, r0, #1
 800a6ba:	bfda      	itte	le
 800a6bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6c0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a6c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a6c6:	f10b 0b01 	add.w	fp, fp, #1
 800a6ca:	9015      	str	r0, [sp, #84]	; 0x54
 800a6cc:	e7c1      	b.n	800a652 <_strtod_l+0x152>
 800a6ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	9215      	str	r2, [sp, #84]	; 0x54
 800a6d4:	785a      	ldrb	r2, [r3, #1]
 800a6d6:	f1bb 0f00 	cmp.w	fp, #0
 800a6da:	d037      	beq.n	800a74c <_strtod_l+0x24c>
 800a6dc:	9005      	str	r0, [sp, #20]
 800a6de:	465e      	mov	r6, fp
 800a6e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d912      	bls.n	800a70e <_strtod_l+0x20e>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e7c4      	b.n	800a676 <_strtod_l+0x176>
 800a6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	9215      	str	r2, [sp, #84]	; 0x54
 800a6f2:	785a      	ldrb	r2, [r3, #1]
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	2a30      	cmp	r2, #48	; 0x30
 800a6f8:	d0f8      	beq.n	800a6ec <_strtod_l+0x1ec>
 800a6fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a6fe:	2b08      	cmp	r3, #8
 800a700:	f200 84c1 	bhi.w	800b086 <_strtod_l+0xb86>
 800a704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a706:	9005      	str	r0, [sp, #20]
 800a708:	2000      	movs	r0, #0
 800a70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a70c:	4606      	mov	r6, r0
 800a70e:	3a30      	subs	r2, #48	; 0x30
 800a710:	f100 0301 	add.w	r3, r0, #1
 800a714:	d014      	beq.n	800a740 <_strtod_l+0x240>
 800a716:	9905      	ldr	r1, [sp, #20]
 800a718:	4419      	add	r1, r3
 800a71a:	9105      	str	r1, [sp, #20]
 800a71c:	4633      	mov	r3, r6
 800a71e:	eb00 0c06 	add.w	ip, r0, r6
 800a722:	210a      	movs	r1, #10
 800a724:	4563      	cmp	r3, ip
 800a726:	d113      	bne.n	800a750 <_strtod_l+0x250>
 800a728:	1833      	adds	r3, r6, r0
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	f106 0601 	add.w	r6, r6, #1
 800a730:	4406      	add	r6, r0
 800a732:	dc1a      	bgt.n	800a76a <_strtod_l+0x26a>
 800a734:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a736:	230a      	movs	r3, #10
 800a738:	fb03 2301 	mla	r3, r3, r1, r2
 800a73c:	9309      	str	r3, [sp, #36]	; 0x24
 800a73e:	2300      	movs	r3, #0
 800a740:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a742:	1c51      	adds	r1, r2, #1
 800a744:	9115      	str	r1, [sp, #84]	; 0x54
 800a746:	7852      	ldrb	r2, [r2, #1]
 800a748:	4618      	mov	r0, r3
 800a74a:	e7c9      	b.n	800a6e0 <_strtod_l+0x1e0>
 800a74c:	4658      	mov	r0, fp
 800a74e:	e7d2      	b.n	800a6f6 <_strtod_l+0x1f6>
 800a750:	2b08      	cmp	r3, #8
 800a752:	f103 0301 	add.w	r3, r3, #1
 800a756:	dc03      	bgt.n	800a760 <_strtod_l+0x260>
 800a758:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a75a:	434f      	muls	r7, r1
 800a75c:	9709      	str	r7, [sp, #36]	; 0x24
 800a75e:	e7e1      	b.n	800a724 <_strtod_l+0x224>
 800a760:	2b10      	cmp	r3, #16
 800a762:	bfd8      	it	le
 800a764:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a768:	e7dc      	b.n	800a724 <_strtod_l+0x224>
 800a76a:	2e10      	cmp	r6, #16
 800a76c:	bfdc      	itt	le
 800a76e:	230a      	movle	r3, #10
 800a770:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a774:	e7e3      	b.n	800a73e <_strtod_l+0x23e>
 800a776:	2300      	movs	r3, #0
 800a778:	9305      	str	r3, [sp, #20]
 800a77a:	2301      	movs	r3, #1
 800a77c:	e780      	b.n	800a680 <_strtod_l+0x180>
 800a77e:	f04f 0c00 	mov.w	ip, #0
 800a782:	1caa      	adds	r2, r5, #2
 800a784:	9215      	str	r2, [sp, #84]	; 0x54
 800a786:	78aa      	ldrb	r2, [r5, #2]
 800a788:	e788      	b.n	800a69c <_strtod_l+0x19c>
 800a78a:	f04f 0c01 	mov.w	ip, #1
 800a78e:	e7f8      	b.n	800a782 <_strtod_l+0x282>
 800a790:	0800d2b0 	.word	0x0800d2b0
 800a794:	0800d2a0 	.word	0x0800d2a0
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a79e:	1c51      	adds	r1, r2, #1
 800a7a0:	9115      	str	r1, [sp, #84]	; 0x54
 800a7a2:	7852      	ldrb	r2, [r2, #1]
 800a7a4:	2a30      	cmp	r2, #48	; 0x30
 800a7a6:	d0f9      	beq.n	800a79c <_strtod_l+0x29c>
 800a7a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a7ac:	2908      	cmp	r1, #8
 800a7ae:	f63f af7a 	bhi.w	800a6a6 <_strtod_l+0x1a6>
 800a7b2:	3a30      	subs	r2, #48	; 0x30
 800a7b4:	9208      	str	r2, [sp, #32]
 800a7b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7b8:	920c      	str	r2, [sp, #48]	; 0x30
 800a7ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7bc:	1c57      	adds	r7, r2, #1
 800a7be:	9715      	str	r7, [sp, #84]	; 0x54
 800a7c0:	7852      	ldrb	r2, [r2, #1]
 800a7c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a7c6:	f1be 0f09 	cmp.w	lr, #9
 800a7ca:	d938      	bls.n	800a83e <_strtod_l+0x33e>
 800a7cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7ce:	1a7f      	subs	r7, r7, r1
 800a7d0:	2f08      	cmp	r7, #8
 800a7d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a7d6:	dc03      	bgt.n	800a7e0 <_strtod_l+0x2e0>
 800a7d8:	9908      	ldr	r1, [sp, #32]
 800a7da:	428f      	cmp	r7, r1
 800a7dc:	bfa8      	it	ge
 800a7de:	460f      	movge	r7, r1
 800a7e0:	f1bc 0f00 	cmp.w	ip, #0
 800a7e4:	d000      	beq.n	800a7e8 <_strtod_l+0x2e8>
 800a7e6:	427f      	negs	r7, r7
 800a7e8:	2e00      	cmp	r6, #0
 800a7ea:	d14f      	bne.n	800a88c <_strtod_l+0x38c>
 800a7ec:	9904      	ldr	r1, [sp, #16]
 800a7ee:	4301      	orrs	r1, r0
 800a7f0:	f47f aec1 	bne.w	800a576 <_strtod_l+0x76>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f47f aedb 	bne.w	800a5b0 <_strtod_l+0xb0>
 800a7fa:	2a69      	cmp	r2, #105	; 0x69
 800a7fc:	d029      	beq.n	800a852 <_strtod_l+0x352>
 800a7fe:	dc26      	bgt.n	800a84e <_strtod_l+0x34e>
 800a800:	2a49      	cmp	r2, #73	; 0x49
 800a802:	d026      	beq.n	800a852 <_strtod_l+0x352>
 800a804:	2a4e      	cmp	r2, #78	; 0x4e
 800a806:	f47f aed3 	bne.w	800a5b0 <_strtod_l+0xb0>
 800a80a:	499b      	ldr	r1, [pc, #620]	; (800aa78 <_strtod_l+0x578>)
 800a80c:	a815      	add	r0, sp, #84	; 0x54
 800a80e:	f001 f91f 	bl	800ba50 <__match>
 800a812:	2800      	cmp	r0, #0
 800a814:	f43f aecc 	beq.w	800a5b0 <_strtod_l+0xb0>
 800a818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b28      	cmp	r3, #40	; 0x28
 800a81e:	d12f      	bne.n	800a880 <_strtod_l+0x380>
 800a820:	4996      	ldr	r1, [pc, #600]	; (800aa7c <_strtod_l+0x57c>)
 800a822:	aa18      	add	r2, sp, #96	; 0x60
 800a824:	a815      	add	r0, sp, #84	; 0x54
 800a826:	f001 f927 	bl	800ba78 <__hexnan>
 800a82a:	2805      	cmp	r0, #5
 800a82c:	d128      	bne.n	800a880 <_strtod_l+0x380>
 800a82e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a830:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a834:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a838:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a83c:	e69b      	b.n	800a576 <_strtod_l+0x76>
 800a83e:	9f08      	ldr	r7, [sp, #32]
 800a840:	210a      	movs	r1, #10
 800a842:	fb01 2107 	mla	r1, r1, r7, r2
 800a846:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a84a:	9208      	str	r2, [sp, #32]
 800a84c:	e7b5      	b.n	800a7ba <_strtod_l+0x2ba>
 800a84e:	2a6e      	cmp	r2, #110	; 0x6e
 800a850:	e7d9      	b.n	800a806 <_strtod_l+0x306>
 800a852:	498b      	ldr	r1, [pc, #556]	; (800aa80 <_strtod_l+0x580>)
 800a854:	a815      	add	r0, sp, #84	; 0x54
 800a856:	f001 f8fb 	bl	800ba50 <__match>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f aea8 	beq.w	800a5b0 <_strtod_l+0xb0>
 800a860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a862:	4988      	ldr	r1, [pc, #544]	; (800aa84 <_strtod_l+0x584>)
 800a864:	3b01      	subs	r3, #1
 800a866:	a815      	add	r0, sp, #84	; 0x54
 800a868:	9315      	str	r3, [sp, #84]	; 0x54
 800a86a:	f001 f8f1 	bl	800ba50 <__match>
 800a86e:	b910      	cbnz	r0, 800a876 <_strtod_l+0x376>
 800a870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a872:	3301      	adds	r3, #1
 800a874:	9315      	str	r3, [sp, #84]	; 0x54
 800a876:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800aa94 <_strtod_l+0x594>
 800a87a:	f04f 0800 	mov.w	r8, #0
 800a87e:	e67a      	b.n	800a576 <_strtod_l+0x76>
 800a880:	4881      	ldr	r0, [pc, #516]	; (800aa88 <_strtod_l+0x588>)
 800a882:	f000 fde9 	bl	800b458 <nan>
 800a886:	ec59 8b10 	vmov	r8, r9, d0
 800a88a:	e674      	b.n	800a576 <_strtod_l+0x76>
 800a88c:	9b05      	ldr	r3, [sp, #20]
 800a88e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a890:	1afb      	subs	r3, r7, r3
 800a892:	f1bb 0f00 	cmp.w	fp, #0
 800a896:	bf08      	it	eq
 800a898:	46b3      	moveq	fp, r6
 800a89a:	2e10      	cmp	r6, #16
 800a89c:	9308      	str	r3, [sp, #32]
 800a89e:	4635      	mov	r5, r6
 800a8a0:	bfa8      	it	ge
 800a8a2:	2510      	movge	r5, #16
 800a8a4:	f7f5 fe5e 	bl	8000564 <__aeabi_ui2d>
 800a8a8:	2e09      	cmp	r6, #9
 800a8aa:	4680      	mov	r8, r0
 800a8ac:	4689      	mov	r9, r1
 800a8ae:	dd13      	ble.n	800a8d8 <_strtod_l+0x3d8>
 800a8b0:	4b76      	ldr	r3, [pc, #472]	; (800aa8c <_strtod_l+0x58c>)
 800a8b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8ba:	f7f5 fecd 	bl	8000658 <__aeabi_dmul>
 800a8be:	4680      	mov	r8, r0
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	4689      	mov	r9, r1
 800a8c4:	f7f5 fe4e 	bl	8000564 <__aeabi_ui2d>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	f7f5 fd0c 	bl	80002ec <__adddf3>
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	2e0f      	cmp	r6, #15
 800a8da:	dc38      	bgt.n	800a94e <_strtod_l+0x44e>
 800a8dc:	9b08      	ldr	r3, [sp, #32]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f43f ae49 	beq.w	800a576 <_strtod_l+0x76>
 800a8e4:	dd24      	ble.n	800a930 <_strtod_l+0x430>
 800a8e6:	2b16      	cmp	r3, #22
 800a8e8:	dc0b      	bgt.n	800a902 <_strtod_l+0x402>
 800a8ea:	4968      	ldr	r1, [pc, #416]	; (800aa8c <_strtod_l+0x58c>)
 800a8ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f4:	4642      	mov	r2, r8
 800a8f6:	464b      	mov	r3, r9
 800a8f8:	f7f5 feae 	bl	8000658 <__aeabi_dmul>
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	4689      	mov	r9, r1
 800a900:	e639      	b.n	800a576 <_strtod_l+0x76>
 800a902:	9a08      	ldr	r2, [sp, #32]
 800a904:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a908:	4293      	cmp	r3, r2
 800a90a:	db20      	blt.n	800a94e <_strtod_l+0x44e>
 800a90c:	4c5f      	ldr	r4, [pc, #380]	; (800aa8c <_strtod_l+0x58c>)
 800a90e:	f1c6 060f 	rsb	r6, r6, #15
 800a912:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91e:	f7f5 fe9b 	bl	8000658 <__aeabi_dmul>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	1b9e      	subs	r6, r3, r6
 800a926:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a92a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a92e:	e7e3      	b.n	800a8f8 <_strtod_l+0x3f8>
 800a930:	9b08      	ldr	r3, [sp, #32]
 800a932:	3316      	adds	r3, #22
 800a934:	db0b      	blt.n	800a94e <_strtod_l+0x44e>
 800a936:	9b05      	ldr	r3, [sp, #20]
 800a938:	1bdf      	subs	r7, r3, r7
 800a93a:	4b54      	ldr	r3, [pc, #336]	; (800aa8c <_strtod_l+0x58c>)
 800a93c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a940:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a944:	4640      	mov	r0, r8
 800a946:	4649      	mov	r1, r9
 800a948:	f7f5 ffb0 	bl	80008ac <__aeabi_ddiv>
 800a94c:	e7d6      	b.n	800a8fc <_strtod_l+0x3fc>
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	1b75      	subs	r5, r6, r5
 800a952:	441d      	add	r5, r3
 800a954:	2d00      	cmp	r5, #0
 800a956:	dd70      	ble.n	800aa3a <_strtod_l+0x53a>
 800a958:	f015 030f 	ands.w	r3, r5, #15
 800a95c:	d00a      	beq.n	800a974 <_strtod_l+0x474>
 800a95e:	494b      	ldr	r1, [pc, #300]	; (800aa8c <_strtod_l+0x58c>)
 800a960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96c:	f7f5 fe74 	bl	8000658 <__aeabi_dmul>
 800a970:	4680      	mov	r8, r0
 800a972:	4689      	mov	r9, r1
 800a974:	f035 050f 	bics.w	r5, r5, #15
 800a978:	d04d      	beq.n	800aa16 <_strtod_l+0x516>
 800a97a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a97e:	dd22      	ble.n	800a9c6 <_strtod_l+0x4c6>
 800a980:	2500      	movs	r5, #0
 800a982:	46ab      	mov	fp, r5
 800a984:	9509      	str	r5, [sp, #36]	; 0x24
 800a986:	9505      	str	r5, [sp, #20]
 800a988:	2322      	movs	r3, #34	; 0x22
 800a98a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800aa94 <_strtod_l+0x594>
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	f04f 0800 	mov.w	r8, #0
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	f43f aded 	beq.w	800a576 <_strtod_l+0x76>
 800a99c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f001 fa04 	bl	800bdac <_Bfree>
 800a9a4:	9905      	ldr	r1, [sp, #20]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f001 fa00 	bl	800bdac <_Bfree>
 800a9ac:	4659      	mov	r1, fp
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f001 f9fc 	bl	800bdac <_Bfree>
 800a9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f001 f9f8 	bl	800bdac <_Bfree>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f001 f9f4 	bl	800bdac <_Bfree>
 800a9c4:	e5d7      	b.n	800a576 <_strtod_l+0x76>
 800a9c6:	4b32      	ldr	r3, [pc, #200]	; (800aa90 <_strtod_l+0x590>)
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	112d      	asrs	r5, r5, #4
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	469a      	mov	sl, r3
 800a9d4:	2d01      	cmp	r5, #1
 800a9d6:	dc21      	bgt.n	800aa1c <_strtod_l+0x51c>
 800a9d8:	b10b      	cbz	r3, 800a9de <_strtod_l+0x4de>
 800a9da:	4680      	mov	r8, r0
 800a9dc:	4689      	mov	r9, r1
 800a9de:	492c      	ldr	r1, [pc, #176]	; (800aa90 <_strtod_l+0x590>)
 800a9e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a9e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a9e8:	4642      	mov	r2, r8
 800a9ea:	464b      	mov	r3, r9
 800a9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f0:	f7f5 fe32 	bl	8000658 <__aeabi_dmul>
 800a9f4:	4b27      	ldr	r3, [pc, #156]	; (800aa94 <_strtod_l+0x594>)
 800a9f6:	460a      	mov	r2, r1
 800a9f8:	400b      	ands	r3, r1
 800a9fa:	4927      	ldr	r1, [pc, #156]	; (800aa98 <_strtod_l+0x598>)
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	4680      	mov	r8, r0
 800aa00:	d8be      	bhi.n	800a980 <_strtod_l+0x480>
 800aa02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa06:	428b      	cmp	r3, r1
 800aa08:	bf86      	itte	hi
 800aa0a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800aa9c <_strtod_l+0x59c>
 800aa0e:	f04f 38ff 	movhi.w	r8, #4294967295
 800aa12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aa16:	2300      	movs	r3, #0
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	e07b      	b.n	800ab14 <_strtod_l+0x614>
 800aa1c:	07ea      	lsls	r2, r5, #31
 800aa1e:	d505      	bpl.n	800aa2c <_strtod_l+0x52c>
 800aa20:	9b04      	ldr	r3, [sp, #16]
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f5 fe17 	bl	8000658 <__aeabi_dmul>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	9a04      	ldr	r2, [sp, #16]
 800aa2e:	3208      	adds	r2, #8
 800aa30:	f10a 0a01 	add.w	sl, sl, #1
 800aa34:	106d      	asrs	r5, r5, #1
 800aa36:	9204      	str	r2, [sp, #16]
 800aa38:	e7cc      	b.n	800a9d4 <_strtod_l+0x4d4>
 800aa3a:	d0ec      	beq.n	800aa16 <_strtod_l+0x516>
 800aa3c:	426d      	negs	r5, r5
 800aa3e:	f015 020f 	ands.w	r2, r5, #15
 800aa42:	d00a      	beq.n	800aa5a <_strtod_l+0x55a>
 800aa44:	4b11      	ldr	r3, [pc, #68]	; (800aa8c <_strtod_l+0x58c>)
 800aa46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 ff2b 	bl	80008ac <__aeabi_ddiv>
 800aa56:	4680      	mov	r8, r0
 800aa58:	4689      	mov	r9, r1
 800aa5a:	112d      	asrs	r5, r5, #4
 800aa5c:	d0db      	beq.n	800aa16 <_strtod_l+0x516>
 800aa5e:	2d1f      	cmp	r5, #31
 800aa60:	dd1e      	ble.n	800aaa0 <_strtod_l+0x5a0>
 800aa62:	2500      	movs	r5, #0
 800aa64:	46ab      	mov	fp, r5
 800aa66:	9509      	str	r5, [sp, #36]	; 0x24
 800aa68:	9505      	str	r5, [sp, #20]
 800aa6a:	2322      	movs	r3, #34	; 0x22
 800aa6c:	f04f 0800 	mov.w	r8, #0
 800aa70:	f04f 0900 	mov.w	r9, #0
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	e78d      	b.n	800a994 <_strtod_l+0x494>
 800aa78:	0800d2ab 	.word	0x0800d2ab
 800aa7c:	0800d2c4 	.word	0x0800d2c4
 800aa80:	0800d2a2 	.word	0x0800d2a2
 800aa84:	0800d2a5 	.word	0x0800d2a5
 800aa88:	0800d628 	.word	0x0800d628
 800aa8c:	0800d418 	.word	0x0800d418
 800aa90:	0800d3f0 	.word	0x0800d3f0
 800aa94:	7ff00000 	.word	0x7ff00000
 800aa98:	7ca00000 	.word	0x7ca00000
 800aa9c:	7fefffff 	.word	0x7fefffff
 800aaa0:	f015 0310 	ands.w	r3, r5, #16
 800aaa4:	bf18      	it	ne
 800aaa6:	236a      	movne	r3, #106	; 0x6a
 800aaa8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ae4c <_strtod_l+0x94c>
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	2300      	movs	r3, #0
 800aab4:	07ea      	lsls	r2, r5, #31
 800aab6:	d504      	bpl.n	800aac2 <_strtod_l+0x5c2>
 800aab8:	e9da 2300 	ldrd	r2, r3, [sl]
 800aabc:	f7f5 fdcc 	bl	8000658 <__aeabi_dmul>
 800aac0:	2301      	movs	r3, #1
 800aac2:	106d      	asrs	r5, r5, #1
 800aac4:	f10a 0a08 	add.w	sl, sl, #8
 800aac8:	d1f4      	bne.n	800aab4 <_strtod_l+0x5b4>
 800aaca:	b10b      	cbz	r3, 800aad0 <_strtod_l+0x5d0>
 800aacc:	4680      	mov	r8, r0
 800aace:	4689      	mov	r9, r1
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	b1bb      	cbz	r3, 800ab04 <_strtod_l+0x604>
 800aad4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800aad8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aadc:	2b00      	cmp	r3, #0
 800aade:	4649      	mov	r1, r9
 800aae0:	dd10      	ble.n	800ab04 <_strtod_l+0x604>
 800aae2:	2b1f      	cmp	r3, #31
 800aae4:	f340 811e 	ble.w	800ad24 <_strtod_l+0x824>
 800aae8:	2b34      	cmp	r3, #52	; 0x34
 800aaea:	bfde      	ittt	le
 800aaec:	f04f 33ff 	movle.w	r3, #4294967295
 800aaf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aaf4:	4093      	lslle	r3, r2
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	bfcc      	ite	gt
 800aafc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ab00:	ea03 0901 	andle.w	r9, r3, r1
 800ab04:	2200      	movs	r2, #0
 800ab06:	2300      	movs	r3, #0
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f6 f80c 	bl	8000b28 <__aeabi_dcmpeq>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d1a6      	bne.n	800aa62 <_strtod_l+0x562>
 800ab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab1a:	4633      	mov	r3, r6
 800ab1c:	465a      	mov	r2, fp
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f001 f9ac 	bl	800be7c <__s2b>
 800ab24:	9009      	str	r0, [sp, #36]	; 0x24
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f43f af2a 	beq.w	800a980 <_strtod_l+0x480>
 800ab2c:	9a08      	ldr	r2, [sp, #32]
 800ab2e:	9b05      	ldr	r3, [sp, #20]
 800ab30:	2a00      	cmp	r2, #0
 800ab32:	eba3 0307 	sub.w	r3, r3, r7
 800ab36:	bfa8      	it	ge
 800ab38:	2300      	movge	r3, #0
 800ab3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab42:	9312      	str	r3, [sp, #72]	; 0x48
 800ab44:	46ab      	mov	fp, r5
 800ab46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab48:	4620      	mov	r0, r4
 800ab4a:	6859      	ldr	r1, [r3, #4]
 800ab4c:	f001 f8ee 	bl	800bd2c <_Balloc>
 800ab50:	9005      	str	r0, [sp, #20]
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f43f af18 	beq.w	800a988 <_strtod_l+0x488>
 800ab58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5a:	691a      	ldr	r2, [r3, #16]
 800ab5c:	3202      	adds	r2, #2
 800ab5e:	f103 010c 	add.w	r1, r3, #12
 800ab62:	0092      	lsls	r2, r2, #2
 800ab64:	300c      	adds	r0, #12
 800ab66:	f000 fc68 	bl	800b43a <memcpy>
 800ab6a:	ec49 8b10 	vmov	d0, r8, r9
 800ab6e:	aa18      	add	r2, sp, #96	; 0x60
 800ab70:	a917      	add	r1, sp, #92	; 0x5c
 800ab72:	4620      	mov	r0, r4
 800ab74:	f001 fcb6 	bl	800c4e4 <__d2b>
 800ab78:	ec49 8b18 	vmov	d8, r8, r9
 800ab7c:	9016      	str	r0, [sp, #88]	; 0x58
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f43f af02 	beq.w	800a988 <_strtod_l+0x488>
 800ab84:	2101      	movs	r1, #1
 800ab86:	4620      	mov	r0, r4
 800ab88:	f001 fa10 	bl	800bfac <__i2b>
 800ab8c:	4683      	mov	fp, r0
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f43f aefa 	beq.w	800a988 <_strtod_l+0x488>
 800ab94:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ab96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	bfab      	itete	ge
 800ab9c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ab9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aba0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aba2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aba6:	bfac      	ite	ge
 800aba8:	eb06 0a03 	addge.w	sl, r6, r3
 800abac:	1b9f      	sublt	r7, r3, r6
 800abae:	9b04      	ldr	r3, [sp, #16]
 800abb0:	1af6      	subs	r6, r6, r3
 800abb2:	4416      	add	r6, r2
 800abb4:	4ba0      	ldr	r3, [pc, #640]	; (800ae38 <_strtod_l+0x938>)
 800abb6:	3e01      	subs	r6, #1
 800abb8:	429e      	cmp	r6, r3
 800abba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abbe:	f280 80c4 	bge.w	800ad4a <_strtod_l+0x84a>
 800abc2:	1b9b      	subs	r3, r3, r6
 800abc4:	2b1f      	cmp	r3, #31
 800abc6:	eba2 0203 	sub.w	r2, r2, r3
 800abca:	f04f 0101 	mov.w	r1, #1
 800abce:	f300 80b0 	bgt.w	800ad32 <_strtod_l+0x832>
 800abd2:	fa01 f303 	lsl.w	r3, r1, r3
 800abd6:	930e      	str	r3, [sp, #56]	; 0x38
 800abd8:	2300      	movs	r3, #0
 800abda:	930d      	str	r3, [sp, #52]	; 0x34
 800abdc:	eb0a 0602 	add.w	r6, sl, r2
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	45b2      	cmp	sl, r6
 800abe4:	4417      	add	r7, r2
 800abe6:	441f      	add	r7, r3
 800abe8:	4653      	mov	r3, sl
 800abea:	bfa8      	it	ge
 800abec:	4633      	movge	r3, r6
 800abee:	42bb      	cmp	r3, r7
 800abf0:	bfa8      	it	ge
 800abf2:	463b      	movge	r3, r7
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bfc2      	ittt	gt
 800abf8:	1af6      	subgt	r6, r6, r3
 800abfa:	1aff      	subgt	r7, r7, r3
 800abfc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ac00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	dd17      	ble.n	800ac36 <_strtod_l+0x736>
 800ac06:	4659      	mov	r1, fp
 800ac08:	461a      	mov	r2, r3
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f001 fa8e 	bl	800c12c <__pow5mult>
 800ac10:	4683      	mov	fp, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f43f aeb8 	beq.w	800a988 <_strtod_l+0x488>
 800ac18:	4601      	mov	r1, r0
 800ac1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f001 f9db 	bl	800bfd8 <__multiply>
 800ac22:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f43f aeaf 	beq.w	800a988 <_strtod_l+0x488>
 800ac2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f001 f8bd 	bl	800bdac <_Bfree>
 800ac32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac34:	9316      	str	r3, [sp, #88]	; 0x58
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	f300 808c 	bgt.w	800ad54 <_strtod_l+0x854>
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	dd08      	ble.n	800ac54 <_strtod_l+0x754>
 800ac42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac44:	9905      	ldr	r1, [sp, #20]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f001 fa70 	bl	800c12c <__pow5mult>
 800ac4c:	9005      	str	r0, [sp, #20]
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f43f ae9a 	beq.w	800a988 <_strtod_l+0x488>
 800ac54:	2f00      	cmp	r7, #0
 800ac56:	dd08      	ble.n	800ac6a <_strtod_l+0x76a>
 800ac58:	9905      	ldr	r1, [sp, #20]
 800ac5a:	463a      	mov	r2, r7
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f001 fabf 	bl	800c1e0 <__lshift>
 800ac62:	9005      	str	r0, [sp, #20]
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f43f ae8f 	beq.w	800a988 <_strtod_l+0x488>
 800ac6a:	f1ba 0f00 	cmp.w	sl, #0
 800ac6e:	dd08      	ble.n	800ac82 <_strtod_l+0x782>
 800ac70:	4659      	mov	r1, fp
 800ac72:	4652      	mov	r2, sl
 800ac74:	4620      	mov	r0, r4
 800ac76:	f001 fab3 	bl	800c1e0 <__lshift>
 800ac7a:	4683      	mov	fp, r0
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f43f ae83 	beq.w	800a988 <_strtod_l+0x488>
 800ac82:	9a05      	ldr	r2, [sp, #20]
 800ac84:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac86:	4620      	mov	r0, r4
 800ac88:	f001 fb32 	bl	800c2f0 <__mdiff>
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f ae7a 	beq.w	800a988 <_strtod_l+0x488>
 800ac94:	68c3      	ldr	r3, [r0, #12]
 800ac96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60c3      	str	r3, [r0, #12]
 800ac9c:	4659      	mov	r1, fp
 800ac9e:	f001 fb0b 	bl	800c2b8 <__mcmp>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	da60      	bge.n	800ad68 <_strtod_l+0x868>
 800aca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aca8:	ea53 0308 	orrs.w	r3, r3, r8
 800acac:	f040 8084 	bne.w	800adb8 <_strtod_l+0x8b8>
 800acb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d17f      	bne.n	800adb8 <_strtod_l+0x8b8>
 800acb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acbc:	0d1b      	lsrs	r3, r3, #20
 800acbe:	051b      	lsls	r3, r3, #20
 800acc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acc4:	d978      	bls.n	800adb8 <_strtod_l+0x8b8>
 800acc6:	696b      	ldr	r3, [r5, #20]
 800acc8:	b913      	cbnz	r3, 800acd0 <_strtod_l+0x7d0>
 800acca:	692b      	ldr	r3, [r5, #16]
 800accc:	2b01      	cmp	r3, #1
 800acce:	dd73      	ble.n	800adb8 <_strtod_l+0x8b8>
 800acd0:	4629      	mov	r1, r5
 800acd2:	2201      	movs	r2, #1
 800acd4:	4620      	mov	r0, r4
 800acd6:	f001 fa83 	bl	800c1e0 <__lshift>
 800acda:	4659      	mov	r1, fp
 800acdc:	4605      	mov	r5, r0
 800acde:	f001 faeb 	bl	800c2b8 <__mcmp>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dd68      	ble.n	800adb8 <_strtod_l+0x8b8>
 800ace6:	9904      	ldr	r1, [sp, #16]
 800ace8:	4a54      	ldr	r2, [pc, #336]	; (800ae3c <_strtod_l+0x93c>)
 800acea:	464b      	mov	r3, r9
 800acec:	2900      	cmp	r1, #0
 800acee:	f000 8084 	beq.w	800adfa <_strtod_l+0x8fa>
 800acf2:	ea02 0109 	and.w	r1, r2, r9
 800acf6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800acfa:	dc7e      	bgt.n	800adfa <_strtod_l+0x8fa>
 800acfc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad00:	f77f aeb3 	ble.w	800aa6a <_strtod_l+0x56a>
 800ad04:	4b4e      	ldr	r3, [pc, #312]	; (800ae40 <_strtod_l+0x940>)
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f7f5 fca4 	bl	8000658 <__aeabi_dmul>
 800ad10:	4b4a      	ldr	r3, [pc, #296]	; (800ae3c <_strtod_l+0x93c>)
 800ad12:	400b      	ands	r3, r1
 800ad14:	4680      	mov	r8, r0
 800ad16:	4689      	mov	r9, r1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f47f ae3f 	bne.w	800a99c <_strtod_l+0x49c>
 800ad1e:	2322      	movs	r3, #34	; 0x22
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	e63b      	b.n	800a99c <_strtod_l+0x49c>
 800ad24:	f04f 32ff 	mov.w	r2, #4294967295
 800ad28:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2c:	ea03 0808 	and.w	r8, r3, r8
 800ad30:	e6e8      	b.n	800ab04 <_strtod_l+0x604>
 800ad32:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ad36:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ad3a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ad3e:	36e2      	adds	r6, #226	; 0xe2
 800ad40:	fa01 f306 	lsl.w	r3, r1, r6
 800ad44:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ad48:	e748      	b.n	800abdc <_strtod_l+0x6dc>
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ad52:	e743      	b.n	800abdc <_strtod_l+0x6dc>
 800ad54:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad56:	4632      	mov	r2, r6
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f001 fa41 	bl	800c1e0 <__lshift>
 800ad5e:	9016      	str	r0, [sp, #88]	; 0x58
 800ad60:	2800      	cmp	r0, #0
 800ad62:	f47f af6b 	bne.w	800ac3c <_strtod_l+0x73c>
 800ad66:	e60f      	b.n	800a988 <_strtod_l+0x488>
 800ad68:	46ca      	mov	sl, r9
 800ad6a:	d171      	bne.n	800ae50 <_strtod_l+0x950>
 800ad6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad72:	b352      	cbz	r2, 800adca <_strtod_l+0x8ca>
 800ad74:	4a33      	ldr	r2, [pc, #204]	; (800ae44 <_strtod_l+0x944>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d12a      	bne.n	800add0 <_strtod_l+0x8d0>
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	4641      	mov	r1, r8
 800ad7e:	b1fb      	cbz	r3, 800adc0 <_strtod_l+0x8c0>
 800ad80:	4b2e      	ldr	r3, [pc, #184]	; (800ae3c <_strtod_l+0x93c>)
 800ad82:	ea09 0303 	and.w	r3, r9, r3
 800ad86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8e:	d81a      	bhi.n	800adc6 <_strtod_l+0x8c6>
 800ad90:	0d1b      	lsrs	r3, r3, #20
 800ad92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad96:	fa02 f303 	lsl.w	r3, r2, r3
 800ad9a:	4299      	cmp	r1, r3
 800ad9c:	d118      	bne.n	800add0 <_strtod_l+0x8d0>
 800ad9e:	4b2a      	ldr	r3, [pc, #168]	; (800ae48 <_strtod_l+0x948>)
 800ada0:	459a      	cmp	sl, r3
 800ada2:	d102      	bne.n	800adaa <_strtod_l+0x8aa>
 800ada4:	3101      	adds	r1, #1
 800ada6:	f43f adef 	beq.w	800a988 <_strtod_l+0x488>
 800adaa:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <_strtod_l+0x93c>)
 800adac:	ea0a 0303 	and.w	r3, sl, r3
 800adb0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800adb4:	f04f 0800 	mov.w	r8, #0
 800adb8:	9b04      	ldr	r3, [sp, #16]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1a2      	bne.n	800ad04 <_strtod_l+0x804>
 800adbe:	e5ed      	b.n	800a99c <_strtod_l+0x49c>
 800adc0:	f04f 33ff 	mov.w	r3, #4294967295
 800adc4:	e7e9      	b.n	800ad9a <_strtod_l+0x89a>
 800adc6:	4613      	mov	r3, r2
 800adc8:	e7e7      	b.n	800ad9a <_strtod_l+0x89a>
 800adca:	ea53 0308 	orrs.w	r3, r3, r8
 800adce:	d08a      	beq.n	800ace6 <_strtod_l+0x7e6>
 800add0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add2:	b1e3      	cbz	r3, 800ae0e <_strtod_l+0x90e>
 800add4:	ea13 0f0a 	tst.w	r3, sl
 800add8:	d0ee      	beq.n	800adb8 <_strtod_l+0x8b8>
 800adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800addc:	9a04      	ldr	r2, [sp, #16]
 800adde:	4640      	mov	r0, r8
 800ade0:	4649      	mov	r1, r9
 800ade2:	b1c3      	cbz	r3, 800ae16 <_strtod_l+0x916>
 800ade4:	f7ff fb6d 	bl	800a4c2 <sulp>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	ec51 0b18 	vmov	r0, r1, d8
 800adf0:	f7f5 fa7c 	bl	80002ec <__adddf3>
 800adf4:	4680      	mov	r8, r0
 800adf6:	4689      	mov	r9, r1
 800adf8:	e7de      	b.n	800adb8 <_strtod_l+0x8b8>
 800adfa:	4013      	ands	r3, r2
 800adfc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ae04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ae08:	f04f 38ff 	mov.w	r8, #4294967295
 800ae0c:	e7d4      	b.n	800adb8 <_strtod_l+0x8b8>
 800ae0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae10:	ea13 0f08 	tst.w	r3, r8
 800ae14:	e7e0      	b.n	800add8 <_strtod_l+0x8d8>
 800ae16:	f7ff fb54 	bl	800a4c2 <sulp>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	ec51 0b18 	vmov	r0, r1, d8
 800ae22:	f7f5 fa61 	bl	80002e8 <__aeabi_dsub>
 800ae26:	2200      	movs	r2, #0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	4689      	mov	r9, r1
 800ae2e:	f7f5 fe7b 	bl	8000b28 <__aeabi_dcmpeq>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d0c0      	beq.n	800adb8 <_strtod_l+0x8b8>
 800ae36:	e618      	b.n	800aa6a <_strtod_l+0x56a>
 800ae38:	fffffc02 	.word	0xfffffc02
 800ae3c:	7ff00000 	.word	0x7ff00000
 800ae40:	39500000 	.word	0x39500000
 800ae44:	000fffff 	.word	0x000fffff
 800ae48:	7fefffff 	.word	0x7fefffff
 800ae4c:	0800d2d8 	.word	0x0800d2d8
 800ae50:	4659      	mov	r1, fp
 800ae52:	4628      	mov	r0, r5
 800ae54:	f001 fba0 	bl	800c598 <__ratio>
 800ae58:	ec57 6b10 	vmov	r6, r7, d0
 800ae5c:	ee10 0a10 	vmov	r0, s0
 800ae60:	2200      	movs	r2, #0
 800ae62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fe72 	bl	8000b50 <__aeabi_dcmple>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d071      	beq.n	800af54 <_strtod_l+0xa54>
 800ae70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d17c      	bne.n	800af70 <_strtod_l+0xa70>
 800ae76:	f1b8 0f00 	cmp.w	r8, #0
 800ae7a:	d15a      	bne.n	800af32 <_strtod_l+0xa32>
 800ae7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d15d      	bne.n	800af40 <_strtod_l+0xa40>
 800ae84:	4b90      	ldr	r3, [pc, #576]	; (800b0c8 <_strtod_l+0xbc8>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f7f5 fe56 	bl	8000b3c <__aeabi_dcmplt>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d15c      	bne.n	800af4e <_strtod_l+0xa4e>
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	4b8c      	ldr	r3, [pc, #560]	; (800b0cc <_strtod_l+0xbcc>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f7f5 fbdc 	bl	8000658 <__aeabi_dmul>
 800aea0:	4606      	mov	r6, r0
 800aea2:	460f      	mov	r7, r1
 800aea4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aea8:	9606      	str	r6, [sp, #24]
 800aeaa:	9307      	str	r3, [sp, #28]
 800aeac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aeb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aeb4:	4b86      	ldr	r3, [pc, #536]	; (800b0d0 <_strtod_l+0xbd0>)
 800aeb6:	ea0a 0303 	and.w	r3, sl, r3
 800aeba:	930d      	str	r3, [sp, #52]	; 0x34
 800aebc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aebe:	4b85      	ldr	r3, [pc, #532]	; (800b0d4 <_strtod_l+0xbd4>)
 800aec0:	429a      	cmp	r2, r3
 800aec2:	f040 8090 	bne.w	800afe6 <_strtod_l+0xae6>
 800aec6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800aeca:	ec49 8b10 	vmov	d0, r8, r9
 800aece:	f001 fa99 	bl	800c404 <__ulp>
 800aed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aed6:	ec51 0b10 	vmov	r0, r1, d0
 800aeda:	f7f5 fbbd 	bl	8000658 <__aeabi_dmul>
 800aede:	4642      	mov	r2, r8
 800aee0:	464b      	mov	r3, r9
 800aee2:	f7f5 fa03 	bl	80002ec <__adddf3>
 800aee6:	460b      	mov	r3, r1
 800aee8:	4979      	ldr	r1, [pc, #484]	; (800b0d0 <_strtod_l+0xbd0>)
 800aeea:	4a7b      	ldr	r2, [pc, #492]	; (800b0d8 <_strtod_l+0xbd8>)
 800aeec:	4019      	ands	r1, r3
 800aeee:	4291      	cmp	r1, r2
 800aef0:	4680      	mov	r8, r0
 800aef2:	d944      	bls.n	800af7e <_strtod_l+0xa7e>
 800aef4:	ee18 2a90 	vmov	r2, s17
 800aef8:	4b78      	ldr	r3, [pc, #480]	; (800b0dc <_strtod_l+0xbdc>)
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d104      	bne.n	800af08 <_strtod_l+0xa08>
 800aefe:	ee18 3a10 	vmov	r3, s16
 800af02:	3301      	adds	r3, #1
 800af04:	f43f ad40 	beq.w	800a988 <_strtod_l+0x488>
 800af08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b0dc <_strtod_l+0xbdc>
 800af0c:	f04f 38ff 	mov.w	r8, #4294967295
 800af10:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af12:	4620      	mov	r0, r4
 800af14:	f000 ff4a 	bl	800bdac <_Bfree>
 800af18:	9905      	ldr	r1, [sp, #20]
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 ff46 	bl	800bdac <_Bfree>
 800af20:	4659      	mov	r1, fp
 800af22:	4620      	mov	r0, r4
 800af24:	f000 ff42 	bl	800bdac <_Bfree>
 800af28:	4629      	mov	r1, r5
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 ff3e 	bl	800bdac <_Bfree>
 800af30:	e609      	b.n	800ab46 <_strtod_l+0x646>
 800af32:	f1b8 0f01 	cmp.w	r8, #1
 800af36:	d103      	bne.n	800af40 <_strtod_l+0xa40>
 800af38:	f1b9 0f00 	cmp.w	r9, #0
 800af3c:	f43f ad95 	beq.w	800aa6a <_strtod_l+0x56a>
 800af40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b098 <_strtod_l+0xb98>
 800af44:	4f60      	ldr	r7, [pc, #384]	; (800b0c8 <_strtod_l+0xbc8>)
 800af46:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af4a:	2600      	movs	r6, #0
 800af4c:	e7ae      	b.n	800aeac <_strtod_l+0x9ac>
 800af4e:	4f5f      	ldr	r7, [pc, #380]	; (800b0cc <_strtod_l+0xbcc>)
 800af50:	2600      	movs	r6, #0
 800af52:	e7a7      	b.n	800aea4 <_strtod_l+0x9a4>
 800af54:	4b5d      	ldr	r3, [pc, #372]	; (800b0cc <_strtod_l+0xbcc>)
 800af56:	4630      	mov	r0, r6
 800af58:	4639      	mov	r1, r7
 800af5a:	2200      	movs	r2, #0
 800af5c:	f7f5 fb7c 	bl	8000658 <__aeabi_dmul>
 800af60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af62:	4606      	mov	r6, r0
 800af64:	460f      	mov	r7, r1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d09c      	beq.n	800aea4 <_strtod_l+0x9a4>
 800af6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af6e:	e79d      	b.n	800aeac <_strtod_l+0x9ac>
 800af70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b0a0 <_strtod_l+0xba0>
 800af74:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af78:	ec57 6b17 	vmov	r6, r7, d7
 800af7c:	e796      	b.n	800aeac <_strtod_l+0x9ac>
 800af7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800af82:	9b04      	ldr	r3, [sp, #16]
 800af84:	46ca      	mov	sl, r9
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1c2      	bne.n	800af10 <_strtod_l+0xa10>
 800af8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af90:	0d1b      	lsrs	r3, r3, #20
 800af92:	051b      	lsls	r3, r3, #20
 800af94:	429a      	cmp	r2, r3
 800af96:	d1bb      	bne.n	800af10 <_strtod_l+0xa10>
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fe66 	bl	8000c6c <__aeabi_d2lz>
 800afa0:	f7f5 fb2c 	bl	80005fc <__aeabi_l2d>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4630      	mov	r0, r6
 800afaa:	4639      	mov	r1, r7
 800afac:	f7f5 f99c 	bl	80002e8 <__aeabi_dsub>
 800afb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afb6:	ea43 0308 	orr.w	r3, r3, r8
 800afba:	4313      	orrs	r3, r2
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	d054      	beq.n	800b06c <_strtod_l+0xb6c>
 800afc2:	a339      	add	r3, pc, #228	; (adr r3, 800b0a8 <_strtod_l+0xba8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 fdb8 	bl	8000b3c <__aeabi_dcmplt>
 800afcc:	2800      	cmp	r0, #0
 800afce:	f47f ace5 	bne.w	800a99c <_strtod_l+0x49c>
 800afd2:	a337      	add	r3, pc, #220	; (adr r3, 800b0b0 <_strtod_l+0xbb0>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	f7f5 fdcc 	bl	8000b78 <__aeabi_dcmpgt>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d095      	beq.n	800af10 <_strtod_l+0xa10>
 800afe4:	e4da      	b.n	800a99c <_strtod_l+0x49c>
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	b333      	cbz	r3, 800b038 <_strtod_l+0xb38>
 800afea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aff0:	d822      	bhi.n	800b038 <_strtod_l+0xb38>
 800aff2:	a331      	add	r3, pc, #196	; (adr r3, 800b0b8 <_strtod_l+0xbb8>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	4630      	mov	r0, r6
 800affa:	4639      	mov	r1, r7
 800affc:	f7f5 fda8 	bl	8000b50 <__aeabi_dcmple>
 800b000:	b1a0      	cbz	r0, 800b02c <_strtod_l+0xb2c>
 800b002:	4639      	mov	r1, r7
 800b004:	4630      	mov	r0, r6
 800b006:	f7f5 fdc1 	bl	8000b8c <__aeabi_d2uiz>
 800b00a:	2801      	cmp	r0, #1
 800b00c:	bf38      	it	cc
 800b00e:	2001      	movcc	r0, #1
 800b010:	f7f5 faa8 	bl	8000564 <__aeabi_ui2d>
 800b014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b016:	4606      	mov	r6, r0
 800b018:	460f      	mov	r7, r1
 800b01a:	bb23      	cbnz	r3, 800b066 <_strtod_l+0xb66>
 800b01c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b020:	9010      	str	r0, [sp, #64]	; 0x40
 800b022:	9311      	str	r3, [sp, #68]	; 0x44
 800b024:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b028:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b02c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b02e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b030:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b034:	1a9b      	subs	r3, r3, r2
 800b036:	930f      	str	r3, [sp, #60]	; 0x3c
 800b038:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b03c:	eeb0 0a48 	vmov.f32	s0, s16
 800b040:	eef0 0a68 	vmov.f32	s1, s17
 800b044:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b048:	f001 f9dc 	bl	800c404 <__ulp>
 800b04c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b050:	ec53 2b10 	vmov	r2, r3, d0
 800b054:	f7f5 fb00 	bl	8000658 <__aeabi_dmul>
 800b058:	ec53 2b18 	vmov	r2, r3, d8
 800b05c:	f7f5 f946 	bl	80002ec <__adddf3>
 800b060:	4680      	mov	r8, r0
 800b062:	4689      	mov	r9, r1
 800b064:	e78d      	b.n	800af82 <_strtod_l+0xa82>
 800b066:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b06a:	e7db      	b.n	800b024 <_strtod_l+0xb24>
 800b06c:	a314      	add	r3, pc, #80	; (adr r3, 800b0c0 <_strtod_l+0xbc0>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 fd63 	bl	8000b3c <__aeabi_dcmplt>
 800b076:	e7b3      	b.n	800afe0 <_strtod_l+0xae0>
 800b078:	2300      	movs	r3, #0
 800b07a:	930a      	str	r3, [sp, #40]	; 0x28
 800b07c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	f7ff ba7c 	b.w	800a57e <_strtod_l+0x7e>
 800b086:	2a65      	cmp	r2, #101	; 0x65
 800b088:	f43f ab75 	beq.w	800a776 <_strtod_l+0x276>
 800b08c:	2a45      	cmp	r2, #69	; 0x45
 800b08e:	f43f ab72 	beq.w	800a776 <_strtod_l+0x276>
 800b092:	2301      	movs	r3, #1
 800b094:	f7ff bbaa 	b.w	800a7ec <_strtod_l+0x2ec>
 800b098:	00000000 	.word	0x00000000
 800b09c:	bff00000 	.word	0xbff00000
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	3ff00000 	.word	0x3ff00000
 800b0a8:	94a03595 	.word	0x94a03595
 800b0ac:	3fdfffff 	.word	0x3fdfffff
 800b0b0:	35afe535 	.word	0x35afe535
 800b0b4:	3fe00000 	.word	0x3fe00000
 800b0b8:	ffc00000 	.word	0xffc00000
 800b0bc:	41dfffff 	.word	0x41dfffff
 800b0c0:	94a03595 	.word	0x94a03595
 800b0c4:	3fcfffff 	.word	0x3fcfffff
 800b0c8:	3ff00000 	.word	0x3ff00000
 800b0cc:	3fe00000 	.word	0x3fe00000
 800b0d0:	7ff00000 	.word	0x7ff00000
 800b0d4:	7fe00000 	.word	0x7fe00000
 800b0d8:	7c9fffff 	.word	0x7c9fffff
 800b0dc:	7fefffff 	.word	0x7fefffff

0800b0e0 <strtod>:
 800b0e0:	460a      	mov	r2, r1
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	4802      	ldr	r0, [pc, #8]	; (800b0f0 <strtod+0x10>)
 800b0e6:	4b03      	ldr	r3, [pc, #12]	; (800b0f4 <strtod+0x14>)
 800b0e8:	6800      	ldr	r0, [r0, #0]
 800b0ea:	f7ff ba09 	b.w	800a500 <_strtod_l>
 800b0ee:	bf00      	nop
 800b0f0:	20000348 	.word	0x20000348
 800b0f4:	20000190 	.word	0x20000190

0800b0f8 <std>:
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b106:	6083      	str	r3, [r0, #8]
 800b108:	8181      	strh	r1, [r0, #12]
 800b10a:	6643      	str	r3, [r0, #100]	; 0x64
 800b10c:	81c2      	strh	r2, [r0, #14]
 800b10e:	6183      	str	r3, [r0, #24]
 800b110:	4619      	mov	r1, r3
 800b112:	2208      	movs	r2, #8
 800b114:	305c      	adds	r0, #92	; 0x5c
 800b116:	f000 f8f4 	bl	800b302 <memset>
 800b11a:	4b0d      	ldr	r3, [pc, #52]	; (800b150 <std+0x58>)
 800b11c:	6263      	str	r3, [r4, #36]	; 0x24
 800b11e:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <std+0x5c>)
 800b120:	62a3      	str	r3, [r4, #40]	; 0x28
 800b122:	4b0d      	ldr	r3, [pc, #52]	; (800b158 <std+0x60>)
 800b124:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b126:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <std+0x64>)
 800b128:	6323      	str	r3, [r4, #48]	; 0x30
 800b12a:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <std+0x68>)
 800b12c:	6224      	str	r4, [r4, #32]
 800b12e:	429c      	cmp	r4, r3
 800b130:	d006      	beq.n	800b140 <std+0x48>
 800b132:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b136:	4294      	cmp	r4, r2
 800b138:	d002      	beq.n	800b140 <std+0x48>
 800b13a:	33d0      	adds	r3, #208	; 0xd0
 800b13c:	429c      	cmp	r4, r3
 800b13e:	d105      	bne.n	800b14c <std+0x54>
 800b140:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b148:	f000 b974 	b.w	800b434 <__retarget_lock_init_recursive>
 800b14c:	bd10      	pop	{r4, pc}
 800b14e:	bf00      	nop
 800b150:	0800b27d 	.word	0x0800b27d
 800b154:	0800b29f 	.word	0x0800b29f
 800b158:	0800b2d7 	.word	0x0800b2d7
 800b15c:	0800b2fb 	.word	0x0800b2fb
 800b160:	20001e5c 	.word	0x20001e5c

0800b164 <stdio_exit_handler>:
 800b164:	4a02      	ldr	r2, [pc, #8]	; (800b170 <stdio_exit_handler+0xc>)
 800b166:	4903      	ldr	r1, [pc, #12]	; (800b174 <stdio_exit_handler+0x10>)
 800b168:	4803      	ldr	r0, [pc, #12]	; (800b178 <stdio_exit_handler+0x14>)
 800b16a:	f000 b869 	b.w	800b240 <_fwalk_sglue>
 800b16e:	bf00      	nop
 800b170:	20000184 	.word	0x20000184
 800b174:	0800c7ad 	.word	0x0800c7ad
 800b178:	200002fc 	.word	0x200002fc

0800b17c <cleanup_stdio>:
 800b17c:	6841      	ldr	r1, [r0, #4]
 800b17e:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <cleanup_stdio+0x34>)
 800b180:	4299      	cmp	r1, r3
 800b182:	b510      	push	{r4, lr}
 800b184:	4604      	mov	r4, r0
 800b186:	d001      	beq.n	800b18c <cleanup_stdio+0x10>
 800b188:	f001 fb10 	bl	800c7ac <_fflush_r>
 800b18c:	68a1      	ldr	r1, [r4, #8]
 800b18e:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <cleanup_stdio+0x38>)
 800b190:	4299      	cmp	r1, r3
 800b192:	d002      	beq.n	800b19a <cleanup_stdio+0x1e>
 800b194:	4620      	mov	r0, r4
 800b196:	f001 fb09 	bl	800c7ac <_fflush_r>
 800b19a:	68e1      	ldr	r1, [r4, #12]
 800b19c:	4b06      	ldr	r3, [pc, #24]	; (800b1b8 <cleanup_stdio+0x3c>)
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	d004      	beq.n	800b1ac <cleanup_stdio+0x30>
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a8:	f001 bb00 	b.w	800c7ac <_fflush_r>
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20001e5c 	.word	0x20001e5c
 800b1b4:	20001ec4 	.word	0x20001ec4
 800b1b8:	20001f2c 	.word	0x20001f2c

0800b1bc <global_stdio_init.part.0>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	4b0b      	ldr	r3, [pc, #44]	; (800b1ec <global_stdio_init.part.0+0x30>)
 800b1c0:	4c0b      	ldr	r4, [pc, #44]	; (800b1f0 <global_stdio_init.part.0+0x34>)
 800b1c2:	4a0c      	ldr	r2, [pc, #48]	; (800b1f4 <global_stdio_init.part.0+0x38>)
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2104      	movs	r1, #4
 800b1cc:	f7ff ff94 	bl	800b0f8 <std>
 800b1d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	2109      	movs	r1, #9
 800b1d8:	f7ff ff8e 	bl	800b0f8 <std>
 800b1dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e6:	2112      	movs	r1, #18
 800b1e8:	f7ff bf86 	b.w	800b0f8 <std>
 800b1ec:	20001f94 	.word	0x20001f94
 800b1f0:	20001e5c 	.word	0x20001e5c
 800b1f4:	0800b165 	.word	0x0800b165

0800b1f8 <__sfp_lock_acquire>:
 800b1f8:	4801      	ldr	r0, [pc, #4]	; (800b200 <__sfp_lock_acquire+0x8>)
 800b1fa:	f000 b91c 	b.w	800b436 <__retarget_lock_acquire_recursive>
 800b1fe:	bf00      	nop
 800b200:	20001f9d 	.word	0x20001f9d

0800b204 <__sfp_lock_release>:
 800b204:	4801      	ldr	r0, [pc, #4]	; (800b20c <__sfp_lock_release+0x8>)
 800b206:	f000 b917 	b.w	800b438 <__retarget_lock_release_recursive>
 800b20a:	bf00      	nop
 800b20c:	20001f9d 	.word	0x20001f9d

0800b210 <__sinit>:
 800b210:	b510      	push	{r4, lr}
 800b212:	4604      	mov	r4, r0
 800b214:	f7ff fff0 	bl	800b1f8 <__sfp_lock_acquire>
 800b218:	6a23      	ldr	r3, [r4, #32]
 800b21a:	b11b      	cbz	r3, 800b224 <__sinit+0x14>
 800b21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b220:	f7ff bff0 	b.w	800b204 <__sfp_lock_release>
 800b224:	4b04      	ldr	r3, [pc, #16]	; (800b238 <__sinit+0x28>)
 800b226:	6223      	str	r3, [r4, #32]
 800b228:	4b04      	ldr	r3, [pc, #16]	; (800b23c <__sinit+0x2c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1f5      	bne.n	800b21c <__sinit+0xc>
 800b230:	f7ff ffc4 	bl	800b1bc <global_stdio_init.part.0>
 800b234:	e7f2      	b.n	800b21c <__sinit+0xc>
 800b236:	bf00      	nop
 800b238:	0800b17d 	.word	0x0800b17d
 800b23c:	20001f94 	.word	0x20001f94

0800b240 <_fwalk_sglue>:
 800b240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b244:	4607      	mov	r7, r0
 800b246:	4688      	mov	r8, r1
 800b248:	4614      	mov	r4, r2
 800b24a:	2600      	movs	r6, #0
 800b24c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b250:	f1b9 0901 	subs.w	r9, r9, #1
 800b254:	d505      	bpl.n	800b262 <_fwalk_sglue+0x22>
 800b256:	6824      	ldr	r4, [r4, #0]
 800b258:	2c00      	cmp	r4, #0
 800b25a:	d1f7      	bne.n	800b24c <_fwalk_sglue+0xc>
 800b25c:	4630      	mov	r0, r6
 800b25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b262:	89ab      	ldrh	r3, [r5, #12]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d907      	bls.n	800b278 <_fwalk_sglue+0x38>
 800b268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b26c:	3301      	adds	r3, #1
 800b26e:	d003      	beq.n	800b278 <_fwalk_sglue+0x38>
 800b270:	4629      	mov	r1, r5
 800b272:	4638      	mov	r0, r7
 800b274:	47c0      	blx	r8
 800b276:	4306      	orrs	r6, r0
 800b278:	3568      	adds	r5, #104	; 0x68
 800b27a:	e7e9      	b.n	800b250 <_fwalk_sglue+0x10>

0800b27c <__sread>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	460c      	mov	r4, r1
 800b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b284:	f000 f888 	bl	800b398 <_read_r>
 800b288:	2800      	cmp	r0, #0
 800b28a:	bfab      	itete	ge
 800b28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b28e:	89a3      	ldrhlt	r3, [r4, #12]
 800b290:	181b      	addge	r3, r3, r0
 800b292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b296:	bfac      	ite	ge
 800b298:	6563      	strge	r3, [r4, #84]	; 0x54
 800b29a:	81a3      	strhlt	r3, [r4, #12]
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <__swrite>:
 800b29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	461f      	mov	r7, r3
 800b2a4:	898b      	ldrh	r3, [r1, #12]
 800b2a6:	05db      	lsls	r3, r3, #23
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	4616      	mov	r6, r2
 800b2ae:	d505      	bpl.n	800b2bc <__swrite+0x1e>
 800b2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f000 f85c 	bl	800b374 <_lseek_r>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d2:	f000 b873 	b.w	800b3bc <_write_r>

0800b2d6 <__sseek>:
 800b2d6:	b510      	push	{r4, lr}
 800b2d8:	460c      	mov	r4, r1
 800b2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2de:	f000 f849 	bl	800b374 <_lseek_r>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	bf15      	itete	ne
 800b2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2f2:	81a3      	strheq	r3, [r4, #12]
 800b2f4:	bf18      	it	ne
 800b2f6:	81a3      	strhne	r3, [r4, #12]
 800b2f8:	bd10      	pop	{r4, pc}

0800b2fa <__sclose>:
 800b2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fe:	f000 b829 	b.w	800b354 <_close_r>

0800b302 <memset>:
 800b302:	4402      	add	r2, r0
 800b304:	4603      	mov	r3, r0
 800b306:	4293      	cmp	r3, r2
 800b308:	d100      	bne.n	800b30c <memset+0xa>
 800b30a:	4770      	bx	lr
 800b30c:	f803 1b01 	strb.w	r1, [r3], #1
 800b310:	e7f9      	b.n	800b306 <memset+0x4>

0800b312 <strcat>:
 800b312:	b510      	push	{r4, lr}
 800b314:	4602      	mov	r2, r0
 800b316:	7814      	ldrb	r4, [r2, #0]
 800b318:	4613      	mov	r3, r2
 800b31a:	3201      	adds	r2, #1
 800b31c:	2c00      	cmp	r4, #0
 800b31e:	d1fa      	bne.n	800b316 <strcat+0x4>
 800b320:	3b01      	subs	r3, #1
 800b322:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b32a:	2a00      	cmp	r2, #0
 800b32c:	d1f9      	bne.n	800b322 <strcat+0x10>
 800b32e:	bd10      	pop	{r4, pc}

0800b330 <strncmp>:
 800b330:	b510      	push	{r4, lr}
 800b332:	b16a      	cbz	r2, 800b350 <strncmp+0x20>
 800b334:	3901      	subs	r1, #1
 800b336:	1884      	adds	r4, r0, r2
 800b338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b33c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b340:	429a      	cmp	r2, r3
 800b342:	d103      	bne.n	800b34c <strncmp+0x1c>
 800b344:	42a0      	cmp	r0, r4
 800b346:	d001      	beq.n	800b34c <strncmp+0x1c>
 800b348:	2a00      	cmp	r2, #0
 800b34a:	d1f5      	bne.n	800b338 <strncmp+0x8>
 800b34c:	1ad0      	subs	r0, r2, r3
 800b34e:	bd10      	pop	{r4, pc}
 800b350:	4610      	mov	r0, r2
 800b352:	e7fc      	b.n	800b34e <strncmp+0x1e>

0800b354 <_close_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d06      	ldr	r5, [pc, #24]	; (800b370 <_close_r+0x1c>)
 800b358:	2300      	movs	r3, #0
 800b35a:	4604      	mov	r4, r0
 800b35c:	4608      	mov	r0, r1
 800b35e:	602b      	str	r3, [r5, #0]
 800b360:	f7f6 fabd 	bl	80018de <_close>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_close_r+0x1a>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_close_r+0x1a>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	20001f98 	.word	0x20001f98

0800b374 <_lseek_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d07      	ldr	r5, [pc, #28]	; (800b394 <_lseek_r+0x20>)
 800b378:	4604      	mov	r4, r0
 800b37a:	4608      	mov	r0, r1
 800b37c:	4611      	mov	r1, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	602a      	str	r2, [r5, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	f7f6 fad2 	bl	800192c <_lseek>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d102      	bne.n	800b392 <_lseek_r+0x1e>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	b103      	cbz	r3, 800b392 <_lseek_r+0x1e>
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	20001f98 	.word	0x20001f98

0800b398 <_read_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d07      	ldr	r5, [pc, #28]	; (800b3b8 <_read_r+0x20>)
 800b39c:	4604      	mov	r4, r0
 800b39e:	4608      	mov	r0, r1
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	602a      	str	r2, [r5, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f7f6 fa60 	bl	800186c <_read>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_read_r+0x1e>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_read_r+0x1e>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	20001f98 	.word	0x20001f98

0800b3bc <_write_r>:
 800b3bc:	b538      	push	{r3, r4, r5, lr}
 800b3be:	4d07      	ldr	r5, [pc, #28]	; (800b3dc <_write_r+0x20>)
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	4608      	mov	r0, r1
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	602a      	str	r2, [r5, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f7f6 fa6b 	bl	80018a6 <_write>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d102      	bne.n	800b3da <_write_r+0x1e>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	b103      	cbz	r3, 800b3da <_write_r+0x1e>
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	20001f98 	.word	0x20001f98

0800b3e0 <__errno>:
 800b3e0:	4b01      	ldr	r3, [pc, #4]	; (800b3e8 <__errno+0x8>)
 800b3e2:	6818      	ldr	r0, [r3, #0]
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	20000348 	.word	0x20000348

0800b3ec <__libc_init_array>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	4d0d      	ldr	r5, [pc, #52]	; (800b424 <__libc_init_array+0x38>)
 800b3f0:	4c0d      	ldr	r4, [pc, #52]	; (800b428 <__libc_init_array+0x3c>)
 800b3f2:	1b64      	subs	r4, r4, r5
 800b3f4:	10a4      	asrs	r4, r4, #2
 800b3f6:	2600      	movs	r6, #0
 800b3f8:	42a6      	cmp	r6, r4
 800b3fa:	d109      	bne.n	800b410 <__libc_init_array+0x24>
 800b3fc:	4d0b      	ldr	r5, [pc, #44]	; (800b42c <__libc_init_array+0x40>)
 800b3fe:	4c0c      	ldr	r4, [pc, #48]	; (800b430 <__libc_init_array+0x44>)
 800b400:	f001 fe92 	bl	800d128 <_init>
 800b404:	1b64      	subs	r4, r4, r5
 800b406:	10a4      	asrs	r4, r4, #2
 800b408:	2600      	movs	r6, #0
 800b40a:	42a6      	cmp	r6, r4
 800b40c:	d105      	bne.n	800b41a <__libc_init_array+0x2e>
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	f855 3b04 	ldr.w	r3, [r5], #4
 800b414:	4798      	blx	r3
 800b416:	3601      	adds	r6, #1
 800b418:	e7ee      	b.n	800b3f8 <__libc_init_array+0xc>
 800b41a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41e:	4798      	blx	r3
 800b420:	3601      	adds	r6, #1
 800b422:	e7f2      	b.n	800b40a <__libc_init_array+0x1e>
 800b424:	0800d65c 	.word	0x0800d65c
 800b428:	0800d65c 	.word	0x0800d65c
 800b42c:	0800d65c 	.word	0x0800d65c
 800b430:	0800d660 	.word	0x0800d660

0800b434 <__retarget_lock_init_recursive>:
 800b434:	4770      	bx	lr

0800b436 <__retarget_lock_acquire_recursive>:
 800b436:	4770      	bx	lr

0800b438 <__retarget_lock_release_recursive>:
 800b438:	4770      	bx	lr

0800b43a <memcpy>:
 800b43a:	440a      	add	r2, r1
 800b43c:	4291      	cmp	r1, r2
 800b43e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b442:	d100      	bne.n	800b446 <memcpy+0xc>
 800b444:	4770      	bx	lr
 800b446:	b510      	push	{r4, lr}
 800b448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b44c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b450:	4291      	cmp	r1, r2
 800b452:	d1f9      	bne.n	800b448 <memcpy+0xe>
 800b454:	bd10      	pop	{r4, pc}
	...

0800b458 <nan>:
 800b458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b460 <nan+0x8>
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	00000000 	.word	0x00000000
 800b464:	7ff80000 	.word	0x7ff80000

0800b468 <_free_r>:
 800b468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b46a:	2900      	cmp	r1, #0
 800b46c:	d044      	beq.n	800b4f8 <_free_r+0x90>
 800b46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b472:	9001      	str	r0, [sp, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f1a1 0404 	sub.w	r4, r1, #4
 800b47a:	bfb8      	it	lt
 800b47c:	18e4      	addlt	r4, r4, r3
 800b47e:	f000 fc49 	bl	800bd14 <__malloc_lock>
 800b482:	4a1e      	ldr	r2, [pc, #120]	; (800b4fc <_free_r+0x94>)
 800b484:	9801      	ldr	r0, [sp, #4]
 800b486:	6813      	ldr	r3, [r2, #0]
 800b488:	b933      	cbnz	r3, 800b498 <_free_r+0x30>
 800b48a:	6063      	str	r3, [r4, #4]
 800b48c:	6014      	str	r4, [r2, #0]
 800b48e:	b003      	add	sp, #12
 800b490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b494:	f000 bc44 	b.w	800bd20 <__malloc_unlock>
 800b498:	42a3      	cmp	r3, r4
 800b49a:	d908      	bls.n	800b4ae <_free_r+0x46>
 800b49c:	6825      	ldr	r5, [r4, #0]
 800b49e:	1961      	adds	r1, r4, r5
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf01      	itttt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	1949      	addeq	r1, r1, r5
 800b4aa:	6021      	streq	r1, [r4, #0]
 800b4ac:	e7ed      	b.n	800b48a <_free_r+0x22>
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	b10b      	cbz	r3, 800b4b8 <_free_r+0x50>
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d9fa      	bls.n	800b4ae <_free_r+0x46>
 800b4b8:	6811      	ldr	r1, [r2, #0]
 800b4ba:	1855      	adds	r5, r2, r1
 800b4bc:	42a5      	cmp	r5, r4
 800b4be:	d10b      	bne.n	800b4d8 <_free_r+0x70>
 800b4c0:	6824      	ldr	r4, [r4, #0]
 800b4c2:	4421      	add	r1, r4
 800b4c4:	1854      	adds	r4, r2, r1
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	6011      	str	r1, [r2, #0]
 800b4ca:	d1e0      	bne.n	800b48e <_free_r+0x26>
 800b4cc:	681c      	ldr	r4, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	6053      	str	r3, [r2, #4]
 800b4d2:	440c      	add	r4, r1
 800b4d4:	6014      	str	r4, [r2, #0]
 800b4d6:	e7da      	b.n	800b48e <_free_r+0x26>
 800b4d8:	d902      	bls.n	800b4e0 <_free_r+0x78>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	e7d6      	b.n	800b48e <_free_r+0x26>
 800b4e0:	6825      	ldr	r5, [r4, #0]
 800b4e2:	1961      	adds	r1, r4, r5
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	bf04      	itt	eq
 800b4e8:	6819      	ldreq	r1, [r3, #0]
 800b4ea:	685b      	ldreq	r3, [r3, #4]
 800b4ec:	6063      	str	r3, [r4, #4]
 800b4ee:	bf04      	itt	eq
 800b4f0:	1949      	addeq	r1, r1, r5
 800b4f2:	6021      	streq	r1, [r4, #0]
 800b4f4:	6054      	str	r4, [r2, #4]
 800b4f6:	e7ca      	b.n	800b48e <_free_r+0x26>
 800b4f8:	b003      	add	sp, #12
 800b4fa:	bd30      	pop	{r4, r5, pc}
 800b4fc:	20001fa0 	.word	0x20001fa0

0800b500 <rshift>:
 800b500:	6903      	ldr	r3, [r0, #16]
 800b502:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b50a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b50e:	f100 0414 	add.w	r4, r0, #20
 800b512:	dd45      	ble.n	800b5a0 <rshift+0xa0>
 800b514:	f011 011f 	ands.w	r1, r1, #31
 800b518:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b51c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b520:	d10c      	bne.n	800b53c <rshift+0x3c>
 800b522:	f100 0710 	add.w	r7, r0, #16
 800b526:	4629      	mov	r1, r5
 800b528:	42b1      	cmp	r1, r6
 800b52a:	d334      	bcc.n	800b596 <rshift+0x96>
 800b52c:	1a9b      	subs	r3, r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	1eea      	subs	r2, r5, #3
 800b532:	4296      	cmp	r6, r2
 800b534:	bf38      	it	cc
 800b536:	2300      	movcc	r3, #0
 800b538:	4423      	add	r3, r4
 800b53a:	e015      	b.n	800b568 <rshift+0x68>
 800b53c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b540:	f1c1 0820 	rsb	r8, r1, #32
 800b544:	40cf      	lsrs	r7, r1
 800b546:	f105 0e04 	add.w	lr, r5, #4
 800b54a:	46a1      	mov	r9, r4
 800b54c:	4576      	cmp	r6, lr
 800b54e:	46f4      	mov	ip, lr
 800b550:	d815      	bhi.n	800b57e <rshift+0x7e>
 800b552:	1a9a      	subs	r2, r3, r2
 800b554:	0092      	lsls	r2, r2, #2
 800b556:	3a04      	subs	r2, #4
 800b558:	3501      	adds	r5, #1
 800b55a:	42ae      	cmp	r6, r5
 800b55c:	bf38      	it	cc
 800b55e:	2200      	movcc	r2, #0
 800b560:	18a3      	adds	r3, r4, r2
 800b562:	50a7      	str	r7, [r4, r2]
 800b564:	b107      	cbz	r7, 800b568 <rshift+0x68>
 800b566:	3304      	adds	r3, #4
 800b568:	1b1a      	subs	r2, r3, r4
 800b56a:	42a3      	cmp	r3, r4
 800b56c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b570:	bf08      	it	eq
 800b572:	2300      	moveq	r3, #0
 800b574:	6102      	str	r2, [r0, #16]
 800b576:	bf08      	it	eq
 800b578:	6143      	streq	r3, [r0, #20]
 800b57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b57e:	f8dc c000 	ldr.w	ip, [ip]
 800b582:	fa0c fc08 	lsl.w	ip, ip, r8
 800b586:	ea4c 0707 	orr.w	r7, ip, r7
 800b58a:	f849 7b04 	str.w	r7, [r9], #4
 800b58e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b592:	40cf      	lsrs	r7, r1
 800b594:	e7da      	b.n	800b54c <rshift+0x4c>
 800b596:	f851 cb04 	ldr.w	ip, [r1], #4
 800b59a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b59e:	e7c3      	b.n	800b528 <rshift+0x28>
 800b5a0:	4623      	mov	r3, r4
 800b5a2:	e7e1      	b.n	800b568 <rshift+0x68>

0800b5a4 <__hexdig_fun>:
 800b5a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b5a8:	2b09      	cmp	r3, #9
 800b5aa:	d802      	bhi.n	800b5b2 <__hexdig_fun+0xe>
 800b5ac:	3820      	subs	r0, #32
 800b5ae:	b2c0      	uxtb	r0, r0
 800b5b0:	4770      	bx	lr
 800b5b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b5b6:	2b05      	cmp	r3, #5
 800b5b8:	d801      	bhi.n	800b5be <__hexdig_fun+0x1a>
 800b5ba:	3847      	subs	r0, #71	; 0x47
 800b5bc:	e7f7      	b.n	800b5ae <__hexdig_fun+0xa>
 800b5be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5c2:	2b05      	cmp	r3, #5
 800b5c4:	d801      	bhi.n	800b5ca <__hexdig_fun+0x26>
 800b5c6:	3827      	subs	r0, #39	; 0x27
 800b5c8:	e7f1      	b.n	800b5ae <__hexdig_fun+0xa>
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <__gethex>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4617      	mov	r7, r2
 800b5d6:	680a      	ldr	r2, [r1, #0]
 800b5d8:	b085      	sub	sp, #20
 800b5da:	f102 0b02 	add.w	fp, r2, #2
 800b5de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b5e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b5e6:	4681      	mov	r9, r0
 800b5e8:	468a      	mov	sl, r1
 800b5ea:	9302      	str	r3, [sp, #8]
 800b5ec:	32fe      	adds	r2, #254	; 0xfe
 800b5ee:	eb02 030b 	add.w	r3, r2, fp
 800b5f2:	46d8      	mov	r8, fp
 800b5f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	2830      	cmp	r0, #48	; 0x30
 800b5fc:	d0f7      	beq.n	800b5ee <__gethex+0x1e>
 800b5fe:	f7ff ffd1 	bl	800b5a4 <__hexdig_fun>
 800b602:	4604      	mov	r4, r0
 800b604:	2800      	cmp	r0, #0
 800b606:	d138      	bne.n	800b67a <__gethex+0xaa>
 800b608:	49a7      	ldr	r1, [pc, #668]	; (800b8a8 <__gethex+0x2d8>)
 800b60a:	2201      	movs	r2, #1
 800b60c:	4640      	mov	r0, r8
 800b60e:	f7ff fe8f 	bl	800b330 <strncmp>
 800b612:	4606      	mov	r6, r0
 800b614:	2800      	cmp	r0, #0
 800b616:	d169      	bne.n	800b6ec <__gethex+0x11c>
 800b618:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b61c:	465d      	mov	r5, fp
 800b61e:	f7ff ffc1 	bl	800b5a4 <__hexdig_fun>
 800b622:	2800      	cmp	r0, #0
 800b624:	d064      	beq.n	800b6f0 <__gethex+0x120>
 800b626:	465a      	mov	r2, fp
 800b628:	7810      	ldrb	r0, [r2, #0]
 800b62a:	2830      	cmp	r0, #48	; 0x30
 800b62c:	4690      	mov	r8, r2
 800b62e:	f102 0201 	add.w	r2, r2, #1
 800b632:	d0f9      	beq.n	800b628 <__gethex+0x58>
 800b634:	f7ff ffb6 	bl	800b5a4 <__hexdig_fun>
 800b638:	2301      	movs	r3, #1
 800b63a:	fab0 f480 	clz	r4, r0
 800b63e:	0964      	lsrs	r4, r4, #5
 800b640:	465e      	mov	r6, fp
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	4642      	mov	r2, r8
 800b646:	4615      	mov	r5, r2
 800b648:	3201      	adds	r2, #1
 800b64a:	7828      	ldrb	r0, [r5, #0]
 800b64c:	f7ff ffaa 	bl	800b5a4 <__hexdig_fun>
 800b650:	2800      	cmp	r0, #0
 800b652:	d1f8      	bne.n	800b646 <__gethex+0x76>
 800b654:	4994      	ldr	r1, [pc, #592]	; (800b8a8 <__gethex+0x2d8>)
 800b656:	2201      	movs	r2, #1
 800b658:	4628      	mov	r0, r5
 800b65a:	f7ff fe69 	bl	800b330 <strncmp>
 800b65e:	b978      	cbnz	r0, 800b680 <__gethex+0xb0>
 800b660:	b946      	cbnz	r6, 800b674 <__gethex+0xa4>
 800b662:	1c6e      	adds	r6, r5, #1
 800b664:	4632      	mov	r2, r6
 800b666:	4615      	mov	r5, r2
 800b668:	3201      	adds	r2, #1
 800b66a:	7828      	ldrb	r0, [r5, #0]
 800b66c:	f7ff ff9a 	bl	800b5a4 <__hexdig_fun>
 800b670:	2800      	cmp	r0, #0
 800b672:	d1f8      	bne.n	800b666 <__gethex+0x96>
 800b674:	1b73      	subs	r3, r6, r5
 800b676:	009e      	lsls	r6, r3, #2
 800b678:	e004      	b.n	800b684 <__gethex+0xb4>
 800b67a:	2400      	movs	r4, #0
 800b67c:	4626      	mov	r6, r4
 800b67e:	e7e1      	b.n	800b644 <__gethex+0x74>
 800b680:	2e00      	cmp	r6, #0
 800b682:	d1f7      	bne.n	800b674 <__gethex+0xa4>
 800b684:	782b      	ldrb	r3, [r5, #0]
 800b686:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b68a:	2b50      	cmp	r3, #80	; 0x50
 800b68c:	d13d      	bne.n	800b70a <__gethex+0x13a>
 800b68e:	786b      	ldrb	r3, [r5, #1]
 800b690:	2b2b      	cmp	r3, #43	; 0x2b
 800b692:	d02f      	beq.n	800b6f4 <__gethex+0x124>
 800b694:	2b2d      	cmp	r3, #45	; 0x2d
 800b696:	d031      	beq.n	800b6fc <__gethex+0x12c>
 800b698:	1c69      	adds	r1, r5, #1
 800b69a:	f04f 0b00 	mov.w	fp, #0
 800b69e:	7808      	ldrb	r0, [r1, #0]
 800b6a0:	f7ff ff80 	bl	800b5a4 <__hexdig_fun>
 800b6a4:	1e42      	subs	r2, r0, #1
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	2a18      	cmp	r2, #24
 800b6aa:	d82e      	bhi.n	800b70a <__gethex+0x13a>
 800b6ac:	f1a0 0210 	sub.w	r2, r0, #16
 800b6b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6b4:	f7ff ff76 	bl	800b5a4 <__hexdig_fun>
 800b6b8:	f100 3cff 	add.w	ip, r0, #4294967295
 800b6bc:	fa5f fc8c 	uxtb.w	ip, ip
 800b6c0:	f1bc 0f18 	cmp.w	ip, #24
 800b6c4:	d91d      	bls.n	800b702 <__gethex+0x132>
 800b6c6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ca:	d000      	beq.n	800b6ce <__gethex+0xfe>
 800b6cc:	4252      	negs	r2, r2
 800b6ce:	4416      	add	r6, r2
 800b6d0:	f8ca 1000 	str.w	r1, [sl]
 800b6d4:	b1dc      	cbz	r4, 800b70e <__gethex+0x13e>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	bf14      	ite	ne
 800b6dc:	f04f 0800 	movne.w	r8, #0
 800b6e0:	f04f 0806 	moveq.w	r8, #6
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	b005      	add	sp, #20
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	4645      	mov	r5, r8
 800b6ee:	4626      	mov	r6, r4
 800b6f0:	2401      	movs	r4, #1
 800b6f2:	e7c7      	b.n	800b684 <__gethex+0xb4>
 800b6f4:	f04f 0b00 	mov.w	fp, #0
 800b6f8:	1ca9      	adds	r1, r5, #2
 800b6fa:	e7d0      	b.n	800b69e <__gethex+0xce>
 800b6fc:	f04f 0b01 	mov.w	fp, #1
 800b700:	e7fa      	b.n	800b6f8 <__gethex+0x128>
 800b702:	230a      	movs	r3, #10
 800b704:	fb03 0002 	mla	r0, r3, r2, r0
 800b708:	e7d0      	b.n	800b6ac <__gethex+0xdc>
 800b70a:	4629      	mov	r1, r5
 800b70c:	e7e0      	b.n	800b6d0 <__gethex+0x100>
 800b70e:	eba5 0308 	sub.w	r3, r5, r8
 800b712:	3b01      	subs	r3, #1
 800b714:	4621      	mov	r1, r4
 800b716:	2b07      	cmp	r3, #7
 800b718:	dc0a      	bgt.n	800b730 <__gethex+0x160>
 800b71a:	4648      	mov	r0, r9
 800b71c:	f000 fb06 	bl	800bd2c <_Balloc>
 800b720:	4604      	mov	r4, r0
 800b722:	b940      	cbnz	r0, 800b736 <__gethex+0x166>
 800b724:	4b61      	ldr	r3, [pc, #388]	; (800b8ac <__gethex+0x2dc>)
 800b726:	4602      	mov	r2, r0
 800b728:	21e4      	movs	r1, #228	; 0xe4
 800b72a:	4861      	ldr	r0, [pc, #388]	; (800b8b0 <__gethex+0x2e0>)
 800b72c:	f001 f876 	bl	800c81c <__assert_func>
 800b730:	3101      	adds	r1, #1
 800b732:	105b      	asrs	r3, r3, #1
 800b734:	e7ef      	b.n	800b716 <__gethex+0x146>
 800b736:	f100 0a14 	add.w	sl, r0, #20
 800b73a:	2300      	movs	r3, #0
 800b73c:	495a      	ldr	r1, [pc, #360]	; (800b8a8 <__gethex+0x2d8>)
 800b73e:	f8cd a004 	str.w	sl, [sp, #4]
 800b742:	469b      	mov	fp, r3
 800b744:	45a8      	cmp	r8, r5
 800b746:	d342      	bcc.n	800b7ce <__gethex+0x1fe>
 800b748:	9801      	ldr	r0, [sp, #4]
 800b74a:	f840 bb04 	str.w	fp, [r0], #4
 800b74e:	eba0 000a 	sub.w	r0, r0, sl
 800b752:	1080      	asrs	r0, r0, #2
 800b754:	6120      	str	r0, [r4, #16]
 800b756:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b75a:	4658      	mov	r0, fp
 800b75c:	f000 fbd8 	bl	800bf10 <__hi0bits>
 800b760:	683d      	ldr	r5, [r7, #0]
 800b762:	eba8 0000 	sub.w	r0, r8, r0
 800b766:	42a8      	cmp	r0, r5
 800b768:	dd59      	ble.n	800b81e <__gethex+0x24e>
 800b76a:	eba0 0805 	sub.w	r8, r0, r5
 800b76e:	4641      	mov	r1, r8
 800b770:	4620      	mov	r0, r4
 800b772:	f000 ff67 	bl	800c644 <__any_on>
 800b776:	4683      	mov	fp, r0
 800b778:	b1b8      	cbz	r0, 800b7aa <__gethex+0x1da>
 800b77a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b77e:	1159      	asrs	r1, r3, #5
 800b780:	f003 021f 	and.w	r2, r3, #31
 800b784:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b788:	f04f 0b01 	mov.w	fp, #1
 800b78c:	fa0b f202 	lsl.w	r2, fp, r2
 800b790:	420a      	tst	r2, r1
 800b792:	d00a      	beq.n	800b7aa <__gethex+0x1da>
 800b794:	455b      	cmp	r3, fp
 800b796:	dd06      	ble.n	800b7a6 <__gethex+0x1d6>
 800b798:	f1a8 0102 	sub.w	r1, r8, #2
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 ff51 	bl	800c644 <__any_on>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d138      	bne.n	800b818 <__gethex+0x248>
 800b7a6:	f04f 0b02 	mov.w	fp, #2
 800b7aa:	4641      	mov	r1, r8
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f7ff fea7 	bl	800b500 <rshift>
 800b7b2:	4446      	add	r6, r8
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	42b3      	cmp	r3, r6
 800b7b8:	da41      	bge.n	800b83e <__gethex+0x26e>
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4648      	mov	r0, r9
 800b7be:	f000 faf5 	bl	800bdac <_Bfree>
 800b7c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b7cc:	e78a      	b.n	800b6e4 <__gethex+0x114>
 800b7ce:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b7d2:	2a2e      	cmp	r2, #46	; 0x2e
 800b7d4:	d014      	beq.n	800b800 <__gethex+0x230>
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d106      	bne.n	800b7e8 <__gethex+0x218>
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	f843 bb04 	str.w	fp, [r3], #4
 800b7e0:	f04f 0b00 	mov.w	fp, #0
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	465b      	mov	r3, fp
 800b7e8:	7828      	ldrb	r0, [r5, #0]
 800b7ea:	9303      	str	r3, [sp, #12]
 800b7ec:	f7ff feda 	bl	800b5a4 <__hexdig_fun>
 800b7f0:	9b03      	ldr	r3, [sp, #12]
 800b7f2:	f000 000f 	and.w	r0, r0, #15
 800b7f6:	4098      	lsls	r0, r3
 800b7f8:	ea4b 0b00 	orr.w	fp, fp, r0
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	e7a1      	b.n	800b744 <__gethex+0x174>
 800b800:	45a8      	cmp	r8, r5
 800b802:	d8e8      	bhi.n	800b7d6 <__gethex+0x206>
 800b804:	2201      	movs	r2, #1
 800b806:	4628      	mov	r0, r5
 800b808:	9303      	str	r3, [sp, #12]
 800b80a:	f7ff fd91 	bl	800b330 <strncmp>
 800b80e:	4926      	ldr	r1, [pc, #152]	; (800b8a8 <__gethex+0x2d8>)
 800b810:	9b03      	ldr	r3, [sp, #12]
 800b812:	2800      	cmp	r0, #0
 800b814:	d1df      	bne.n	800b7d6 <__gethex+0x206>
 800b816:	e795      	b.n	800b744 <__gethex+0x174>
 800b818:	f04f 0b03 	mov.w	fp, #3
 800b81c:	e7c5      	b.n	800b7aa <__gethex+0x1da>
 800b81e:	da0b      	bge.n	800b838 <__gethex+0x268>
 800b820:	eba5 0800 	sub.w	r8, r5, r0
 800b824:	4621      	mov	r1, r4
 800b826:	4642      	mov	r2, r8
 800b828:	4648      	mov	r0, r9
 800b82a:	f000 fcd9 	bl	800c1e0 <__lshift>
 800b82e:	eba6 0608 	sub.w	r6, r6, r8
 800b832:	4604      	mov	r4, r0
 800b834:	f100 0a14 	add.w	sl, r0, #20
 800b838:	f04f 0b00 	mov.w	fp, #0
 800b83c:	e7ba      	b.n	800b7b4 <__gethex+0x1e4>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	42b3      	cmp	r3, r6
 800b842:	dd73      	ble.n	800b92c <__gethex+0x35c>
 800b844:	1b9e      	subs	r6, r3, r6
 800b846:	42b5      	cmp	r5, r6
 800b848:	dc34      	bgt.n	800b8b4 <__gethex+0x2e4>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d023      	beq.n	800b898 <__gethex+0x2c8>
 800b850:	2b03      	cmp	r3, #3
 800b852:	d025      	beq.n	800b8a0 <__gethex+0x2d0>
 800b854:	2b01      	cmp	r3, #1
 800b856:	d115      	bne.n	800b884 <__gethex+0x2b4>
 800b858:	42b5      	cmp	r5, r6
 800b85a:	d113      	bne.n	800b884 <__gethex+0x2b4>
 800b85c:	2d01      	cmp	r5, #1
 800b85e:	d10b      	bne.n	800b878 <__gethex+0x2a8>
 800b860:	9a02      	ldr	r2, [sp, #8]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	2301      	movs	r3, #1
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	f8ca 3000 	str.w	r3, [sl]
 800b86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b870:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b874:	601c      	str	r4, [r3, #0]
 800b876:	e735      	b.n	800b6e4 <__gethex+0x114>
 800b878:	1e69      	subs	r1, r5, #1
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 fee2 	bl	800c644 <__any_on>
 800b880:	2800      	cmp	r0, #0
 800b882:	d1ed      	bne.n	800b860 <__gethex+0x290>
 800b884:	4621      	mov	r1, r4
 800b886:	4648      	mov	r0, r9
 800b888:	f000 fa90 	bl	800bdac <_Bfree>
 800b88c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b88e:	2300      	movs	r3, #0
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b896:	e725      	b.n	800b6e4 <__gethex+0x114>
 800b898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1f2      	bne.n	800b884 <__gethex+0x2b4>
 800b89e:	e7df      	b.n	800b860 <__gethex+0x290>
 800b8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1dc      	bne.n	800b860 <__gethex+0x290>
 800b8a6:	e7ed      	b.n	800b884 <__gethex+0x2b4>
 800b8a8:	0800d2a0 	.word	0x0800d2a0
 800b8ac:	0800d308 	.word	0x0800d308
 800b8b0:	0800d319 	.word	0x0800d319
 800b8b4:	f106 38ff 	add.w	r8, r6, #4294967295
 800b8b8:	f1bb 0f00 	cmp.w	fp, #0
 800b8bc:	d133      	bne.n	800b926 <__gethex+0x356>
 800b8be:	f1b8 0f00 	cmp.w	r8, #0
 800b8c2:	d004      	beq.n	800b8ce <__gethex+0x2fe>
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 febc 	bl	800c644 <__any_on>
 800b8cc:	4683      	mov	fp, r0
 800b8ce:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b8d8:	f008 081f 	and.w	r8, r8, #31
 800b8dc:	fa03 f308 	lsl.w	r3, r3, r8
 800b8e0:	4213      	tst	r3, r2
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	bf18      	it	ne
 800b8e8:	f04b 0b02 	orrne.w	fp, fp, #2
 800b8ec:	1bad      	subs	r5, r5, r6
 800b8ee:	f7ff fe07 	bl	800b500 <rshift>
 800b8f2:	687e      	ldr	r6, [r7, #4]
 800b8f4:	f04f 0802 	mov.w	r8, #2
 800b8f8:	f1bb 0f00 	cmp.w	fp, #0
 800b8fc:	d04a      	beq.n	800b994 <__gethex+0x3c4>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b02      	cmp	r3, #2
 800b902:	d016      	beq.n	800b932 <__gethex+0x362>
 800b904:	2b03      	cmp	r3, #3
 800b906:	d018      	beq.n	800b93a <__gethex+0x36a>
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d109      	bne.n	800b920 <__gethex+0x350>
 800b90c:	f01b 0f02 	tst.w	fp, #2
 800b910:	d006      	beq.n	800b920 <__gethex+0x350>
 800b912:	f8da 3000 	ldr.w	r3, [sl]
 800b916:	ea4b 0b03 	orr.w	fp, fp, r3
 800b91a:	f01b 0f01 	tst.w	fp, #1
 800b91e:	d10f      	bne.n	800b940 <__gethex+0x370>
 800b920:	f048 0810 	orr.w	r8, r8, #16
 800b924:	e036      	b.n	800b994 <__gethex+0x3c4>
 800b926:	f04f 0b01 	mov.w	fp, #1
 800b92a:	e7d0      	b.n	800b8ce <__gethex+0x2fe>
 800b92c:	f04f 0801 	mov.w	r8, #1
 800b930:	e7e2      	b.n	800b8f8 <__gethex+0x328>
 800b932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b934:	f1c3 0301 	rsb	r3, r3, #1
 800b938:	930f      	str	r3, [sp, #60]	; 0x3c
 800b93a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0ef      	beq.n	800b920 <__gethex+0x350>
 800b940:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b944:	f104 0214 	add.w	r2, r4, #20
 800b948:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b952:	2300      	movs	r3, #0
 800b954:	4694      	mov	ip, r2
 800b956:	f852 1b04 	ldr.w	r1, [r2], #4
 800b95a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b95e:	d01e      	beq.n	800b99e <__gethex+0x3ce>
 800b960:	3101      	adds	r1, #1
 800b962:	f8cc 1000 	str.w	r1, [ip]
 800b966:	f1b8 0f02 	cmp.w	r8, #2
 800b96a:	f104 0214 	add.w	r2, r4, #20
 800b96e:	d13d      	bne.n	800b9ec <__gethex+0x41c>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	3b01      	subs	r3, #1
 800b974:	42ab      	cmp	r3, r5
 800b976:	d10b      	bne.n	800b990 <__gethex+0x3c0>
 800b978:	1169      	asrs	r1, r5, #5
 800b97a:	2301      	movs	r3, #1
 800b97c:	f005 051f 	and.w	r5, r5, #31
 800b980:	fa03 f505 	lsl.w	r5, r3, r5
 800b984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b988:	421d      	tst	r5, r3
 800b98a:	bf18      	it	ne
 800b98c:	f04f 0801 	movne.w	r8, #1
 800b990:	f048 0820 	orr.w	r8, r8, #32
 800b994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b996:	601c      	str	r4, [r3, #0]
 800b998:	9b02      	ldr	r3, [sp, #8]
 800b99a:	601e      	str	r6, [r3, #0]
 800b99c:	e6a2      	b.n	800b6e4 <__gethex+0x114>
 800b99e:	4290      	cmp	r0, r2
 800b9a0:	f842 3c04 	str.w	r3, [r2, #-4]
 800b9a4:	d8d6      	bhi.n	800b954 <__gethex+0x384>
 800b9a6:	68a2      	ldr	r2, [r4, #8]
 800b9a8:	4593      	cmp	fp, r2
 800b9aa:	db17      	blt.n	800b9dc <__gethex+0x40c>
 800b9ac:	6861      	ldr	r1, [r4, #4]
 800b9ae:	4648      	mov	r0, r9
 800b9b0:	3101      	adds	r1, #1
 800b9b2:	f000 f9bb 	bl	800bd2c <_Balloc>
 800b9b6:	4682      	mov	sl, r0
 800b9b8:	b918      	cbnz	r0, 800b9c2 <__gethex+0x3f2>
 800b9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <__gethex+0x458>)
 800b9bc:	4602      	mov	r2, r0
 800b9be:	2184      	movs	r1, #132	; 0x84
 800b9c0:	e6b3      	b.n	800b72a <__gethex+0x15a>
 800b9c2:	6922      	ldr	r2, [r4, #16]
 800b9c4:	3202      	adds	r2, #2
 800b9c6:	f104 010c 	add.w	r1, r4, #12
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	300c      	adds	r0, #12
 800b9ce:	f7ff fd34 	bl	800b43a <memcpy>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f000 f9e9 	bl	800bdac <_Bfree>
 800b9da:	4654      	mov	r4, sl
 800b9dc:	6922      	ldr	r2, [r4, #16]
 800b9de:	1c51      	adds	r1, r2, #1
 800b9e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b9e4:	6121      	str	r1, [r4, #16]
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	6151      	str	r1, [r2, #20]
 800b9ea:	e7bc      	b.n	800b966 <__gethex+0x396>
 800b9ec:	6921      	ldr	r1, [r4, #16]
 800b9ee:	4559      	cmp	r1, fp
 800b9f0:	dd0b      	ble.n	800ba0a <__gethex+0x43a>
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f7ff fd83 	bl	800b500 <rshift>
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3601      	adds	r6, #1
 800b9fe:	42b3      	cmp	r3, r6
 800ba00:	f6ff aedb 	blt.w	800b7ba <__gethex+0x1ea>
 800ba04:	f04f 0801 	mov.w	r8, #1
 800ba08:	e7c2      	b.n	800b990 <__gethex+0x3c0>
 800ba0a:	f015 051f 	ands.w	r5, r5, #31
 800ba0e:	d0f9      	beq.n	800ba04 <__gethex+0x434>
 800ba10:	9b01      	ldr	r3, [sp, #4]
 800ba12:	441a      	add	r2, r3
 800ba14:	f1c5 0520 	rsb	r5, r5, #32
 800ba18:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ba1c:	f000 fa78 	bl	800bf10 <__hi0bits>
 800ba20:	42a8      	cmp	r0, r5
 800ba22:	dbe6      	blt.n	800b9f2 <__gethex+0x422>
 800ba24:	e7ee      	b.n	800ba04 <__gethex+0x434>
 800ba26:	bf00      	nop
 800ba28:	0800d308 	.word	0x0800d308

0800ba2c <L_shift>:
 800ba2c:	f1c2 0208 	rsb	r2, r2, #8
 800ba30:	0092      	lsls	r2, r2, #2
 800ba32:	b570      	push	{r4, r5, r6, lr}
 800ba34:	f1c2 0620 	rsb	r6, r2, #32
 800ba38:	6843      	ldr	r3, [r0, #4]
 800ba3a:	6804      	ldr	r4, [r0, #0]
 800ba3c:	fa03 f506 	lsl.w	r5, r3, r6
 800ba40:	432c      	orrs	r4, r5
 800ba42:	40d3      	lsrs	r3, r2
 800ba44:	6004      	str	r4, [r0, #0]
 800ba46:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba4a:	4288      	cmp	r0, r1
 800ba4c:	d3f4      	bcc.n	800ba38 <L_shift+0xc>
 800ba4e:	bd70      	pop	{r4, r5, r6, pc}

0800ba50 <__match>:
 800ba50:	b530      	push	{r4, r5, lr}
 800ba52:	6803      	ldr	r3, [r0, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba5a:	b914      	cbnz	r4, 800ba62 <__match+0x12>
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	2001      	movs	r0, #1
 800ba60:	bd30      	pop	{r4, r5, pc}
 800ba62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba6a:	2d19      	cmp	r5, #25
 800ba6c:	bf98      	it	ls
 800ba6e:	3220      	addls	r2, #32
 800ba70:	42a2      	cmp	r2, r4
 800ba72:	d0f0      	beq.n	800ba56 <__match+0x6>
 800ba74:	2000      	movs	r0, #0
 800ba76:	e7f3      	b.n	800ba60 <__match+0x10>

0800ba78 <__hexnan>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	680b      	ldr	r3, [r1, #0]
 800ba7e:	6801      	ldr	r1, [r0, #0]
 800ba80:	115e      	asrs	r6, r3, #5
 800ba82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba86:	f013 031f 	ands.w	r3, r3, #31
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	bf18      	it	ne
 800ba8e:	3604      	addne	r6, #4
 800ba90:	2500      	movs	r5, #0
 800ba92:	1f37      	subs	r7, r6, #4
 800ba94:	4682      	mov	sl, r0
 800ba96:	4690      	mov	r8, r2
 800ba98:	9301      	str	r3, [sp, #4]
 800ba9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba9e:	46b9      	mov	r9, r7
 800baa0:	463c      	mov	r4, r7
 800baa2:	9502      	str	r5, [sp, #8]
 800baa4:	46ab      	mov	fp, r5
 800baa6:	784a      	ldrb	r2, [r1, #1]
 800baa8:	1c4b      	adds	r3, r1, #1
 800baaa:	9303      	str	r3, [sp, #12]
 800baac:	b342      	cbz	r2, 800bb00 <__hexnan+0x88>
 800baae:	4610      	mov	r0, r2
 800bab0:	9105      	str	r1, [sp, #20]
 800bab2:	9204      	str	r2, [sp, #16]
 800bab4:	f7ff fd76 	bl	800b5a4 <__hexdig_fun>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d14f      	bne.n	800bb5c <__hexnan+0xe4>
 800babc:	9a04      	ldr	r2, [sp, #16]
 800babe:	9905      	ldr	r1, [sp, #20]
 800bac0:	2a20      	cmp	r2, #32
 800bac2:	d818      	bhi.n	800baf6 <__hexnan+0x7e>
 800bac4:	9b02      	ldr	r3, [sp, #8]
 800bac6:	459b      	cmp	fp, r3
 800bac8:	dd13      	ble.n	800baf2 <__hexnan+0x7a>
 800baca:	454c      	cmp	r4, r9
 800bacc:	d206      	bcs.n	800badc <__hexnan+0x64>
 800bace:	2d07      	cmp	r5, #7
 800bad0:	dc04      	bgt.n	800badc <__hexnan+0x64>
 800bad2:	462a      	mov	r2, r5
 800bad4:	4649      	mov	r1, r9
 800bad6:	4620      	mov	r0, r4
 800bad8:	f7ff ffa8 	bl	800ba2c <L_shift>
 800badc:	4544      	cmp	r4, r8
 800bade:	d950      	bls.n	800bb82 <__hexnan+0x10a>
 800bae0:	2300      	movs	r3, #0
 800bae2:	f1a4 0904 	sub.w	r9, r4, #4
 800bae6:	f844 3c04 	str.w	r3, [r4, #-4]
 800baea:	f8cd b008 	str.w	fp, [sp, #8]
 800baee:	464c      	mov	r4, r9
 800baf0:	461d      	mov	r5, r3
 800baf2:	9903      	ldr	r1, [sp, #12]
 800baf4:	e7d7      	b.n	800baa6 <__hexnan+0x2e>
 800baf6:	2a29      	cmp	r2, #41	; 0x29
 800baf8:	d155      	bne.n	800bba6 <__hexnan+0x12e>
 800bafa:	3102      	adds	r1, #2
 800bafc:	f8ca 1000 	str.w	r1, [sl]
 800bb00:	f1bb 0f00 	cmp.w	fp, #0
 800bb04:	d04f      	beq.n	800bba6 <__hexnan+0x12e>
 800bb06:	454c      	cmp	r4, r9
 800bb08:	d206      	bcs.n	800bb18 <__hexnan+0xa0>
 800bb0a:	2d07      	cmp	r5, #7
 800bb0c:	dc04      	bgt.n	800bb18 <__hexnan+0xa0>
 800bb0e:	462a      	mov	r2, r5
 800bb10:	4649      	mov	r1, r9
 800bb12:	4620      	mov	r0, r4
 800bb14:	f7ff ff8a 	bl	800ba2c <L_shift>
 800bb18:	4544      	cmp	r4, r8
 800bb1a:	d934      	bls.n	800bb86 <__hexnan+0x10e>
 800bb1c:	f1a8 0204 	sub.w	r2, r8, #4
 800bb20:	4623      	mov	r3, r4
 800bb22:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb26:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb2a:	429f      	cmp	r7, r3
 800bb2c:	d2f9      	bcs.n	800bb22 <__hexnan+0xaa>
 800bb2e:	1b3b      	subs	r3, r7, r4
 800bb30:	f023 0303 	bic.w	r3, r3, #3
 800bb34:	3304      	adds	r3, #4
 800bb36:	3e03      	subs	r6, #3
 800bb38:	3401      	adds	r4, #1
 800bb3a:	42a6      	cmp	r6, r4
 800bb3c:	bf38      	it	cc
 800bb3e:	2304      	movcc	r3, #4
 800bb40:	4443      	add	r3, r8
 800bb42:	2200      	movs	r2, #0
 800bb44:	f843 2b04 	str.w	r2, [r3], #4
 800bb48:	429f      	cmp	r7, r3
 800bb4a:	d2fb      	bcs.n	800bb44 <__hexnan+0xcc>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	b91b      	cbnz	r3, 800bb58 <__hexnan+0xe0>
 800bb50:	4547      	cmp	r7, r8
 800bb52:	d126      	bne.n	800bba2 <__hexnan+0x12a>
 800bb54:	2301      	movs	r3, #1
 800bb56:	603b      	str	r3, [r7, #0]
 800bb58:	2005      	movs	r0, #5
 800bb5a:	e025      	b.n	800bba8 <__hexnan+0x130>
 800bb5c:	3501      	adds	r5, #1
 800bb5e:	2d08      	cmp	r5, #8
 800bb60:	f10b 0b01 	add.w	fp, fp, #1
 800bb64:	dd06      	ble.n	800bb74 <__hexnan+0xfc>
 800bb66:	4544      	cmp	r4, r8
 800bb68:	d9c3      	bls.n	800baf2 <__hexnan+0x7a>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb70:	2501      	movs	r5, #1
 800bb72:	3c04      	subs	r4, #4
 800bb74:	6822      	ldr	r2, [r4, #0]
 800bb76:	f000 000f 	and.w	r0, r0, #15
 800bb7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bb7e:	6020      	str	r0, [r4, #0]
 800bb80:	e7b7      	b.n	800baf2 <__hexnan+0x7a>
 800bb82:	2508      	movs	r5, #8
 800bb84:	e7b5      	b.n	800baf2 <__hexnan+0x7a>
 800bb86:	9b01      	ldr	r3, [sp, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0df      	beq.n	800bb4c <__hexnan+0xd4>
 800bb8c:	f1c3 0320 	rsb	r3, r3, #32
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295
 800bb94:	40da      	lsrs	r2, r3
 800bb96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	f846 3c04 	str.w	r3, [r6, #-4]
 800bba0:	e7d4      	b.n	800bb4c <__hexnan+0xd4>
 800bba2:	3f04      	subs	r7, #4
 800bba4:	e7d2      	b.n	800bb4c <__hexnan+0xd4>
 800bba6:	2004      	movs	r0, #4
 800bba8:	b007      	add	sp, #28
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bbb0 <sbrk_aligned>:
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	4e0e      	ldr	r6, [pc, #56]	; (800bbec <sbrk_aligned+0x3c>)
 800bbb4:	460c      	mov	r4, r1
 800bbb6:	6831      	ldr	r1, [r6, #0]
 800bbb8:	4605      	mov	r5, r0
 800bbba:	b911      	cbnz	r1, 800bbc2 <sbrk_aligned+0x12>
 800bbbc:	f000 fe1e 	bl	800c7fc <_sbrk_r>
 800bbc0:	6030      	str	r0, [r6, #0]
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f000 fe19 	bl	800c7fc <_sbrk_r>
 800bbca:	1c43      	adds	r3, r0, #1
 800bbcc:	d00a      	beq.n	800bbe4 <sbrk_aligned+0x34>
 800bbce:	1cc4      	adds	r4, r0, #3
 800bbd0:	f024 0403 	bic.w	r4, r4, #3
 800bbd4:	42a0      	cmp	r0, r4
 800bbd6:	d007      	beq.n	800bbe8 <sbrk_aligned+0x38>
 800bbd8:	1a21      	subs	r1, r4, r0
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f000 fe0e 	bl	800c7fc <_sbrk_r>
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	d101      	bne.n	800bbe8 <sbrk_aligned+0x38>
 800bbe4:	f04f 34ff 	mov.w	r4, #4294967295
 800bbe8:	4620      	mov	r0, r4
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
 800bbec:	20001fa4 	.word	0x20001fa4

0800bbf0 <_malloc_r>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	1ccd      	adds	r5, r1, #3
 800bbf6:	f025 0503 	bic.w	r5, r5, #3
 800bbfa:	3508      	adds	r5, #8
 800bbfc:	2d0c      	cmp	r5, #12
 800bbfe:	bf38      	it	cc
 800bc00:	250c      	movcc	r5, #12
 800bc02:	2d00      	cmp	r5, #0
 800bc04:	4607      	mov	r7, r0
 800bc06:	db01      	blt.n	800bc0c <_malloc_r+0x1c>
 800bc08:	42a9      	cmp	r1, r5
 800bc0a:	d905      	bls.n	800bc18 <_malloc_r+0x28>
 800bc0c:	230c      	movs	r3, #12
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	2600      	movs	r6, #0
 800bc12:	4630      	mov	r0, r6
 800bc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bcec <_malloc_r+0xfc>
 800bc1c:	f000 f87a 	bl	800bd14 <__malloc_lock>
 800bc20:	f8d8 3000 	ldr.w	r3, [r8]
 800bc24:	461c      	mov	r4, r3
 800bc26:	bb5c      	cbnz	r4, 800bc80 <_malloc_r+0x90>
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f7ff ffc0 	bl	800bbb0 <sbrk_aligned>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	4604      	mov	r4, r0
 800bc34:	d155      	bne.n	800bce2 <_malloc_r+0xf2>
 800bc36:	f8d8 4000 	ldr.w	r4, [r8]
 800bc3a:	4626      	mov	r6, r4
 800bc3c:	2e00      	cmp	r6, #0
 800bc3e:	d145      	bne.n	800bccc <_malloc_r+0xdc>
 800bc40:	2c00      	cmp	r4, #0
 800bc42:	d048      	beq.n	800bcd6 <_malloc_r+0xe6>
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	4631      	mov	r1, r6
 800bc48:	4638      	mov	r0, r7
 800bc4a:	eb04 0903 	add.w	r9, r4, r3
 800bc4e:	f000 fdd5 	bl	800c7fc <_sbrk_r>
 800bc52:	4581      	cmp	r9, r0
 800bc54:	d13f      	bne.n	800bcd6 <_malloc_r+0xe6>
 800bc56:	6821      	ldr	r1, [r4, #0]
 800bc58:	1a6d      	subs	r5, r5, r1
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff ffa7 	bl	800bbb0 <sbrk_aligned>
 800bc62:	3001      	adds	r0, #1
 800bc64:	d037      	beq.n	800bcd6 <_malloc_r+0xe6>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	442b      	add	r3, r5
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d038      	beq.n	800bce6 <_malloc_r+0xf6>
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	42a2      	cmp	r2, r4
 800bc78:	d12b      	bne.n	800bcd2 <_malloc_r+0xe2>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	605a      	str	r2, [r3, #4]
 800bc7e:	e00f      	b.n	800bca0 <_malloc_r+0xb0>
 800bc80:	6822      	ldr	r2, [r4, #0]
 800bc82:	1b52      	subs	r2, r2, r5
 800bc84:	d41f      	bmi.n	800bcc6 <_malloc_r+0xd6>
 800bc86:	2a0b      	cmp	r2, #11
 800bc88:	d917      	bls.n	800bcba <_malloc_r+0xca>
 800bc8a:	1961      	adds	r1, r4, r5
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	6025      	str	r5, [r4, #0]
 800bc90:	bf18      	it	ne
 800bc92:	6059      	strne	r1, [r3, #4]
 800bc94:	6863      	ldr	r3, [r4, #4]
 800bc96:	bf08      	it	eq
 800bc98:	f8c8 1000 	streq.w	r1, [r8]
 800bc9c:	5162      	str	r2, [r4, r5]
 800bc9e:	604b      	str	r3, [r1, #4]
 800bca0:	4638      	mov	r0, r7
 800bca2:	f104 060b 	add.w	r6, r4, #11
 800bca6:	f000 f83b 	bl	800bd20 <__malloc_unlock>
 800bcaa:	f026 0607 	bic.w	r6, r6, #7
 800bcae:	1d23      	adds	r3, r4, #4
 800bcb0:	1af2      	subs	r2, r6, r3
 800bcb2:	d0ae      	beq.n	800bc12 <_malloc_r+0x22>
 800bcb4:	1b9b      	subs	r3, r3, r6
 800bcb6:	50a3      	str	r3, [r4, r2]
 800bcb8:	e7ab      	b.n	800bc12 <_malloc_r+0x22>
 800bcba:	42a3      	cmp	r3, r4
 800bcbc:	6862      	ldr	r2, [r4, #4]
 800bcbe:	d1dd      	bne.n	800bc7c <_malloc_r+0x8c>
 800bcc0:	f8c8 2000 	str.w	r2, [r8]
 800bcc4:	e7ec      	b.n	800bca0 <_malloc_r+0xb0>
 800bcc6:	4623      	mov	r3, r4
 800bcc8:	6864      	ldr	r4, [r4, #4]
 800bcca:	e7ac      	b.n	800bc26 <_malloc_r+0x36>
 800bccc:	4634      	mov	r4, r6
 800bcce:	6876      	ldr	r6, [r6, #4]
 800bcd0:	e7b4      	b.n	800bc3c <_malloc_r+0x4c>
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	e7cc      	b.n	800bc70 <_malloc_r+0x80>
 800bcd6:	230c      	movs	r3, #12
 800bcd8:	603b      	str	r3, [r7, #0]
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f000 f820 	bl	800bd20 <__malloc_unlock>
 800bce0:	e797      	b.n	800bc12 <_malloc_r+0x22>
 800bce2:	6025      	str	r5, [r4, #0]
 800bce4:	e7dc      	b.n	800bca0 <_malloc_r+0xb0>
 800bce6:	605b      	str	r3, [r3, #4]
 800bce8:	deff      	udf	#255	; 0xff
 800bcea:	bf00      	nop
 800bcec:	20001fa0 	.word	0x20001fa0

0800bcf0 <__ascii_mbtowc>:
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	b901      	cbnz	r1, 800bcf6 <__ascii_mbtowc+0x6>
 800bcf4:	a901      	add	r1, sp, #4
 800bcf6:	b142      	cbz	r2, 800bd0a <__ascii_mbtowc+0x1a>
 800bcf8:	b14b      	cbz	r3, 800bd0e <__ascii_mbtowc+0x1e>
 800bcfa:	7813      	ldrb	r3, [r2, #0]
 800bcfc:	600b      	str	r3, [r1, #0]
 800bcfe:	7812      	ldrb	r2, [r2, #0]
 800bd00:	1e10      	subs	r0, r2, #0
 800bd02:	bf18      	it	ne
 800bd04:	2001      	movne	r0, #1
 800bd06:	b002      	add	sp, #8
 800bd08:	4770      	bx	lr
 800bd0a:	4610      	mov	r0, r2
 800bd0c:	e7fb      	b.n	800bd06 <__ascii_mbtowc+0x16>
 800bd0e:	f06f 0001 	mvn.w	r0, #1
 800bd12:	e7f8      	b.n	800bd06 <__ascii_mbtowc+0x16>

0800bd14 <__malloc_lock>:
 800bd14:	4801      	ldr	r0, [pc, #4]	; (800bd1c <__malloc_lock+0x8>)
 800bd16:	f7ff bb8e 	b.w	800b436 <__retarget_lock_acquire_recursive>
 800bd1a:	bf00      	nop
 800bd1c:	20001f9c 	.word	0x20001f9c

0800bd20 <__malloc_unlock>:
 800bd20:	4801      	ldr	r0, [pc, #4]	; (800bd28 <__malloc_unlock+0x8>)
 800bd22:	f7ff bb89 	b.w	800b438 <__retarget_lock_release_recursive>
 800bd26:	bf00      	nop
 800bd28:	20001f9c 	.word	0x20001f9c

0800bd2c <_Balloc>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	69c6      	ldr	r6, [r0, #28]
 800bd30:	4604      	mov	r4, r0
 800bd32:	460d      	mov	r5, r1
 800bd34:	b976      	cbnz	r6, 800bd54 <_Balloc+0x28>
 800bd36:	2010      	movs	r0, #16
 800bd38:	f000 fda4 	bl	800c884 <malloc>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	61e0      	str	r0, [r4, #28]
 800bd40:	b920      	cbnz	r0, 800bd4c <_Balloc+0x20>
 800bd42:	4b18      	ldr	r3, [pc, #96]	; (800bda4 <_Balloc+0x78>)
 800bd44:	4818      	ldr	r0, [pc, #96]	; (800bda8 <_Balloc+0x7c>)
 800bd46:	216b      	movs	r1, #107	; 0x6b
 800bd48:	f000 fd68 	bl	800c81c <__assert_func>
 800bd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd50:	6006      	str	r6, [r0, #0]
 800bd52:	60c6      	str	r6, [r0, #12]
 800bd54:	69e6      	ldr	r6, [r4, #28]
 800bd56:	68f3      	ldr	r3, [r6, #12]
 800bd58:	b183      	cbz	r3, 800bd7c <_Balloc+0x50>
 800bd5a:	69e3      	ldr	r3, [r4, #28]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd62:	b9b8      	cbnz	r0, 800bd94 <_Balloc+0x68>
 800bd64:	2101      	movs	r1, #1
 800bd66:	fa01 f605 	lsl.w	r6, r1, r5
 800bd6a:	1d72      	adds	r2, r6, #5
 800bd6c:	0092      	lsls	r2, r2, #2
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fd72 	bl	800c858 <_calloc_r>
 800bd74:	b160      	cbz	r0, 800bd90 <_Balloc+0x64>
 800bd76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd7a:	e00e      	b.n	800bd9a <_Balloc+0x6e>
 800bd7c:	2221      	movs	r2, #33	; 0x21
 800bd7e:	2104      	movs	r1, #4
 800bd80:	4620      	mov	r0, r4
 800bd82:	f000 fd69 	bl	800c858 <_calloc_r>
 800bd86:	69e3      	ldr	r3, [r4, #28]
 800bd88:	60f0      	str	r0, [r6, #12]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1e4      	bne.n	800bd5a <_Balloc+0x2e>
 800bd90:	2000      	movs	r0, #0
 800bd92:	bd70      	pop	{r4, r5, r6, pc}
 800bd94:	6802      	ldr	r2, [r0, #0]
 800bd96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bda0:	e7f7      	b.n	800bd92 <_Balloc+0x66>
 800bda2:	bf00      	nop
 800bda4:	0800d379 	.word	0x0800d379
 800bda8:	0800d390 	.word	0x0800d390

0800bdac <_Bfree>:
 800bdac:	b570      	push	{r4, r5, r6, lr}
 800bdae:	69c6      	ldr	r6, [r0, #28]
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	b976      	cbnz	r6, 800bdd4 <_Bfree+0x28>
 800bdb6:	2010      	movs	r0, #16
 800bdb8:	f000 fd64 	bl	800c884 <malloc>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	61e8      	str	r0, [r5, #28]
 800bdc0:	b920      	cbnz	r0, 800bdcc <_Bfree+0x20>
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <_Bfree+0x3c>)
 800bdc4:	4809      	ldr	r0, [pc, #36]	; (800bdec <_Bfree+0x40>)
 800bdc6:	218f      	movs	r1, #143	; 0x8f
 800bdc8:	f000 fd28 	bl	800c81c <__assert_func>
 800bdcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd0:	6006      	str	r6, [r0, #0]
 800bdd2:	60c6      	str	r6, [r0, #12]
 800bdd4:	b13c      	cbz	r4, 800bde6 <_Bfree+0x3a>
 800bdd6:	69eb      	ldr	r3, [r5, #28]
 800bdd8:	6862      	ldr	r2, [r4, #4]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bde0:	6021      	str	r1, [r4, #0]
 800bde2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	0800d379 	.word	0x0800d379
 800bdec:	0800d390 	.word	0x0800d390

0800bdf0 <__multadd>:
 800bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf4:	690d      	ldr	r5, [r1, #16]
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	461e      	mov	r6, r3
 800bdfc:	f101 0c14 	add.w	ip, r1, #20
 800be00:	2000      	movs	r0, #0
 800be02:	f8dc 3000 	ldr.w	r3, [ip]
 800be06:	b299      	uxth	r1, r3
 800be08:	fb02 6101 	mla	r1, r2, r1, r6
 800be0c:	0c1e      	lsrs	r6, r3, #16
 800be0e:	0c0b      	lsrs	r3, r1, #16
 800be10:	fb02 3306 	mla	r3, r2, r6, r3
 800be14:	b289      	uxth	r1, r1
 800be16:	3001      	adds	r0, #1
 800be18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be1c:	4285      	cmp	r5, r0
 800be1e:	f84c 1b04 	str.w	r1, [ip], #4
 800be22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be26:	dcec      	bgt.n	800be02 <__multadd+0x12>
 800be28:	b30e      	cbz	r6, 800be6e <__multadd+0x7e>
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	42ab      	cmp	r3, r5
 800be2e:	dc19      	bgt.n	800be64 <__multadd+0x74>
 800be30:	6861      	ldr	r1, [r4, #4]
 800be32:	4638      	mov	r0, r7
 800be34:	3101      	adds	r1, #1
 800be36:	f7ff ff79 	bl	800bd2c <_Balloc>
 800be3a:	4680      	mov	r8, r0
 800be3c:	b928      	cbnz	r0, 800be4a <__multadd+0x5a>
 800be3e:	4602      	mov	r2, r0
 800be40:	4b0c      	ldr	r3, [pc, #48]	; (800be74 <__multadd+0x84>)
 800be42:	480d      	ldr	r0, [pc, #52]	; (800be78 <__multadd+0x88>)
 800be44:	21ba      	movs	r1, #186	; 0xba
 800be46:	f000 fce9 	bl	800c81c <__assert_func>
 800be4a:	6922      	ldr	r2, [r4, #16]
 800be4c:	3202      	adds	r2, #2
 800be4e:	f104 010c 	add.w	r1, r4, #12
 800be52:	0092      	lsls	r2, r2, #2
 800be54:	300c      	adds	r0, #12
 800be56:	f7ff faf0 	bl	800b43a <memcpy>
 800be5a:	4621      	mov	r1, r4
 800be5c:	4638      	mov	r0, r7
 800be5e:	f7ff ffa5 	bl	800bdac <_Bfree>
 800be62:	4644      	mov	r4, r8
 800be64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be68:	3501      	adds	r5, #1
 800be6a:	615e      	str	r6, [r3, #20]
 800be6c:	6125      	str	r5, [r4, #16]
 800be6e:	4620      	mov	r0, r4
 800be70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be74:	0800d308 	.word	0x0800d308
 800be78:	0800d390 	.word	0x0800d390

0800be7c <__s2b>:
 800be7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be80:	460c      	mov	r4, r1
 800be82:	4615      	mov	r5, r2
 800be84:	461f      	mov	r7, r3
 800be86:	2209      	movs	r2, #9
 800be88:	3308      	adds	r3, #8
 800be8a:	4606      	mov	r6, r0
 800be8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800be90:	2100      	movs	r1, #0
 800be92:	2201      	movs	r2, #1
 800be94:	429a      	cmp	r2, r3
 800be96:	db09      	blt.n	800beac <__s2b+0x30>
 800be98:	4630      	mov	r0, r6
 800be9a:	f7ff ff47 	bl	800bd2c <_Balloc>
 800be9e:	b940      	cbnz	r0, 800beb2 <__s2b+0x36>
 800bea0:	4602      	mov	r2, r0
 800bea2:	4b19      	ldr	r3, [pc, #100]	; (800bf08 <__s2b+0x8c>)
 800bea4:	4819      	ldr	r0, [pc, #100]	; (800bf0c <__s2b+0x90>)
 800bea6:	21d3      	movs	r1, #211	; 0xd3
 800bea8:	f000 fcb8 	bl	800c81c <__assert_func>
 800beac:	0052      	lsls	r2, r2, #1
 800beae:	3101      	adds	r1, #1
 800beb0:	e7f0      	b.n	800be94 <__s2b+0x18>
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	6143      	str	r3, [r0, #20]
 800beb6:	2d09      	cmp	r5, #9
 800beb8:	f04f 0301 	mov.w	r3, #1
 800bebc:	6103      	str	r3, [r0, #16]
 800bebe:	dd16      	ble.n	800beee <__s2b+0x72>
 800bec0:	f104 0909 	add.w	r9, r4, #9
 800bec4:	46c8      	mov	r8, r9
 800bec6:	442c      	add	r4, r5
 800bec8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800becc:	4601      	mov	r1, r0
 800bece:	3b30      	subs	r3, #48	; 0x30
 800bed0:	220a      	movs	r2, #10
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7ff ff8c 	bl	800bdf0 <__multadd>
 800bed8:	45a0      	cmp	r8, r4
 800beda:	d1f5      	bne.n	800bec8 <__s2b+0x4c>
 800bedc:	f1a5 0408 	sub.w	r4, r5, #8
 800bee0:	444c      	add	r4, r9
 800bee2:	1b2d      	subs	r5, r5, r4
 800bee4:	1963      	adds	r3, r4, r5
 800bee6:	42bb      	cmp	r3, r7
 800bee8:	db04      	blt.n	800bef4 <__s2b+0x78>
 800beea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beee:	340a      	adds	r4, #10
 800bef0:	2509      	movs	r5, #9
 800bef2:	e7f6      	b.n	800bee2 <__s2b+0x66>
 800bef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bef8:	4601      	mov	r1, r0
 800befa:	3b30      	subs	r3, #48	; 0x30
 800befc:	220a      	movs	r2, #10
 800befe:	4630      	mov	r0, r6
 800bf00:	f7ff ff76 	bl	800bdf0 <__multadd>
 800bf04:	e7ee      	b.n	800bee4 <__s2b+0x68>
 800bf06:	bf00      	nop
 800bf08:	0800d308 	.word	0x0800d308
 800bf0c:	0800d390 	.word	0x0800d390

0800bf10 <__hi0bits>:
 800bf10:	0c03      	lsrs	r3, r0, #16
 800bf12:	041b      	lsls	r3, r3, #16
 800bf14:	b9d3      	cbnz	r3, 800bf4c <__hi0bits+0x3c>
 800bf16:	0400      	lsls	r0, r0, #16
 800bf18:	2310      	movs	r3, #16
 800bf1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf1e:	bf04      	itt	eq
 800bf20:	0200      	lsleq	r0, r0, #8
 800bf22:	3308      	addeq	r3, #8
 800bf24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf28:	bf04      	itt	eq
 800bf2a:	0100      	lsleq	r0, r0, #4
 800bf2c:	3304      	addeq	r3, #4
 800bf2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf32:	bf04      	itt	eq
 800bf34:	0080      	lsleq	r0, r0, #2
 800bf36:	3302      	addeq	r3, #2
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	db05      	blt.n	800bf48 <__hi0bits+0x38>
 800bf3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf40:	f103 0301 	add.w	r3, r3, #1
 800bf44:	bf08      	it	eq
 800bf46:	2320      	moveq	r3, #32
 800bf48:	4618      	mov	r0, r3
 800bf4a:	4770      	bx	lr
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	e7e4      	b.n	800bf1a <__hi0bits+0xa>

0800bf50 <__lo0bits>:
 800bf50:	6803      	ldr	r3, [r0, #0]
 800bf52:	f013 0207 	ands.w	r2, r3, #7
 800bf56:	d00c      	beq.n	800bf72 <__lo0bits+0x22>
 800bf58:	07d9      	lsls	r1, r3, #31
 800bf5a:	d422      	bmi.n	800bfa2 <__lo0bits+0x52>
 800bf5c:	079a      	lsls	r2, r3, #30
 800bf5e:	bf49      	itett	mi
 800bf60:	085b      	lsrmi	r3, r3, #1
 800bf62:	089b      	lsrpl	r3, r3, #2
 800bf64:	6003      	strmi	r3, [r0, #0]
 800bf66:	2201      	movmi	r2, #1
 800bf68:	bf5c      	itt	pl
 800bf6a:	6003      	strpl	r3, [r0, #0]
 800bf6c:	2202      	movpl	r2, #2
 800bf6e:	4610      	mov	r0, r2
 800bf70:	4770      	bx	lr
 800bf72:	b299      	uxth	r1, r3
 800bf74:	b909      	cbnz	r1, 800bf7a <__lo0bits+0x2a>
 800bf76:	0c1b      	lsrs	r3, r3, #16
 800bf78:	2210      	movs	r2, #16
 800bf7a:	b2d9      	uxtb	r1, r3
 800bf7c:	b909      	cbnz	r1, 800bf82 <__lo0bits+0x32>
 800bf7e:	3208      	adds	r2, #8
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	0719      	lsls	r1, r3, #28
 800bf84:	bf04      	itt	eq
 800bf86:	091b      	lsreq	r3, r3, #4
 800bf88:	3204      	addeq	r2, #4
 800bf8a:	0799      	lsls	r1, r3, #30
 800bf8c:	bf04      	itt	eq
 800bf8e:	089b      	lsreq	r3, r3, #2
 800bf90:	3202      	addeq	r2, #2
 800bf92:	07d9      	lsls	r1, r3, #31
 800bf94:	d403      	bmi.n	800bf9e <__lo0bits+0x4e>
 800bf96:	085b      	lsrs	r3, r3, #1
 800bf98:	f102 0201 	add.w	r2, r2, #1
 800bf9c:	d003      	beq.n	800bfa6 <__lo0bits+0x56>
 800bf9e:	6003      	str	r3, [r0, #0]
 800bfa0:	e7e5      	b.n	800bf6e <__lo0bits+0x1e>
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	e7e3      	b.n	800bf6e <__lo0bits+0x1e>
 800bfa6:	2220      	movs	r2, #32
 800bfa8:	e7e1      	b.n	800bf6e <__lo0bits+0x1e>
	...

0800bfac <__i2b>:
 800bfac:	b510      	push	{r4, lr}
 800bfae:	460c      	mov	r4, r1
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	f7ff febb 	bl	800bd2c <_Balloc>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	b928      	cbnz	r0, 800bfc6 <__i2b+0x1a>
 800bfba:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <__i2b+0x24>)
 800bfbc:	4805      	ldr	r0, [pc, #20]	; (800bfd4 <__i2b+0x28>)
 800bfbe:	f240 1145 	movw	r1, #325	; 0x145
 800bfc2:	f000 fc2b 	bl	800c81c <__assert_func>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	6144      	str	r4, [r0, #20]
 800bfca:	6103      	str	r3, [r0, #16]
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	bf00      	nop
 800bfd0:	0800d308 	.word	0x0800d308
 800bfd4:	0800d390 	.word	0x0800d390

0800bfd8 <__multiply>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	4691      	mov	r9, r2
 800bfde:	690a      	ldr	r2, [r1, #16]
 800bfe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	bfb8      	it	lt
 800bfe8:	460b      	movlt	r3, r1
 800bfea:	460c      	mov	r4, r1
 800bfec:	bfbc      	itt	lt
 800bfee:	464c      	movlt	r4, r9
 800bff0:	4699      	movlt	r9, r3
 800bff2:	6927      	ldr	r7, [r4, #16]
 800bff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bff8:	68a3      	ldr	r3, [r4, #8]
 800bffa:	6861      	ldr	r1, [r4, #4]
 800bffc:	eb07 060a 	add.w	r6, r7, sl
 800c000:	42b3      	cmp	r3, r6
 800c002:	b085      	sub	sp, #20
 800c004:	bfb8      	it	lt
 800c006:	3101      	addlt	r1, #1
 800c008:	f7ff fe90 	bl	800bd2c <_Balloc>
 800c00c:	b930      	cbnz	r0, 800c01c <__multiply+0x44>
 800c00e:	4602      	mov	r2, r0
 800c010:	4b44      	ldr	r3, [pc, #272]	; (800c124 <__multiply+0x14c>)
 800c012:	4845      	ldr	r0, [pc, #276]	; (800c128 <__multiply+0x150>)
 800c014:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c018:	f000 fc00 	bl	800c81c <__assert_func>
 800c01c:	f100 0514 	add.w	r5, r0, #20
 800c020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c024:	462b      	mov	r3, r5
 800c026:	2200      	movs	r2, #0
 800c028:	4543      	cmp	r3, r8
 800c02a:	d321      	bcc.n	800c070 <__multiply+0x98>
 800c02c:	f104 0314 	add.w	r3, r4, #20
 800c030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c034:	f109 0314 	add.w	r3, r9, #20
 800c038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c03c:	9202      	str	r2, [sp, #8]
 800c03e:	1b3a      	subs	r2, r7, r4
 800c040:	3a15      	subs	r2, #21
 800c042:	f022 0203 	bic.w	r2, r2, #3
 800c046:	3204      	adds	r2, #4
 800c048:	f104 0115 	add.w	r1, r4, #21
 800c04c:	428f      	cmp	r7, r1
 800c04e:	bf38      	it	cc
 800c050:	2204      	movcc	r2, #4
 800c052:	9201      	str	r2, [sp, #4]
 800c054:	9a02      	ldr	r2, [sp, #8]
 800c056:	9303      	str	r3, [sp, #12]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d80c      	bhi.n	800c076 <__multiply+0x9e>
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	dd03      	ble.n	800c068 <__multiply+0x90>
 800c060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c064:	2b00      	cmp	r3, #0
 800c066:	d05b      	beq.n	800c120 <__multiply+0x148>
 800c068:	6106      	str	r6, [r0, #16]
 800c06a:	b005      	add	sp, #20
 800c06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c070:	f843 2b04 	str.w	r2, [r3], #4
 800c074:	e7d8      	b.n	800c028 <__multiply+0x50>
 800c076:	f8b3 a000 	ldrh.w	sl, [r3]
 800c07a:	f1ba 0f00 	cmp.w	sl, #0
 800c07e:	d024      	beq.n	800c0ca <__multiply+0xf2>
 800c080:	f104 0e14 	add.w	lr, r4, #20
 800c084:	46a9      	mov	r9, r5
 800c086:	f04f 0c00 	mov.w	ip, #0
 800c08a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c08e:	f8d9 1000 	ldr.w	r1, [r9]
 800c092:	fa1f fb82 	uxth.w	fp, r2
 800c096:	b289      	uxth	r1, r1
 800c098:	fb0a 110b 	mla	r1, sl, fp, r1
 800c09c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800c0a4:	4461      	add	r1, ip
 800c0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0b2:	b289      	uxth	r1, r1
 800c0b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0b8:	4577      	cmp	r7, lr
 800c0ba:	f849 1b04 	str.w	r1, [r9], #4
 800c0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0c2:	d8e2      	bhi.n	800c08a <__multiply+0xb2>
 800c0c4:	9a01      	ldr	r2, [sp, #4]
 800c0c6:	f845 c002 	str.w	ip, [r5, r2]
 800c0ca:	9a03      	ldr	r2, [sp, #12]
 800c0cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	f1b9 0f00 	cmp.w	r9, #0
 800c0d6:	d021      	beq.n	800c11c <__multiply+0x144>
 800c0d8:	6829      	ldr	r1, [r5, #0]
 800c0da:	f104 0c14 	add.w	ip, r4, #20
 800c0de:	46ae      	mov	lr, r5
 800c0e0:	f04f 0a00 	mov.w	sl, #0
 800c0e4:	f8bc b000 	ldrh.w	fp, [ip]
 800c0e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0ec:	fb09 220b 	mla	r2, r9, fp, r2
 800c0f0:	4452      	add	r2, sl
 800c0f2:	b289      	uxth	r1, r1
 800c0f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0f8:	f84e 1b04 	str.w	r1, [lr], #4
 800c0fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c104:	f8be 1000 	ldrh.w	r1, [lr]
 800c108:	fb09 110a 	mla	r1, r9, sl, r1
 800c10c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c110:	4567      	cmp	r7, ip
 800c112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c116:	d8e5      	bhi.n	800c0e4 <__multiply+0x10c>
 800c118:	9a01      	ldr	r2, [sp, #4]
 800c11a:	50a9      	str	r1, [r5, r2]
 800c11c:	3504      	adds	r5, #4
 800c11e:	e799      	b.n	800c054 <__multiply+0x7c>
 800c120:	3e01      	subs	r6, #1
 800c122:	e79b      	b.n	800c05c <__multiply+0x84>
 800c124:	0800d308 	.word	0x0800d308
 800c128:	0800d390 	.word	0x0800d390

0800c12c <__pow5mult>:
 800c12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c130:	4615      	mov	r5, r2
 800c132:	f012 0203 	ands.w	r2, r2, #3
 800c136:	4606      	mov	r6, r0
 800c138:	460f      	mov	r7, r1
 800c13a:	d007      	beq.n	800c14c <__pow5mult+0x20>
 800c13c:	4c25      	ldr	r4, [pc, #148]	; (800c1d4 <__pow5mult+0xa8>)
 800c13e:	3a01      	subs	r2, #1
 800c140:	2300      	movs	r3, #0
 800c142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c146:	f7ff fe53 	bl	800bdf0 <__multadd>
 800c14a:	4607      	mov	r7, r0
 800c14c:	10ad      	asrs	r5, r5, #2
 800c14e:	d03d      	beq.n	800c1cc <__pow5mult+0xa0>
 800c150:	69f4      	ldr	r4, [r6, #28]
 800c152:	b97c      	cbnz	r4, 800c174 <__pow5mult+0x48>
 800c154:	2010      	movs	r0, #16
 800c156:	f000 fb95 	bl	800c884 <malloc>
 800c15a:	4602      	mov	r2, r0
 800c15c:	61f0      	str	r0, [r6, #28]
 800c15e:	b928      	cbnz	r0, 800c16c <__pow5mult+0x40>
 800c160:	4b1d      	ldr	r3, [pc, #116]	; (800c1d8 <__pow5mult+0xac>)
 800c162:	481e      	ldr	r0, [pc, #120]	; (800c1dc <__pow5mult+0xb0>)
 800c164:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c168:	f000 fb58 	bl	800c81c <__assert_func>
 800c16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c170:	6004      	str	r4, [r0, #0]
 800c172:	60c4      	str	r4, [r0, #12]
 800c174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c17c:	b94c      	cbnz	r4, 800c192 <__pow5mult+0x66>
 800c17e:	f240 2171 	movw	r1, #625	; 0x271
 800c182:	4630      	mov	r0, r6
 800c184:	f7ff ff12 	bl	800bfac <__i2b>
 800c188:	2300      	movs	r3, #0
 800c18a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c18e:	4604      	mov	r4, r0
 800c190:	6003      	str	r3, [r0, #0]
 800c192:	f04f 0900 	mov.w	r9, #0
 800c196:	07eb      	lsls	r3, r5, #31
 800c198:	d50a      	bpl.n	800c1b0 <__pow5mult+0x84>
 800c19a:	4639      	mov	r1, r7
 800c19c:	4622      	mov	r2, r4
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff ff1a 	bl	800bfd8 <__multiply>
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff fdff 	bl	800bdac <_Bfree>
 800c1ae:	4647      	mov	r7, r8
 800c1b0:	106d      	asrs	r5, r5, #1
 800c1b2:	d00b      	beq.n	800c1cc <__pow5mult+0xa0>
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	b938      	cbnz	r0, 800c1c8 <__pow5mult+0x9c>
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff ff0b 	bl	800bfd8 <__multiply>
 800c1c2:	6020      	str	r0, [r4, #0]
 800c1c4:	f8c0 9000 	str.w	r9, [r0]
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	e7e4      	b.n	800c196 <__pow5mult+0x6a>
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1d2:	bf00      	nop
 800c1d4:	0800d4e0 	.word	0x0800d4e0
 800c1d8:	0800d379 	.word	0x0800d379
 800c1dc:	0800d390 	.word	0x0800d390

0800c1e0 <__lshift>:
 800c1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	6849      	ldr	r1, [r1, #4]
 800c1e8:	6923      	ldr	r3, [r4, #16]
 800c1ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	4691      	mov	r9, r2
 800c1f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1f8:	f108 0601 	add.w	r6, r8, #1
 800c1fc:	42b3      	cmp	r3, r6
 800c1fe:	db0b      	blt.n	800c218 <__lshift+0x38>
 800c200:	4638      	mov	r0, r7
 800c202:	f7ff fd93 	bl	800bd2c <_Balloc>
 800c206:	4605      	mov	r5, r0
 800c208:	b948      	cbnz	r0, 800c21e <__lshift+0x3e>
 800c20a:	4602      	mov	r2, r0
 800c20c:	4b28      	ldr	r3, [pc, #160]	; (800c2b0 <__lshift+0xd0>)
 800c20e:	4829      	ldr	r0, [pc, #164]	; (800c2b4 <__lshift+0xd4>)
 800c210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c214:	f000 fb02 	bl	800c81c <__assert_func>
 800c218:	3101      	adds	r1, #1
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	e7ee      	b.n	800c1fc <__lshift+0x1c>
 800c21e:	2300      	movs	r3, #0
 800c220:	f100 0114 	add.w	r1, r0, #20
 800c224:	f100 0210 	add.w	r2, r0, #16
 800c228:	4618      	mov	r0, r3
 800c22a:	4553      	cmp	r3, sl
 800c22c:	db33      	blt.n	800c296 <__lshift+0xb6>
 800c22e:	6920      	ldr	r0, [r4, #16]
 800c230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c234:	f104 0314 	add.w	r3, r4, #20
 800c238:	f019 091f 	ands.w	r9, r9, #31
 800c23c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c244:	d02b      	beq.n	800c29e <__lshift+0xbe>
 800c246:	f1c9 0e20 	rsb	lr, r9, #32
 800c24a:	468a      	mov	sl, r1
 800c24c:	2200      	movs	r2, #0
 800c24e:	6818      	ldr	r0, [r3, #0]
 800c250:	fa00 f009 	lsl.w	r0, r0, r9
 800c254:	4310      	orrs	r0, r2
 800c256:	f84a 0b04 	str.w	r0, [sl], #4
 800c25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c25e:	459c      	cmp	ip, r3
 800c260:	fa22 f20e 	lsr.w	r2, r2, lr
 800c264:	d8f3      	bhi.n	800c24e <__lshift+0x6e>
 800c266:	ebac 0304 	sub.w	r3, ip, r4
 800c26a:	3b15      	subs	r3, #21
 800c26c:	f023 0303 	bic.w	r3, r3, #3
 800c270:	3304      	adds	r3, #4
 800c272:	f104 0015 	add.w	r0, r4, #21
 800c276:	4584      	cmp	ip, r0
 800c278:	bf38      	it	cc
 800c27a:	2304      	movcc	r3, #4
 800c27c:	50ca      	str	r2, [r1, r3]
 800c27e:	b10a      	cbz	r2, 800c284 <__lshift+0xa4>
 800c280:	f108 0602 	add.w	r6, r8, #2
 800c284:	3e01      	subs	r6, #1
 800c286:	4638      	mov	r0, r7
 800c288:	612e      	str	r6, [r5, #16]
 800c28a:	4621      	mov	r1, r4
 800c28c:	f7ff fd8e 	bl	800bdac <_Bfree>
 800c290:	4628      	mov	r0, r5
 800c292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c296:	f842 0f04 	str.w	r0, [r2, #4]!
 800c29a:	3301      	adds	r3, #1
 800c29c:	e7c5      	b.n	800c22a <__lshift+0x4a>
 800c29e:	3904      	subs	r1, #4
 800c2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2a8:	459c      	cmp	ip, r3
 800c2aa:	d8f9      	bhi.n	800c2a0 <__lshift+0xc0>
 800c2ac:	e7ea      	b.n	800c284 <__lshift+0xa4>
 800c2ae:	bf00      	nop
 800c2b0:	0800d308 	.word	0x0800d308
 800c2b4:	0800d390 	.word	0x0800d390

0800c2b8 <__mcmp>:
 800c2b8:	b530      	push	{r4, r5, lr}
 800c2ba:	6902      	ldr	r2, [r0, #16]
 800c2bc:	690c      	ldr	r4, [r1, #16]
 800c2be:	1b12      	subs	r2, r2, r4
 800c2c0:	d10e      	bne.n	800c2e0 <__mcmp+0x28>
 800c2c2:	f100 0314 	add.w	r3, r0, #20
 800c2c6:	3114      	adds	r1, #20
 800c2c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c2d8:	42a5      	cmp	r5, r4
 800c2da:	d003      	beq.n	800c2e4 <__mcmp+0x2c>
 800c2dc:	d305      	bcc.n	800c2ea <__mcmp+0x32>
 800c2de:	2201      	movs	r2, #1
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	bd30      	pop	{r4, r5, pc}
 800c2e4:	4283      	cmp	r3, r0
 800c2e6:	d3f3      	bcc.n	800c2d0 <__mcmp+0x18>
 800c2e8:	e7fa      	b.n	800c2e0 <__mcmp+0x28>
 800c2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ee:	e7f7      	b.n	800c2e0 <__mcmp+0x28>

0800c2f0 <__mdiff>:
 800c2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4690      	mov	r8, r2
 800c2fe:	f7ff ffdb 	bl	800c2b8 <__mcmp>
 800c302:	1e05      	subs	r5, r0, #0
 800c304:	d110      	bne.n	800c328 <__mdiff+0x38>
 800c306:	4629      	mov	r1, r5
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff fd0f 	bl	800bd2c <_Balloc>
 800c30e:	b930      	cbnz	r0, 800c31e <__mdiff+0x2e>
 800c310:	4b3a      	ldr	r3, [pc, #232]	; (800c3fc <__mdiff+0x10c>)
 800c312:	4602      	mov	r2, r0
 800c314:	f240 2137 	movw	r1, #567	; 0x237
 800c318:	4839      	ldr	r0, [pc, #228]	; (800c400 <__mdiff+0x110>)
 800c31a:	f000 fa7f 	bl	800c81c <__assert_func>
 800c31e:	2301      	movs	r3, #1
 800c320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c328:	bfa4      	itt	ge
 800c32a:	4643      	movge	r3, r8
 800c32c:	46a0      	movge	r8, r4
 800c32e:	4630      	mov	r0, r6
 800c330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c334:	bfa6      	itte	ge
 800c336:	461c      	movge	r4, r3
 800c338:	2500      	movge	r5, #0
 800c33a:	2501      	movlt	r5, #1
 800c33c:	f7ff fcf6 	bl	800bd2c <_Balloc>
 800c340:	b920      	cbnz	r0, 800c34c <__mdiff+0x5c>
 800c342:	4b2e      	ldr	r3, [pc, #184]	; (800c3fc <__mdiff+0x10c>)
 800c344:	4602      	mov	r2, r0
 800c346:	f240 2145 	movw	r1, #581	; 0x245
 800c34a:	e7e5      	b.n	800c318 <__mdiff+0x28>
 800c34c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c350:	6926      	ldr	r6, [r4, #16]
 800c352:	60c5      	str	r5, [r0, #12]
 800c354:	f104 0914 	add.w	r9, r4, #20
 800c358:	f108 0514 	add.w	r5, r8, #20
 800c35c:	f100 0e14 	add.w	lr, r0, #20
 800c360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c368:	f108 0210 	add.w	r2, r8, #16
 800c36c:	46f2      	mov	sl, lr
 800c36e:	2100      	movs	r1, #0
 800c370:	f859 3b04 	ldr.w	r3, [r9], #4
 800c374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c378:	fa11 f88b 	uxtah	r8, r1, fp
 800c37c:	b299      	uxth	r1, r3
 800c37e:	0c1b      	lsrs	r3, r3, #16
 800c380:	eba8 0801 	sub.w	r8, r8, r1
 800c384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c388:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c38c:	fa1f f888 	uxth.w	r8, r8
 800c390:	1419      	asrs	r1, r3, #16
 800c392:	454e      	cmp	r6, r9
 800c394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c398:	f84a 3b04 	str.w	r3, [sl], #4
 800c39c:	d8e8      	bhi.n	800c370 <__mdiff+0x80>
 800c39e:	1b33      	subs	r3, r6, r4
 800c3a0:	3b15      	subs	r3, #21
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	3415      	adds	r4, #21
 800c3aa:	42a6      	cmp	r6, r4
 800c3ac:	bf38      	it	cc
 800c3ae:	2304      	movcc	r3, #4
 800c3b0:	441d      	add	r5, r3
 800c3b2:	4473      	add	r3, lr
 800c3b4:	469e      	mov	lr, r3
 800c3b6:	462e      	mov	r6, r5
 800c3b8:	4566      	cmp	r6, ip
 800c3ba:	d30e      	bcc.n	800c3da <__mdiff+0xea>
 800c3bc:	f10c 0203 	add.w	r2, ip, #3
 800c3c0:	1b52      	subs	r2, r2, r5
 800c3c2:	f022 0203 	bic.w	r2, r2, #3
 800c3c6:	3d03      	subs	r5, #3
 800c3c8:	45ac      	cmp	ip, r5
 800c3ca:	bf38      	it	cc
 800c3cc:	2200      	movcc	r2, #0
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3d4:	b17a      	cbz	r2, 800c3f6 <__mdiff+0x106>
 800c3d6:	6107      	str	r7, [r0, #16]
 800c3d8:	e7a4      	b.n	800c324 <__mdiff+0x34>
 800c3da:	f856 8b04 	ldr.w	r8, [r6], #4
 800c3de:	fa11 f288 	uxtah	r2, r1, r8
 800c3e2:	1414      	asrs	r4, r2, #16
 800c3e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3e8:	b292      	uxth	r2, r2
 800c3ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c3ee:	f84e 2b04 	str.w	r2, [lr], #4
 800c3f2:	1421      	asrs	r1, r4, #16
 800c3f4:	e7e0      	b.n	800c3b8 <__mdiff+0xc8>
 800c3f6:	3f01      	subs	r7, #1
 800c3f8:	e7ea      	b.n	800c3d0 <__mdiff+0xe0>
 800c3fa:	bf00      	nop
 800c3fc:	0800d308 	.word	0x0800d308
 800c400:	0800d390 	.word	0x0800d390

0800c404 <__ulp>:
 800c404:	b082      	sub	sp, #8
 800c406:	ed8d 0b00 	vstr	d0, [sp]
 800c40a:	9a01      	ldr	r2, [sp, #4]
 800c40c:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <__ulp+0x48>)
 800c40e:	4013      	ands	r3, r2
 800c410:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c414:	2b00      	cmp	r3, #0
 800c416:	dc08      	bgt.n	800c42a <__ulp+0x26>
 800c418:	425b      	negs	r3, r3
 800c41a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c41e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c422:	da04      	bge.n	800c42e <__ulp+0x2a>
 800c424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c428:	4113      	asrs	r3, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	e008      	b.n	800c440 <__ulp+0x3c>
 800c42e:	f1a2 0314 	sub.w	r3, r2, #20
 800c432:	2b1e      	cmp	r3, #30
 800c434:	bfda      	itte	le
 800c436:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c43a:	40da      	lsrle	r2, r3
 800c43c:	2201      	movgt	r2, #1
 800c43e:	2300      	movs	r3, #0
 800c440:	4619      	mov	r1, r3
 800c442:	4610      	mov	r0, r2
 800c444:	ec41 0b10 	vmov	d0, r0, r1
 800c448:	b002      	add	sp, #8
 800c44a:	4770      	bx	lr
 800c44c:	7ff00000 	.word	0x7ff00000

0800c450 <__b2d>:
 800c450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c454:	6906      	ldr	r6, [r0, #16]
 800c456:	f100 0814 	add.w	r8, r0, #20
 800c45a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c45e:	1f37      	subs	r7, r6, #4
 800c460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c464:	4610      	mov	r0, r2
 800c466:	f7ff fd53 	bl	800bf10 <__hi0bits>
 800c46a:	f1c0 0320 	rsb	r3, r0, #32
 800c46e:	280a      	cmp	r0, #10
 800c470:	600b      	str	r3, [r1, #0]
 800c472:	491b      	ldr	r1, [pc, #108]	; (800c4e0 <__b2d+0x90>)
 800c474:	dc15      	bgt.n	800c4a2 <__b2d+0x52>
 800c476:	f1c0 0c0b 	rsb	ip, r0, #11
 800c47a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c47e:	45b8      	cmp	r8, r7
 800c480:	ea43 0501 	orr.w	r5, r3, r1
 800c484:	bf34      	ite	cc
 800c486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c48a:	2300      	movcs	r3, #0
 800c48c:	3015      	adds	r0, #21
 800c48e:	fa02 f000 	lsl.w	r0, r2, r0
 800c492:	fa23 f30c 	lsr.w	r3, r3, ip
 800c496:	4303      	orrs	r3, r0
 800c498:	461c      	mov	r4, r3
 800c49a:	ec45 4b10 	vmov	d0, r4, r5
 800c49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a2:	45b8      	cmp	r8, r7
 800c4a4:	bf3a      	itte	cc
 800c4a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800c4ae:	2300      	movcs	r3, #0
 800c4b0:	380b      	subs	r0, #11
 800c4b2:	d012      	beq.n	800c4da <__b2d+0x8a>
 800c4b4:	f1c0 0120 	rsb	r1, r0, #32
 800c4b8:	fa23 f401 	lsr.w	r4, r3, r1
 800c4bc:	4082      	lsls	r2, r0
 800c4be:	4322      	orrs	r2, r4
 800c4c0:	4547      	cmp	r7, r8
 800c4c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c4c6:	bf8c      	ite	hi
 800c4c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c4cc:	2200      	movls	r2, #0
 800c4ce:	4083      	lsls	r3, r0
 800c4d0:	40ca      	lsrs	r2, r1
 800c4d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	e7de      	b.n	800c498 <__b2d+0x48>
 800c4da:	ea42 0501 	orr.w	r5, r2, r1
 800c4de:	e7db      	b.n	800c498 <__b2d+0x48>
 800c4e0:	3ff00000 	.word	0x3ff00000

0800c4e4 <__d2b>:
 800c4e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4e8:	460f      	mov	r7, r1
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	ec59 8b10 	vmov	r8, r9, d0
 800c4f0:	4616      	mov	r6, r2
 800c4f2:	f7ff fc1b 	bl	800bd2c <_Balloc>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	b930      	cbnz	r0, 800c508 <__d2b+0x24>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	4b24      	ldr	r3, [pc, #144]	; (800c590 <__d2b+0xac>)
 800c4fe:	4825      	ldr	r0, [pc, #148]	; (800c594 <__d2b+0xb0>)
 800c500:	f240 310f 	movw	r1, #783	; 0x30f
 800c504:	f000 f98a 	bl	800c81c <__assert_func>
 800c508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c50c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c510:	bb2d      	cbnz	r5, 800c55e <__d2b+0x7a>
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	f1b8 0300 	subs.w	r3, r8, #0
 800c518:	d026      	beq.n	800c568 <__d2b+0x84>
 800c51a:	4668      	mov	r0, sp
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	f7ff fd17 	bl	800bf50 <__lo0bits>
 800c522:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c526:	b1e8      	cbz	r0, 800c564 <__d2b+0x80>
 800c528:	f1c0 0320 	rsb	r3, r0, #32
 800c52c:	fa02 f303 	lsl.w	r3, r2, r3
 800c530:	430b      	orrs	r3, r1
 800c532:	40c2      	lsrs	r2, r0
 800c534:	6163      	str	r3, [r4, #20]
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	9b01      	ldr	r3, [sp, #4]
 800c53a:	61a3      	str	r3, [r4, #24]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bf14      	ite	ne
 800c540:	2202      	movne	r2, #2
 800c542:	2201      	moveq	r2, #1
 800c544:	6122      	str	r2, [r4, #16]
 800c546:	b1bd      	cbz	r5, 800c578 <__d2b+0x94>
 800c548:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c54c:	4405      	add	r5, r0
 800c54e:	603d      	str	r5, [r7, #0]
 800c550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c554:	6030      	str	r0, [r6, #0]
 800c556:	4620      	mov	r0, r4
 800c558:	b003      	add	sp, #12
 800c55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c55e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c562:	e7d6      	b.n	800c512 <__d2b+0x2e>
 800c564:	6161      	str	r1, [r4, #20]
 800c566:	e7e7      	b.n	800c538 <__d2b+0x54>
 800c568:	a801      	add	r0, sp, #4
 800c56a:	f7ff fcf1 	bl	800bf50 <__lo0bits>
 800c56e:	9b01      	ldr	r3, [sp, #4]
 800c570:	6163      	str	r3, [r4, #20]
 800c572:	3020      	adds	r0, #32
 800c574:	2201      	movs	r2, #1
 800c576:	e7e5      	b.n	800c544 <__d2b+0x60>
 800c578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c57c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c580:	6038      	str	r0, [r7, #0]
 800c582:	6918      	ldr	r0, [r3, #16]
 800c584:	f7ff fcc4 	bl	800bf10 <__hi0bits>
 800c588:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c58c:	e7e2      	b.n	800c554 <__d2b+0x70>
 800c58e:	bf00      	nop
 800c590:	0800d308 	.word	0x0800d308
 800c594:	0800d390 	.word	0x0800d390

0800c598 <__ratio>:
 800c598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	4688      	mov	r8, r1
 800c59e:	4669      	mov	r1, sp
 800c5a0:	4681      	mov	r9, r0
 800c5a2:	f7ff ff55 	bl	800c450 <__b2d>
 800c5a6:	a901      	add	r1, sp, #4
 800c5a8:	4640      	mov	r0, r8
 800c5aa:	ec55 4b10 	vmov	r4, r5, d0
 800c5ae:	f7ff ff4f 	bl	800c450 <__b2d>
 800c5b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5ba:	eba3 0c02 	sub.w	ip, r3, r2
 800c5be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5c2:	1a9b      	subs	r3, r3, r2
 800c5c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c5c8:	ec51 0b10 	vmov	r0, r1, d0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	bfd6      	itet	le
 800c5d0:	460a      	movle	r2, r1
 800c5d2:	462a      	movgt	r2, r5
 800c5d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5d8:	468b      	mov	fp, r1
 800c5da:	462f      	mov	r7, r5
 800c5dc:	bfd4      	ite	le
 800c5de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	ee10 2a10 	vmov	r2, s0
 800c5ec:	465b      	mov	r3, fp
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	f7f4 f95c 	bl	80008ac <__aeabi_ddiv>
 800c5f4:	ec41 0b10 	vmov	d0, r0, r1
 800c5f8:	b003      	add	sp, #12
 800c5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5fe <__copybits>:
 800c5fe:	3901      	subs	r1, #1
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	1149      	asrs	r1, r1, #5
 800c604:	6914      	ldr	r4, [r2, #16]
 800c606:	3101      	adds	r1, #1
 800c608:	f102 0314 	add.w	r3, r2, #20
 800c60c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c614:	1f05      	subs	r5, r0, #4
 800c616:	42a3      	cmp	r3, r4
 800c618:	d30c      	bcc.n	800c634 <__copybits+0x36>
 800c61a:	1aa3      	subs	r3, r4, r2
 800c61c:	3b11      	subs	r3, #17
 800c61e:	f023 0303 	bic.w	r3, r3, #3
 800c622:	3211      	adds	r2, #17
 800c624:	42a2      	cmp	r2, r4
 800c626:	bf88      	it	hi
 800c628:	2300      	movhi	r3, #0
 800c62a:	4418      	add	r0, r3
 800c62c:	2300      	movs	r3, #0
 800c62e:	4288      	cmp	r0, r1
 800c630:	d305      	bcc.n	800c63e <__copybits+0x40>
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	f853 6b04 	ldr.w	r6, [r3], #4
 800c638:	f845 6f04 	str.w	r6, [r5, #4]!
 800c63c:	e7eb      	b.n	800c616 <__copybits+0x18>
 800c63e:	f840 3b04 	str.w	r3, [r0], #4
 800c642:	e7f4      	b.n	800c62e <__copybits+0x30>

0800c644 <__any_on>:
 800c644:	f100 0214 	add.w	r2, r0, #20
 800c648:	6900      	ldr	r0, [r0, #16]
 800c64a:	114b      	asrs	r3, r1, #5
 800c64c:	4298      	cmp	r0, r3
 800c64e:	b510      	push	{r4, lr}
 800c650:	db11      	blt.n	800c676 <__any_on+0x32>
 800c652:	dd0a      	ble.n	800c66a <__any_on+0x26>
 800c654:	f011 011f 	ands.w	r1, r1, #31
 800c658:	d007      	beq.n	800c66a <__any_on+0x26>
 800c65a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c65e:	fa24 f001 	lsr.w	r0, r4, r1
 800c662:	fa00 f101 	lsl.w	r1, r0, r1
 800c666:	428c      	cmp	r4, r1
 800c668:	d10b      	bne.n	800c682 <__any_on+0x3e>
 800c66a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c66e:	4293      	cmp	r3, r2
 800c670:	d803      	bhi.n	800c67a <__any_on+0x36>
 800c672:	2000      	movs	r0, #0
 800c674:	bd10      	pop	{r4, pc}
 800c676:	4603      	mov	r3, r0
 800c678:	e7f7      	b.n	800c66a <__any_on+0x26>
 800c67a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c67e:	2900      	cmp	r1, #0
 800c680:	d0f5      	beq.n	800c66e <__any_on+0x2a>
 800c682:	2001      	movs	r0, #1
 800c684:	e7f6      	b.n	800c674 <__any_on+0x30>

0800c686 <__ascii_wctomb>:
 800c686:	b149      	cbz	r1, 800c69c <__ascii_wctomb+0x16>
 800c688:	2aff      	cmp	r2, #255	; 0xff
 800c68a:	bf85      	ittet	hi
 800c68c:	238a      	movhi	r3, #138	; 0x8a
 800c68e:	6003      	strhi	r3, [r0, #0]
 800c690:	700a      	strbls	r2, [r1, #0]
 800c692:	f04f 30ff 	movhi.w	r0, #4294967295
 800c696:	bf98      	it	ls
 800c698:	2001      	movls	r0, #1
 800c69a:	4770      	bx	lr
 800c69c:	4608      	mov	r0, r1
 800c69e:	4770      	bx	lr

0800c6a0 <__sflush_r>:
 800c6a0:	898a      	ldrh	r2, [r1, #12]
 800c6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	0710      	lsls	r0, r2, #28
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	d458      	bmi.n	800c760 <__sflush_r+0xc0>
 800c6ae:	684b      	ldr	r3, [r1, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	dc05      	bgt.n	800c6c0 <__sflush_r+0x20>
 800c6b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	dc02      	bgt.n	800c6c0 <__sflush_r+0x20>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6c2:	2e00      	cmp	r6, #0
 800c6c4:	d0f9      	beq.n	800c6ba <__sflush_r+0x1a>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6cc:	682f      	ldr	r7, [r5, #0]
 800c6ce:	6a21      	ldr	r1, [r4, #32]
 800c6d0:	602b      	str	r3, [r5, #0]
 800c6d2:	d032      	beq.n	800c73a <__sflush_r+0x9a>
 800c6d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	075a      	lsls	r2, r3, #29
 800c6da:	d505      	bpl.n	800c6e8 <__sflush_r+0x48>
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	1ac0      	subs	r0, r0, r3
 800c6e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6e2:	b10b      	cbz	r3, 800c6e8 <__sflush_r+0x48>
 800c6e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6e6:	1ac0      	subs	r0, r0, r3
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6ee:	6a21      	ldr	r1, [r4, #32]
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	47b0      	blx	r6
 800c6f4:	1c43      	adds	r3, r0, #1
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	d106      	bne.n	800c708 <__sflush_r+0x68>
 800c6fa:	6829      	ldr	r1, [r5, #0]
 800c6fc:	291d      	cmp	r1, #29
 800c6fe:	d82b      	bhi.n	800c758 <__sflush_r+0xb8>
 800c700:	4a29      	ldr	r2, [pc, #164]	; (800c7a8 <__sflush_r+0x108>)
 800c702:	410a      	asrs	r2, r1
 800c704:	07d6      	lsls	r6, r2, #31
 800c706:	d427      	bmi.n	800c758 <__sflush_r+0xb8>
 800c708:	2200      	movs	r2, #0
 800c70a:	6062      	str	r2, [r4, #4]
 800c70c:	04d9      	lsls	r1, r3, #19
 800c70e:	6922      	ldr	r2, [r4, #16]
 800c710:	6022      	str	r2, [r4, #0]
 800c712:	d504      	bpl.n	800c71e <__sflush_r+0x7e>
 800c714:	1c42      	adds	r2, r0, #1
 800c716:	d101      	bne.n	800c71c <__sflush_r+0x7c>
 800c718:	682b      	ldr	r3, [r5, #0]
 800c71a:	b903      	cbnz	r3, 800c71e <__sflush_r+0x7e>
 800c71c:	6560      	str	r0, [r4, #84]	; 0x54
 800c71e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c720:	602f      	str	r7, [r5, #0]
 800c722:	2900      	cmp	r1, #0
 800c724:	d0c9      	beq.n	800c6ba <__sflush_r+0x1a>
 800c726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c72a:	4299      	cmp	r1, r3
 800c72c:	d002      	beq.n	800c734 <__sflush_r+0x94>
 800c72e:	4628      	mov	r0, r5
 800c730:	f7fe fe9a 	bl	800b468 <_free_r>
 800c734:	2000      	movs	r0, #0
 800c736:	6360      	str	r0, [r4, #52]	; 0x34
 800c738:	e7c0      	b.n	800c6bc <__sflush_r+0x1c>
 800c73a:	2301      	movs	r3, #1
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b0      	blx	r6
 800c740:	1c41      	adds	r1, r0, #1
 800c742:	d1c8      	bne.n	800c6d6 <__sflush_r+0x36>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0c5      	beq.n	800c6d6 <__sflush_r+0x36>
 800c74a:	2b1d      	cmp	r3, #29
 800c74c:	d001      	beq.n	800c752 <__sflush_r+0xb2>
 800c74e:	2b16      	cmp	r3, #22
 800c750:	d101      	bne.n	800c756 <__sflush_r+0xb6>
 800c752:	602f      	str	r7, [r5, #0]
 800c754:	e7b1      	b.n	800c6ba <__sflush_r+0x1a>
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c75c:	81a3      	strh	r3, [r4, #12]
 800c75e:	e7ad      	b.n	800c6bc <__sflush_r+0x1c>
 800c760:	690f      	ldr	r7, [r1, #16]
 800c762:	2f00      	cmp	r7, #0
 800c764:	d0a9      	beq.n	800c6ba <__sflush_r+0x1a>
 800c766:	0793      	lsls	r3, r2, #30
 800c768:	680e      	ldr	r6, [r1, #0]
 800c76a:	bf08      	it	eq
 800c76c:	694b      	ldreq	r3, [r1, #20]
 800c76e:	600f      	str	r7, [r1, #0]
 800c770:	bf18      	it	ne
 800c772:	2300      	movne	r3, #0
 800c774:	eba6 0807 	sub.w	r8, r6, r7
 800c778:	608b      	str	r3, [r1, #8]
 800c77a:	f1b8 0f00 	cmp.w	r8, #0
 800c77e:	dd9c      	ble.n	800c6ba <__sflush_r+0x1a>
 800c780:	6a21      	ldr	r1, [r4, #32]
 800c782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c784:	4643      	mov	r3, r8
 800c786:	463a      	mov	r2, r7
 800c788:	4628      	mov	r0, r5
 800c78a:	47b0      	blx	r6
 800c78c:	2800      	cmp	r0, #0
 800c78e:	dc06      	bgt.n	800c79e <__sflush_r+0xfe>
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	f04f 30ff 	mov.w	r0, #4294967295
 800c79c:	e78e      	b.n	800c6bc <__sflush_r+0x1c>
 800c79e:	4407      	add	r7, r0
 800c7a0:	eba8 0800 	sub.w	r8, r8, r0
 800c7a4:	e7e9      	b.n	800c77a <__sflush_r+0xda>
 800c7a6:	bf00      	nop
 800c7a8:	dfbffffe 	.word	0xdfbffffe

0800c7ac <_fflush_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	690b      	ldr	r3, [r1, #16]
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	b913      	cbnz	r3, 800c7bc <_fflush_r+0x10>
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	b118      	cbz	r0, 800c7c6 <_fflush_r+0x1a>
 800c7be:	6a03      	ldr	r3, [r0, #32]
 800c7c0:	b90b      	cbnz	r3, 800c7c6 <_fflush_r+0x1a>
 800c7c2:	f7fe fd25 	bl	800b210 <__sinit>
 800c7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0f3      	beq.n	800c7b6 <_fflush_r+0xa>
 800c7ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7d0:	07d0      	lsls	r0, r2, #31
 800c7d2:	d404      	bmi.n	800c7de <_fflush_r+0x32>
 800c7d4:	0599      	lsls	r1, r3, #22
 800c7d6:	d402      	bmi.n	800c7de <_fflush_r+0x32>
 800c7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7da:	f7fe fe2c 	bl	800b436 <__retarget_lock_acquire_recursive>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	f7ff ff5d 	bl	800c6a0 <__sflush_r>
 800c7e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7e8:	07da      	lsls	r2, r3, #31
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	d4e4      	bmi.n	800c7b8 <_fflush_r+0xc>
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	059b      	lsls	r3, r3, #22
 800c7f2:	d4e1      	bmi.n	800c7b8 <_fflush_r+0xc>
 800c7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7f6:	f7fe fe1f 	bl	800b438 <__retarget_lock_release_recursive>
 800c7fa:	e7dd      	b.n	800c7b8 <_fflush_r+0xc>

0800c7fc <_sbrk_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4d06      	ldr	r5, [pc, #24]	; (800c818 <_sbrk_r+0x1c>)
 800c800:	2300      	movs	r3, #0
 800c802:	4604      	mov	r4, r0
 800c804:	4608      	mov	r0, r1
 800c806:	602b      	str	r3, [r5, #0]
 800c808:	f7f5 f89e 	bl	8001948 <_sbrk>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_sbrk_r+0x1a>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_sbrk_r+0x1a>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	20001f98 	.word	0x20001f98

0800c81c <__assert_func>:
 800c81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c81e:	4614      	mov	r4, r2
 800c820:	461a      	mov	r2, r3
 800c822:	4b09      	ldr	r3, [pc, #36]	; (800c848 <__assert_func+0x2c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4605      	mov	r5, r0
 800c828:	68d8      	ldr	r0, [r3, #12]
 800c82a:	b14c      	cbz	r4, 800c840 <__assert_func+0x24>
 800c82c:	4b07      	ldr	r3, [pc, #28]	; (800c84c <__assert_func+0x30>)
 800c82e:	9100      	str	r1, [sp, #0]
 800c830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c834:	4906      	ldr	r1, [pc, #24]	; (800c850 <__assert_func+0x34>)
 800c836:	462b      	mov	r3, r5
 800c838:	f000 f82c 	bl	800c894 <fiprintf>
 800c83c:	f000 f83c 	bl	800c8b8 <abort>
 800c840:	4b04      	ldr	r3, [pc, #16]	; (800c854 <__assert_func+0x38>)
 800c842:	461c      	mov	r4, r3
 800c844:	e7f3      	b.n	800c82e <__assert_func+0x12>
 800c846:	bf00      	nop
 800c848:	20000348 	.word	0x20000348
 800c84c:	0800d5ed 	.word	0x0800d5ed
 800c850:	0800d5fa 	.word	0x0800d5fa
 800c854:	0800d628 	.word	0x0800d628

0800c858 <_calloc_r>:
 800c858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c85a:	fba1 2402 	umull	r2, r4, r1, r2
 800c85e:	b94c      	cbnz	r4, 800c874 <_calloc_r+0x1c>
 800c860:	4611      	mov	r1, r2
 800c862:	9201      	str	r2, [sp, #4]
 800c864:	f7ff f9c4 	bl	800bbf0 <_malloc_r>
 800c868:	9a01      	ldr	r2, [sp, #4]
 800c86a:	4605      	mov	r5, r0
 800c86c:	b930      	cbnz	r0, 800c87c <_calloc_r+0x24>
 800c86e:	4628      	mov	r0, r5
 800c870:	b003      	add	sp, #12
 800c872:	bd30      	pop	{r4, r5, pc}
 800c874:	220c      	movs	r2, #12
 800c876:	6002      	str	r2, [r0, #0]
 800c878:	2500      	movs	r5, #0
 800c87a:	e7f8      	b.n	800c86e <_calloc_r+0x16>
 800c87c:	4621      	mov	r1, r4
 800c87e:	f7fe fd40 	bl	800b302 <memset>
 800c882:	e7f4      	b.n	800c86e <_calloc_r+0x16>

0800c884 <malloc>:
 800c884:	4b02      	ldr	r3, [pc, #8]	; (800c890 <malloc+0xc>)
 800c886:	4601      	mov	r1, r0
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	f7ff b9b1 	b.w	800bbf0 <_malloc_r>
 800c88e:	bf00      	nop
 800c890:	20000348 	.word	0x20000348

0800c894 <fiprintf>:
 800c894:	b40e      	push	{r1, r2, r3}
 800c896:	b503      	push	{r0, r1, lr}
 800c898:	4601      	mov	r1, r0
 800c89a:	ab03      	add	r3, sp, #12
 800c89c:	4805      	ldr	r0, [pc, #20]	; (800c8b4 <fiprintf+0x20>)
 800c89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a2:	6800      	ldr	r0, [r0, #0]
 800c8a4:	9301      	str	r3, [sp, #4]
 800c8a6:	f000 f837 	bl	800c918 <_vfiprintf_r>
 800c8aa:	b002      	add	sp, #8
 800c8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8b0:	b003      	add	sp, #12
 800c8b2:	4770      	bx	lr
 800c8b4:	20000348 	.word	0x20000348

0800c8b8 <abort>:
 800c8b8:	b508      	push	{r3, lr}
 800c8ba:	2006      	movs	r0, #6
 800c8bc:	f000 fb94 	bl	800cfe8 <raise>
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	f7f4 ffc9 	bl	8001858 <_exit>

0800c8c6 <__sfputc_r>:
 800c8c6:	6893      	ldr	r3, [r2, #8]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	b410      	push	{r4}
 800c8ce:	6093      	str	r3, [r2, #8]
 800c8d0:	da08      	bge.n	800c8e4 <__sfputc_r+0x1e>
 800c8d2:	6994      	ldr	r4, [r2, #24]
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	db01      	blt.n	800c8dc <__sfputc_r+0x16>
 800c8d8:	290a      	cmp	r1, #10
 800c8da:	d103      	bne.n	800c8e4 <__sfputc_r+0x1e>
 800c8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8e0:	f000 bac4 	b.w	800ce6c <__swbuf_r>
 800c8e4:	6813      	ldr	r3, [r2, #0]
 800c8e6:	1c58      	adds	r0, r3, #1
 800c8e8:	6010      	str	r0, [r2, #0]
 800c8ea:	7019      	strb	r1, [r3, #0]
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <__sfputs_r>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	460f      	mov	r7, r1
 800c8fa:	4614      	mov	r4, r2
 800c8fc:	18d5      	adds	r5, r2, r3
 800c8fe:	42ac      	cmp	r4, r5
 800c900:	d101      	bne.n	800c906 <__sfputs_r+0x12>
 800c902:	2000      	movs	r0, #0
 800c904:	e007      	b.n	800c916 <__sfputs_r+0x22>
 800c906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90a:	463a      	mov	r2, r7
 800c90c:	4630      	mov	r0, r6
 800c90e:	f7ff ffda 	bl	800c8c6 <__sfputc_r>
 800c912:	1c43      	adds	r3, r0, #1
 800c914:	d1f3      	bne.n	800c8fe <__sfputs_r+0xa>
 800c916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c918 <_vfiprintf_r>:
 800c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	460d      	mov	r5, r1
 800c91e:	b09d      	sub	sp, #116	; 0x74
 800c920:	4614      	mov	r4, r2
 800c922:	4698      	mov	r8, r3
 800c924:	4606      	mov	r6, r0
 800c926:	b118      	cbz	r0, 800c930 <_vfiprintf_r+0x18>
 800c928:	6a03      	ldr	r3, [r0, #32]
 800c92a:	b90b      	cbnz	r3, 800c930 <_vfiprintf_r+0x18>
 800c92c:	f7fe fc70 	bl	800b210 <__sinit>
 800c930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c932:	07d9      	lsls	r1, r3, #31
 800c934:	d405      	bmi.n	800c942 <_vfiprintf_r+0x2a>
 800c936:	89ab      	ldrh	r3, [r5, #12]
 800c938:	059a      	lsls	r2, r3, #22
 800c93a:	d402      	bmi.n	800c942 <_vfiprintf_r+0x2a>
 800c93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c93e:	f7fe fd7a 	bl	800b436 <__retarget_lock_acquire_recursive>
 800c942:	89ab      	ldrh	r3, [r5, #12]
 800c944:	071b      	lsls	r3, r3, #28
 800c946:	d501      	bpl.n	800c94c <_vfiprintf_r+0x34>
 800c948:	692b      	ldr	r3, [r5, #16]
 800c94a:	b99b      	cbnz	r3, 800c974 <_vfiprintf_r+0x5c>
 800c94c:	4629      	mov	r1, r5
 800c94e:	4630      	mov	r0, r6
 800c950:	f000 faca 	bl	800cee8 <__swsetup_r>
 800c954:	b170      	cbz	r0, 800c974 <_vfiprintf_r+0x5c>
 800c956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c958:	07dc      	lsls	r4, r3, #31
 800c95a:	d504      	bpl.n	800c966 <_vfiprintf_r+0x4e>
 800c95c:	f04f 30ff 	mov.w	r0, #4294967295
 800c960:	b01d      	add	sp, #116	; 0x74
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c966:	89ab      	ldrh	r3, [r5, #12]
 800c968:	0598      	lsls	r0, r3, #22
 800c96a:	d4f7      	bmi.n	800c95c <_vfiprintf_r+0x44>
 800c96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c96e:	f7fe fd63 	bl	800b438 <__retarget_lock_release_recursive>
 800c972:	e7f3      	b.n	800c95c <_vfiprintf_r+0x44>
 800c974:	2300      	movs	r3, #0
 800c976:	9309      	str	r3, [sp, #36]	; 0x24
 800c978:	2320      	movs	r3, #32
 800c97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c982:	2330      	movs	r3, #48	; 0x30
 800c984:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb38 <_vfiprintf_r+0x220>
 800c988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c98c:	f04f 0901 	mov.w	r9, #1
 800c990:	4623      	mov	r3, r4
 800c992:	469a      	mov	sl, r3
 800c994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c998:	b10a      	cbz	r2, 800c99e <_vfiprintf_r+0x86>
 800c99a:	2a25      	cmp	r2, #37	; 0x25
 800c99c:	d1f9      	bne.n	800c992 <_vfiprintf_r+0x7a>
 800c99e:	ebba 0b04 	subs.w	fp, sl, r4
 800c9a2:	d00b      	beq.n	800c9bc <_vfiprintf_r+0xa4>
 800c9a4:	465b      	mov	r3, fp
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f7ff ffa2 	bl	800c8f4 <__sfputs_r>
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	f000 80a9 	beq.w	800cb08 <_vfiprintf_r+0x1f0>
 800c9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9b8:	445a      	add	r2, fp
 800c9ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f000 80a1 	beq.w	800cb08 <_vfiprintf_r+0x1f0>
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9d0:	f10a 0a01 	add.w	sl, sl, #1
 800c9d4:	9304      	str	r3, [sp, #16]
 800c9d6:	9307      	str	r3, [sp, #28]
 800c9d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9dc:	931a      	str	r3, [sp, #104]	; 0x68
 800c9de:	4654      	mov	r4, sl
 800c9e0:	2205      	movs	r2, #5
 800c9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e6:	4854      	ldr	r0, [pc, #336]	; (800cb38 <_vfiprintf_r+0x220>)
 800c9e8:	f7f3 fc2a 	bl	8000240 <memchr>
 800c9ec:	9a04      	ldr	r2, [sp, #16]
 800c9ee:	b9d8      	cbnz	r0, 800ca28 <_vfiprintf_r+0x110>
 800c9f0:	06d1      	lsls	r1, r2, #27
 800c9f2:	bf44      	itt	mi
 800c9f4:	2320      	movmi	r3, #32
 800c9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9fa:	0713      	lsls	r3, r2, #28
 800c9fc:	bf44      	itt	mi
 800c9fe:	232b      	movmi	r3, #43	; 0x2b
 800ca00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca04:	f89a 3000 	ldrb.w	r3, [sl]
 800ca08:	2b2a      	cmp	r3, #42	; 0x2a
 800ca0a:	d015      	beq.n	800ca38 <_vfiprintf_r+0x120>
 800ca0c:	9a07      	ldr	r2, [sp, #28]
 800ca0e:	4654      	mov	r4, sl
 800ca10:	2000      	movs	r0, #0
 800ca12:	f04f 0c0a 	mov.w	ip, #10
 800ca16:	4621      	mov	r1, r4
 800ca18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca1c:	3b30      	subs	r3, #48	; 0x30
 800ca1e:	2b09      	cmp	r3, #9
 800ca20:	d94d      	bls.n	800cabe <_vfiprintf_r+0x1a6>
 800ca22:	b1b0      	cbz	r0, 800ca52 <_vfiprintf_r+0x13a>
 800ca24:	9207      	str	r2, [sp, #28]
 800ca26:	e014      	b.n	800ca52 <_vfiprintf_r+0x13a>
 800ca28:	eba0 0308 	sub.w	r3, r0, r8
 800ca2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca30:	4313      	orrs	r3, r2
 800ca32:	9304      	str	r3, [sp, #16]
 800ca34:	46a2      	mov	sl, r4
 800ca36:	e7d2      	b.n	800c9de <_vfiprintf_r+0xc6>
 800ca38:	9b03      	ldr	r3, [sp, #12]
 800ca3a:	1d19      	adds	r1, r3, #4
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	9103      	str	r1, [sp, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	bfbb      	ittet	lt
 800ca44:	425b      	neglt	r3, r3
 800ca46:	f042 0202 	orrlt.w	r2, r2, #2
 800ca4a:	9307      	strge	r3, [sp, #28]
 800ca4c:	9307      	strlt	r3, [sp, #28]
 800ca4e:	bfb8      	it	lt
 800ca50:	9204      	strlt	r2, [sp, #16]
 800ca52:	7823      	ldrb	r3, [r4, #0]
 800ca54:	2b2e      	cmp	r3, #46	; 0x2e
 800ca56:	d10c      	bne.n	800ca72 <_vfiprintf_r+0x15a>
 800ca58:	7863      	ldrb	r3, [r4, #1]
 800ca5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca5c:	d134      	bne.n	800cac8 <_vfiprintf_r+0x1b0>
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	1d1a      	adds	r2, r3, #4
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	9203      	str	r2, [sp, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bfb8      	it	lt
 800ca6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca6e:	3402      	adds	r4, #2
 800ca70:	9305      	str	r3, [sp, #20]
 800ca72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb48 <_vfiprintf_r+0x230>
 800ca76:	7821      	ldrb	r1, [r4, #0]
 800ca78:	2203      	movs	r2, #3
 800ca7a:	4650      	mov	r0, sl
 800ca7c:	f7f3 fbe0 	bl	8000240 <memchr>
 800ca80:	b138      	cbz	r0, 800ca92 <_vfiprintf_r+0x17a>
 800ca82:	9b04      	ldr	r3, [sp, #16]
 800ca84:	eba0 000a 	sub.w	r0, r0, sl
 800ca88:	2240      	movs	r2, #64	; 0x40
 800ca8a:	4082      	lsls	r2, r0
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	3401      	adds	r4, #1
 800ca90:	9304      	str	r3, [sp, #16]
 800ca92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca96:	4829      	ldr	r0, [pc, #164]	; (800cb3c <_vfiprintf_r+0x224>)
 800ca98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca9c:	2206      	movs	r2, #6
 800ca9e:	f7f3 fbcf 	bl	8000240 <memchr>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d03f      	beq.n	800cb26 <_vfiprintf_r+0x20e>
 800caa6:	4b26      	ldr	r3, [pc, #152]	; (800cb40 <_vfiprintf_r+0x228>)
 800caa8:	bb1b      	cbnz	r3, 800caf2 <_vfiprintf_r+0x1da>
 800caaa:	9b03      	ldr	r3, [sp, #12]
 800caac:	3307      	adds	r3, #7
 800caae:	f023 0307 	bic.w	r3, r3, #7
 800cab2:	3308      	adds	r3, #8
 800cab4:	9303      	str	r3, [sp, #12]
 800cab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab8:	443b      	add	r3, r7
 800caba:	9309      	str	r3, [sp, #36]	; 0x24
 800cabc:	e768      	b.n	800c990 <_vfiprintf_r+0x78>
 800cabe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cac2:	460c      	mov	r4, r1
 800cac4:	2001      	movs	r0, #1
 800cac6:	e7a6      	b.n	800ca16 <_vfiprintf_r+0xfe>
 800cac8:	2300      	movs	r3, #0
 800caca:	3401      	adds	r4, #1
 800cacc:	9305      	str	r3, [sp, #20]
 800cace:	4619      	mov	r1, r3
 800cad0:	f04f 0c0a 	mov.w	ip, #10
 800cad4:	4620      	mov	r0, r4
 800cad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cada:	3a30      	subs	r2, #48	; 0x30
 800cadc:	2a09      	cmp	r2, #9
 800cade:	d903      	bls.n	800cae8 <_vfiprintf_r+0x1d0>
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d0c6      	beq.n	800ca72 <_vfiprintf_r+0x15a>
 800cae4:	9105      	str	r1, [sp, #20]
 800cae6:	e7c4      	b.n	800ca72 <_vfiprintf_r+0x15a>
 800cae8:	fb0c 2101 	mla	r1, ip, r1, r2
 800caec:	4604      	mov	r4, r0
 800caee:	2301      	movs	r3, #1
 800caf0:	e7f0      	b.n	800cad4 <_vfiprintf_r+0x1bc>
 800caf2:	ab03      	add	r3, sp, #12
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	462a      	mov	r2, r5
 800caf8:	4b12      	ldr	r3, [pc, #72]	; (800cb44 <_vfiprintf_r+0x22c>)
 800cafa:	a904      	add	r1, sp, #16
 800cafc:	4630      	mov	r0, r6
 800cafe:	f3af 8000 	nop.w
 800cb02:	4607      	mov	r7, r0
 800cb04:	1c78      	adds	r0, r7, #1
 800cb06:	d1d6      	bne.n	800cab6 <_vfiprintf_r+0x19e>
 800cb08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb0a:	07d9      	lsls	r1, r3, #31
 800cb0c:	d405      	bmi.n	800cb1a <_vfiprintf_r+0x202>
 800cb0e:	89ab      	ldrh	r3, [r5, #12]
 800cb10:	059a      	lsls	r2, r3, #22
 800cb12:	d402      	bmi.n	800cb1a <_vfiprintf_r+0x202>
 800cb14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb16:	f7fe fc8f 	bl	800b438 <__retarget_lock_release_recursive>
 800cb1a:	89ab      	ldrh	r3, [r5, #12]
 800cb1c:	065b      	lsls	r3, r3, #25
 800cb1e:	f53f af1d 	bmi.w	800c95c <_vfiprintf_r+0x44>
 800cb22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb24:	e71c      	b.n	800c960 <_vfiprintf_r+0x48>
 800cb26:	ab03      	add	r3, sp, #12
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <_vfiprintf_r+0x22c>)
 800cb2e:	a904      	add	r1, sp, #16
 800cb30:	4630      	mov	r0, r6
 800cb32:	f000 f879 	bl	800cc28 <_printf_i>
 800cb36:	e7e4      	b.n	800cb02 <_vfiprintf_r+0x1ea>
 800cb38:	0800d629 	.word	0x0800d629
 800cb3c:	0800d633 	.word	0x0800d633
 800cb40:	00000000 	.word	0x00000000
 800cb44:	0800c8f5 	.word	0x0800c8f5
 800cb48:	0800d62f 	.word	0x0800d62f

0800cb4c <_printf_common>:
 800cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb50:	4616      	mov	r6, r2
 800cb52:	4699      	mov	r9, r3
 800cb54:	688a      	ldr	r2, [r1, #8]
 800cb56:	690b      	ldr	r3, [r1, #16]
 800cb58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	bfb8      	it	lt
 800cb60:	4613      	movlt	r3, r2
 800cb62:	6033      	str	r3, [r6, #0]
 800cb64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb68:	4607      	mov	r7, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	b10a      	cbz	r2, 800cb72 <_printf_common+0x26>
 800cb6e:	3301      	adds	r3, #1
 800cb70:	6033      	str	r3, [r6, #0]
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	0699      	lsls	r1, r3, #26
 800cb76:	bf42      	ittt	mi
 800cb78:	6833      	ldrmi	r3, [r6, #0]
 800cb7a:	3302      	addmi	r3, #2
 800cb7c:	6033      	strmi	r3, [r6, #0]
 800cb7e:	6825      	ldr	r5, [r4, #0]
 800cb80:	f015 0506 	ands.w	r5, r5, #6
 800cb84:	d106      	bne.n	800cb94 <_printf_common+0x48>
 800cb86:	f104 0a19 	add.w	sl, r4, #25
 800cb8a:	68e3      	ldr	r3, [r4, #12]
 800cb8c:	6832      	ldr	r2, [r6, #0]
 800cb8e:	1a9b      	subs	r3, r3, r2
 800cb90:	42ab      	cmp	r3, r5
 800cb92:	dc26      	bgt.n	800cbe2 <_printf_common+0x96>
 800cb94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb98:	1e13      	subs	r3, r2, #0
 800cb9a:	6822      	ldr	r2, [r4, #0]
 800cb9c:	bf18      	it	ne
 800cb9e:	2301      	movne	r3, #1
 800cba0:	0692      	lsls	r2, r2, #26
 800cba2:	d42b      	bmi.n	800cbfc <_printf_common+0xb0>
 800cba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cba8:	4649      	mov	r1, r9
 800cbaa:	4638      	mov	r0, r7
 800cbac:	47c0      	blx	r8
 800cbae:	3001      	adds	r0, #1
 800cbb0:	d01e      	beq.n	800cbf0 <_printf_common+0xa4>
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	6922      	ldr	r2, [r4, #16]
 800cbb6:	f003 0306 	and.w	r3, r3, #6
 800cbba:	2b04      	cmp	r3, #4
 800cbbc:	bf02      	ittt	eq
 800cbbe:	68e5      	ldreq	r5, [r4, #12]
 800cbc0:	6833      	ldreq	r3, [r6, #0]
 800cbc2:	1aed      	subeq	r5, r5, r3
 800cbc4:	68a3      	ldr	r3, [r4, #8]
 800cbc6:	bf0c      	ite	eq
 800cbc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbcc:	2500      	movne	r5, #0
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	bfc4      	itt	gt
 800cbd2:	1a9b      	subgt	r3, r3, r2
 800cbd4:	18ed      	addgt	r5, r5, r3
 800cbd6:	2600      	movs	r6, #0
 800cbd8:	341a      	adds	r4, #26
 800cbda:	42b5      	cmp	r5, r6
 800cbdc:	d11a      	bne.n	800cc14 <_printf_common+0xc8>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	e008      	b.n	800cbf4 <_printf_common+0xa8>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	4652      	mov	r2, sl
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	4638      	mov	r0, r7
 800cbea:	47c0      	blx	r8
 800cbec:	3001      	adds	r0, #1
 800cbee:	d103      	bne.n	800cbf8 <_printf_common+0xac>
 800cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf8:	3501      	adds	r5, #1
 800cbfa:	e7c6      	b.n	800cb8a <_printf_common+0x3e>
 800cbfc:	18e1      	adds	r1, r4, r3
 800cbfe:	1c5a      	adds	r2, r3, #1
 800cc00:	2030      	movs	r0, #48	; 0x30
 800cc02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc06:	4422      	add	r2, r4
 800cc08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc10:	3302      	adds	r3, #2
 800cc12:	e7c7      	b.n	800cba4 <_printf_common+0x58>
 800cc14:	2301      	movs	r3, #1
 800cc16:	4622      	mov	r2, r4
 800cc18:	4649      	mov	r1, r9
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	47c0      	blx	r8
 800cc1e:	3001      	adds	r0, #1
 800cc20:	d0e6      	beq.n	800cbf0 <_printf_common+0xa4>
 800cc22:	3601      	adds	r6, #1
 800cc24:	e7d9      	b.n	800cbda <_printf_common+0x8e>
	...

0800cc28 <_printf_i>:
 800cc28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc2c:	7e0f      	ldrb	r7, [r1, #24]
 800cc2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc30:	2f78      	cmp	r7, #120	; 0x78
 800cc32:	4691      	mov	r9, r2
 800cc34:	4680      	mov	r8, r0
 800cc36:	460c      	mov	r4, r1
 800cc38:	469a      	mov	sl, r3
 800cc3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc3e:	d807      	bhi.n	800cc50 <_printf_i+0x28>
 800cc40:	2f62      	cmp	r7, #98	; 0x62
 800cc42:	d80a      	bhi.n	800cc5a <_printf_i+0x32>
 800cc44:	2f00      	cmp	r7, #0
 800cc46:	f000 80d4 	beq.w	800cdf2 <_printf_i+0x1ca>
 800cc4a:	2f58      	cmp	r7, #88	; 0x58
 800cc4c:	f000 80c0 	beq.w	800cdd0 <_printf_i+0x1a8>
 800cc50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc58:	e03a      	b.n	800ccd0 <_printf_i+0xa8>
 800cc5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc5e:	2b15      	cmp	r3, #21
 800cc60:	d8f6      	bhi.n	800cc50 <_printf_i+0x28>
 800cc62:	a101      	add	r1, pc, #4	; (adr r1, 800cc68 <_printf_i+0x40>)
 800cc64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc68:	0800ccc1 	.word	0x0800ccc1
 800cc6c:	0800ccd5 	.word	0x0800ccd5
 800cc70:	0800cc51 	.word	0x0800cc51
 800cc74:	0800cc51 	.word	0x0800cc51
 800cc78:	0800cc51 	.word	0x0800cc51
 800cc7c:	0800cc51 	.word	0x0800cc51
 800cc80:	0800ccd5 	.word	0x0800ccd5
 800cc84:	0800cc51 	.word	0x0800cc51
 800cc88:	0800cc51 	.word	0x0800cc51
 800cc8c:	0800cc51 	.word	0x0800cc51
 800cc90:	0800cc51 	.word	0x0800cc51
 800cc94:	0800cdd9 	.word	0x0800cdd9
 800cc98:	0800cd01 	.word	0x0800cd01
 800cc9c:	0800cd93 	.word	0x0800cd93
 800cca0:	0800cc51 	.word	0x0800cc51
 800cca4:	0800cc51 	.word	0x0800cc51
 800cca8:	0800cdfb 	.word	0x0800cdfb
 800ccac:	0800cc51 	.word	0x0800cc51
 800ccb0:	0800cd01 	.word	0x0800cd01
 800ccb4:	0800cc51 	.word	0x0800cc51
 800ccb8:	0800cc51 	.word	0x0800cc51
 800ccbc:	0800cd9b 	.word	0x0800cd9b
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	1d1a      	adds	r2, r3, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	602a      	str	r2, [r5, #0]
 800ccc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e09f      	b.n	800ce14 <_printf_i+0x1ec>
 800ccd4:	6820      	ldr	r0, [r4, #0]
 800ccd6:	682b      	ldr	r3, [r5, #0]
 800ccd8:	0607      	lsls	r7, r0, #24
 800ccda:	f103 0104 	add.w	r1, r3, #4
 800ccde:	6029      	str	r1, [r5, #0]
 800cce0:	d501      	bpl.n	800cce6 <_printf_i+0xbe>
 800cce2:	681e      	ldr	r6, [r3, #0]
 800cce4:	e003      	b.n	800ccee <_printf_i+0xc6>
 800cce6:	0646      	lsls	r6, r0, #25
 800cce8:	d5fb      	bpl.n	800cce2 <_printf_i+0xba>
 800ccea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ccee:	2e00      	cmp	r6, #0
 800ccf0:	da03      	bge.n	800ccfa <_printf_i+0xd2>
 800ccf2:	232d      	movs	r3, #45	; 0x2d
 800ccf4:	4276      	negs	r6, r6
 800ccf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccfa:	485a      	ldr	r0, [pc, #360]	; (800ce64 <_printf_i+0x23c>)
 800ccfc:	230a      	movs	r3, #10
 800ccfe:	e012      	b.n	800cd26 <_printf_i+0xfe>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	6820      	ldr	r0, [r4, #0]
 800cd04:	1d19      	adds	r1, r3, #4
 800cd06:	6029      	str	r1, [r5, #0]
 800cd08:	0605      	lsls	r5, r0, #24
 800cd0a:	d501      	bpl.n	800cd10 <_printf_i+0xe8>
 800cd0c:	681e      	ldr	r6, [r3, #0]
 800cd0e:	e002      	b.n	800cd16 <_printf_i+0xee>
 800cd10:	0641      	lsls	r1, r0, #25
 800cd12:	d5fb      	bpl.n	800cd0c <_printf_i+0xe4>
 800cd14:	881e      	ldrh	r6, [r3, #0]
 800cd16:	4853      	ldr	r0, [pc, #332]	; (800ce64 <_printf_i+0x23c>)
 800cd18:	2f6f      	cmp	r7, #111	; 0x6f
 800cd1a:	bf0c      	ite	eq
 800cd1c:	2308      	moveq	r3, #8
 800cd1e:	230a      	movne	r3, #10
 800cd20:	2100      	movs	r1, #0
 800cd22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd26:	6865      	ldr	r5, [r4, #4]
 800cd28:	60a5      	str	r5, [r4, #8]
 800cd2a:	2d00      	cmp	r5, #0
 800cd2c:	bfa2      	ittt	ge
 800cd2e:	6821      	ldrge	r1, [r4, #0]
 800cd30:	f021 0104 	bicge.w	r1, r1, #4
 800cd34:	6021      	strge	r1, [r4, #0]
 800cd36:	b90e      	cbnz	r6, 800cd3c <_printf_i+0x114>
 800cd38:	2d00      	cmp	r5, #0
 800cd3a:	d04b      	beq.n	800cdd4 <_printf_i+0x1ac>
 800cd3c:	4615      	mov	r5, r2
 800cd3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd42:	fb03 6711 	mls	r7, r3, r1, r6
 800cd46:	5dc7      	ldrb	r7, [r0, r7]
 800cd48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd4c:	4637      	mov	r7, r6
 800cd4e:	42bb      	cmp	r3, r7
 800cd50:	460e      	mov	r6, r1
 800cd52:	d9f4      	bls.n	800cd3e <_printf_i+0x116>
 800cd54:	2b08      	cmp	r3, #8
 800cd56:	d10b      	bne.n	800cd70 <_printf_i+0x148>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	07de      	lsls	r6, r3, #31
 800cd5c:	d508      	bpl.n	800cd70 <_printf_i+0x148>
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	6861      	ldr	r1, [r4, #4]
 800cd62:	4299      	cmp	r1, r3
 800cd64:	bfde      	ittt	le
 800cd66:	2330      	movle	r3, #48	; 0x30
 800cd68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd70:	1b52      	subs	r2, r2, r5
 800cd72:	6122      	str	r2, [r4, #16]
 800cd74:	f8cd a000 	str.w	sl, [sp]
 800cd78:	464b      	mov	r3, r9
 800cd7a:	aa03      	add	r2, sp, #12
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	4640      	mov	r0, r8
 800cd80:	f7ff fee4 	bl	800cb4c <_printf_common>
 800cd84:	3001      	adds	r0, #1
 800cd86:	d14a      	bne.n	800ce1e <_printf_i+0x1f6>
 800cd88:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8c:	b004      	add	sp, #16
 800cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	f043 0320 	orr.w	r3, r3, #32
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	4833      	ldr	r0, [pc, #204]	; (800ce68 <_printf_i+0x240>)
 800cd9c:	2778      	movs	r7, #120	; 0x78
 800cd9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cda2:	6823      	ldr	r3, [r4, #0]
 800cda4:	6829      	ldr	r1, [r5, #0]
 800cda6:	061f      	lsls	r7, r3, #24
 800cda8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdac:	d402      	bmi.n	800cdb4 <_printf_i+0x18c>
 800cdae:	065f      	lsls	r7, r3, #25
 800cdb0:	bf48      	it	mi
 800cdb2:	b2b6      	uxthmi	r6, r6
 800cdb4:	07df      	lsls	r7, r3, #31
 800cdb6:	bf48      	it	mi
 800cdb8:	f043 0320 	orrmi.w	r3, r3, #32
 800cdbc:	6029      	str	r1, [r5, #0]
 800cdbe:	bf48      	it	mi
 800cdc0:	6023      	strmi	r3, [r4, #0]
 800cdc2:	b91e      	cbnz	r6, 800cdcc <_printf_i+0x1a4>
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	f023 0320 	bic.w	r3, r3, #32
 800cdca:	6023      	str	r3, [r4, #0]
 800cdcc:	2310      	movs	r3, #16
 800cdce:	e7a7      	b.n	800cd20 <_printf_i+0xf8>
 800cdd0:	4824      	ldr	r0, [pc, #144]	; (800ce64 <_printf_i+0x23c>)
 800cdd2:	e7e4      	b.n	800cd9e <_printf_i+0x176>
 800cdd4:	4615      	mov	r5, r2
 800cdd6:	e7bd      	b.n	800cd54 <_printf_i+0x12c>
 800cdd8:	682b      	ldr	r3, [r5, #0]
 800cdda:	6826      	ldr	r6, [r4, #0]
 800cddc:	6961      	ldr	r1, [r4, #20]
 800cdde:	1d18      	adds	r0, r3, #4
 800cde0:	6028      	str	r0, [r5, #0]
 800cde2:	0635      	lsls	r5, r6, #24
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	d501      	bpl.n	800cdec <_printf_i+0x1c4>
 800cde8:	6019      	str	r1, [r3, #0]
 800cdea:	e002      	b.n	800cdf2 <_printf_i+0x1ca>
 800cdec:	0670      	lsls	r0, r6, #25
 800cdee:	d5fb      	bpl.n	800cde8 <_printf_i+0x1c0>
 800cdf0:	8019      	strh	r1, [r3, #0]
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	6123      	str	r3, [r4, #16]
 800cdf6:	4615      	mov	r5, r2
 800cdf8:	e7bc      	b.n	800cd74 <_printf_i+0x14c>
 800cdfa:	682b      	ldr	r3, [r5, #0]
 800cdfc:	1d1a      	adds	r2, r3, #4
 800cdfe:	602a      	str	r2, [r5, #0]
 800ce00:	681d      	ldr	r5, [r3, #0]
 800ce02:	6862      	ldr	r2, [r4, #4]
 800ce04:	2100      	movs	r1, #0
 800ce06:	4628      	mov	r0, r5
 800ce08:	f7f3 fa1a 	bl	8000240 <memchr>
 800ce0c:	b108      	cbz	r0, 800ce12 <_printf_i+0x1ea>
 800ce0e:	1b40      	subs	r0, r0, r5
 800ce10:	6060      	str	r0, [r4, #4]
 800ce12:	6863      	ldr	r3, [r4, #4]
 800ce14:	6123      	str	r3, [r4, #16]
 800ce16:	2300      	movs	r3, #0
 800ce18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce1c:	e7aa      	b.n	800cd74 <_printf_i+0x14c>
 800ce1e:	6923      	ldr	r3, [r4, #16]
 800ce20:	462a      	mov	r2, r5
 800ce22:	4649      	mov	r1, r9
 800ce24:	4640      	mov	r0, r8
 800ce26:	47d0      	blx	sl
 800ce28:	3001      	adds	r0, #1
 800ce2a:	d0ad      	beq.n	800cd88 <_printf_i+0x160>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	079b      	lsls	r3, r3, #30
 800ce30:	d413      	bmi.n	800ce5a <_printf_i+0x232>
 800ce32:	68e0      	ldr	r0, [r4, #12]
 800ce34:	9b03      	ldr	r3, [sp, #12]
 800ce36:	4298      	cmp	r0, r3
 800ce38:	bfb8      	it	lt
 800ce3a:	4618      	movlt	r0, r3
 800ce3c:	e7a6      	b.n	800cd8c <_printf_i+0x164>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4632      	mov	r2, r6
 800ce42:	4649      	mov	r1, r9
 800ce44:	4640      	mov	r0, r8
 800ce46:	47d0      	blx	sl
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d09d      	beq.n	800cd88 <_printf_i+0x160>
 800ce4c:	3501      	adds	r5, #1
 800ce4e:	68e3      	ldr	r3, [r4, #12]
 800ce50:	9903      	ldr	r1, [sp, #12]
 800ce52:	1a5b      	subs	r3, r3, r1
 800ce54:	42ab      	cmp	r3, r5
 800ce56:	dcf2      	bgt.n	800ce3e <_printf_i+0x216>
 800ce58:	e7eb      	b.n	800ce32 <_printf_i+0x20a>
 800ce5a:	2500      	movs	r5, #0
 800ce5c:	f104 0619 	add.w	r6, r4, #25
 800ce60:	e7f5      	b.n	800ce4e <_printf_i+0x226>
 800ce62:	bf00      	nop
 800ce64:	0800d63a 	.word	0x0800d63a
 800ce68:	0800d64b 	.word	0x0800d64b

0800ce6c <__swbuf_r>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	460e      	mov	r6, r1
 800ce70:	4614      	mov	r4, r2
 800ce72:	4605      	mov	r5, r0
 800ce74:	b118      	cbz	r0, 800ce7e <__swbuf_r+0x12>
 800ce76:	6a03      	ldr	r3, [r0, #32]
 800ce78:	b90b      	cbnz	r3, 800ce7e <__swbuf_r+0x12>
 800ce7a:	f7fe f9c9 	bl	800b210 <__sinit>
 800ce7e:	69a3      	ldr	r3, [r4, #24]
 800ce80:	60a3      	str	r3, [r4, #8]
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	071a      	lsls	r2, r3, #28
 800ce86:	d525      	bpl.n	800ced4 <__swbuf_r+0x68>
 800ce88:	6923      	ldr	r3, [r4, #16]
 800ce8a:	b31b      	cbz	r3, 800ced4 <__swbuf_r+0x68>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	6922      	ldr	r2, [r4, #16]
 800ce90:	1a98      	subs	r0, r3, r2
 800ce92:	6963      	ldr	r3, [r4, #20]
 800ce94:	b2f6      	uxtb	r6, r6
 800ce96:	4283      	cmp	r3, r0
 800ce98:	4637      	mov	r7, r6
 800ce9a:	dc04      	bgt.n	800cea6 <__swbuf_r+0x3a>
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f7ff fc84 	bl	800c7ac <_fflush_r>
 800cea4:	b9e0      	cbnz	r0, 800cee0 <__swbuf_r+0x74>
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	60a3      	str	r3, [r4, #8]
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	1c5a      	adds	r2, r3, #1
 800ceb0:	6022      	str	r2, [r4, #0]
 800ceb2:	701e      	strb	r6, [r3, #0]
 800ceb4:	6962      	ldr	r2, [r4, #20]
 800ceb6:	1c43      	adds	r3, r0, #1
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d004      	beq.n	800cec6 <__swbuf_r+0x5a>
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	07db      	lsls	r3, r3, #31
 800cec0:	d506      	bpl.n	800ced0 <__swbuf_r+0x64>
 800cec2:	2e0a      	cmp	r6, #10
 800cec4:	d104      	bne.n	800ced0 <__swbuf_r+0x64>
 800cec6:	4621      	mov	r1, r4
 800cec8:	4628      	mov	r0, r5
 800ceca:	f7ff fc6f 	bl	800c7ac <_fflush_r>
 800cece:	b938      	cbnz	r0, 800cee0 <__swbuf_r+0x74>
 800ced0:	4638      	mov	r0, r7
 800ced2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced4:	4621      	mov	r1, r4
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 f806 	bl	800cee8 <__swsetup_r>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d0d5      	beq.n	800ce8c <__swbuf_r+0x20>
 800cee0:	f04f 37ff 	mov.w	r7, #4294967295
 800cee4:	e7f4      	b.n	800ced0 <__swbuf_r+0x64>
	...

0800cee8 <__swsetup_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4b2a      	ldr	r3, [pc, #168]	; (800cf94 <__swsetup_r+0xac>)
 800ceec:	4605      	mov	r5, r0
 800ceee:	6818      	ldr	r0, [r3, #0]
 800cef0:	460c      	mov	r4, r1
 800cef2:	b118      	cbz	r0, 800cefc <__swsetup_r+0x14>
 800cef4:	6a03      	ldr	r3, [r0, #32]
 800cef6:	b90b      	cbnz	r3, 800cefc <__swsetup_r+0x14>
 800cef8:	f7fe f98a 	bl	800b210 <__sinit>
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf02:	0718      	lsls	r0, r3, #28
 800cf04:	d422      	bmi.n	800cf4c <__swsetup_r+0x64>
 800cf06:	06d9      	lsls	r1, r3, #27
 800cf08:	d407      	bmi.n	800cf1a <__swsetup_r+0x32>
 800cf0a:	2309      	movs	r3, #9
 800cf0c:	602b      	str	r3, [r5, #0]
 800cf0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf12:	81a3      	strh	r3, [r4, #12]
 800cf14:	f04f 30ff 	mov.w	r0, #4294967295
 800cf18:	e034      	b.n	800cf84 <__swsetup_r+0x9c>
 800cf1a:	0758      	lsls	r0, r3, #29
 800cf1c:	d512      	bpl.n	800cf44 <__swsetup_r+0x5c>
 800cf1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf20:	b141      	cbz	r1, 800cf34 <__swsetup_r+0x4c>
 800cf22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf26:	4299      	cmp	r1, r3
 800cf28:	d002      	beq.n	800cf30 <__swsetup_r+0x48>
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f7fe fa9c 	bl	800b468 <_free_r>
 800cf30:	2300      	movs	r3, #0
 800cf32:	6363      	str	r3, [r4, #52]	; 0x34
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	6063      	str	r3, [r4, #4]
 800cf40:	6923      	ldr	r3, [r4, #16]
 800cf42:	6023      	str	r3, [r4, #0]
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	f043 0308 	orr.w	r3, r3, #8
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	6923      	ldr	r3, [r4, #16]
 800cf4e:	b94b      	cbnz	r3, 800cf64 <__swsetup_r+0x7c>
 800cf50:	89a3      	ldrh	r3, [r4, #12]
 800cf52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf5a:	d003      	beq.n	800cf64 <__swsetup_r+0x7c>
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	4628      	mov	r0, r5
 800cf60:	f000 f884 	bl	800d06c <__smakebuf_r>
 800cf64:	89a0      	ldrh	r0, [r4, #12]
 800cf66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf6a:	f010 0301 	ands.w	r3, r0, #1
 800cf6e:	d00a      	beq.n	800cf86 <__swsetup_r+0x9e>
 800cf70:	2300      	movs	r3, #0
 800cf72:	60a3      	str	r3, [r4, #8]
 800cf74:	6963      	ldr	r3, [r4, #20]
 800cf76:	425b      	negs	r3, r3
 800cf78:	61a3      	str	r3, [r4, #24]
 800cf7a:	6923      	ldr	r3, [r4, #16]
 800cf7c:	b943      	cbnz	r3, 800cf90 <__swsetup_r+0xa8>
 800cf7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf82:	d1c4      	bne.n	800cf0e <__swsetup_r+0x26>
 800cf84:	bd38      	pop	{r3, r4, r5, pc}
 800cf86:	0781      	lsls	r1, r0, #30
 800cf88:	bf58      	it	pl
 800cf8a:	6963      	ldrpl	r3, [r4, #20]
 800cf8c:	60a3      	str	r3, [r4, #8]
 800cf8e:	e7f4      	b.n	800cf7a <__swsetup_r+0x92>
 800cf90:	2000      	movs	r0, #0
 800cf92:	e7f7      	b.n	800cf84 <__swsetup_r+0x9c>
 800cf94:	20000348 	.word	0x20000348

0800cf98 <_raise_r>:
 800cf98:	291f      	cmp	r1, #31
 800cf9a:	b538      	push	{r3, r4, r5, lr}
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	d904      	bls.n	800cfac <_raise_r+0x14>
 800cfa2:	2316      	movs	r3, #22
 800cfa4:	6003      	str	r3, [r0, #0]
 800cfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cfae:	b112      	cbz	r2, 800cfb6 <_raise_r+0x1e>
 800cfb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfb4:	b94b      	cbnz	r3, 800cfca <_raise_r+0x32>
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f000 f830 	bl	800d01c <_getpid_r>
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	4601      	mov	r1, r0
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc6:	f000 b817 	b.w	800cff8 <_kill_r>
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d00a      	beq.n	800cfe4 <_raise_r+0x4c>
 800cfce:	1c59      	adds	r1, r3, #1
 800cfd0:	d103      	bne.n	800cfda <_raise_r+0x42>
 800cfd2:	2316      	movs	r3, #22
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	e7e7      	b.n	800cfaa <_raise_r+0x12>
 800cfda:	2400      	movs	r4, #0
 800cfdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	4798      	blx	r3
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	e7e0      	b.n	800cfaa <_raise_r+0x12>

0800cfe8 <raise>:
 800cfe8:	4b02      	ldr	r3, [pc, #8]	; (800cff4 <raise+0xc>)
 800cfea:	4601      	mov	r1, r0
 800cfec:	6818      	ldr	r0, [r3, #0]
 800cfee:	f7ff bfd3 	b.w	800cf98 <_raise_r>
 800cff2:	bf00      	nop
 800cff4:	20000348 	.word	0x20000348

0800cff8 <_kill_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4d07      	ldr	r5, [pc, #28]	; (800d018 <_kill_r+0x20>)
 800cffc:	2300      	movs	r3, #0
 800cffe:	4604      	mov	r4, r0
 800d000:	4608      	mov	r0, r1
 800d002:	4611      	mov	r1, r2
 800d004:	602b      	str	r3, [r5, #0]
 800d006:	f7f4 fc17 	bl	8001838 <_kill>
 800d00a:	1c43      	adds	r3, r0, #1
 800d00c:	d102      	bne.n	800d014 <_kill_r+0x1c>
 800d00e:	682b      	ldr	r3, [r5, #0]
 800d010:	b103      	cbz	r3, 800d014 <_kill_r+0x1c>
 800d012:	6023      	str	r3, [r4, #0]
 800d014:	bd38      	pop	{r3, r4, r5, pc}
 800d016:	bf00      	nop
 800d018:	20001f98 	.word	0x20001f98

0800d01c <_getpid_r>:
 800d01c:	f7f4 bc04 	b.w	8001828 <_getpid>

0800d020 <__swhatbuf_r>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	460c      	mov	r4, r1
 800d024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d028:	2900      	cmp	r1, #0
 800d02a:	b096      	sub	sp, #88	; 0x58
 800d02c:	4615      	mov	r5, r2
 800d02e:	461e      	mov	r6, r3
 800d030:	da0d      	bge.n	800d04e <__swhatbuf_r+0x2e>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d038:	f04f 0100 	mov.w	r1, #0
 800d03c:	bf0c      	ite	eq
 800d03e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d042:	2340      	movne	r3, #64	; 0x40
 800d044:	2000      	movs	r0, #0
 800d046:	6031      	str	r1, [r6, #0]
 800d048:	602b      	str	r3, [r5, #0]
 800d04a:	b016      	add	sp, #88	; 0x58
 800d04c:	bd70      	pop	{r4, r5, r6, pc}
 800d04e:	466a      	mov	r2, sp
 800d050:	f000 f848 	bl	800d0e4 <_fstat_r>
 800d054:	2800      	cmp	r0, #0
 800d056:	dbec      	blt.n	800d032 <__swhatbuf_r+0x12>
 800d058:	9901      	ldr	r1, [sp, #4]
 800d05a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d05e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d062:	4259      	negs	r1, r3
 800d064:	4159      	adcs	r1, r3
 800d066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d06a:	e7eb      	b.n	800d044 <__swhatbuf_r+0x24>

0800d06c <__smakebuf_r>:
 800d06c:	898b      	ldrh	r3, [r1, #12]
 800d06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d070:	079d      	lsls	r5, r3, #30
 800d072:	4606      	mov	r6, r0
 800d074:	460c      	mov	r4, r1
 800d076:	d507      	bpl.n	800d088 <__smakebuf_r+0x1c>
 800d078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d07c:	6023      	str	r3, [r4, #0]
 800d07e:	6123      	str	r3, [r4, #16]
 800d080:	2301      	movs	r3, #1
 800d082:	6163      	str	r3, [r4, #20]
 800d084:	b002      	add	sp, #8
 800d086:	bd70      	pop	{r4, r5, r6, pc}
 800d088:	ab01      	add	r3, sp, #4
 800d08a:	466a      	mov	r2, sp
 800d08c:	f7ff ffc8 	bl	800d020 <__swhatbuf_r>
 800d090:	9900      	ldr	r1, [sp, #0]
 800d092:	4605      	mov	r5, r0
 800d094:	4630      	mov	r0, r6
 800d096:	f7fe fdab 	bl	800bbf0 <_malloc_r>
 800d09a:	b948      	cbnz	r0, 800d0b0 <__smakebuf_r+0x44>
 800d09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0a0:	059a      	lsls	r2, r3, #22
 800d0a2:	d4ef      	bmi.n	800d084 <__smakebuf_r+0x18>
 800d0a4:	f023 0303 	bic.w	r3, r3, #3
 800d0a8:	f043 0302 	orr.w	r3, r3, #2
 800d0ac:	81a3      	strh	r3, [r4, #12]
 800d0ae:	e7e3      	b.n	800d078 <__smakebuf_r+0xc>
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	6020      	str	r0, [r4, #0]
 800d0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	9b00      	ldr	r3, [sp, #0]
 800d0bc:	6163      	str	r3, [r4, #20]
 800d0be:	9b01      	ldr	r3, [sp, #4]
 800d0c0:	6120      	str	r0, [r4, #16]
 800d0c2:	b15b      	cbz	r3, 800d0dc <__smakebuf_r+0x70>
 800d0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f000 f81d 	bl	800d108 <_isatty_r>
 800d0ce:	b128      	cbz	r0, 800d0dc <__smakebuf_r+0x70>
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f023 0303 	bic.w	r3, r3, #3
 800d0d6:	f043 0301 	orr.w	r3, r3, #1
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	431d      	orrs	r5, r3
 800d0e0:	81a5      	strh	r5, [r4, #12]
 800d0e2:	e7cf      	b.n	800d084 <__smakebuf_r+0x18>

0800d0e4 <_fstat_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4d07      	ldr	r5, [pc, #28]	; (800d104 <_fstat_r+0x20>)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	f7f4 fc00 	bl	80018f6 <_fstat>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	d102      	bne.n	800d100 <_fstat_r+0x1c>
 800d0fa:	682b      	ldr	r3, [r5, #0]
 800d0fc:	b103      	cbz	r3, 800d100 <_fstat_r+0x1c>
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	bd38      	pop	{r3, r4, r5, pc}
 800d102:	bf00      	nop
 800d104:	20001f98 	.word	0x20001f98

0800d108 <_isatty_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4d06      	ldr	r5, [pc, #24]	; (800d124 <_isatty_r+0x1c>)
 800d10c:	2300      	movs	r3, #0
 800d10e:	4604      	mov	r4, r0
 800d110:	4608      	mov	r0, r1
 800d112:	602b      	str	r3, [r5, #0]
 800d114:	f7f4 fbff 	bl	8001916 <_isatty>
 800d118:	1c43      	adds	r3, r0, #1
 800d11a:	d102      	bne.n	800d122 <_isatty_r+0x1a>
 800d11c:	682b      	ldr	r3, [r5, #0]
 800d11e:	b103      	cbz	r3, 800d122 <_isatty_r+0x1a>
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	20001f98 	.word	0x20001f98

0800d128 <_init>:
 800d128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12a:	bf00      	nop
 800d12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12e:	bc08      	pop	{r3}
 800d130:	469e      	mov	lr, r3
 800d132:	4770      	bx	lr

0800d134 <_fini>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	bf00      	nop
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr
