
AVALON_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009578  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800988c  0800988c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800988c  0800988c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b0c  20000184  08009a18  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c90  08009a18  00021c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013492  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033de  00000000  00000000  00033646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00036a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279a6  00000000  00000000  000386b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ed2  00000000  00000000  00060056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea97c  00000000  00000000  00072f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d8a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  0015d8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009738 	.word	0x08009738

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009738 	.word	0x08009738

08000218 <AT25X041B_Init>:
#include "at25x041b.h"
#include "main.h"



uint8_t AT25X041B_Init(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t CS_PORT,uint32_t CS_PIN){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	/*@Function use to init the memory and check if the read and write is working
	 * by looking into the device id an manufacturer
	 */

	uint8_t txBuffer[1] = {0};
 8000226:	2300      	movs	r3, #0
 8000228:	753b      	strb	r3, [r7, #20]
	uint8_t rxBuffer[2] = {0};
 800022a:	2300      	movs	r3, #0
 800022c:	823b      	strh	r3, [r7, #16]
	uint8_t result = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	75fb      	strb	r3, [r7, #23]

	//store the port and pin number into the struct
	AT25X041B->CS_PIN = CS_PIN;
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	629a      	str	r2, [r3, #40]	; 0x28
	AT25X041B->CS_PORT = CS_PORT;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	625a      	str	r2, [r3, #36]	; 0x24


	//set the cs to a high level to make sure the communication didn't start before
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000242:	4618      	mov	r0, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	b29b      	uxth	r3, r3
 800024a:	2201      	movs	r2, #1
 800024c:	4619      	mov	r1, r3
 800024e:	f001 f929 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000252:	2005      	movs	r0, #5
 8000254:	f000 fd90 	bl	8000d78 <HAL_Delay>
	//Pull low the GPIO to start communication
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800025c:	4618      	mov	r0, r3
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	b29b      	uxth	r3, r3
 8000264:	2200      	movs	r2, #0
 8000266:	4619      	mov	r1, r3
 8000268:	f001 f91c 	bl	80014a4 <HAL_GPIO_WritePin>

	txBuffer[0] = RESUME_DEEP_POWER_DOWN_CMD;
 800026c:	23ab      	movs	r3, #171	; 0xab
 800026e:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI,txBuffer, 1, 100);
 8000270:	f107 0114 	add.w	r1, r7, #20
 8000274:	2364      	movs	r3, #100	; 0x64
 8000276:	2201      	movs	r2, #1
 8000278:	68f8      	ldr	r0, [r7, #12]
 800027a:	f003 ff7a 	bl	8004172 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000282:	4618      	mov	r0, r3
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000288:	b29b      	uxth	r3, r3
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f001 f909 	bl	80014a4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000292:	2005      	movs	r0, #5
 8000294:	f000 fd70 	bl	8000d78 <HAL_Delay>
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029c:	4618      	mov	r0, r3
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	f001 f8fc 	bl	80014a4 <HAL_GPIO_WritePin>

	txBuffer[0] = READ_ID_CMD;
 80002ac:	239f      	movs	r3, #159	; 0x9f
 80002ae:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(SPI, txBuffer, 1, 100);
 80002b0:	f107 0114 	add.w	r1, r7, #20
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	2201      	movs	r2, #1
 80002b8:	68f8      	ldr	r0, [r7, #12]
 80002ba:	f003 ff5a 	bl	8004172 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, rxBuffer, 2, 100);
 80002be:	f107 0110 	add.w	r1, r7, #16
 80002c2:	2364      	movs	r3, #100	; 0x64
 80002c4:	2202      	movs	r2, #2
 80002c6:	68f8      	ldr	r0, [r7, #12]
 80002c8:	f004 f8c1 	bl	800444e <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4618      	mov	r0, r3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	2201      	movs	r2, #1
 80002da:	4619      	mov	r1, r3
 80002dc:	f001 f8e2 	bl	80014a4 <HAL_GPIO_WritePin>

	AT25X041B->LastWrittenAddr = 0x07FFFF;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <AT25X041B_Init+0xec>)
 80002e4:	619a      	str	r2, [r3, #24]
	AT25X041B->ManufacturerId = rxBuffer[0];
 80002e6:	7c3a      	ldrb	r2, [r7, #16]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	701a      	strb	r2, [r3, #0]
	if(AT25X041B->ManufacturerId !=0x1F){
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b1f      	cmp	r3, #31
 80002f2:	d001      	beq.n	80002f8 <AT25X041B_Init+0xe0>
		result = 1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	75fb      	strb	r3, [r7, #23]
	}
	return result;
 80002f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	0007ffff 	.word	0x0007ffff

08000308 <AT25X041B_ChipErase>:

	HAL_Delay(5);
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
}

uint8_t AT25X041B_ChipErase(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 8000308:	b5b0      	push	{r4, r5, r7, lr}
 800030a:	b092      	sub	sp, #72	; 0x48
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
	/*
	 * A simple function that erase the full 4Mb of the chip return 1 if the chip erase worked 0 if not
	 */
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t result = 1;
 8000312:	2301      	movs	r3, #1
 8000314:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint32_t SECTOR_ADDR_LIST[11] = {0x07FFFF,0x07BFFF,0x079FFF,0x076FFF,0x060FFF,0x050FFF,0x040FFF,0x030FFF,0x020FFF,0x010FFF,0x000FFF};
 8000318:	4b3e      	ldr	r3, [pc, #248]	; (8000414 <AT25X041B_ChipErase+0x10c>)
 800031a:	f107 040c 	add.w	r4, r7, #12
 800031e:	461d      	mov	r5, r3
 8000320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800032c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//All sector should be unprotect first to ensure a full erase
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 8000330:	2300      	movs	r3, #0
 8000332:	643b      	str	r3, [r7, #64]	; 0x40
 8000334:	e00d      	b.n	8000352 <AT25X041B_ChipErase+0x4a>
		AT25X041B_UnprotectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 8000336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	3348      	adds	r3, #72	; 0x48
 800033c:	443b      	add	r3, r7
 800033e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000342:	461a      	mov	r2, r3
 8000344:	6839      	ldr	r1, [r7, #0]
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f8ec 	bl	8000524 <AT25X041B_UnprotectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 800034c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800034e:	3301      	adds	r3, #1
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
 8000352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000354:	2b0a      	cmp	r3, #10
 8000356:	d9ee      	bls.n	8000336 <AT25X041B_ChipErase+0x2e>
	}
	//We also need to disable write protection (don't know why but the datasheet say to do it)
	AT25X041B_WriteProtectionDisable(SPI, AT25X041B);
 8000358:	6839      	ldr	r1, [r7, #0]
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f000 f96e 	bl	800063c <AT25X041B_WriteProtectionDisable>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000364:	4618      	mov	r0, r3
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036a:	b29b      	uxth	r3, r3
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	f001 f898 	bl	80014a4 <HAL_GPIO_WritePin>

	//Send the full chip erase command
	data[0] = FULL_CHIP_ERASE_CMD;
 8000374:	23c7      	movs	r3, #199	; 0xc7
 8000376:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HAL_SPI_Transmit(SPI, data, 1, 100);
 800037a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800037e:	2364      	movs	r3, #100	; 0x64
 8000380:	2201      	movs	r2, #1
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f003 fef5 	bl	8004172 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038c:	4618      	mov	r0, r3
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000392:	b29b      	uxth	r3, r3
 8000394:	2201      	movs	r2, #1
 8000396:	4619      	mov	r1, r3
 8000398:	f001 f884 	bl	80014a4 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 f83c 	bl	800041c <AT25X041B_ReadStatusReg_Byte1>
 80003a4:	4603      	mov	r3, r0
 80003a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//wait until the chip erase is done (check RDY/ bits)
	while(status_reg_val & 0x01 != 0x00){
 80003aa:	e006      	b.n	80003ba <AT25X041B_ChipErase+0xb2>
		status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI,AT25X041B);
 80003ac:	6839      	ldr	r1, [r7, #0]
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 f834 	bl	800041c <AT25X041B_ReadStatusReg_Byte1>
 80003b4:	4603      	mov	r3, r0
 80003b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(status_reg_val & 0x01 != 0x00){
 80003ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1f2      	bne.n	80003ac <AT25X041B_ChipErase+0xa4>
	}


	//All sector should be protected again
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 80003c6:	2300      	movs	r3, #0
 80003c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003ca:	e00d      	b.n	80003e8 <AT25X041B_ChipErase+0xe0>
		AT25X041B_ProtectSector(SPI, AT25X041B, SECTOR_ADDR_LIST[i]);
 80003cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	3348      	adds	r3, #72	; 0x48
 80003d2:	443b      	add	r3, r7
 80003d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80003d8:	461a      	mov	r2, r3
 80003da:	6839      	ldr	r1, [r7, #0]
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f8e7 	bl	80005b0 <AT25X041B_ProtectSector>
	for(int i=0;i<sizeof(SECTOR_ADDR_LIST)/4;i++){
 80003e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003e4:	3301      	adds	r3, #1
 80003e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003ea:	2b0a      	cmp	r3, #10
 80003ec:	d9ee      	bls.n	80003cc <AT25X041B_ChipErase+0xc4>
	}

	//chek the EPE bit from the status register to ensure no error
	if(((status_reg_val & 0x20)>>5) == 0x01){
 80003ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003f2:	f003 0320 	and.w	r3, r3, #32
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d003      	beq.n	8000402 <AT25X041B_ChipErase+0xfa>
		//If an error occure --> return 0
		result = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000400:	e002      	b.n	8000408 <AT25X041B_ChipErase+0x100>
	}
	else{
		//if the chip erase worked then the memory is clear and the las written adress is 0 (0x7FFFF as i read the flash from max addr downto 0
		AT25X041B->LastWrittenAddr = 0x07FFFF;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <AT25X041B_ChipErase+0x110>)
 8000406:	619a      	str	r2, [r3, #24]
	}
	return result;
 8000408:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46

}
 800040c:	4618      	mov	r0, r3
 800040e:	3748      	adds	r7, #72	; 0x48
 8000410:	46bd      	mov	sp, r7
 8000412:	bdb0      	pop	{r4, r5, r7, pc}
 8000414:	08009750 	.word	0x08009750
 8000418:	0007ffff 	.word	0x0007ffff

0800041c <AT25X041B_ReadStatusReg_Byte1>:

uint8_t AT25X041B_ReadStatusReg_Byte1(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]

	uint8_t data[1];
	uint8_t status_reg_value[1];


	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042a:	4618      	mov	r0, r3
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000430:	b29b      	uxth	r3, r3
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	f001 f835 	bl	80014a4 <HAL_GPIO_WritePin>

	data[0] = READ_STATUS_CMD;
 800043a:	2305      	movs	r3, #5
 800043c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 800043e:	f107 010c 	add.w	r1, r7, #12
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	2201      	movs	r2, #1
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f003 fe93 	bl	8004172 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, status_reg_value, 1, 100);
 800044c:	f107 0108 	add.w	r1, r7, #8
 8000450:	2364      	movs	r3, #100	; 0x64
 8000452:	2201      	movs	r2, #1
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f003 fffa 	bl	800444e <HAL_SPI_Receive>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4618      	mov	r0, r3
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000464:	b29b      	uxth	r3, r3
 8000466:	2201      	movs	r2, #1
 8000468:	4619      	mov	r1, r3
 800046a:	f001 f81b 	bl	80014a4 <HAL_GPIO_WritePin>

	return status_reg_value[0];
 800046e:	7a3b      	ldrb	r3, [r7, #8]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <AT25X041B_WriteMemory8>:
	AT25X041B_ProtectSector(SPI, AT25X041B, addr);

	return memory_value[0];
}

void AT25X041B_WriteMemory8(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr,uint8_t data_in){
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	70fb      	strb	r3, [r7, #3]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t data_in_array[1];

	//Split the 23 bits addr into 3*8bits
	addr8bit[2] = (addr & 0xFF);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	77bb      	strb	r3, [r7, #30]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	b2db      	uxtb	r3, r3
 8000492:	777b      	strb	r3, [r7, #29]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	0c1b      	lsrs	r3, r3, #16
 8000498:	b2db      	uxtb	r3, r3
 800049a:	773b      	strb	r3, [r7, #28]
	data_in_array[0] = data_in;
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	753b      	strb	r3, [r7, #20]

	//Before reading the sector should be first unprotected
	AT25X041B_UnprotectSector(SPI, AT25X041B, addr);
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	68b9      	ldr	r1, [r7, #8]
 80004a4:	68f8      	ldr	r0, [r7, #12]
 80004a6:	f000 f83d 	bl	8000524 <AT25X041B_UnprotectSector>

	//We should send a write protection disable
	AT25X041B_WriteProtectionDisable(SPI, AT25X041B);
 80004aa:	68b9      	ldr	r1, [r7, #8]
 80004ac:	68f8      	ldr	r0, [r7, #12]
 80004ae:	f000 f8c5 	bl	800063c <AT25X041B_WriteProtectionDisable>


	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b6:	4618      	mov	r0, r3
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004bc:	b29b      	uxth	r3, r3
 80004be:	2200      	movs	r2, #0
 80004c0:	4619      	mov	r1, r3
 80004c2:	f000 ffef 	bl	80014a4 <HAL_GPIO_WritePin>

	data[0] = WRITE_BYTE_CMD;
 80004c6:	2302      	movs	r3, #2
 80004c8:	763b      	strb	r3, [r7, #24]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 80004ca:	f107 0118 	add.w	r1, r7, #24
 80004ce:	2364      	movs	r3, #100	; 0x64
 80004d0:	2201      	movs	r2, #1
 80004d2:	68f8      	ldr	r0, [r7, #12]
 80004d4:	f003 fe4d 	bl	8004172 <HAL_SPI_Transmit>
	//write the 23bit addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 80004d8:	f107 011c 	add.w	r1, r7, #28
 80004dc:	2364      	movs	r3, #100	; 0x64
 80004de:	2203      	movs	r2, #3
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f003 fe46 	bl	8004172 <HAL_SPI_Transmit>
	//send the data to write
	HAL_SPI_Transmit(SPI,data_in_array,1,100);
 80004e6:	f107 0114 	add.w	r1, r7, #20
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	2201      	movs	r2, #1
 80004ee:	68f8      	ldr	r0, [r7, #12]
 80004f0:	f003 fe3f 	bl	8004172 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f8:	4618      	mov	r0, r3
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004fe:	b29b      	uxth	r3, r3
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	f000 ffce 	bl	80014a4 <HAL_GPIO_WritePin>

	AT25X041B->LastWrittenAddr--;
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	1e5a      	subs	r2, r3, #1
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	619a      	str	r2, [r3, #24]

	//When everything is done the sector should be protected again
	AT25X041B_ProtectSector(SPI, AT25X041B, addr);
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	68b9      	ldr	r1, [r7, #8]
 8000516:	68f8      	ldr	r0, [r7, #12]
 8000518:	f000 f84a 	bl	80005b0 <AT25X041B_ProtectSector>


}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <AT25X041B_UnprotectSector>:
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);

	return sector_status[0];
}

void AT25X041B_UnprotectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	b2db      	uxtb	r3, r3
 800053c:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	b2db      	uxtb	r3, r3
 8000544:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f000 f877 	bl	800063c <AT25X041B_WriteProtectionDisable>
 800054e:	4603      	mov	r3, r0
 8000550:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 8000552:	7dfb      	ldrb	r3, [r7, #23]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d003      	beq.n	8000560 <AT25X041B_UnprotectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 8000558:	68b9      	ldr	r1, [r7, #8]
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f000 f86e 	bl	800063c <AT25X041B_WriteProtectionDisable>
	}


	data[0] = UNPROTECT_SECTOR_CMD;
 8000560:	2339      	movs	r3, #57	; 0x39
 8000562:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000568:	4618      	mov	r0, r3
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056e:	b29b      	uxth	r3, r3
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	f000 ff96 	bl	80014a4 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000578:	f107 0110 	add.w	r1, r7, #16
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	2201      	movs	r2, #1
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	f003 fdf6 	bl	8004172 <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 8000586:	f107 0114 	add.w	r1, r7, #20
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	2203      	movs	r2, #3
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f003 fdef 	bl	8004172 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000598:	4618      	mov	r0, r3
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	b29b      	uxth	r3, r3
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	f000 ff7e 	bl	80014a4 <HAL_GPIO_WritePin>

}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <AT25X041B_ProtectSector>:

void AT25X041B_ProtectSector(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,uint32_t addr){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	uint8_t addr8bit[3];
	uint8_t data[1];
	uint8_t write_protect_safety;

	//Convert the 4bytes into 3 splited bytes
	addr8bit[2] = (addr & 0xFF);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	75bb      	strb	r3, [r7, #22]
	addr8bit[1] = (uint8_t)((addr & 0xFF00)>>8);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	757b      	strb	r3, [r7, #21]
	addr8bit[0] = (uint8_t)((addr & 0xFF0000)>>16);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	753b      	strb	r3, [r7, #20]

	//This should be send before each command --> if it didn't work then the command is send again
	write_protect_safety = AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 80005d2:	68b9      	ldr	r1, [r7, #8]
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f000 f831 	bl	800063c <AT25X041B_WriteProtectionDisable>
 80005da:	4603      	mov	r3, r0
 80005dc:	75fb      	strb	r3, [r7, #23]
	if(write_protect_safety != 0x01){
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d003      	beq.n	80005ec <AT25X041B_ProtectSector+0x3c>
		AT25X041B_WriteProtectionDisable(SPI,AT25X041B);
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 f828 	bl	800063c <AT25X041B_WriteProtectionDisable>
	}


	data[0] = PROTECT_SECTOR_CMD;
 80005ec:	2336      	movs	r3, #54	; 0x36
 80005ee:	743b      	strb	r3, [r7, #16]
	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f4:	4618      	mov	r0, r3
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	f000 ff50 	bl	80014a4 <HAL_GPIO_WritePin>
	//send the command
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000604:	f107 0110 	add.w	r1, r7, #16
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2201      	movs	r2, #1
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f003 fdb0 	bl	8004172 <HAL_SPI_Transmit>
	//send the addr
	HAL_SPI_Transmit(SPI, addr8bit, 3, 100);
 8000612:	f107 0114 	add.w	r1, r7, #20
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	2203      	movs	r2, #3
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f003 fda9 	bl	8004172 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	4618      	mov	r0, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800062a:	b29b      	uxth	r3, r3
 800062c:	2201      	movs	r2, #1
 800062e:	4619      	mov	r1, r3
 8000630:	f000 ff38 	bl	80014a4 <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <AT25X041B_WriteProtectionDisable>:
		res = 0;
	}
	return res;
}

uint8_t AT25X041B_WriteProtectionDisable(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	uint8_t data[1];
	uint8_t status_reg_val;
	uint8_t res = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_RESET);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064e:	4618      	mov	r0, r3
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000654:	b29b      	uxth	r3, r3
 8000656:	2200      	movs	r2, #0
 8000658:	4619      	mov	r1, r3
 800065a:	f000 ff23 	bl	80014a4 <HAL_GPIO_WritePin>

	data[0] = WRITE_DISABLE_CMD;
 800065e:	2306      	movs	r3, #6
 8000660:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(SPI, data, 1, 100);
 8000662:	f107 010c 	add.w	r1, r7, #12
 8000666:	2364      	movs	r3, #100	; 0x64
 8000668:	2201      	movs	r2, #1
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f003 fd81 	bl	8004172 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(AT25X041B->CS_PORT, AT25X041B->CS_PIN, GPIO_PIN_SET);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000674:	4618      	mov	r0, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067a:	b29b      	uxth	r3, r3
 800067c:	2201      	movs	r2, #1
 800067e:	4619      	mov	r1, r3
 8000680:	f000 ff10 	bl	80014a4 <HAL_GPIO_WritePin>

	status_reg_val = AT25X041B_ReadStatusReg_Byte1(SPI, AT25X041B);
 8000684:	6839      	ldr	r1, [r7, #0]
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff fec8 	bl	800041c <AT25X041B_ReadStatusReg_Byte1>
 800068c:	4603      	mov	r3, r0
 800068e:	73bb      	strb	r3, [r7, #14]

	//if the command didn't worked then return 0
	if(((status_reg_val&0x02)>>1) == 0x00){
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	2b00      	cmp	r3, #0
 8000698:	d101      	bne.n	800069e <AT25X041B_WriteProtectionDisable+0x62>
		res = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <WriteCoordinateFlash>:

void WriteCoordinateFlash(SPI_HandleTypeDef *SPI,AT25X041B_t *AT25X041B,coord_t coordinate){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6178      	str	r0, [r7, #20]
 80006b0:	6139      	str	r1, [r7, #16]
 80006b2:	eef0 6a40 	vmov.f32	s13, s0
 80006b6:	eeb0 7a60 	vmov.f32	s14, s1
 80006ba:	eef0 7a41 	vmov.f32	s15, s2
 80006be:	edc7 6a01 	vstr	s13, [r7, #4]
 80006c2:	ed87 7a02 	vstr	s14, [r7, #8]
 80006c6:	edc7 7a03 	vstr	s15, [r7, #12]
		float longitude;
		uint8_t longitude_byte[4];
	} longitude_u;

	//Affect the coordinate to the union
	longitude_u.longitude = coordinate.longitude;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	61bb      	str	r3, [r7, #24]
	latitude_u.latitude = coordinate.latitude;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	61fb      	str	r3, [r7, #28]
	altitude_u.altitude = coordinate.altitude;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	623b      	str	r3, [r7, #32]

	//Store all data's into the memory
	for(int i=0;i<sizeof(altitude_u.altitude_byte);i++){
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006da:	e00e      	b.n	80006fa <WriteCoordinateFlash+0x52>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr, altitude_u.altitude_byte[i]);
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	6999      	ldr	r1, [r3, #24]
 80006e0:	f107 0220 	add.w	r2, r7, #32
 80006e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	460a      	mov	r2, r1
 80006ec:	6939      	ldr	r1, [r7, #16]
 80006ee:	6978      	ldr	r0, [r7, #20]
 80006f0:	f7ff fec2 	bl	8000478 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(altitude_u.altitude_byte);i++){
 80006f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f6:	3301      	adds	r3, #1
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d9ed      	bls.n	80006dc <WriteCoordinateFlash+0x34>
	}

	for(int i=0;i<sizeof(latitude_u.latitude_byte);i++){
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
 8000704:	e00e      	b.n	8000724 <WriteCoordinateFlash+0x7c>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr,latitude_u.latitude_byte[i]);
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	6999      	ldr	r1, [r3, #24]
 800070a:	f107 021c 	add.w	r2, r7, #28
 800070e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	460a      	mov	r2, r1
 8000716:	6939      	ldr	r1, [r7, #16]
 8000718:	6978      	ldr	r0, [r7, #20]
 800071a:	f7ff fead 	bl	8000478 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(latitude_u.latitude_byte);i++){
 800071e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000720:	3301      	adds	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
 8000724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000726:	2b03      	cmp	r3, #3
 8000728:	d9ed      	bls.n	8000706 <WriteCoordinateFlash+0x5e>
	}

	for(int i=0;i<sizeof(longitude_u.longitude_byte);i++){
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
 800072e:	e00e      	b.n	800074e <WriteCoordinateFlash+0xa6>
		AT25X041B_WriteMemory8(SPI, AT25X041B, AT25X041B->LastWrittenAddr, longitude_u.longitude_byte[i]);
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	6999      	ldr	r1, [r3, #24]
 8000734:	f107 0218 	add.w	r2, r7, #24
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	4413      	add	r3, r2
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	460a      	mov	r2, r1
 8000740:	6939      	ldr	r1, [r7, #16]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff fe98 	bl	8000478 <AT25X041B_WriteMemory8>
	for(int i=0;i<sizeof(longitude_u.longitude_byte);i++){
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	3301      	adds	r3, #1
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	2b03      	cmp	r3, #3
 8000752:	d9ed      	bls.n	8000730 <WriteCoordinateFlash+0x88>
	}

}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b0b0      	sub	sp, #192	; 0xc0
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fa96 	bl	8000c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f8c9 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f953 	bl	8000a18 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000772:	f008 fa83 	bl	8008c7c <MX_USB_Device_Init>
  MX_SPI1_Init();
 8000776:	f000 f911 	bl	800099c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Init the external flash */
  AT25X041B_Init(&hspi1, &external_flash, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 800077a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000782:	4953      	ldr	r1, [pc, #332]	; (80008d0 <main+0x170>)
 8000784:	4853      	ldr	r0, [pc, #332]	; (80008d4 <main+0x174>)
 8000786:	f7ff fd47 	bl	8000218 <AT25X041B_Init>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fe86 	bl	80014a4 <HAL_GPIO_WritePin>

  /* loop to ensure user is ready to send a data */
  uint8_t Flash_confirmation[] = "Flashing data please wait ...\r\n";
 8000798:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <main+0x178>)
 800079a:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 800079e:	461d      	mov	r5, r3
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t Print_time[] = "Waiting for USB interrupt !\r\n";
 80007ac:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <main+0x17c>)
 80007ae:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80007b2:	461d      	mov	r5, r3
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007bc:	c407      	stmia	r4!, {r0, r1, r2}
 80007be:	8023      	strh	r3, [r4, #0]
  uint8_t Flash_erase[] = "External flash erase please wait ... \r\n";
 80007c0:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <main+0x180>)
 80007c2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007c6:	461d      	mov	r5, r3
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007d4:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t Jumping_to_app[] = "Jumping to application !\r\n";
 80007d8:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <main+0x184>)
 80007da:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007de:	461d      	mov	r5, r3
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e8:	c403      	stmia	r4!, {r0, r1}
 80007ea:	8022      	strh	r2, [r4, #0]
 80007ec:	3402      	adds	r4, #2
 80007ee:	0c13      	lsrs	r3, r2, #16
 80007f0:	7023      	strb	r3, [r4, #0]
  uint8_t Error1[] = "An error occurred while erasing external flash !\r\n";
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <main+0x188>)
 80007f4:	1d3c      	adds	r4, r7, #4
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000804:	682b      	ldr	r3, [r5, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	8022      	strh	r2, [r4, #0]
 800080a:	3402      	adds	r4, #2
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	7023      	strb	r3, [r4, #0]

  for(int i=0;i<TIME_TO_WAIT_S;i++){
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000816:	e04c      	b.n	80008b2 <main+0x152>
	  if(start_of_flash){
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <main+0x18c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d039      	beq.n	8000894 <main+0x134>
		  CDC_Transmit_FS(Flash_erase, sizeof(Flash_erase));
 8000820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000824:	2128      	movs	r1, #40	; 0x28
 8000826:	4618      	mov	r0, r3
 8000828:	f008 fafc 	bl	8008e24 <CDC_Transmit_FS>
		  if( AT25X041B_ChipErase(&hspi1, &external_flash) == 0x01){
 800082c:	4928      	ldr	r1, [pc, #160]	; (80008d0 <main+0x170>)
 800082e:	4829      	ldr	r0, [pc, #164]	; (80008d4 <main+0x174>)
 8000830:	f7ff fd6a 	bl	8000308 <AT25X041B_ChipErase>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d106      	bne.n	8000848 <main+0xe8>
			  CDC_Transmit_FS(Flash_confirmation, sizeof(Flash_confirmation));
 800083a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800083e:	2120      	movs	r1, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f008 faef 	bl	8008e24 <CDC_Transmit_FS>
 8000846:	e020      	b.n	800088a <main+0x12a>
		  }
		  else{
			  CDC_Transmit_FS(Error1, sizeof(Error1));
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2133      	movs	r1, #51	; 0x33
 800084c:	4618      	mov	r0, r3
 800084e:	f008 fae9 	bl	8008e24 <CDC_Transmit_FS>
		  }

		  /* Wait until we received a end of flash sequence */
		  while(end_of_flash != 1){
 8000852:	e01a      	b.n	800088a <main+0x12a>

			  /* convert string to float and put it into coordinate */
			  coordinate.altitude = 2;
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <main+0x190>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085a:	609a      	str	r2, [r3, #8]
			  coordinate.latitude = 4.545;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <main+0x190>)
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <main+0x194>)
 8000860:	601a      	str	r2, [r3, #0]
			  coordinate.longitude = 4.545;
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <main+0x190>)
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <main+0x194>)
 8000866:	605a      	str	r2, [r3, #4]

			  /* Flash the external flash */
			  WriteCoordinateFlash(&hspi1, &external_flash,coordinate);
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <main+0x190>)
 800086a:	edd3 6a00 	vldr	s13, [r3]
 800086e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000872:	edd3 7a02 	vldr	s15, [r3, #8]
 8000876:	eeb0 0a66 	vmov.f32	s0, s13
 800087a:	eef0 0a47 	vmov.f32	s1, s14
 800087e:	eeb0 1a67 	vmov.f32	s2, s15
 8000882:	4913      	ldr	r1, [pc, #76]	; (80008d0 <main+0x170>)
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <main+0x174>)
 8000886:	f7ff ff0f 	bl	80006a8 <WriteCoordinateFlash>
		  while(end_of_flash != 1){
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <main+0x198>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d1e0      	bne.n	8000854 <main+0xf4>
		  }
		  break;
 8000892:	e012      	b.n	80008ba <main+0x15a>
	  }
	  CDC_Transmit_FS(Print_time, sizeof(Print_time));
 8000894:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000898:	211e      	movs	r1, #30
 800089a:	4618      	mov	r0, r3
 800089c:	f008 fac2 	bl	8008e24 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f000 fa68 	bl	8000d78 <HAL_Delay>
  for(int i=0;i<TIME_TO_WAIT_S;i++){
 80008a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008ac:	3301      	adds	r3, #1
 80008ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80008b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008b6:	2b09      	cmp	r3, #9
 80008b8:	ddae      	ble.n	8000818 <main+0xb8>
  }


  CDC_Transmit_FS(Jumping_to_app, sizeof(Jumping_to_app));
 80008ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008be:	211b      	movs	r1, #27
 80008c0:	4618      	mov	r0, r3
 80008c2:	f008 faaf 	bl	8008e24 <CDC_Transmit_FS>
  JumpToApplication(APP_ADDRESS);
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <main+0x19c>)
 80008c8:	f000 f8d8 	bl	8000a7c <JumpToApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x16c>
 80008ce:	bf00      	nop
 80008d0:	20000208 	.word	0x20000208
 80008d4:	200001a4 	.word	0x200001a4
 80008d8:	0800977c 	.word	0x0800977c
 80008dc:	0800979c 	.word	0x0800979c
 80008e0:	080097bc 	.word	0x080097bc
 80008e4:	080097e4 	.word	0x080097e4
 80008e8:	08009800 	.word	0x08009800
 80008ec:	200001a0 	.word	0x200001a0
 80008f0:	20000234 	.word	0x20000234
 80008f4:	409170a4 	.word	0x409170a4
 80008f8:	200001a1 	.word	0x200001a1
 80008fc:	0800a000 	.word	0x0800a000

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0318 	add.w	r3, r7, #24
 800090a:	2238      	movs	r2, #56	; 0x38
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fefa 	bl	8009708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000922:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000926:	f002 fb09 	bl	8002f3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800092a:	2322      	movs	r3, #34	; 0x22
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000944:	2304      	movs	r3, #4
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000948:	234b      	movs	r3, #75	; 0x4b
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094c:	2302      	movs	r3, #2
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fc13 	bl	8003188 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000968:	f000 f8ba 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2104      	movs	r1, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f002 ff17 	bl	80037b8 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000990:	f000 f8a6 	bl	8000ae0 <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	3750      	adds	r7, #80	; 0x50
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_SPI1_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009d2:	2228      	movs	r2, #40	; 0x28
 80009d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009ea:	2207      	movs	r2, #7
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_SPI1_Init+0x74>)
 80009fc:	f003 fb0e 	bl	800401c <HAL_SPI_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f86b 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001a4 	.word	0x200001a4
 8000a14:	40013000 	.word	0x40013000

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_GPIO_Init+0x60>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <MX_GPIO_Init+0x60>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_GPIO_Init+0x60>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fd29 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 8000a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f000 fab6 	bl	8000fdc <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <JumpToApplication>:

/* USER CODE BEGIN 4 */
void JumpToApplication(uint32_t application_addr){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	  /*Init a function pointer*/
	  uint32_t go_address = *((volatile uint32_t*) (application_addr + 4));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	617b      	str	r3, [r7, #20]
	  void (*jump_to_app)(void) = (void *)go_address;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]

	  /*Uninit all peripheral use by the bootloader*/
	  HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8000a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f000 fc22 	bl	80012e0 <HAL_GPIO_DeInit>

	  /*Disable clock*/
	  HAL_RCC_DeInit();
 8000a9c:	f002 faf2 	bl	8003084 <HAL_RCC_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop

	  /*disable all IRQ*/
	  __disable_irq();

	  /*Relocate vector table*/
	  SCB->VTOR = application_addr;
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <JumpToApplication+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6093      	str	r3, [r2, #8]

	  /*Set main stack pointer pas sure*/
	  __set_MSP(*(volatile uint32_t*) application_addr);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f383 8808 	msr	MSP, r3
}
 8000ab6:	bf00      	nop

	  /*Reset systick timer*/
	  SysTick->CTRL = 0;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <JumpToApplication+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <JumpToApplication+0x60>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <JumpToApplication+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
		//#error "In order to jump correctly the app should be relocated at different @ - please allow more than (2048byte*4)=16384 byte -- probably around 40 or 42 kB "
	  /*Jump*/
	  jump_to_app();
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4798      	blx	r3
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x7c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d128      	bne.n	8000ba8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_SPI_MspInit+0x80>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <HAL_SPI_MspInit+0x80>)
 8000b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b60:	6613      	str	r3, [r2, #96]	; 0x60
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_SPI_MspInit+0x80>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_SPI_MspInit+0x80>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_SPI_MspInit+0x80>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_SPI_MspInit+0x80>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b86:	23e0      	movs	r3, #224	; 0xe0
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b96:	2305      	movs	r3, #5
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f000 fa1a 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f89a 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <USB_LP_IRQHandler+0x10>)
 8000c12:	f000 fd66 	bl	80016e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000177c 	.word	0x2000177c

08000c20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c6e:	f7ff ffd7 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f008 fd25 	bl	80096c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c76:	f7ff fd73 	bl	8000760 <main>

08000c7a <LoopForever>:

LoopForever:
    b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   r0, =_estack
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000c88:	08009894 	.word	0x08009894
  ldr r2, =_sbss
 8000c8c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000c90:	20001c90 	.word	0x20001c90

08000c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_2_IRQHandler>

08000c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f95b 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f000 f80e 	bl	8000cc8 <HAL_InitTick>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	e001      	b.n	8000cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb8:	f7ff ff18 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_InitTick+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d022      	beq.n	8000d22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_InitTick+0x6c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_InitTick+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f966 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10f      	bne.n	8000d1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b0f      	cmp	r3, #15
 8000d00:	d809      	bhi.n	8000d16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d02:	2200      	movs	r2, #0
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0a:	f000 f932 	bl	8000f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_InitTick+0x70>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e007      	b.n	8000d26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e004      	b.n	8000d26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e001      	b.n	8000d26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x20>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d4c:	6013      	str	r3, [r2, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	20000240 	.word	0x20000240
 8000d5c:	20000008 	.word	0x20000008

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000240 	.word	0x20000240

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff ffee 	bl	8000d60 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d004      	beq.n	8000d9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_Delay+0x40>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9c:	bf00      	nop
 8000d9e:	f7ff ffdf 	bl	8000d60 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d8f7      	bhi.n	8000d9e <HAL_Delay+0x26>
  {
  }
}
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000008 	.word	0x20000008

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff40 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff90 	bl	8000eb0 <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5f 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff33 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa4 	bl	8000f18 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fea:	e15a      	b.n	80012a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 814c 	beq.w	800129c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80a6 	beq.w	800129c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	4a5a      	ldr	r2, [pc, #360]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6613      	str	r3, [r2, #96]	; 0x60
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001168:	4a56      	ldr	r2, [pc, #344]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d01f      	beq.n	80011d4 <HAL_GPIO_Init+0x1f8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d019      	beq.n	80011d0 <HAL_GPIO_Init+0x1f4>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x1f0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1ec>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_GPIO_Init+0x2f8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1e8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1e4>
 80011bc:	2305      	movs	r3, #5
 80011be:	e00a      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011c0:	2306      	movs	r3, #6
 80011c2:	e008      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011c4:	2304      	movs	r3, #4
 80011c6:	e006      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011c8:	2303      	movs	r3, #3
 80011ca:	e004      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011d4:	2300      	movs	r3, #0
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e6:	4937      	ldr	r1, [pc, #220]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_GPIO_Init+0x300>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001218:	4a30      	ldr	r2, [pc, #192]	; (80012dc <HAL_GPIO_Init+0x300>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001242:	4a26      	ldr	r2, [pc, #152]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_GPIO_Init+0x300>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_GPIO_Init+0x300>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f ae9d 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00
 80012d4:	48001000 	.word	0x48001000
 80012d8:	48001400 	.word	0x48001400
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80012ee:	e0bd      	b.n	800146c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80012f0:	2201      	movs	r2, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80b0 	beq.w	8001466 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a60      	ldr	r2, [pc, #384]	; (8001488 <HAL_GPIO_DeInit+0x1a8>)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800132e:	d01f      	beq.n	8001370 <HAL_GPIO_DeInit+0x90>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <HAL_GPIO_DeInit+0x1ac>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d019      	beq.n	800136c <HAL_GPIO_DeInit+0x8c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a55      	ldr	r2, [pc, #340]	; (8001490 <HAL_GPIO_DeInit+0x1b0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d013      	beq.n	8001368 <HAL_GPIO_DeInit+0x88>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a54      	ldr	r2, [pc, #336]	; (8001494 <HAL_GPIO_DeInit+0x1b4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00d      	beq.n	8001364 <HAL_GPIO_DeInit+0x84>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a53      	ldr	r2, [pc, #332]	; (8001498 <HAL_GPIO_DeInit+0x1b8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_DeInit+0x80>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_GPIO_DeInit+0x1bc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <HAL_GPIO_DeInit+0x7c>
 8001358:	2305      	movs	r3, #5
 800135a:	e00a      	b.n	8001372 <HAL_GPIO_DeInit+0x92>
 800135c:	2306      	movs	r3, #6
 800135e:	e008      	b.n	8001372 <HAL_GPIO_DeInit+0x92>
 8001360:	2304      	movs	r3, #4
 8001362:	e006      	b.n	8001372 <HAL_GPIO_DeInit+0x92>
 8001364:	2303      	movs	r3, #3
 8001366:	e004      	b.n	8001372 <HAL_GPIO_DeInit+0x92>
 8001368:	2302      	movs	r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_DeInit+0x92>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_GPIO_DeInit+0x92>
 8001370:	2300      	movs	r3, #0
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	f002 0203 	and.w	r2, r2, #3
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	4093      	lsls	r3, r2
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d132      	bne.n	80013e8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	4945      	ldr	r1, [pc, #276]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 800138c:	4013      	ands	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001390:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	4941      	ldr	r1, [pc, #260]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 800139a:	4013      	ands	r3, r2
 800139c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800139e:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	493e      	ldr	r1, [pc, #248]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	493a      	ldr	r1, [pc, #232]	; (80014a0 <HAL_GPIO_DeInit+0x1c0>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80013ca:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <HAL_GPIO_DeInit+0x1a8>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43da      	mvns	r2, r3
 80013da:	482b      	ldr	r0, [pc, #172]	; (8001488 <HAL_GPIO_DeInit+0x1a8>)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	400a      	ands	r2, r1
 80013e2:	3302      	adds	r3, #2
 80013e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2103      	movs	r1, #3
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	08d2      	lsrs	r2, r2, #3
 800141c:	4019      	ands	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2103      	movs	r1, #3
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	2101      	movs	r1, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	401a      	ands	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2103      	movs	r1, #3
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	401a      	ands	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f47f af3b 	bne.w	80012f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40010000 	.word	0x40010000
 800148c:	48000400 	.word	0x48000400
 8001490:	48000800 	.word	0x48000800
 8001494:	48000c00 	.word	0x48000c00
 8001498:	48001000 	.word	0x48001000
 800149c:	48001400 	.word	0x48001400
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af06      	add	r7, sp, #24
 80014da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0d7      	b.n	8001696 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f007 fdda 	bl	80090b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fcb4 	bl	8004e7a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e04c      	b.n	80015b2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	3301      	adds	r3, #1
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	b298      	uxth	r0, r3
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	3336      	adds	r3, #54	; 0x36
 8001556:	4602      	mov	r2, r0
 8001558:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3303      	adds	r3, #3
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	3338      	adds	r3, #56	; 0x38
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	333c      	adds	r3, #60	; 0x3c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	3340      	adds	r3, #64	; 0x40
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3ad      	bcc.n	8001518 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e044      	b.n	800164c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	3301      	adds	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	d3b5      	bcc.n	80015c2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	687e      	ldr	r6, [r7, #4]
 800165e:	466d      	mov	r5, sp
 8001660:	f106 0410 	add.w	r4, r6, #16
 8001664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	602b      	str	r3, [r5, #0]
 800166c:	1d33      	adds	r3, r6, #4
 800166e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f003 fc1d 	bl	8004eb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f001 fc29 	bl	8002ee6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800169e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_PCD_Start+0x16>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e012      	b.n	80016da <HAL_PCD_Start+0x3c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fbc3 	bl	8004e4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fddc 	bl	8007288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 fde1 	bl	80072b6 <USB_ReadInterrupts>
 80016f4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fb26 	bl	8001d52 <PCD_EP_ISR_Handler>

    return;
 8001706:	e110      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170e:	2b00      	cmp	r3, #0
 8001710:	d013      	beq.n	800173a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001724:	b292      	uxth	r2, r2
 8001726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f007 fd53 	bl	80091d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8fc 	bl	8001930 <HAL_PCD_SetAddress>

    return;
 8001738:	e0f7      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00c      	beq.n	800175e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800175c:	e0e5      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001770:	b29a      	uxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800177a:	b292      	uxth	r2, r2
 800177c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001780:	e0d3      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d034      	beq.n	80017f6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	b292      	uxth	r2, r2
 80017a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0208 	bic.w	r2, r2, #8
 80017b6:	b292      	uxth	r2, r2
 80017b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017ce:	2100      	movs	r1, #0
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f007 fef5 	bl	80095c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f007 fd36 	bl	8009248 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017f4:	e099      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d027      	beq.n	8001850 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	b292      	uxth	r2, r2
 8001814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0204 	orr.w	r2, r2, #4
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f007 fce3 	bl	8009214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800184e:	e06c      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	2b00      	cmp	r3, #0
 8001858:	d040      	beq.n	80018dc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800186c:	b292      	uxth	r2, r2
 800186e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d12b      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0204 	orr.w	r2, r2, #4
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0208 	orr.w	r2, r2, #8
 80018a6:	b292      	uxth	r2, r2
 80018a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80018bc:	b29b      	uxth	r3, r3
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018ca:	2101      	movs	r1, #1
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f007 fe77 	bl	80095c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80018d2:	e02a      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f007 fc9d 	bl	8009214 <HAL_PCD_SuspendCallback>
    return;
 80018da:	e026      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00f      	beq.n	8001906 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f8:	b292      	uxth	r2, r2
 80018fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f007 fc5b 	bl	80091ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001904:	e011      	b.n	800192a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00c      	beq.n	800192a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001922:	b292      	uxth	r2, r2
 8001924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001928:	bf00      	nop
  }
}
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_PCD_SetAddress+0x1a>
 8001946:	2302      	movs	r3, #2
 8001948:	e013      	b.n	8001972 <HAL_PCD_SetAddress+0x42>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f005 fc7c 	bl	8007260 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4603      	mov	r3, r0
 800198a:	70fb      	strb	r3, [r7, #3]
 800198c:	460b      	mov	r3, r1
 800198e:	803b      	strh	r3, [r7, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da0e      	bge.n	80019be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	705a      	strb	r2, [r3, #1]
 80019bc:	e00e      	b.n	80019dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	f003 0207 	and.w	r2, r3, #7
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019e8:	883a      	ldrh	r2, [r7, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	78ba      	ldrb	r2, [r7, #2]
 80019f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a06:	78bb      	ldrb	r3, [r7, #2]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d102      	bne.n	8001a12 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_PCD_EP_Open+0xa6>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e00e      	b.n	8001a3e <HAL_PCD_EP_Open+0xc4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fa60 	bl	8004ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da0e      	bge.n	8001a78 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	705a      	strb	r2, [r3, #1]
 8001a76:	e00e      	b.n	8001a96 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f003 0207 	and.w	r2, r3, #7
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_PCD_EP_Close+0x6a>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e00e      	b.n	8001ace <HAL_PCD_EP_Close+0x88>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fdac 	bl	800561c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 0207 	and.w	r2, r3, #7
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2200      	movs	r2, #0
 8001b14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 ff5f 	bl	80059f6 <USB_EPStartXfer>
 8001b38:	e005      	b.n	8001b46 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6979      	ldr	r1, [r7, #20]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 ff58 	bl	80059f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	f003 0207 	and.w	r2, r3, #7
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6979      	ldr	r1, [r7, #20]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 ff04 	bl	80059f6 <USB_EPStartXfer>
 8001bee:	e005      	b.n	8001bfc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fefd 	bl	80059f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 0207 	and.w	r2, r3, #7
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d901      	bls.n	8001c24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e03e      	b.n	8001ca2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da0e      	bge.n	8001c4a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	705a      	strb	r2, [r3, #1]
 8001c48:	e00c      	b.n	8001c64 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_PCD_EP_SetStall+0x7e>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e00e      	b.n	8001ca2 <HAL_PCD_EP_SetStall+0x9c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 f9e5 	bl	8007062 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d901      	bls.n	8001cc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e040      	b.n	8001d4a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da0e      	bge.n	8001cee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	705a      	strb	r2, [r3, #1]
 8001cec:	e00e      	b.n	8001d0c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 0207 	and.w	r2, r3, #7
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_EP_ClrStall+0x82>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00e      	b.n	8001d4a <HAL_PCD_EP_ClrStall+0xa0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 f9e2 	bl	8007104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b096      	sub	sp, #88	; 0x58
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d5a:	e39c      	b.n	8002496 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001d76:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 815e 	bne.w	800203c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d150      	bne.n	8001e2e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9c:	81fb      	strh	r3, [r7, #14]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3328      	adds	r3, #40	; 0x28
 8001db4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ddc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	441a      	add	r2, r3
 8001de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dec:	2100      	movs	r1, #0
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f007 f9c9 	bl	8009186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 834a 	beq.w	8002496 <PCD_EP_ISR_Handler+0x744>
 8001e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 8345 	bne.w	8002496 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e2c:	e333      	b.n	8002496 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e34:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e72:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e80:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e84:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f005 fa67 	bl	800735a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e98:	4013      	ands	r3, r2
 8001e9a:	823b      	strh	r3, [r7, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	8a3a      	ldrh	r2, [r7, #16]
 8001ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f007 f93e 	bl	800912c <HAL_PCD_SetupStageCallback>
 8001eb0:	e2f1      	b.n	8002496 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eb2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f280 82ed 	bge.w	8002496 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ec8:	4013      	ands	r3, r2
 8001eca:	83fb      	strh	r3, [r7, #30]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	8bfa      	ldrh	r2, [r7, #30]
 8001ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d019      	beq.n	8001f3e <PCD_EP_ISR_Handler+0x1ec>
 8001f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f18:	6959      	ldr	r1, [r3, #20]
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f005 fa19 	bl	800735a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	441a      	add	r2, r3
 8001f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f007 f909 	bl	8009150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 82a3 	bne.w	8002496 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b3e      	cmp	r3, #62	; 0x3e
 8001f76:	d918      	bls.n	8001faa <PCD_EP_ISR_Handler+0x258>
 8001f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <PCD_EP_ISR_Handler+0x240>
 8001f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
 8001f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	801a      	strh	r2, [r3, #0]
 8001fa8:	e029      	b.n	8001ffe <PCD_EP_ISR_Handler+0x2ac>
 8001faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d112      	bne.n	8001fd8 <PCD_EP_ISR_Handler+0x286>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	e012      	b.n	8001ffe <PCD_EP_ISR_Handler+0x2ac>
 8001fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <PCD_EP_ISR_Handler+0x2a0>
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	3301      	adds	r3, #1
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	827b      	strh	r3, [r7, #18]
 8002010:	8a7b      	ldrh	r3, [r7, #18]
 8002012:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002016:	827b      	strh	r3, [r7, #18]
 8002018:	8a7b      	ldrh	r3, [r7, #18]
 800201a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800201e:	827b      	strh	r3, [r7, #18]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	8a7b      	ldrh	r3, [r7, #18]
 8002026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800202a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800202e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002036:	b29b      	uxth	r3, r3
 8002038:	8013      	strh	r3, [r2, #0]
 800203a:	e22c      	b.n	8002496 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002050:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002054:	2b00      	cmp	r3, #0
 8002056:	f280 80f6 	bge.w	8002246 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002070:	4013      	ands	r3, r2
 8002072:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800208c:	b292      	uxth	r2, r2
 800208e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002090:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80020a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a8:	7b1b      	ldrb	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d123      	bne.n	80020f6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80020d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 808e 	beq.w	80021fc <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e6:	6959      	ldr	r1, [r3, #20]
 80020e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ea:	88da      	ldrh	r2, [r3, #6]
 80020ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020f0:	f005 f933 	bl	800735a <USB_ReadPMA>
 80020f4:	e082      	b.n	80021fc <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f8:	78db      	ldrb	r3, [r3, #3]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d10a      	bne.n	8002114 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002102:	461a      	mov	r2, r3
 8002104:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f9d3 	bl	80024b2 <HAL_PCD_EP_DB_Receive>
 800210c:	4603      	mov	r3, r0
 800210e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002112:	e073      	b.n	80021fc <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	441a      	add	r2, r3
 8002140:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002150:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002154:	b29b      	uxth	r3, r3
 8002156:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b29b      	uxth	r3, r3
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d022      	beq.n	80021b8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4413      	add	r3, r2
 800218c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002196:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800219a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d02c      	beq.n	80021fc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a8:	6959      	ldr	r1, [r3, #20]
 80021aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ac:	891a      	ldrh	r2, [r3, #8]
 80021ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021b2:	f005 f8d2 	bl	800735a <USB_ReadPMA>
 80021b6:	e021      	b.n	80021fc <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80021e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ee:	6959      	ldr	r1, [r3, #20]
 80021f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f2:	895a      	ldrh	r2, [r3, #10]
 80021f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021f8:	f005 f8af 	bl	800735a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002204:	441a      	add	r2, r3
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002208:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002212:	441a      	add	r2, r3
 8002214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002216:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <PCD_EP_ISR_Handler+0x4da>
 8002220:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d206      	bcs.n	800223a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800222c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f006 ff8c 	bl	8009150 <HAL_PCD_DataOutStageCallback>
 8002238:	e005      	b.n	8002246 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002240:	4618      	mov	r0, r3
 8002242:	f003 fbd8 	bl	80059f6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002246:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8121 	beq.w	8002496 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002254:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800227e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002282:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	441a      	add	r2, r3
 8002294:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800229c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80022a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a6:	78db      	ldrb	r3, [r3, #3]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	f000 80a2 	beq.w	80023f2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80022ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80022b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b6:	7b1b      	ldrb	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8093 	beq.w	80023e4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d046      	beq.n	8002358 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022cc:	785b      	ldrb	r3, [r3, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d126      	bne.n	8002320 <PCD_EP_ISR_Handler+0x5ce>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	4413      	add	r3, r2
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	00da      	lsls	r2, r3, #3
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	4413      	add	r3, r2
 80022f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002304:	b29a      	uxth	r2, r3
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002318:	b29a      	uxth	r2, r3
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	e061      	b.n	80023e4 <PCD_EP_ISR_Handler+0x692>
 8002320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002322:	785b      	ldrb	r3, [r3, #1]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d15d      	bne.n	80023e4 <PCD_EP_ISR_Handler+0x692>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	4413      	add	r3, r2
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	00da      	lsls	r2, r3, #3
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	4413      	add	r3, r2
 800234a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	e045      	b.n	80023e4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002360:	785b      	ldrb	r3, [r3, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d126      	bne.n	80023b4 <PCD_EP_ISR_Handler+0x662>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002374:	b29b      	uxth	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	4413      	add	r3, r2
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
 800237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	00da      	lsls	r2, r3, #3
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	4413      	add	r3, r2
 8002388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002398:	b29a      	uxth	r2, r3
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	801a      	strh	r2, [r3, #0]
 80023b2:	e017      	b.n	80023e4 <PCD_EP_ISR_Handler+0x692>
 80023b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d113      	bne.n	80023e4 <PCD_EP_ISR_Handler+0x692>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ca:	4413      	add	r3, r2
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	00da      	lsls	r2, r3, #3
 80023d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d6:	4413      	add	r3, r2
 80023d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	2200      	movs	r2, #0
 80023e2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f006 fecb 	bl	8009186 <HAL_PCD_DataInStageCallback>
 80023f0:	e051      	b.n	8002496 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80023f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d144      	bne.n	8002488 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	4413      	add	r3, r2
 8002418:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002422:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800242e:	429a      	cmp	r2, r3
 8002430:	d907      	bls.n	8002442 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243e:	619a      	str	r2, [r3, #24]
 8002440:	e002      	b.n	8002448 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f006 fe95 	bl	8009186 <HAL_PCD_DataInStageCallback>
 800245c:	e01b      	b.n	8002496 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800245e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002466:	441a      	add	r2, r3
 8002468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800246c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002474:	441a      	add	r2, r3
 8002476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002478:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fab8 	bl	80059f6 <USB_EPStartXfer>
 8002486:	e006      	b.n	8002496 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002488:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800248c:	461a      	mov	r2, r3
 800248e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f917 	bl	80026c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f6ff ac5a 	blt.w	8001d5c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3758      	adds	r7, #88	; 0x58
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b088      	sub	sp, #32
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d07c      	beq.n	80025c4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	8b7b      	ldrh	r3, [r7, #26]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d306      	bcc.n	8002508 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	8b7b      	ldrh	r3, [r7, #26]
 8002500:	1ad2      	subs	r2, r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	619a      	str	r2, [r3, #24]
 8002506:	e002      	b.n	800250e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d123      	bne.n	800255e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002530:	833b      	strh	r3, [r7, #24]
 8002532:	8b3b      	ldrh	r3, [r7, #24]
 8002534:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002538:	833b      	strh	r3, [r7, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	441a      	add	r2, r3
 8002548:	8b3b      	ldrh	r3, [r7, #24]
 800254a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255a:	b29b      	uxth	r3, r3
 800255c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01f      	beq.n	80025a8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	82fb      	strh	r3, [r7, #22]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	8afb      	ldrh	r3, [r7, #22]
 8002594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025a8:	8b7b      	ldrh	r3, [r7, #26]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8085 	beq.w	80026ba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6959      	ldr	r1, [r3, #20]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	891a      	ldrh	r2, [r3, #8]
 80025bc:	8b7b      	ldrh	r3, [r7, #26]
 80025be:	f004 fecc 	bl	800735a <USB_ReadPMA>
 80025c2:	e07a      	b.n	80026ba <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d306      	bcc.n	8002602 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	8b7b      	ldrh	r3, [r7, #26]
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	619a      	str	r2, [r3, #24]
 8002600:	e002      	b.n	8002608 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d123      	bne.n	8002658 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262a:	83fb      	strh	r3, [r7, #30]
 800262c:	8bfb      	ldrh	r3, [r7, #30]
 800262e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002632:	83fb      	strh	r3, [r7, #30]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	8bfb      	ldrh	r3, [r7, #30]
 8002644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002654:	b29b      	uxth	r3, r3
 8002656:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11f      	bne.n	80026a2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	83bb      	strh	r3, [r7, #28]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	441a      	add	r2, r3
 800268c:	8bbb      	ldrh	r3, [r7, #28]
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026a2:	8b7b      	ldrh	r3, [r7, #26]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6959      	ldr	r1, [r3, #20]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	895a      	ldrh	r2, [r3, #10]
 80026b4:	8b7b      	ldrh	r3, [r7, #26]
 80026b6:	f004 fe50 	bl	800735a <USB_ReadPMA>
    }
  }

  return count;
 80026ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0a2      	sub	sp, #136	; 0x88
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 81c5 	beq.w	8002a68 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002702:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270e:	429a      	cmp	r2, r3
 8002710:	d907      	bls.n	8002722 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800271a:	1ad2      	subs	r2, r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	e002      	b.n	8002728 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 80b9 	bne.w	80028a4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d126      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0xc4>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	4413      	add	r3, r2
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	00da      	lsls	r2, r3, #3
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	4413      	add	r3, r2
 800275c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800276c:	b29a      	uxth	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	801a      	strh	r2, [r3, #0]
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002780:	b29a      	uxth	r2, r3
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	e01a      	b.n	80027be <HAL_PCD_EP_DB_Transmit+0xfa>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d116      	bne.n	80027be <HAL_PCD_EP_DB_Transmit+0xfa>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	4413      	add	r3, r2
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	00da      	lsls	r2, r3, #3
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	4413      	add	r3, r2
 80027b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	2200      	movs	r2, #0
 80027bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d126      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x156>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4413      	add	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	00da      	lsls	r2, r3, #3
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027fe:	b29a      	uxth	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002812:	b29a      	uxth	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	e017      	b.n	800284a <HAL_PCD_EP_DB_Transmit+0x186>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d113      	bne.n	800284a <HAL_PCD_EP_DB_Transmit+0x186>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	4413      	add	r3, r2
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00da      	lsls	r2, r3, #3
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	4413      	add	r3, r2
 800283e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2200      	movs	r2, #0
 8002848:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f006 fc98 	bl	8009186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 82d2 	beq.w	8002e06 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287c:	827b      	strh	r3, [r7, #18]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	441a      	add	r2, r3
 800288c:	8a7b      	ldrh	r3, [r7, #18]
 800288e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800289a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289e:	b29b      	uxth	r3, r3
 80028a0:	8013      	strh	r3, [r2, #0]
 80028a2:	e2b0      	b.n	8002e06 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d021      	beq.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f040 8284 	bne.w	8002e06 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002906:	441a      	add	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002914:	441a      	add	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	429a      	cmp	r2, r3
 8002924:	d309      	bcc.n	800293a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	621a      	str	r2, [r3, #32]
 8002938:	e015      	b.n	8002966 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002946:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002950:	e009      	b.n	8002966 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2200      	movs	r2, #0
 8002964:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d155      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x356>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297c:	b29b      	uxth	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002982:	4413      	add	r3, r2
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	00da      	lsls	r2, r3, #3
 800298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298e:	4413      	add	r3, r2
 8002990:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
 8002996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002998:	2b3e      	cmp	r3, #62	; 0x3e
 800299a:	d916      	bls.n	80029ca <HAL_PCD_EP_DB_Transmit+0x306>
 800299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80029ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ae:	3b01      	subs	r3, #1
 80029b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	029b      	lsls	r3, r3, #10
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	e043      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x38e>
 80029ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d112      	bne.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x332>
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029da:	b29a      	uxth	r2, r3
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	801a      	strh	r2, [r3, #0]
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e02d      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x38e>
 80029f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80029fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x348>
 8002a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a08:	3301      	adds	r3, #1
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	029b      	lsls	r3, r3, #10
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	e01b      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d117      	bne.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a36:	4413      	add	r3, r2
 8002a38:	643b      	str	r3, [r7, #64]	; 0x40
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	00da      	lsls	r2, r3, #3
 8002a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a42:	4413      	add	r3, r2
 8002a44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a50:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6959      	ldr	r1, [r3, #20]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	891a      	ldrh	r2, [r3, #8]
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f004 fc38 	bl	80072d6 <USB_WritePMA>
 8002a66:	e1ce      	b.n	8002e06 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d307      	bcc.n	8002aac <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aa4:	1ad2      	subs	r2, r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	619a      	str	r2, [r3, #24]
 8002aaa:	e002      	b.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 80c4 	bne.w	8002c44 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d126      	bne.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad8:	4413      	add	r3, r2
 8002ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	00da      	lsls	r2, r3, #3
 8002ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aea:	667b      	str	r3, [r7, #100]	; 0x64
 8002aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	e01a      	b.n	8002b48 <HAL_PCD_EP_DB_Transmit+0x484>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d116      	bne.n	8002b48 <HAL_PCD_EP_DB_Transmit+0x484>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2e:	4413      	add	r3, r2
 8002b30:	673b      	str	r3, [r7, #112]	; 0x70
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00da      	lsls	r2, r3, #3
 8002b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b44:	2200      	movs	r2, #0
 8002b46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d12f      	bne.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b6e:	4413      	add	r3, r2
 8002b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	00da      	lsls	r2, r3, #3
 8002b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7e:	4413      	add	r3, r2
 8002b80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	e017      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x522>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d113      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x522>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bcc:	4413      	add	r3, r2
 8002bce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	00da      	lsls	r2, r3, #3
 8002bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bd8:	4413      	add	r3, r2
 8002bda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bde:	67bb      	str	r3, [r7, #120]	; 0x78
 8002be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be2:	2200      	movs	r2, #0
 8002be4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f006 faca 	bl	8009186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 8104 	bne.w	8002e06 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]
 8002c42:	e0e0      	b.n	8002e06 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d121      	bne.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 80b4 	bne.w	8002e06 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d309      	bcc.n	8002cda <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	621a      	str	r2, [r3, #32]
 8002cd8:	e015      	b.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d107      	bne.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cf0:	e009      	b.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	785b      	ldrb	r3, [r3, #1]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d155      	bne.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	4413      	add	r3, r2
 8002d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	00da      	lsls	r2, r3, #3
 8002d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d34:	4413      	add	r3, r2
 8002d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d40:	d916      	bls.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	677b      	str	r3, [r7, #116]	; 0x74
 8002d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x694>
 8002d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d54:	3b01      	subs	r3, #1
 8002d56:	677b      	str	r3, [r7, #116]	; 0x74
 8002d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	029b      	lsls	r3, r3, #10
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	e040      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	e02a      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	677b      	str	r3, [r7, #116]	; 0x74
 8002da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dae:	3301      	adds	r3, #1
 8002db0:	677b      	str	r3, [r7, #116]	; 0x74
 8002db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	e018      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d114      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd6:	4413      	add	r3, r2
 8002dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	00da      	lsls	r2, r3, #3
 8002de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de2:	4413      	add	r3, r2
 8002de4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6959      	ldr	r1, [r3, #20]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	895a      	ldrh	r2, [r3, #10]
 8002dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f004 fa68 	bl	80072d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e20:	823b      	strh	r3, [r7, #16]
 8002e22:	8a3b      	ldrh	r3, [r7, #16]
 8002e24:	f083 0310 	eor.w	r3, r3, #16
 8002e28:	823b      	strh	r3, [r7, #16]
 8002e2a:	8a3b      	ldrh	r3, [r7, #16]
 8002e2c:	f083 0320 	eor.w	r3, r3, #32
 8002e30:	823b      	strh	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	8a3b      	ldrh	r3, [r7, #16]
 8002e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3788      	adds	r7, #136	; 0x88
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	817b      	strh	r3, [r7, #10]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e009      	b.n	8002eaa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e96:	897a      	ldrh	r2, [r7, #10]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eaa:	893b      	ldrh	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	80da      	strh	r2, [r3, #6]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d141      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4a:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d131      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f58:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f70:	4a41      	ldr	r2, [pc, #260]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2232      	movs	r2, #50	; 0x32
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a3f      	ldr	r2, [pc, #252]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8e:	e002      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f96:	4b38      	ldr	r3, [pc, #224]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	d102      	bne.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002faa:	4b33      	ldr	r3, [pc, #204]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb6:	d158      	bne.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e057      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fcc:	e04d      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd4:	d141      	bne.n	800305a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fd6:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d131      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fea:	4a23      	ldr	r2, [pc, #140]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ffc:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003002:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2232      	movs	r2, #50	; 0x32
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	0c9b      	lsrs	r3, r3, #18
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301a:	e002      	b.n	8003022 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3b01      	subs	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d102      	bne.n	8003036 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f2      	bne.n	800301c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003042:	d112      	bne.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e011      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003058:	e007      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003068:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40007000 	.word	0x40007000
 800307c:	20000000 	.word	0x20000000
 8003080:	431bde83 	.word	0x431bde83

08003084 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800308a:	f7fd fe69 	bl	8000d60 <HAL_GetTick>
 800308e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fd fe5f 	bl	8000d60 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e05f      	b.n	8003170 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 80030c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030c6:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030c8:	f7fd fe4a 	bl	8000d60 <HAL_GetTick>
 80030cc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d6:	f7fd fe43 	bl	8000d60 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e041      	b.n	8003170 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_DeInit+0xf8>)
 80030fa:	4a21      	ldr	r2, [pc, #132]	; (8003180 <HAL_RCC_DeInit+0xfc>)
 80030fc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_RCC_DeInit+0x100>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fde0 	bl	8000cc8 <HAL_InitTick>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e02e      	b.n	8003170 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 8003114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003118:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 800311c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003120:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003122:	f7fd fe1d 	bl	8000d60 <HAL_GetTick>
 8003126:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7fd fe19 	bl	8000d60 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e019      	b.n	8003170 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 800314a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314e:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 8003158:	f04f 32ff 	mov.w	r2, #4294967295
 800315c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 8003160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <HAL_RCC_DeInit+0xf4>)
 8003166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800316a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	20000000 	.word	0x20000000
 8003180:	00f42400 	.word	0x00f42400
 8003184:	20000004 	.word	0x20000004

08003188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e306      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d075      	beq.n	8003292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a6:	4b97      	ldr	r3, [pc, #604]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b0:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d102      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3e>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_OscConfig+0x44>
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05b      	beq.n	8003290 <HAL_RCC_OscConfig+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d157      	bne.n	8003290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e2e1      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x74>
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a84      	ldr	r2, [pc, #528]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7b      	ldr	r2, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 8003220:	4b78      	ldr	r3, [pc, #480]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a77      	ldr	r2, [pc, #476]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b75      	ldr	r3, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a74      	ldr	r2, [pc, #464]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd fd8e 	bl	8000d60 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fd fd8a 	bl	8000d60 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e2a6      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325a:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xc0>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fd fd7a 	bl	8000d60 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fd fd76 	bl	8000d60 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e292      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003282:	4b60      	ldr	r3, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0xe8>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d075      	beq.n	800338a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329e:	4b59      	ldr	r3, [pc, #356]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a8:	4b56      	ldr	r3, [pc, #344]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	d102      	bne.n	80032be <HAL_RCC_OscConfig+0x136>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_OscConfig+0x13c>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11f      	bne.n	8003304 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_OscConfig+0x154>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e265      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	4946      	ldr	r1, [pc, #280]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032f0:	4b45      	ldr	r3, [pc, #276]	; (8003408 <HAL_RCC_OscConfig+0x280>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fce7 	bl	8000cc8 <HAL_InitTick>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d043      	beq.n	8003388 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e251      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a3c      	ldr	r2, [pc, #240]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd fd22 	bl	8000d60 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7fd fd1e 	bl	8000d60 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e23a      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	061b      	lsls	r3, r3, #24
 800334c:	492d      	ldr	r1, [pc, #180]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
 8003352:	e01a      	b.n	800338a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 800335a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fcfe 	bl	8000d60 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003368:	f7fd fcfa 	bl	8000d60 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e216      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1e0>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d041      	beq.n	800341a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7fd fcd7 	bl	8000d60 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fd fcd3 	bl	8000d60 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1ef      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ef      	beq.n	80033b6 <HAL_RCC_OscConfig+0x22e>
 80033d6:	e020      	b.n	800341a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd fcba 	bl	8000d60 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ee:	e00d      	b.n	800340c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fd fcb6 	bl	8000d60 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d906      	bls.n	800340c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1d2      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340c:	4b8c      	ldr	r3, [pc, #560]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ea      	bne.n	80033f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80a6 	beq.w	8003574 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800342c:	4b84      	ldr	r3, [pc, #528]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x2b4>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x2b6>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a7e      	ldr	r2, [pc, #504]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
 800344e:	4b7c      	ldr	r3, [pc, #496]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345e:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_RCC_OscConfig+0x4bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800346a:	4b76      	ldr	r3, [pc, #472]	; (8003644 <HAL_RCC_OscConfig+0x4bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x4bc>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fd fc73 	bl	8000d60 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fd fc6f 	bl	8000d60 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e18b      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003490:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <HAL_RCC_OscConfig+0x4bc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d108      	bne.n	80034b6 <HAL_RCC_OscConfig+0x32e>
 80034a4:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b4:	e024      	b.n	8003500 <HAL_RCC_OscConfig+0x378>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d110      	bne.n	80034e0 <HAL_RCC_OscConfig+0x358>
 80034be:	4b60      	ldr	r3, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	4a5e      	ldr	r2, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034de:	e00f      	b.n	8003500 <HAL_RCC_OscConfig+0x378>
 80034e0:	4b57      	ldr	r3, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	4a56      	ldr	r2, [pc, #344]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f0:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	4a52      	ldr	r2, [pc, #328]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d016      	beq.n	8003536 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fd fc2a 	bl	8000d60 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fd fc26 	bl	8000d60 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e140      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003526:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ed      	beq.n	8003510 <HAL_RCC_OscConfig+0x388>
 8003534:	e015      	b.n	8003562 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd fc13 	bl	8000d60 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd fc0f 	bl	8000d60 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e129      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003554:	4b3a      	ldr	r3, [pc, #232]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ed      	bne.n	800353e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b35      	ldr	r3, [pc, #212]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	4a34      	ldr	r2, [pc, #208]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003572:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d03c      	beq.n	80035fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 800358a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800358e:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fd fbe2 	bl	8000d60 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a0:	f7fd fbde 	bl	8000d60 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0fa      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035b2:	4b23      	ldr	r3, [pc, #140]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80035b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ef      	beq.n	80035a0 <HAL_RCC_OscConfig+0x418>
 80035c0:	e01b      	b.n	80035fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035c2:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fd fbc5 	bl	8000d60 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035da:	f7fd fbc1 	bl	8000d60 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0dd      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ef      	bne.n	80035da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80d1 	beq.w	80037a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b0c      	cmp	r3, #12
 800360e:	f000 808b 	beq.w	8003728 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d15e      	bne.n	80036d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd fb9b 	bl	8000d60 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362c:	e00c      	b.n	8003648 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fd fb97 	bl	8000d60 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d905      	bls.n	8003648 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0b3      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
 8003640:	40021000 	.word	0x40021000
 8003644:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ec      	bne.n	800362e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	4b56      	ldr	r3, [pc, #344]	; (80037b4 <HAL_RCC_OscConfig+0x62c>)
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6a11      	ldr	r1, [r2, #32]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003664:	3a01      	subs	r2, #1
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800366e:	0212      	lsls	r2, r2, #8
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0552      	lsls	r2, r2, #21
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003682:	0852      	lsrs	r2, r2, #1
 8003684:	3a01      	subs	r2, #1
 8003686:	0652      	lsls	r2, r2, #25
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800368e:	06d2      	lsls	r2, r2, #27
 8003690:	430a      	orrs	r2, r1
 8003692:	4947      	ldr	r1, [pc, #284]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 8003694:	4313      	orrs	r3, r2
 8003696:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003698:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a44      	ldr	r2, [pc, #272]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a4:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd fb56 	bl	8000d60 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fb52 	bl	8000d60 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e06e      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x530>
 80036d6:	e066      	b.n	80037a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a31      	ldr	r2, [pc, #196]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 80036f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd fb2e 	bl	8000d60 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd fb2a 	bl	8000d60 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e046      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x580>
 8003726:	e03e      	b.n	80037a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e039      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCC_OscConfig+0x628>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0203 	and.w	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	429a      	cmp	r2, r3
 8003746:	d12c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	3b01      	subs	r3, #1
 8003754:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d123      	bne.n	80037a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11b      	bne.n	80037a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d113      	bne.n	80037a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	3b01      	subs	r3, #1
 8003788:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	3b01      	subs	r3, #1
 800379c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	019f800c 	.word	0x019f800c

080037b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e11e      	b.n	8003a0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b91      	ldr	r3, [pc, #580]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 020f 	bic.w	r2, r3, #15
 80037e6:	498c      	ldr	r1, [pc, #560]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b8a      	ldr	r3, [pc, #552]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e106      	b.n	8003a0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d073      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d129      	bne.n	8003868 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003814:	4b81      	ldr	r3, [pc, #516]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0f4      	b.n	8003a0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003824:	f000 f966 	bl	8003af4 <RCC_GetSysClockFreqFromPLLSource>
 8003828:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4a7c      	ldr	r2, [pc, #496]	; (8003a20 <HAL_RCC_ClockConfig+0x268>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d93f      	bls.n	80038b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003832:	4b7a      	ldr	r3, [pc, #488]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003846:	2b00      	cmp	r3, #0
 8003848:	d033      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800384e:	2b00      	cmp	r3, #0
 8003850:	d12f      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003852:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800385a:	4a70      	ldr	r2, [pc, #448]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 800385c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003860:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e024      	b.n	80038b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d107      	bne.n	8003880 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003870:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0c6      	b.n	8003a0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003880:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0be      	b.n	8003a0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003890:	f000 f8ce 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8003894:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4a61      	ldr	r2, [pc, #388]	; (8003a20 <HAL_RCC_ClockConfig+0x268>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d909      	bls.n	80038b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800389e:	4b5f      	ldr	r3, [pc, #380]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a6:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b5a      	ldr	r3, [pc, #360]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4957      	ldr	r1, [pc, #348]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fd fa4c 	bl	8000d60 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd fa48 	bl	8000d60 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e095      	b.n	8003a0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b4e      	ldr	r3, [pc, #312]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d023      	beq.n	8003948 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800390c:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a42      	ldr	r2, [pc, #264]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003916:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003924:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800392c:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 800392e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4936      	ldr	r1, [pc, #216]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
 8003946:	e008      	b.n	800395a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d105      	bne.n	800395a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800394e:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4a32      	ldr	r2, [pc, #200]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 8003954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003958:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d21d      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 020f 	bic.w	r2, r3, #15
 8003970:	4929      	ldr	r1, [pc, #164]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003978:	f7fd f9f2 	bl	8000d60 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fd f9ee 	bl	8000d60 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e03b      	b.n	8003a0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCC_ClockConfig+0x260>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1ed      	bne.n	8003980 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4917      	ldr	r1, [pc, #92]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490f      	ldr	r1, [pc, #60]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e2:	f000 f825 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_RCC_ClockConfig+0x264>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490c      	ldr	r1, [pc, #48]	; (8003a24 <HAL_RCC_ClockConfig+0x26c>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x270>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f95e 	bl	8000cc8 <HAL_InitTick>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	04c4b400 	.word	0x04c4b400
 8003a24:	0800987c 	.word	0x0800987c
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a36:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d102      	bne.n	8003a48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	e047      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	e03e      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d136      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8e:	68d2      	ldr	r2, [r2, #12]
 8003a90:	0a12      	lsrs	r2, r2, #8
 8003a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	617b      	str	r3, [r7, #20]
      break;
 8003a9c:	e00c      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9e:	4a13      	ldr	r2, [pc, #76]	; (8003aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	4a10      	ldr	r2, [pc, #64]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	0a12      	lsrs	r2, r2, #8
 8003aac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
      break;
 8003ab6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	0e5b      	lsrs	r3, r3, #25
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e001      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ad8:	693b      	ldr	r3, [r7, #16]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b04:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d10c      	bne.n	8003b32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b22:	68d2      	ldr	r2, [r2, #12]
 8003b24:	0a12      	lsrs	r2, r2, #8
 8003b26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	617b      	str	r3, [r7, #20]
    break;
 8003b30:	e00c      	b.n	8003b4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	0a12      	lsrs	r2, r2, #8
 8003b40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b44:	fb02 f303 	mul.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
    break;
 8003b4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	0e5b      	lsrs	r3, r3, #25
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	3301      	adds	r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b66:	687b      	ldr	r3, [r7, #4]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40021000 	.word	0x40021000
 8003b78:	007a1200 	.word	0x007a1200
 8003b7c:	00f42400 	.word	0x00f42400

08003b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b88:	2300      	movs	r3, #0
 8003b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8098 	beq.w	8003cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10d      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	4b40      	ldr	r3, [pc, #256]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	4a3f      	ldr	r2, [pc, #252]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bca:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a39      	ldr	r2, [pc, #228]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd6:	f7fd f8c3 	bl	8000d60 <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bdc:	e009      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fd f8bf 	bl	8000d60 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d902      	bls.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	74fb      	strb	r3, [r7, #19]
        break;
 8003bf0:	e005      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ef      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d159      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01e      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d019      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd f87f 	bl	8000d60 <HAL_GetTick>
 8003c62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c64:	e00b      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fd f87b 	bl	8000d60 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d902      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ec      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	74bb      	strb	r3, [r7, #18]
 8003cae:	e005      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbc:	7c7b      	ldrb	r3, [r7, #17]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc2:	4ba7      	ldr	r3, [pc, #668]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	4aa6      	ldr	r2, [pc, #664]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cda:	4ba1      	ldr	r3, [pc, #644]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f023 0203 	bic.w	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	499d      	ldr	r1, [pc, #628]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cfc:	4b98      	ldr	r3, [pc, #608]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 020c 	bic.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	4995      	ldr	r1, [pc, #596]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d1e:	4b90      	ldr	r3, [pc, #576]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	498c      	ldr	r1, [pc, #560]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d40:	4b87      	ldr	r3, [pc, #540]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	4984      	ldr	r1, [pc, #528]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d62:	4b7f      	ldr	r3, [pc, #508]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	497b      	ldr	r1, [pc, #492]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d84:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	4973      	ldr	r1, [pc, #460]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da6:	4b6e      	ldr	r3, [pc, #440]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	496a      	ldr	r1, [pc, #424]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dc8:	4b65      	ldr	r3, [pc, #404]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4962      	ldr	r1, [pc, #392]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dea:	4b5d      	ldr	r3, [pc, #372]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	4959      	ldr	r1, [pc, #356]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e0c:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	4951      	ldr	r1, [pc, #324]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4948      	ldr	r1, [pc, #288]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e50:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4940      	ldr	r1, [pc, #256]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a3a      	ldr	r2, [pc, #232]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	4932      	ldr	r1, [pc, #200]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ec0:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4924      	ldr	r1, [pc, #144]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a1e      	ldr	r2, [pc, #120]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d015      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	4916      	ldr	r1, [pc, #88]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4a10      	ldr	r2, [pc, #64]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d019      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4908      	ldr	r1, [pc, #32]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a02      	ldr	r2, [pc, #8]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5a:	60d3      	str	r3, [r2, #12]
 8003f5c:	e002      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d015      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f70:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	4926      	ldr	r1, [pc, #152]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d015      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb6:	4918      	ldr	r1, [pc, #96]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a12      	ldr	r2, [pc, #72]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	490a      	ldr	r1, [pc, #40]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800400a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800400c:	7cbb      	ldrb	r3, [r7, #18]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000

0800401c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e09d      	b.n	800416a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403e:	d009      	beq.n	8004054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	61da      	str	r2, [r3, #28]
 8004046:	e005      	b.n	8004054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fd60 	bl	8000b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004094:	d902      	bls.n	800409c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e002      	b.n	80040a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800409c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040aa:	d007      	beq.n	80040bc <HAL_SPI_Init+0xa0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b4:	d002      	beq.n	80040bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	ea42 0103 	orr.w	r1, r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	f003 0204 	and.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004138:	ea42 0103 	orr.w	r1, r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004158:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b088      	sub	sp, #32
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_SPI_Transmit+0x22>
 8004190:	2302      	movs	r3, #2
 8004192:	e158      	b.n	8004446 <HAL_SPI_Transmit+0x2d4>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800419c:	f7fc fde0 	bl	8000d60 <HAL_GetTick>
 80041a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d002      	beq.n	80041b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
 80041b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041b6:	e13d      	b.n	8004434 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Transmit+0x52>
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041c8:	e134      	b.n	8004434 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2203      	movs	r2, #3
 80041ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004214:	d10f      	bne.n	8004236 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004234:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d007      	beq.n	8004254 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800425c:	d94b      	bls.n	80042f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_SPI_Transmit+0xfa>
 8004266:	8afb      	ldrh	r3, [r7, #22]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d13e      	bne.n	80042ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	881a      	ldrh	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004290:	e02b      	b.n	80042ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d112      	bne.n	80042c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042c4:	e011      	b.n	80042ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c6:	f7fc fd4b 	bl	8000d60 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d803      	bhi.n	80042de <HAL_SPI_Transmit+0x16c>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Transmit+0x172>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042e8:	e0a4      	b.n	8004434 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ce      	bne.n	8004292 <HAL_SPI_Transmit+0x120>
 80042f4:	e07c      	b.n	80043f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_SPI_Transmit+0x192>
 80042fe:	8afb      	ldrh	r3, [r7, #22]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d170      	bne.n	80043e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d912      	bls.n	8004334 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	1c9a      	adds	r2, r3, #2
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b02      	subs	r3, #2
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004332:	e058      	b.n	80043e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	7812      	ldrb	r2, [r2, #0]
 8004340:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800435a:	e044      	b.n	80043e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d12b      	bne.n	80043c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d912      	bls.n	800439a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	1c9a      	adds	r2, r3, #2
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b02      	subs	r3, #2
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004398:	e025      	b.n	80043e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c0:	e011      	b.n	80043e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c2:	f7fc fccd 	bl	8000d60 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d803      	bhi.n	80043da <HAL_SPI_Transmit+0x268>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d102      	bne.n	80043e0 <HAL_SPI_Transmit+0x26e>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e4:	e026      	b.n	8004434 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1b5      	bne.n	800435c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fce3 	bl	8004dc0 <SPI_EndRxTxTransaction>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e000      	b.n	8004434 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004432:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004444:	7ffb      	ldrb	r3, [r7, #31]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b088      	sub	sp, #32
 8004452:	af02      	add	r7, sp, #8
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446a:	d112      	bne.n	8004492 <HAL_SPI_Receive+0x44>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10e      	bne.n	8004492 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2204      	movs	r2, #4
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f910 	bl	80046ae <HAL_SPI_TransmitReceive>
 800448e:	4603      	mov	r3, r0
 8004490:	e109      	b.n	80046a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_SPI_Receive+0x52>
 800449c:	2302      	movs	r3, #2
 800449e:	e102      	b.n	80046a6 <HAL_SPI_Receive+0x258>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a8:	f7fc fc5a 	bl	8000d60 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d002      	beq.n	80044c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
 80044bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044be:	e0e9      	b.n	8004694 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Receive+0x7e>
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044d0:	e0e0      	b.n	8004694 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2204      	movs	r2, #4
 80044d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800451c:	d908      	bls.n	8004530 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	e007      	b.n	8004540 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800453e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004548:	d10f      	bne.n	800456a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d007      	beq.n	8004588 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004586:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004590:	d867      	bhi.n	8004662 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004592:	e030      	b.n	80045f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d117      	bne.n	80045d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f103 020c 	add.w	r2, r3, #12
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	7812      	ldrb	r2, [r2, #0]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80045d0:	e011      	b.n	80045f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d2:	f7fc fbc5 	bl	8000d60 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d803      	bhi.n	80045ea <HAL_SPI_Receive+0x19c>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d102      	bne.n	80045f0 <HAL_SPI_Receive+0x1a2>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045f4:	e04e      	b.n	8004694 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1c8      	bne.n	8004594 <HAL_SPI_Receive+0x146>
 8004602:	e034      	b.n	800466e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d115      	bne.n	800463e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	b292      	uxth	r2, r2
 800461e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800463c:	e011      	b.n	8004662 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463e:	f7fc fb8f 	bl	8000d60 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d803      	bhi.n	8004656 <HAL_SPI_Receive+0x208>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d102      	bne.n	800465c <HAL_SPI_Receive+0x20e>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004660:	e018      	b.n	8004694 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ca      	bne.n	8004604 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fb4c 	bl	8004d10 <SPI_EndRxTransaction>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	75fb      	strb	r3, [r7, #23]
 8004690:	e000      	b.n	8004694 <HAL_SPI_Receive+0x246>
  }

error :
 8004692:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b08a      	sub	sp, #40	; 0x28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046bc:	2301      	movs	r3, #1
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x26>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e1fb      	b.n	8004acc <HAL_SPI_TransmitReceive+0x41e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046dc:	f7fc fb40 	bl	8000d60 <HAL_GetTick>
 80046e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80046f4:	887b      	ldrh	r3, [r7, #2]
 80046f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046f8:	7efb      	ldrb	r3, [r7, #27]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d00e      	beq.n	800471c <HAL_SPI_TransmitReceive+0x6e>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004704:	d106      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x66>
 800470e:	7efb      	ldrb	r3, [r7, #27]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d003      	beq.n	800471c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800471a:	e1cd      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_SPI_TransmitReceive+0x80>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_SPI_TransmitReceive+0x80>
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004734:	e1c0      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b04      	cmp	r3, #4
 8004740:	d003      	beq.n	800474a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2205      	movs	r2, #5
 8004746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	887a      	ldrh	r2, [r7, #2]
 800475a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	887a      	ldrh	r2, [r7, #2]
 8004762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	887a      	ldrh	r2, [r7, #2]
 8004770:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	887a      	ldrh	r2, [r7, #2]
 8004776:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800478c:	d802      	bhi.n	8004794 <HAL_SPI_TransmitReceive+0xe6>
 800478e:	8a3b      	ldrh	r3, [r7, #16]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d908      	bls.n	80047a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	e007      	b.n	80047b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d007      	beq.n	80047d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047dc:	d97c      	bls.n	80048d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x13e>
 80047e6:	8a7b      	ldrh	r3, [r7, #18]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d169      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	881a      	ldrh	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	e056      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b02      	cmp	r3, #2
 800481e:	d11b      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x1aa>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x1aa>
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	2b01      	cmp	r3, #1
 800482e:	d113      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	881a      	ldrh	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	1c9a      	adds	r2, r3, #2
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d11c      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x1f2>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	b292      	uxth	r2, r2
 800487e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800489c:	2301      	movs	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048a0:	f7fc fa5e 	bl	8000d60 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d807      	bhi.n	80048c0 <HAL_SPI_TransmitReceive+0x212>
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d003      	beq.n	80048c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048be:	e0fb      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1a3      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x164>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d19d      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x164>
 80048d6:	e0df      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x23a>
 80048e0:	8a7b      	ldrh	r3, [r7, #18]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	f040 80cb 	bne.w	8004a7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d912      	bls.n	8004918 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	881a      	ldrh	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	1c9a      	adds	r2, r3, #2
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b02      	subs	r3, #2
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004916:	e0b2      	b.n	8004a7e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	7812      	ldrb	r2, [r2, #0]
 8004924:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800493e:	e09e      	b.n	8004a7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d134      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x30a>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02f      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x30a>
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2b01      	cmp	r3, #1
 800495c:	d12c      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d912      	bls.n	800498e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b02      	subs	r3, #2
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800498c:	e012      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	7812      	ldrb	r2, [r2, #0]
 800499a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d148      	bne.n	8004a58 <HAL_SPI_TransmitReceive+0x3aa>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d042      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d923      	bls.n	8004a26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	b292      	uxth	r2, r2
 80049ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b02      	subs	r3, #2
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d81f      	bhi.n	8004a54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	e016      	b.n	8004a54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f103 020c 	add.w	r2, r3, #12
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a54:	2301      	movs	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a58:	f7fc f982 	bl	8000d60 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d803      	bhi.n	8004a70 <HAL_SPI_TransmitReceive+0x3c2>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x3c8>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a7c:	e01c      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f af5b 	bne.w	8004940 <HAL_SPI_TransmitReceive+0x292>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f47f af54 	bne.w	8004940 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f98f 	bl	8004dc0 <SPI_EndRxTxTransaction>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
 8004ab4:	e000      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004ab6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3728      	adds	r7, #40	; 0x28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ae4:	f7fc f93c 	bl	8000d60 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004af4:	f7fc f934 	bl	8000d60 <HAL_GetTick>
 8004af8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004afa:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	015b      	lsls	r3, r3, #5
 8004b00:	0d1b      	lsrs	r3, r3, #20
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	fb02 f303 	mul.w	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b0a:	e054      	b.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d050      	beq.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b14:	f7fc f924 	bl	8000d60 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d902      	bls.n	8004b2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d13d      	bne.n	8004ba6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b42:	d111      	bne.n	8004b68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4c:	d004      	beq.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d107      	bne.n	8004b68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b70:	d10f      	bne.n	8004b92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e017      	b.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d19b      	bne.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000000 	.word	0x20000000

08004be4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004bf6:	f7fc f8b3 	bl	8000d60 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c06:	f7fc f8ab 	bl	8000d60 <HAL_GetTick>
 8004c0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c14:	4b3d      	ldr	r3, [pc, #244]	; (8004d0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00da      	lsls	r2, r3, #3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	0d1b      	lsrs	r3, r3, #20
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c2c:	e060      	b.n	8004cf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c34:	d107      	bne.n	8004c46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d050      	beq.n	8004cf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c4e:	f7fc f887 	bl	8000d60 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d902      	bls.n	8004c64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d13d      	bne.n	8004ce0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7c:	d111      	bne.n	8004ca2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c86:	d004      	beq.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d107      	bne.n	8004ca2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004caa:	d10f      	bne.n	8004ccc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e010      	b.n	8004d02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d196      	bne.n	8004c2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3728      	adds	r7, #40	; 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000000 	.word	0x20000000

08004d10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d24:	d111      	bne.n	8004d4a <SPI_EndRxTransaction+0x3a>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2e:	d004      	beq.n	8004d3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d38:	d107      	bne.n	8004d4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d48:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff febd 	bl	8004ad4 <SPI_WaitFlagStateUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e023      	b.n	8004db8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d78:	d11d      	bne.n	8004db6 <SPI_EndRxTransaction+0xa6>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d82:	d004      	beq.n	8004d8e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d113      	bne.n	8004db6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ff22 	bl	8004be4 <SPI_WaitFifoStateUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e000      	b.n	8004db8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff ff03 	bl	8004be4 <SPI_WaitFifoStateUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e027      	b.n	8004e44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff fe68 	bl	8004ad4 <SPI_WaitFlagStateUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e014      	b.n	8004e44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff fedc 	bl	8004be4 <SPI_WaitFifoStateUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e000      	b.n	8004e44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e5c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e82:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4013      	ands	r3, r2
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	f107 0014 	add.w	r0, r7, #20
 8004ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	b004      	add	sp, #16
 8004ef0:	4770      	bx	lr
	...

08004ef4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b09d      	sub	sp, #116	; 0x74
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d81f      	bhi.n	8004f66 <USB_ActivateEndpoint+0x72>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <USB_ActivateEndpoint+0x38>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f6f 	.word	0x08004f6f
 8004f38:	08004f4b 	.word	0x08004f4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f48:	e012      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004f52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f56:	e00b      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f64:	e004      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004f6c:	e000      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>
      break;
 8004f6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	b21b      	sxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	b21a      	sxth	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b21b      	sxth	r3, r3
 8004fb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	7b1b      	ldrb	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 8149 	bne.w	8005278 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8084 	beq.w	80050f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4413      	add	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	00da      	lsls	r2, r3, #3
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	88db      	ldrh	r3, [r3, #6]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	b29b      	uxth	r3, r3
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	827b      	strh	r3, [r7, #18]
 8005032:	8a7b      	ldrh	r3, [r7, #18]
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01b      	beq.n	8005074 <USB_ActivateEndpoint+0x180>
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	823b      	strh	r3, [r7, #16]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8a3b      	ldrh	r3, [r7, #16]
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	78db      	ldrb	r3, [r3, #3]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d020      	beq.n	80050be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005092:	81bb      	strh	r3, [r7, #12]
 8005094:	89bb      	ldrh	r3, [r7, #12]
 8005096:	f083 0320 	eor.w	r3, r3, #32
 800509a:	81bb      	strh	r3, [r7, #12]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	89bb      	ldrh	r3, [r7, #12]
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
 80050bc:	e2a6      	b.n	800560c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d4:	81fb      	strh	r3, [r7, #14]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]
 80050f6:	e289      	b.n	800560c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	633b      	str	r3, [r7, #48]	; 0x30
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005102:	b29b      	uxth	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	4413      	add	r3, r2
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	00da      	lsls	r2, r3, #3
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	4413      	add	r3, r2
 8005116:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	88db      	ldrh	r3, [r3, #6]
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	b29b      	uxth	r3, r3
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	4413      	add	r3, r2
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	00da      	lsls	r2, r3, #3
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	4413      	add	r3, r2
 800514a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b3e      	cmp	r3, #62	; 0x3e
 8005156:	d918      	bls.n	800518a <USB_ActivateEndpoint+0x296>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <USB_ActivateEndpoint+0x27e>
 800516c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800516e:	3b01      	subs	r3, #1
 8005170:	66bb      	str	r3, [r7, #104]	; 0x68
 8005172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005174:	b29b      	uxth	r3, r3
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	b29b      	uxth	r3, r3
 800517a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005182:	b29a      	uxth	r2, r3
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	801a      	strh	r2, [r3, #0]
 8005188:	e029      	b.n	80051de <USB_ActivateEndpoint+0x2ea>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d112      	bne.n	80051b8 <USB_ActivateEndpoint+0x2c4>
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800519c:	b29a      	uxth	r2, r3
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e012      	b.n	80051de <USB_ActivateEndpoint+0x2ea>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <USB_ActivateEndpoint+0x2de>
 80051cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ce:	3301      	adds	r3, #1
 80051d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80051ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01b      	beq.n	800522e <USB_ActivateEndpoint+0x33a>
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	843b      	strh	r3, [r7, #32]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	8c3b      	ldrh	r3, [r7, #32]
 800521a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005244:	83fb      	strh	r3, [r7, #30]
 8005246:	8bfb      	ldrh	r3, [r7, #30]
 8005248:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800524c:	83fb      	strh	r3, [r7, #30]
 800524e:	8bfb      	ldrh	r3, [r7, #30]
 8005250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005254:	83fb      	strh	r3, [r7, #30]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	441a      	add	r2, r3
 8005260:	8bfb      	ldrh	r3, [r7, #30]
 8005262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800526e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005272:	b29b      	uxth	r3, r3
 8005274:	8013      	strh	r3, [r2, #0]
 8005276:	e1c9      	b.n	800560c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	78db      	ldrb	r3, [r3, #3]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d11e      	bne.n	80052be <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]
 80052bc:	e01d      	b.n	80052fa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005304:	b29b      	uxth	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800530a:	4413      	add	r3, r2
 800530c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	00da      	lsls	r2, r3, #3
 8005314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005316:	4413      	add	r3, r2
 8005318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800531c:	65bb      	str	r3, [r7, #88]	; 0x58
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	891b      	ldrh	r3, [r3, #8]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	657b      	str	r3, [r7, #84]	; 0x54
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005338:	b29b      	uxth	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800533e:	4413      	add	r3, r2
 8005340:	657b      	str	r3, [r7, #84]	; 0x54
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	00da      	lsls	r2, r3, #3
 8005348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534a:	4413      	add	r3, r2
 800534c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005350:	653b      	str	r3, [r7, #80]	; 0x50
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	895b      	ldrh	r3, [r3, #10]
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	b29b      	uxth	r3, r3
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005360:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 8093 	bne.w	8005492 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800537c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01b      	beq.n	80053c0 <USB_ActivateEndpoint+0x4cc>
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80053ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01b      	beq.n	8005410 <USB_ActivateEndpoint+0x51c>
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800540c:	b29b      	uxth	r3, r3
 800540e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	873b      	strh	r3, [r7, #56]	; 0x38
 8005428:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800542a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800542e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005430:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005432:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005436:	873b      	strh	r3, [r7, #56]	; 0x38
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800547c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548c:	b29b      	uxth	r3, r3
 800548e:	8013      	strh	r3, [r2, #0]
 8005490:	e0bc      	b.n	800560c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80054a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01d      	beq.n	80054ea <USB_ActivateEndpoint+0x5f6>
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80054fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01d      	beq.n	8005542 <USB_ActivateEndpoint+0x64e>
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	78db      	ldrb	r3, [r3, #3]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d024      	beq.n	8005594 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005560:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005564:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005568:	f083 0320 	eor.w	r3, r3, #32
 800556c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800557e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558e:	b29b      	uxth	r3, r3
 8005590:	8013      	strh	r3, [r2, #0]
 8005592:	e01d      	b.n	80055d0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	441a      	add	r2, r3
 80055b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80055f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005608:	b29b      	uxth	r3, r3
 800560a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800560c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005610:	4618      	mov	r0, r3
 8005612:	3774      	adds	r7, #116	; 0x74
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800561c:	b480      	push	{r7}
 800561e:	b08d      	sub	sp, #52	; 0x34
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	7b1b      	ldrb	r3, [r3, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 808e 	bne.w	800574c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d044      	beq.n	80056c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	81bb      	strh	r3, [r7, #12]
 8005646:	89bb      	ldrh	r3, [r7, #12]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <USB_DeactivateEndpoint+0x6c>
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	817b      	strh	r3, [r7, #10]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	441a      	add	r2, r3
 8005672:	897b      	ldrh	r3, [r7, #10]
 8005674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005684:	b29b      	uxth	r3, r3
 8005686:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569e:	813b      	strh	r3, [r7, #8]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	893b      	ldrh	r3, [r7, #8]
 80056ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8013      	strh	r3, [r2, #0]
 80056c0:	e192      	b.n	80059e8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	827b      	strh	r3, [r7, #18]
 80056d0:	8a7b      	ldrh	r3, [r7, #18]
 80056d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01b      	beq.n	8005712 <USB_DeactivateEndpoint+0xf6>
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f0:	823b      	strh	r3, [r7, #16]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	441a      	add	r2, r3
 80056fc:	8a3b      	ldrh	r3, [r7, #16]
 80056fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800570a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570e:	b29b      	uxth	r3, r3
 8005710:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	81fb      	strh	r3, [r7, #14]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	89fb      	ldrh	r3, [r7, #14]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
 800574a:	e14d      	b.n	80059e8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 80a5 	bne.w	80058a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	843b      	strh	r3, [r7, #32]
 8005764:	8c3b      	ldrh	r3, [r7, #32]
 8005766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01b      	beq.n	80057a6 <USB_DeactivateEndpoint+0x18a>
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005784:	83fb      	strh	r3, [r7, #30]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	441a      	add	r2, r3
 8005790:	8bfb      	ldrh	r3, [r7, #30]
 8005792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800579e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	83bb      	strh	r3, [r7, #28]
 80057b4:	8bbb      	ldrh	r3, [r7, #28]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01b      	beq.n	80057f6 <USB_DeactivateEndpoint+0x1da>
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d4:	837b      	strh	r3, [r7, #26]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	441a      	add	r2, r3
 80057e0:	8b7b      	ldrh	r3, [r7, #26]
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580c:	833b      	strh	r3, [r7, #24]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	8b3b      	ldrh	r3, [r7, #24]
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	82fb      	strh	r3, [r7, #22]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	8afb      	ldrh	r3, [r7, #22]
 8005852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005862:	b29b      	uxth	r3, r3
 8005864:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587c:	82bb      	strh	r3, [r7, #20]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	8abb      	ldrh	r3, [r7, #20]
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]
 800589e:	e0a3      	b.n	80059e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80058ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01b      	beq.n	80058f0 <USB_DeactivateEndpoint+0x2d4>
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80058dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80058fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01b      	beq.n	8005940 <USB_DeactivateEndpoint+0x324>
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005938:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800598e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800599c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	441a      	add	r2, r3
 80059d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3734      	adds	r7, #52	; 0x34
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b0c2      	sub	sp, #264	; 0x108
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a04:	6018      	str	r0, [r3, #0]
 8005a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	f040 867b 	bne.w	8006718 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d908      	bls.n	8005a50 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a4e:	e007      	b.n	8005a60 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	7b1b      	ldrb	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d13a      	bne.n	8005ae6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6959      	ldr	r1, [r3, #20]
 8005a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	88da      	ldrh	r2, [r3, #6]
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	f001 fc1d 	bl	80072d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4413      	add	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	00da      	lsls	r2, r3, #3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	f000 bde3 	b.w	80066ac <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	f040 843a 	bne.w	800636c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a1a      	ldr	r2, [r3, #32]
 8005b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	f240 83b7 	bls.w	8006284 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	441a      	add	r2, r3
 8005b5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a1a      	ldr	r2, [r3, #32]
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 81b3 	beq.w	8005f1e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d16d      	bne.n	8005cb0 <USB_EPStartXfer+0x2ba>
 8005bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	4413      	add	r3, r2
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	00da      	lsls	r2, r3, #3
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c14:	2b3e      	cmp	r3, #62	; 0x3e
 8005c16:	d91c      	bls.n	8005c52 <USB_EPStartXfer+0x25c>
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <USB_EPStartXfer+0x242>
 8005c2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c32:	3b01      	subs	r3, #1
 8005c34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e053      	b.n	8005cfa <USB_EPStartXfer+0x304>
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d112      	bne.n	8005c80 <USB_EPStartXfer+0x28a>
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	e03c      	b.n	8005cfa <USB_EPStartXfer+0x304>
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <USB_EPStartXfer+0x2aa>
 8005c96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ca0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	029b      	lsls	r3, r3, #10
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e024      	b.n	8005cfa <USB_EPStartXfer+0x304>
 8005cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d11c      	bne.n	8005cfa <USB_EPStartXfer+0x304>
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	4413      	add	r3, r2
 8005cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	00da      	lsls	r2, r3, #3
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	895b      	ldrh	r3, [r3, #10]
 8005d06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6959      	ldr	r1, [r3, #20]
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d28:	6800      	ldr	r0, [r0, #0]
 8005d2a:	f001 fad4 	bl	80072d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3e:	441a      	add	r2, r3
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a1a      	ldr	r2, [r3, #32]
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d90f      	bls.n	8005d88 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d78:	1ad2      	subs	r2, r2, r3
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	621a      	str	r2, [r3, #32]
 8005d86:	e00e      	b.n	8005da6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d16d      	bne.n	8005e92 <USB_EPStartXfer+0x49c>
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	00da      	lsls	r2, r3, #3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	2b3e      	cmp	r3, #62	; 0x3e
 8005df8:	d91c      	bls.n	8005e34 <USB_EPStartXfer+0x43e>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <USB_EPStartXfer+0x424>
 8005e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e14:	3b01      	subs	r3, #1
 8005e16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e059      	b.n	8005ee8 <USB_EPStartXfer+0x4f2>
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d112      	bne.n	8005e62 <USB_EPStartXfer+0x46c>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	e042      	b.n	8005ee8 <USB_EPStartXfer+0x4f2>
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <USB_EPStartXfer+0x48c>
 8005e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e02a      	b.n	8005ee8 <USB_EPStartXfer+0x4f2>
 8005e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d122      	bne.n	8005ee8 <USB_EPStartXfer+0x4f2>
 8005ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	623b      	str	r3, [r7, #32]
 8005eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	623b      	str	r3, [r7, #32]
 8005ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	00da      	lsls	r2, r3, #3
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	891b      	ldrh	r3, [r3, #8]
 8005ef4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6959      	ldr	r1, [r3, #20]
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f16:	6800      	ldr	r0, [r0, #0]
 8005f18:	f001 f9dd 	bl	80072d6 <USB_WritePMA>
 8005f1c:	e3c6      	b.n	80066ac <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d16d      	bne.n	800600a <USB_EPStartXfer+0x614>
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4e:	4413      	add	r3, r2
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	00da      	lsls	r2, r3, #3
 8005f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f62:	4413      	add	r3, r2
 8005f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f68:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f70:	d91c      	bls.n	8005fac <USB_EPStartXfer+0x5b6>
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <USB_EPStartXfer+0x59c>
 8005f88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa8:	801a      	strh	r2, [r3, #0]
 8005faa:	e059      	b.n	8006060 <USB_EPStartXfer+0x66a>
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d112      	bne.n	8005fda <USB_EPStartXfer+0x5e4>
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	e042      	b.n	8006060 <USB_EPStartXfer+0x66a>
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <USB_EPStartXfer+0x604>
 8005ff0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	029b      	lsls	r3, r3, #10
 8006002:	b29a      	uxth	r2, r3
 8006004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e02a      	b.n	8006060 <USB_EPStartXfer+0x66a>
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d122      	bne.n	8006060 <USB_EPStartXfer+0x66a>
 800601a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	653b      	str	r3, [r7, #80]	; 0x50
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006034:	b29b      	uxth	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603a:	4413      	add	r3, r2
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
 800603e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	00da      	lsls	r2, r3, #3
 800604c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604e:	4413      	add	r3, r2
 8006050:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605a:	b29a      	uxth	r2, r3
 800605c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	891b      	ldrh	r3, [r3, #8]
 800606c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6959      	ldr	r1, [r3, #20]
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	b29b      	uxth	r3, r3
 8006082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006086:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800608a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800608e:	6800      	ldr	r0, [r0, #0]
 8006090:	f001 f921 	bl	80072d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a4:	441a      	add	r2, r3
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d90f      	bls.n	80060ee <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80060ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	621a      	str	r2, [r3, #32]
 80060ec:	e00e      	b.n	800610c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2200      	movs	r2, #0
 800610a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800610c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	643b      	str	r3, [r7, #64]	; 0x40
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d16d      	bne.n	8006204 <USB_EPStartXfer+0x80e>
 8006128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	4413      	add	r3, r2
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	00da      	lsls	r2, r3, #3
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	4413      	add	r3, r2
 800615e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	2b3e      	cmp	r3, #62	; 0x3e
 800616a:	d91c      	bls.n	80061a6 <USB_EPStartXfer+0x7b0>
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <USB_EPStartXfer+0x796>
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	3b01      	subs	r3, #1
 8006188:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	b29b      	uxth	r3, r3
 8006192:	029b      	lsls	r3, r3, #10
 8006194:	b29b      	uxth	r3, r3
 8006196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	e053      	b.n	800624e <USB_EPStartXfer+0x858>
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d112      	bne.n	80061d4 <USB_EPStartXfer+0x7de>
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e03c      	b.n	800624e <USB_EPStartXfer+0x858>
 80061d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <USB_EPStartXfer+0x7fe>
 80061ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ee:	3301      	adds	r3, #1
 80061f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	e024      	b.n	800624e <USB_EPStartXfer+0x858>
 8006204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d11c      	bne.n	800624e <USB_EPStartXfer+0x858>
 8006214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006222:	b29b      	uxth	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006228:	4413      	add	r3, r2
 800622a:	643b      	str	r3, [r7, #64]	; 0x40
 800622c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	00da      	lsls	r2, r3, #3
 800623a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623c:	4413      	add	r3, r2
 800623e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006248:	b29a      	uxth	r2, r3
 800624a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800624e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	895b      	ldrh	r3, [r3, #10]
 800625a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6959      	ldr	r1, [r3, #20]
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626e:	b29b      	uxth	r3, r3
 8006270:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006274:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006278:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800627c:	6800      	ldr	r0, [r0, #0]
 800627e:	f001 f82a 	bl	80072d6 <USB_WritePMA>
 8006282:	e213      	b.n	80066ac <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80062be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006310:	4413      	add	r3, r2
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	00da      	lsls	r2, r3, #3
 8006322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006324:	4413      	add	r3, r2
 8006326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800632a:	65bb      	str	r3, [r7, #88]	; 0x58
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006330:	b29a      	uxth	r2, r3
 8006332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006334:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	891b      	ldrh	r3, [r3, #8]
 8006342:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6959      	ldr	r1, [r3, #20]
 8006352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006356:	b29b      	uxth	r3, r3
 8006358:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800635c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006360:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006364:	6800      	ldr	r0, [r0, #0]
 8006366:	f000 ffb6 	bl	80072d6 <USB_WritePMA>
 800636a:	e19f      	b.n	80066ac <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800636c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	1ad2      	subs	r2, r2, r3
 800637e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800638a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80bc 	beq.w	800652a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	673b      	str	r3, [r7, #112]	; 0x70
 80063be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d16d      	bne.n	80064aa <USB_EPStartXfer+0xab4>
 80063ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80063da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ee:	4413      	add	r3, r2
 80063f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006402:	4413      	add	r3, r2
 8006404:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006408:	667b      	str	r3, [r7, #100]	; 0x64
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640e:	2b3e      	cmp	r3, #62	; 0x3e
 8006410:	d91c      	bls.n	800644c <USB_EPStartXfer+0xa56>
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <USB_EPStartXfer+0xa3c>
 8006428:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800642c:	3b01      	subs	r3, #1
 800642e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006432:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29b      	uxth	r3, r3
 800643c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006444:	b29a      	uxth	r2, r3
 8006446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e053      	b.n	80064f4 <USB_EPStartXfer+0xafe>
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006450:	2b00      	cmp	r3, #0
 8006452:	d112      	bne.n	800647a <USB_EPStartXfer+0xa84>
 8006454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800645e:	b29a      	uxth	r2, r3
 8006460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006472:	b29a      	uxth	r2, r3
 8006474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	e03c      	b.n	80064f4 <USB_EPStartXfer+0xafe>
 800647a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <USB_EPStartXfer+0xaa4>
 8006490:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006494:	3301      	adds	r3, #1
 8006496:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800649a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800649e:	b29b      	uxth	r3, r3
 80064a0:	029b      	lsls	r3, r3, #10
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e024      	b.n	80064f4 <USB_EPStartXfer+0xafe>
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d11c      	bne.n	80064f4 <USB_EPStartXfer+0xafe>
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ce:	4413      	add	r3, r2
 80064d0:	673b      	str	r3, [r7, #112]	; 0x70
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	00da      	lsls	r2, r3, #3
 80064e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e2:	4413      	add	r3, r2
 80064e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	895b      	ldrh	r3, [r3, #10]
 8006500:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6959      	ldr	r1, [r3, #20]
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006514:	b29b      	uxth	r3, r3
 8006516:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800651a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800651e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006522:	6800      	ldr	r0, [r0, #0]
 8006524:	f000 fed7 	bl	80072d6 <USB_WritePMA>
 8006528:	e0c0      	b.n	80066ac <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800652a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d16d      	bne.n	8006616 <USB_EPStartXfer+0xc20>
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006554:	b29b      	uxth	r3, r3
 8006556:	461a      	mov	r2, r3
 8006558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800655a:	4413      	add	r3, r2
 800655c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800655e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	00da      	lsls	r2, r3, #3
 800656c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800656e:	4413      	add	r3, r2
 8006570:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006574:	67bb      	str	r3, [r7, #120]	; 0x78
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657a:	2b3e      	cmp	r3, #62	; 0x3e
 800657c:	d91c      	bls.n	80065b8 <USB_EPStartXfer+0xbc2>
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <USB_EPStartXfer+0xba8>
 8006594:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006598:	3b01      	subs	r3, #1
 800659a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800659e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e05f      	b.n	8006678 <USB_EPStartXfer+0xc82>
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d112      	bne.n	80065e6 <USB_EPStartXfer+0xbf0>
 80065c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065de:	b29a      	uxth	r2, r3
 80065e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e048      	b.n	8006678 <USB_EPStartXfer+0xc82>
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <USB_EPStartXfer+0xc10>
 80065fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006600:	3301      	adds	r3, #1
 8006602:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006606:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800660a:	b29b      	uxth	r3, r3
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	b29a      	uxth	r2, r3
 8006610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e030      	b.n	8006678 <USB_EPStartXfer+0xc82>
 8006616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d128      	bne.n	8006678 <USB_EPStartXfer+0xc82>
 8006626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800664a:	4413      	add	r3, r2
 800664c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	00da      	lsls	r2, r3, #3
 800665e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006662:	4413      	add	r3, r2
 8006664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006670:	b29a      	uxth	r2, r3
 8006672:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006676:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	891b      	ldrh	r3, [r3, #8]
 8006684:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6959      	ldr	r1, [r3, #20]
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006698:	b29b      	uxth	r3, r3
 800669a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800669e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066a6:	6800      	ldr	r0, [r0, #0]
 80066a8:	f000 fe15 	bl	80072d6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d2:	817b      	strh	r3, [r7, #10]
 80066d4:	897b      	ldrh	r3, [r7, #10]
 80066d6:	f083 0310 	eor.w	r3, r3, #16
 80066da:	817b      	strh	r3, [r7, #10]
 80066dc:	897b      	ldrh	r3, [r7, #10]
 80066de:	f083 0320 	eor.w	r3, r3, #32
 80066e2:	817b      	strh	r3, [r7, #10]
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	441a      	add	r2, r3
 80066fe:	897b      	ldrh	r3, [r7, #10]
 8006700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006710:	b29b      	uxth	r3, r3
 8006712:	8013      	strh	r3, [r2, #0]
 8006714:	f000 bc9f 	b.w	8007056 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	7b1b      	ldrb	r3, [r3, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 80ae 	bne.w	8006886 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800672a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d917      	bls.n	8006776 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	619a      	str	r2, [r3, #24]
 8006774:	e00e      	b.n	8006794 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2200      	movs	r2, #0
 8006792:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067b8:	4413      	add	r3, r2
 80067ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	00da      	lsls	r2, r3, #3
 80067cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	2b3e      	cmp	r3, #62	; 0x3e
 80067e0:	d91d      	bls.n	800681e <USB_EPStartXfer+0xe28>
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <USB_EPStartXfer+0xe0c>
 80067f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067fc:	3b01      	subs	r3, #1
 80067fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006802:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006806:	b29b      	uxth	r3, r3
 8006808:	029b      	lsls	r3, r3, #10
 800680a:	b29b      	uxth	r3, r3
 800680c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006814:	b29a      	uxth	r2, r3
 8006816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	e3e1      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006822:	2b00      	cmp	r3, #0
 8006824:	d116      	bne.n	8006854 <USB_EPStartXfer+0xe5e>
 8006826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684a:	b29a      	uxth	r2, r3
 800684c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006850:	801a      	strh	r2, [r3, #0]
 8006852:	e3c6      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006858:	085b      	lsrs	r3, r3, #1
 800685a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <USB_EPStartXfer+0xe7e>
 800686a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800686e:	3301      	adds	r3, #1
 8006870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006874:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006878:	b29b      	uxth	r3, r3
 800687a:	029b      	lsls	r3, r3, #10
 800687c:	b29a      	uxth	r2, r3
 800687e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e3ad      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	78db      	ldrb	r3, [r3, #3]
 8006892:	2b02      	cmp	r3, #2
 8006894:	f040 8200 	bne.w	8006c98 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 8091 	bne.w	80069cc <USB_EPStartXfer+0xfd6>
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ce:	4413      	add	r3, r2
 80068d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	00da      	lsls	r2, r3, #3
 80068e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e6:	4413      	add	r3, r2
 80068e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b3e      	cmp	r3, #62	; 0x3e
 80068fe:	d925      	bls.n	800694c <USB_EPStartXfer+0xf56>
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <USB_EPStartXfer+0xf3a>
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	3b01      	subs	r3, #1
 800692c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29b      	uxth	r3, r3
 800693a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006942:	b29a      	uxth	r2, r3
 8006944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006948:	801a      	strh	r2, [r3, #0]
 800694a:	e074      	b.n	8006a36 <USB_EPStartXfer+0x1040>
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d116      	bne.n	800698a <USB_EPStartXfer+0xf94>
 800695c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006968:	b29a      	uxth	r2, r3
 800696a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006980:	b29a      	uxth	r2, r3
 8006982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e055      	b.n	8006a36 <USB_EPStartXfer+0x1040>
 800698a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800699c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <USB_EPStartXfer+0xfc4>
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b4:	3301      	adds	r3, #1
 80069b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	b29b      	uxth	r3, r3
 80069c0:	029b      	lsls	r3, r3, #10
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	e034      	b.n	8006a36 <USB_EPStartXfer+0x1040>
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d12c      	bne.n	8006a36 <USB_EPStartXfer+0x1040>
 80069dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	461a      	mov	r2, r3
 80069fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a00:	4413      	add	r3, r2
 8006a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	00da      	lsls	r2, r3, #3
 8006a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a18:	4413      	add	r3, r2
 8006a1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 8091 	bne.w	8006b78 <USB_EPStartXfer+0x1182>
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	00da      	lsls	r2, r3, #3
 8006a8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a92:	4413      	add	r3, r2
 8006a94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8006aaa:	d925      	bls.n	8006af8 <USB_EPStartXfer+0x1102>
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <USB_EPStartXfer+0x10e6>
 8006ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	029b      	lsls	r3, r3, #10
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e06d      	b.n	8006bd4 <USB_EPStartXfer+0x11de>
 8006af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d116      	bne.n	8006b36 <USB_EPStartXfer+0x1140>
 8006b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	e04e      	b.n	8006bd4 <USB_EPStartXfer+0x11de>
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d004      	beq.n	8006b66 <USB_EPStartXfer+0x1170>
 8006b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b60:	3301      	adds	r3, #1
 8006b62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	e02d      	b.n	8006bd4 <USB_EPStartXfer+0x11de>
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d125      	bne.n	8006bd4 <USB_EPStartXfer+0x11de>
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	00da      	lsls	r2, r3, #3
 8006bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bd2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 81fe 	beq.w	8006fe2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <USB_EPStartXfer+0x1228>
 8006c12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10d      	bne.n	8006c3a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f040 81db 	bne.w	8006fe2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f040 81d4 	bne.w	8006fe2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]
 8006c96:	e1a4      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	78db      	ldrb	r3, [r3, #3]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	f040 819a 	bne.w	8006fde <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d917      	bls.n	8006cf6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	619a      	str	r2, [r3, #24]
 8006cf4:	e00e      	b.n	8006d14 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2200      	movs	r2, #0
 8006d12:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d178      	bne.n	8006e16 <USB_EPStartXfer+0x1420>
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d48:	4413      	add	r3, r2
 8006d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	00da      	lsls	r2, r3, #3
 8006d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d60:	4413      	add	r3, r2
 8006d62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d70:	d91d      	bls.n	8006dae <USB_EPStartXfer+0x13b8>
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <USB_EPStartXfer+0x139c>
 8006d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	029b      	lsls	r3, r3, #10
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006daa:	801a      	strh	r2, [r3, #0]
 8006dac:	e064      	b.n	8006e78 <USB_EPStartXfer+0x1482>
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d116      	bne.n	8006de4 <USB_EPStartXfer+0x13ee>
 8006db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	e049      	b.n	8006e78 <USB_EPStartXfer+0x1482>
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <USB_EPStartXfer+0x140e>
 8006dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dfe:	3301      	adds	r3, #1
 8006e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e030      	b.n	8006e78 <USB_EPStartXfer+0x1482>
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d128      	bne.n	8006e78 <USB_EPStartXfer+0x1482>
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	00da      	lsls	r2, r3, #3
 8006e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d178      	bne.n	8006f88 <USB_EPStartXfer+0x1592>
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006eba:	4413      	add	r3, r2
 8006ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	00da      	lsls	r2, r3, #3
 8006ece:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ee2:	d91d      	bls.n	8006f20 <USB_EPStartXfer+0x152a>
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <USB_EPStartXfer+0x150e>
 8006efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006efe:	3b01      	subs	r3, #1
 8006f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	e060      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d116      	bne.n	8006f56 <USB_EPStartXfer+0x1560>
 8006f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	e045      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <USB_EPStartXfer+0x1580>
 8006f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f70:	3301      	adds	r3, #1
 8006f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e02c      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d124      	bne.n	8006fe2 <USB_EPStartXfer+0x15ec>
 8006f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fae:	4413      	add	r3, r2
 8006fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	00da      	lsls	r2, r3, #3
 8006fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	e001      	b.n	8006fe2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e03a      	b.n	8007058 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007008:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800700c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007014:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007018:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800701c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007020:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	441a      	add	r2, r3
 800703e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007052:	b29b      	uxth	r3, r3
 8007054:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d020      	beq.n	80070b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708a:	81bb      	strh	r3, [r7, #12]
 800708c:	89bb      	ldrh	r3, [r7, #12]
 800708e:	f083 0310 	eor.w	r3, r3, #16
 8007092:	81bb      	strh	r3, [r7, #12]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	89bb      	ldrh	r3, [r7, #12]
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]
 80070b4:	e01f      	b.n	80070f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070cc:	81fb      	strh	r3, [r7, #14]
 80070ce:	89fb      	ldrh	r3, [r7, #14]
 80070d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070d4:	81fb      	strh	r3, [r7, #14]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	441a      	add	r2, r3
 80070e0:	89fb      	ldrh	r3, [r7, #14]
 80070e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	7b1b      	ldrb	r3, [r3, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f040 809d 	bne.w	8007252 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d04c      	beq.n	80071ba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	823b      	strh	r3, [r7, #16]
 800712e:	8a3b      	ldrh	r3, [r7, #16]
 8007130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01b      	beq.n	8007170 <USB_EPClearStall+0x6c>
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	81fb      	strh	r3, [r7, #14]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	441a      	add	r2, r3
 800715a:	89fb      	ldrh	r3, [r7, #14]
 800715c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	78db      	ldrb	r3, [r3, #3]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d06c      	beq.n	8007252 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718e:	81bb      	strh	r3, [r7, #12]
 8007190:	89bb      	ldrh	r3, [r7, #12]
 8007192:	f083 0320 	eor.w	r3, r3, #32
 8007196:	81bb      	strh	r3, [r7, #12]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	89bb      	ldrh	r3, [r7, #12]
 80071a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	8013      	strh	r3, [r2, #0]
 80071b8:	e04b      	b.n	8007252 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	82fb      	strh	r3, [r7, #22]
 80071c8:	8afb      	ldrh	r3, [r7, #22]
 80071ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01b      	beq.n	800720a <USB_EPClearStall+0x106>
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e8:	82bb      	strh	r3, [r7, #20]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	8abb      	ldrh	r3, [r7, #20]
 80071f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007206:	b29b      	uxth	r3, r3
 8007208:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800721c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007220:	827b      	strh	r3, [r7, #18]
 8007222:	8a7b      	ldrh	r3, [r7, #18]
 8007224:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007228:	827b      	strh	r3, [r7, #18]
 800722a:	8a7b      	ldrh	r3, [r7, #18]
 800722c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007230:	827b      	strh	r3, [r7, #18]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	441a      	add	r2, r3
 800723c:	8a7b      	ldrh	r3, [r7, #18]
 800723e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800724a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724e:	b29b      	uxth	r3, r3
 8007250:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d103      	bne.n	800727a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2280      	movs	r2, #128	; 0x80
 8007276:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007296:	b29b      	uxth	r3, r3
 8007298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800729c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b08d      	sub	sp, #52	; 0x34
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	4611      	mov	r1, r2
 80072e2:	461a      	mov	r2, r3
 80072e4:	460b      	mov	r3, r1
 80072e6:	80fb      	strh	r3, [r7, #6]
 80072e8:	4613      	mov	r3, r2
 80072ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072ec:	88bb      	ldrh	r3, [r7, #4]
 80072ee:	3301      	adds	r3, #1
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072fc:	88fa      	ldrh	r2, [r7, #6]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800730c:	e01b      	b.n	8007346 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	3301      	adds	r3, #1
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	b29b      	uxth	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	b29a      	uxth	r2, r3
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	3302      	adds	r3, #2
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	3301      	adds	r3, #1
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	3b01      	subs	r3, #1
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e0      	bne.n	800730e <USB_WritePMA+0x38>
  }
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	3734      	adds	r7, #52	; 0x34
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800735a:	b480      	push	{r7}
 800735c:	b08b      	sub	sp, #44	; 0x2c
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	4611      	mov	r1, r2
 8007366:	461a      	mov	r2, r3
 8007368:	460b      	mov	r3, r1
 800736a:	80fb      	strh	r3, [r7, #6]
 800736c:	4613      	mov	r3, r2
 800736e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007370:	88bb      	ldrh	r3, [r7, #4]
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	b29b      	uxth	r3, r3
 8007376:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800738a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
 8007390:	e018      	b.n	80073c4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	3302      	adds	r3, #2
 800739e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3301      	adds	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	0a1b      	lsrs	r3, r3, #8
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	3301      	adds	r3, #1
 80073bc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	3b01      	subs	r3, #1
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e3      	bne.n	8007392 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80073ca:	88bb      	ldrh	r3, [r7, #4]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	701a      	strb	r2, [r3, #0]
  }
}
 80073e6:	bf00      	nop
 80073e8:	372c      	adds	r7, #44	; 0x2c
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007402:	f002 f913 	bl	800962c <USBD_static_malloc>
 8007406:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d105      	bne.n	800741a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007416:	2302      	movs	r3, #2
 8007418:	e066      	b.n	80074e8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7c1b      	ldrb	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d119      	bne.n	800745e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800742a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742e:	2202      	movs	r2, #2
 8007430:	2181      	movs	r1, #129	; 0x81
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 ff9f 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800743e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007442:	2202      	movs	r2, #2
 8007444:	2101      	movs	r1, #1
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 ff95 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2210      	movs	r2, #16
 8007458:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800745c:	e016      	b.n	800748c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800745e:	2340      	movs	r3, #64	; 0x40
 8007460:	2202      	movs	r2, #2
 8007462:	2181      	movs	r1, #129	; 0x81
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 ff86 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007470:	2340      	movs	r3, #64	; 0x40
 8007472:	2202      	movs	r2, #2
 8007474:	2101      	movs	r1, #1
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 ff7d 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2210      	movs	r2, #16
 8007488:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800748c:	2308      	movs	r3, #8
 800748e:	2203      	movs	r2, #3
 8007490:	2182      	movs	r1, #130	; 0x82
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 ff6f 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	7c1b      	ldrb	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074cc:	2101      	movs	r1, #1
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f002 f841 	bl	8009556 <USBD_LL_PrepareReceive>
 80074d4:	e007      	b.n	80074e6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074dc:	2340      	movs	r3, #64	; 0x40
 80074de:	2101      	movs	r1, #1
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 f838 	bl	8009556 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074fc:	2181      	movs	r1, #129	; 0x81
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 ff5f 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800750a:	2101      	movs	r1, #1
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 ff58 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800751a:	2182      	movs	r1, #130	; 0x82
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 ff50 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754c:	4618      	mov	r0, r3
 800754e:	f002 f87b 	bl	8009648 <USBD_static_free>
    pdev->pClassData = NULL;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007574:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007588:	2303      	movs	r3, #3
 800758a:	e0af      	b.n	80076ec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03f      	beq.n	8007618 <USBD_CDC_Setup+0xb4>
 8007598:	2b20      	cmp	r3, #32
 800759a:	f040 809f 	bne.w	80076dc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	88db      	ldrh	r3, [r3, #6]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d02e      	beq.n	8007604 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	b25b      	sxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	da16      	bge.n	80075de <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80075bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	88d2      	ldrh	r2, [r2, #6]
 80075c2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	88db      	ldrh	r3, [r3, #6]
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	bf28      	it	cs
 80075cc:	2307      	movcs	r3, #7
 80075ce:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	89fa      	ldrh	r2, [r7, #14]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 facf 	bl	8008b7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80075dc:	e085      	b.n	80076ea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785a      	ldrb	r2, [r3, #1]
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	88db      	ldrh	r3, [r3, #6]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80075f4:	6939      	ldr	r1, [r7, #16]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fae8 	bl	8008bd2 <USBD_CtlPrepareRx>
      break;
 8007602:	e072      	b.n	80076ea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	7850      	ldrb	r0, [r2, #1]
 8007610:	2200      	movs	r2, #0
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	4798      	blx	r3
      break;
 8007616:	e068      	b.n	80076ea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b0b      	cmp	r3, #11
 800761e:	d852      	bhi.n	80076c6 <USBD_CDC_Setup+0x162>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <USBD_CDC_Setup+0xc4>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	08007659 	.word	0x08007659
 800762c:	080076d5 	.word	0x080076d5
 8007630:	080076c7 	.word	0x080076c7
 8007634:	080076c7 	.word	0x080076c7
 8007638:	080076c7 	.word	0x080076c7
 800763c:	080076c7 	.word	0x080076c7
 8007640:	080076c7 	.word	0x080076c7
 8007644:	080076c7 	.word	0x080076c7
 8007648:	080076c7 	.word	0x080076c7
 800764c:	080076c7 	.word	0x080076c7
 8007650:	08007683 	.word	0x08007683
 8007654:	080076ad 	.word	0x080076ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b03      	cmp	r3, #3
 8007662:	d107      	bne.n	8007674 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007664:	f107 030a 	add.w	r3, r7, #10
 8007668:	2202      	movs	r2, #2
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fa84 	bl	8008b7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007672:	e032      	b.n	80076da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fa0e 	bl	8008a98 <USBD_CtlError>
            ret = USBD_FAIL;
 800767c:	2303      	movs	r3, #3
 800767e:	75fb      	strb	r3, [r7, #23]
          break;
 8007680:	e02b      	b.n	80076da <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b03      	cmp	r3, #3
 800768c:	d107      	bne.n	800769e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800768e:	f107 030d 	add.w	r3, r7, #13
 8007692:	2201      	movs	r2, #1
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fa6f 	bl	8008b7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800769c:	e01d      	b.n	80076da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f9f9 	bl	8008a98 <USBD_CtlError>
            ret = USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	75fb      	strb	r3, [r7, #23]
          break;
 80076aa:	e016      	b.n	80076da <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d00f      	beq.n	80076d8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 f9ec 	bl	8008a98 <USBD_CtlError>
            ret = USBD_FAIL;
 80076c0:	2303      	movs	r3, #3
 80076c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076c4:	e008      	b.n	80076d8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f9e5 	bl	8008a98 <USBD_CtlError>
          ret = USBD_FAIL;
 80076ce:	2303      	movs	r3, #3
 80076d0:	75fb      	strb	r3, [r7, #23]
          break;
 80076d2:	e002      	b.n	80076da <USBD_CDC_Setup+0x176>
          break;
 80076d4:	bf00      	nop
 80076d6:	e008      	b.n	80076ea <USBD_CDC_Setup+0x186>
          break;
 80076d8:	bf00      	nop
      }
      break;
 80076da:	e006      	b.n	80076ea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 f9da 	bl	8008a98 <USBD_CtlError>
      ret = USBD_FAIL;
 80076e4:	2303      	movs	r3, #3
 80076e6:	75fb      	strb	r3, [r7, #23]
      break;
 80076e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007706:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007712:	2303      	movs	r3, #3
 8007714:	e04f      	b.n	80077b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	3318      	adds	r3, #24
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d029      	beq.n	8007788 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	3318      	adds	r3, #24
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	78f9      	ldrb	r1, [r7, #3]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	460b      	mov	r3, r1
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	4403      	add	r3, r0
 8007754:	3338      	adds	r3, #56	; 0x38
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	fbb2 f1f3 	udiv	r1, r2, r3
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007762:	2b00      	cmp	r3, #0
 8007764:	d110      	bne.n	8007788 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	3318      	adds	r3, #24
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800777a:	78f9      	ldrb	r1, [r7, #3]
 800777c:	2300      	movs	r3, #0
 800777e:	2200      	movs	r2, #0
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fec7 	bl	8009514 <USBD_LL_Transmit>
 8007786:	e015      	b.n	80077b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077dc:	2303      	movs	r3, #3
 80077de:	e015      	b.n	800780c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 fed7 	bl	8009598 <USBD_LL_GetRxDataSize>
 80077ea:	4602      	mov	r2, r0
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007806:	4611      	mov	r1, r2
 8007808:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007822:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800782a:	2303      	movs	r3, #3
 800782c:	e01b      	b.n	8007866 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d015      	beq.n	8007864 <USBD_CDC_EP0_RxReady+0x50>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800783e:	2bff      	cmp	r3, #255	; 0xff
 8007840:	d010      	beq.n	8007864 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007850:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007858:	b292      	uxth	r2, r2
 800785a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	22ff      	movs	r2, #255	; 0xff
 8007860:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2243      	movs	r2, #67	; 0x43
 800787c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	20000094 	.word	0x20000094

08007890 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2243      	movs	r2, #67	; 0x43
 800789c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800789e:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000050 	.word	0x20000050

080078b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2243      	movs	r2, #67	; 0x43
 80078bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80078be:	4b03      	ldr	r3, [pc, #12]	; (80078cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200000d8 	.word	0x200000d8

080078d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	220a      	movs	r2, #10
 80078dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078de:	4b03      	ldr	r3, [pc, #12]	; (80078ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	2000000c 	.word	0x2000000c

080078f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007900:	2303      	movs	r3, #3
 8007902:	e004      	b.n	800790e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800791a:	b480      	push	{r7}
 800791c:	b087      	sub	sp, #28
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800792c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	e008      	b.n	800794a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007966:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800796e:	2303      	movs	r3, #3
 8007970:	e004      	b.n	800797c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007996:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e01a      	b.n	80079e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d114      	bne.n	80079de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079d2:	2181      	movs	r1, #129	; 0x81
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fd9d 	bl	8009514 <USBD_LL_Transmit>

    ret = USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e016      	b.n	8007a34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7c1b      	ldrb	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 fd9b 	bl	8009556 <USBD_LL_PrepareReceive>
 8007a20:	e007      	b.n	8007a32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a28:	2340      	movs	r3, #64	; 0x40
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fd92 	bl	8009556 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e01f      	b.n	8007a94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	79fa      	ldrb	r2, [r7, #7]
 8007a86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 fbf9 	bl	8009280 <USBD_LL_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e016      	b.n	8007ae2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	f107 020e 	add.w	r2, r7, #14
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	4602      	mov	r2, r0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 fc24 	bl	8009340 <USBD_LL_Start>
 8007af8:	4603      	mov	r3, r0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	4611      	mov	r1, r2
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
  }

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 ff46 	bl	8008a24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d01a      	beq.n	8007bf2 <USBD_LL_SetupStage+0x72>
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d822      	bhi.n	8007c06 <USBD_LL_SetupStage+0x86>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <USBD_LL_SetupStage+0x4a>
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d00a      	beq.n	8007bde <USBD_LL_SetupStage+0x5e>
 8007bc8:	e01d      	b.n	8007c06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9ee 	bl	8007fb4 <USBD_StdDevReq>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
      break;
 8007bdc:	e020      	b.n	8007c20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa52 	bl	8008090 <USBD_StdItfReq>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf0:	e016      	b.n	8007c20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa91 	bl	8008122 <USBD_StdEPReq>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
      break;
 8007c04:	e00c      	b.n	8007c20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 fbf3 	bl	8009400 <USBD_LL_StallEP>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1e:	bf00      	nop
  }

  return ret;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	460b      	mov	r3, r1
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d138      	bne.n	8007cb0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d14a      	bne.n	8007ce6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d913      	bls.n	8007c84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	1ad2      	subs	r2, r2, r3
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	4293      	cmp	r3, r2
 8007c74:	bf28      	it	cs
 8007c76:	4613      	movcs	r3, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 ffc5 	bl	8008c0c <USBD_CtlContinueRx>
 8007c82:	e030      	b.n	8007ce6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d10b      	bne.n	8007ca8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 ffc0 	bl	8008c2e <USBD_CtlSendStatus>
 8007cae:	e01a      	b.n	8007ce6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d114      	bne.n	8007ce6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00e      	beq.n	8007ce6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	7afa      	ldrb	r2, [r7, #11]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	4798      	blx	r3
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	e000      	b.n	8007ce8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d16b      	bne.n	8007ddc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3314      	adds	r3, #20
 8007d08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d156      	bne.n	8007dc2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d914      	bls.n	8007d4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	1ad2      	subs	r2, r2, r3
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 ff3a 	bl	8008bb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f001 fc07 	bl	8009556 <USBD_LL_PrepareReceive>
 8007d48:	e03b      	b.n	8007dc2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d11c      	bne.n	8007d90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d316      	bcc.n	8007d90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d20f      	bcs.n	8007d90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 ff1b 	bl	8008bb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d82:	2300      	movs	r3, #0
 8007d84:	2200      	movs	r2, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f001 fbe4 	bl	8009556 <USBD_LL_PrepareReceive>
 8007d8e:	e018      	b.n	8007dc2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d10b      	bne.n	8007db4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f001 fb22 	bl	8009400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 ff49 	bl	8008c54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d122      	bne.n	8007e12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff fe98 	bl	8007b02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dda:	e01a      	b.n	8007e12 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d114      	bne.n	8007e12 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	7afa      	ldrb	r2, [r7, #11]
 8007dfe:	4611      	mov	r1, r2
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	4798      	blx	r3
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	e000      	b.n	8007e14 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e02f      	b.n	8007eb0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00f      	beq.n	8007e7a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d009      	beq.n	8007e7a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6852      	ldr	r2, [r2, #4]
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	4611      	mov	r1, r2
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e7a:	2340      	movs	r3, #64	; 0x40
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fa78 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2240      	movs	r2, #64	; 0x40
 8007e92:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e96:	2340      	movs	r3, #64	; 0x40
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2180      	movs	r1, #128	; 0x80
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 fa6a 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2240      	movs	r2, #64	; 0x40
 8007eac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2204      	movs	r2, #4
 8007ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d106      	bne.n	8007f26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e012      	b.n	8007f70 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d10b      	bne.n	8007f6e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f96:	8a3b      	ldrh	r3, [r7, #16]
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	b21a      	sxth	r2, r3
 8007f9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	b21b      	sxth	r3, r3
 8007fa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d005      	beq.n	8007fda <USBD_StdDevReq+0x26>
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d853      	bhi.n	800807a <USBD_StdDevReq+0xc6>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <USBD_StdDevReq+0x3a>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d14f      	bne.n	800807a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e04a      	b.n	8008084 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2b09      	cmp	r3, #9
 8007ff4:	d83b      	bhi.n	800806e <USBD_StdDevReq+0xba>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBD_StdDevReq+0x48>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008051 	.word	0x08008051
 8008000:	08008065 	.word	0x08008065
 8008004:	0800806f 	.word	0x0800806f
 8008008:	0800805b 	.word	0x0800805b
 800800c:	0800806f 	.word	0x0800806f
 8008010:	0800802f 	.word	0x0800802f
 8008014:	08008025 	.word	0x08008025
 8008018:	0800806f 	.word	0x0800806f
 800801c:	08008047 	.word	0x08008047
 8008020:	08008039 	.word	0x08008039
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f9de 	bl	80083e8 <USBD_GetDescriptor>
          break;
 800802c:	e024      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb6d 	bl	8008710 <USBD_SetAddress>
          break;
 8008036:	e01f      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fbac 	bl	8008798 <USBD_SetConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
          break;
 8008044:	e018      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc4b 	bl	80088e4 <USBD_GetConfig>
          break;
 800804e:	e013      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fc7c 	bl	8008950 <USBD_GetStatus>
          break;
 8008058:	e00e      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fcab 	bl	80089b8 <USBD_SetFeature>
          break;
 8008062:	e009      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fcba 	bl	80089e0 <USBD_ClrFeature>
          break;
 800806c:	e004      	b.n	8008078 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fd11 	bl	8008a98 <USBD_CtlError>
          break;
 8008076:	bf00      	nop
      }
      break;
 8008078:	e004      	b.n	8008084 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fd0b 	bl	8008a98 <USBD_CtlError>
      break;
 8008082:	bf00      	nop
  }

  return ret;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop

08008090 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d005      	beq.n	80080b6 <USBD_StdItfReq+0x26>
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d82f      	bhi.n	800810e <USBD_StdItfReq+0x7e>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <USBD_StdItfReq+0x26>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d12b      	bne.n	800810e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d81d      	bhi.n	8008100 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	889b      	ldrh	r3, [r3, #4]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d813      	bhi.n	80080f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	88db      	ldrh	r3, [r3, #6]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d110      	bne.n	800810a <USBD_StdItfReq+0x7a>
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10d      	bne.n	800810a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fd9d 	bl	8008c2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080f4:	e009      	b.n	800810a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fccd 	bl	8008a98 <USBD_CtlError>
          break;
 80080fe:	e004      	b.n	800810a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fcc8 	bl	8008a98 <USBD_CtlError>
          break;
 8008108:	e000      	b.n	800810c <USBD_StdItfReq+0x7c>
          break;
 800810a:	bf00      	nop
      }
      break;
 800810c:	e004      	b.n	8008118 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fcc1 	bl	8008a98 <USBD_CtlError>
      break;
 8008116:	bf00      	nop
  }

  return ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	889b      	ldrh	r3, [r3, #4]
 8008134:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d007      	beq.n	8008152 <USBD_StdEPReq+0x30>
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	f200 8145 	bhi.w	80083d2 <USBD_StdEPReq+0x2b0>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <USBD_StdEPReq+0x44>
 800814c:	2b20      	cmp	r3, #32
 800814e:	f040 8140 	bne.w	80083d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
      break;
 8008164:	e13a      	b.n	80083dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b03      	cmp	r3, #3
 800816c:	d007      	beq.n	800817e <USBD_StdEPReq+0x5c>
 800816e:	2b03      	cmp	r3, #3
 8008170:	f300 8129 	bgt.w	80083c6 <USBD_StdEPReq+0x2a4>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d07f      	beq.n	8008278 <USBD_StdEPReq+0x156>
 8008178:	2b01      	cmp	r3, #1
 800817a:	d03c      	beq.n	80081f6 <USBD_StdEPReq+0xd4>
 800817c:	e123      	b.n	80083c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d002      	beq.n	8008190 <USBD_StdEPReq+0x6e>
 800818a:	2b03      	cmp	r3, #3
 800818c:	d016      	beq.n	80081bc <USBD_StdEPReq+0x9a>
 800818e:	e02c      	b.n	80081ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00d      	beq.n	80081b2 <USBD_StdEPReq+0x90>
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b80      	cmp	r3, #128	; 0x80
 800819a:	d00a      	beq.n	80081b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f92d 	bl	8009400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081a6:	2180      	movs	r1, #128	; 0x80
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f929 	bl	8009400 <USBD_LL_StallEP>
 80081ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081b0:	e020      	b.n	80081f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fc6f 	bl	8008a98 <USBD_CtlError>
              break;
 80081ba:	e01b      	b.n	80081f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	885b      	ldrh	r3, [r3, #2]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10e      	bne.n	80081e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <USBD_StdEPReq+0xc0>
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b80      	cmp	r3, #128	; 0x80
 80081ce:	d008      	beq.n	80081e2 <USBD_StdEPReq+0xc0>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	88db      	ldrh	r3, [r3, #6]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 f90f 	bl	8009400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fd23 	bl	8008c2e <USBD_CtlSendStatus>

              break;
 80081e8:	e004      	b.n	80081f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fc53 	bl	8008a98 <USBD_CtlError>
              break;
 80081f2:	bf00      	nop
          }
          break;
 80081f4:	e0ec      	b.n	80083d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d002      	beq.n	8008208 <USBD_StdEPReq+0xe6>
 8008202:	2b03      	cmp	r3, #3
 8008204:	d016      	beq.n	8008234 <USBD_StdEPReq+0x112>
 8008206:	e030      	b.n	800826a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00d      	beq.n	800822a <USBD_StdEPReq+0x108>
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b80      	cmp	r3, #128	; 0x80
 8008212:	d00a      	beq.n	800822a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 f8f1 	bl	8009400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800821e:	2180      	movs	r1, #128	; 0x80
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 f8ed 	bl	8009400 <USBD_LL_StallEP>
 8008226:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008228:	e025      	b.n	8008276 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fc33 	bl	8008a98 <USBD_CtlError>
              break;
 8008232:	e020      	b.n	8008276 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	885b      	ldrh	r3, [r3, #2]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d11b      	bne.n	8008274 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f8f7 	bl	800943e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fcec 	bl	8008c2e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008268:	e004      	b.n	8008274 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fc13 	bl	8008a98 <USBD_CtlError>
              break;
 8008272:	e000      	b.n	8008276 <USBD_StdEPReq+0x154>
              break;
 8008274:	bf00      	nop
          }
          break;
 8008276:	e0ab      	b.n	80083d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d002      	beq.n	800828a <USBD_StdEPReq+0x168>
 8008284:	2b03      	cmp	r3, #3
 8008286:	d032      	beq.n	80082ee <USBD_StdEPReq+0x1cc>
 8008288:	e097      	b.n	80083ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <USBD_StdEPReq+0x17e>
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d004      	beq.n	80082a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fbfd 	bl	8008a98 <USBD_CtlError>
                break;
 800829e:	e091      	b.n	80083c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da0b      	bge.n	80082c0 <USBD_StdEPReq+0x19e>
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	3310      	adds	r3, #16
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	3304      	adds	r3, #4
 80082be:	e00b      	b.n	80082d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	3304      	adds	r3, #4
 80082d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2202      	movs	r2, #2
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fc47 	bl	8008b7a <USBD_CtlSendData>
              break;
 80082ec:	e06a      	b.n	80083c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da11      	bge.n	800831a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	f003 020f 	and.w	r2, r3, #15
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	3324      	adds	r3, #36	; 0x24
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d117      	bne.n	8008340 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fbc0 	bl	8008a98 <USBD_CtlError>
                  break;
 8008318:	e054      	b.n	80083c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	f003 020f 	and.w	r2, r3, #15
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fbad 	bl	8008a98 <USBD_CtlError>
                  break;
 800833e:	e041      	b.n	80083c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008344:	2b00      	cmp	r3, #0
 8008346:	da0b      	bge.n	8008360 <USBD_StdEPReq+0x23e>
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	3310      	adds	r3, #16
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	4413      	add	r3, r2
 800835c:	3304      	adds	r3, #4
 800835e:	e00b      	b.n	8008378 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4413      	add	r3, r2
 8008376:	3304      	adds	r3, #4
 8008378:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <USBD_StdEPReq+0x264>
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b80      	cmp	r3, #128	; 0x80
 8008384:	d103      	bne.n	800838e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e00e      	b.n	80083ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 f872 	bl	800947c <USBD_LL_IsStallEP>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2201      	movs	r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e002      	b.n	80083ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2202      	movs	r2, #2
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fbe1 	bl	8008b7a <USBD_CtlSendData>
              break;
 80083b8:	e004      	b.n	80083c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fb6b 	bl	8008a98 <USBD_CtlError>
              break;
 80083c2:	bf00      	nop
          }
          break;
 80083c4:	e004      	b.n	80083d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fb65 	bl	8008a98 <USBD_CtlError>
          break;
 80083ce:	bf00      	nop
      }
      break;
 80083d0:	e004      	b.n	80083dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb5f 	bl	8008a98 <USBD_CtlError>
      break;
 80083da:	bf00      	nop
  }

  return ret;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	2b0e      	cmp	r3, #14
 800840a:	f200 8152 	bhi.w	80086b2 <USBD_GetDescriptor+0x2ca>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <USBD_GetDescriptor+0x2c>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008485 	.word	0x08008485
 8008418:	0800849d 	.word	0x0800849d
 800841c:	080084dd 	.word	0x080084dd
 8008420:	080086b3 	.word	0x080086b3
 8008424:	080086b3 	.word	0x080086b3
 8008428:	08008653 	.word	0x08008653
 800842c:	0800867f 	.word	0x0800867f
 8008430:	080086b3 	.word	0x080086b3
 8008434:	080086b3 	.word	0x080086b3
 8008438:	080086b3 	.word	0x080086b3
 800843c:	080086b3 	.word	0x080086b3
 8008440:	080086b3 	.word	0x080086b3
 8008444:	080086b3 	.word	0x080086b3
 8008448:	080086b3 	.word	0x080086b3
 800844c:	08008451 	.word	0x08008451
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00b      	beq.n	8008474 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	7c12      	ldrb	r2, [r2, #16]
 8008468:	f107 0108 	add.w	r1, r7, #8
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
 8008470:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008472:	e126      	b.n	80086c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fb0e 	bl	8008a98 <USBD_CtlError>
        err++;
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	3301      	adds	r3, #1
 8008480:	72fb      	strb	r3, [r7, #11]
      break;
 8008482:	e11e      	b.n	80086c2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	7c12      	ldrb	r2, [r2, #16]
 8008490:	f107 0108 	add.w	r1, r7, #8
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
 8008498:	60f8      	str	r0, [r7, #12]
      break;
 800849a:	e112      	b.n	80086c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7c1b      	ldrb	r3, [r3, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10d      	bne.n	80084c0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f107 0208 	add.w	r2, r7, #8
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3301      	adds	r3, #1
 80084ba:	2202      	movs	r2, #2
 80084bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084be:	e100      	b.n	80086c2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	f107 0208 	add.w	r2, r7, #8
 80084cc:	4610      	mov	r0, r2
 80084ce:	4798      	blx	r3
 80084d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3301      	adds	r3, #1
 80084d6:	2202      	movs	r2, #2
 80084d8:	701a      	strb	r2, [r3, #0]
      break;
 80084da:	e0f2      	b.n	80086c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	885b      	ldrh	r3, [r3, #2]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	f200 80ac 	bhi.w	8008640 <USBD_GetDescriptor+0x258>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <USBD_GetDescriptor+0x108>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008509 	.word	0x08008509
 80084f4:	0800853d 	.word	0x0800853d
 80084f8:	08008571 	.word	0x08008571
 80084fc:	080085a5 	.word	0x080085a5
 8008500:	080085d9 	.word	0x080085d9
 8008504:	0800860d 	.word	0x0800860d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	7c12      	ldrb	r2, [r2, #16]
 8008520:	f107 0108 	add.w	r1, r7, #8
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
 8008528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800852a:	e091      	b.n	8008650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fab2 	bl	8008a98 <USBD_CtlError>
            err++;
 8008534:	7afb      	ldrb	r3, [r7, #11]
 8008536:	3301      	adds	r3, #1
 8008538:	72fb      	strb	r3, [r7, #11]
          break;
 800853a:	e089      	b.n	8008650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7c12      	ldrb	r2, [r2, #16]
 8008554:	f107 0108 	add.w	r1, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800855e:	e077      	b.n	8008650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa98 	bl	8008a98 <USBD_CtlError>
            err++;
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	3301      	adds	r3, #1
 800856c:	72fb      	strb	r3, [r7, #11]
          break;
 800856e:	e06f      	b.n	8008650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7c12      	ldrb	r2, [r2, #16]
 8008588:	f107 0108 	add.w	r1, r7, #8
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008592:	e05d      	b.n	8008650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa7e 	bl	8008a98 <USBD_CtlError>
            err++;
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	3301      	adds	r3, #1
 80085a0:	72fb      	strb	r3, [r7, #11]
          break;
 80085a2:	e055      	b.n	8008650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7c12      	ldrb	r2, [r2, #16]
 80085bc:	f107 0108 	add.w	r1, r7, #8
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c6:	e043      	b.n	8008650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa64 	bl	8008a98 <USBD_CtlError>
            err++;
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	3301      	adds	r3, #1
 80085d4:	72fb      	strb	r3, [r7, #11]
          break;
 80085d6:	e03b      	b.n	8008650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fa:	e029      	b.n	8008650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa4a 	bl	8008a98 <USBD_CtlError>
            err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
          break;
 800860a:	e021      	b.n	8008650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862e:	e00f      	b.n	8008650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa30 	bl	8008a98 <USBD_CtlError>
            err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
          break;
 800863e:	e007      	b.n	8008650 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa28 	bl	8008a98 <USBD_CtlError>
          err++;
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	3301      	adds	r3, #1
 800864c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800864e:	bf00      	nop
      }
      break;
 8008650:	e037      	b.n	80086c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7c1b      	ldrb	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	f107 0208 	add.w	r2, r7, #8
 8008666:	4610      	mov	r0, r2
 8008668:	4798      	blx	r3
 800866a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800866c:	e029      	b.n	80086c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fa11 	bl	8008a98 <USBD_CtlError>
        err++;
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	3301      	adds	r3, #1
 800867a:	72fb      	strb	r3, [r7, #11]
      break;
 800867c:	e021      	b.n	80086c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7c1b      	ldrb	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10d      	bne.n	80086a2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	f107 0208 	add.w	r2, r7, #8
 8008692:	4610      	mov	r0, r2
 8008694:	4798      	blx	r3
 8008696:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	2207      	movs	r2, #7
 800869e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086a0:	e00f      	b.n	80086c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f9f7 	bl	8008a98 <USBD_CtlError>
        err++;
 80086aa:	7afb      	ldrb	r3, [r7, #11]
 80086ac:	3301      	adds	r3, #1
 80086ae:	72fb      	strb	r3, [r7, #11]
      break;
 80086b0:	e007      	b.n	80086c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f9ef 	bl	8008a98 <USBD_CtlError>
      err++;
 80086ba:	7afb      	ldrb	r3, [r7, #11]
 80086bc:	3301      	adds	r3, #1
 80086be:	72fb      	strb	r3, [r7, #11]
      break;
 80086c0:	bf00      	nop
  }

  if (err != 0U)
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d11e      	bne.n	8008706 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	88db      	ldrh	r3, [r3, #6]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d016      	beq.n	80086fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80086d0:	893b      	ldrh	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00e      	beq.n	80086f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	88da      	ldrh	r2, [r3, #6]
 80086da:	893b      	ldrh	r3, [r7, #8]
 80086dc:	4293      	cmp	r3, r2
 80086de:	bf28      	it	cs
 80086e0:	4613      	movcs	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086e6:	893b      	ldrh	r3, [r7, #8]
 80086e8:	461a      	mov	r2, r3
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa44 	bl	8008b7a <USBD_CtlSendData>
 80086f2:	e009      	b.n	8008708 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9ce 	bl	8008a98 <USBD_CtlError>
 80086fc:	e004      	b.n	8008708 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa95 	bl	8008c2e <USBD_CtlSendStatus>
 8008704:	e000      	b.n	8008708 <USBD_GetDescriptor+0x320>
    return;
 8008706:	bf00      	nop
  }
}
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop

08008710 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	889b      	ldrh	r3, [r3, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d131      	bne.n	8008786 <USBD_SetAddress+0x76>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	88db      	ldrh	r3, [r3, #6]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d12d      	bne.n	8008786 <USBD_SetAddress+0x76>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	2b7f      	cmp	r3, #127	; 0x7f
 8008730:	d829      	bhi.n	8008786 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	885b      	ldrh	r3, [r3, #2]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b03      	cmp	r3, #3
 8008748:	d104      	bne.n	8008754 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f9a3 	bl	8008a98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008752:	e01d      	b.n	8008790 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	7bfa      	ldrb	r2, [r7, #15]
 8008758:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 feb8 	bl	80094d6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa61 	bl	8008c2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d004      	beq.n	800877c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2202      	movs	r2, #2
 8008776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877a:	e009      	b.n	8008790 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008784:	e004      	b.n	8008790 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f985 	bl	8008a98 <USBD_CtlError>
  }
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	4b4c      	ldr	r3, [pc, #304]	; (80088e0 <USBD_SetConfig+0x148>)
 80087ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087b0:	4b4b      	ldr	r3, [pc, #300]	; (80088e0 <USBD_SetConfig+0x148>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d905      	bls.n	80087c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f96c 	bl	8008a98 <USBD_CtlError>
    return USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e088      	b.n	80088d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d002      	beq.n	80087d6 <USBD_SetConfig+0x3e>
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d025      	beq.n	8008820 <USBD_SetConfig+0x88>
 80087d4:	e071      	b.n	80088ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087d6:	4b42      	ldr	r3, [pc, #264]	; (80088e0 <USBD_SetConfig+0x148>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01c      	beq.n	8008818 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80087de:	4b40      	ldr	r3, [pc, #256]	; (80088e0 <USBD_SetConfig+0x148>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087e8:	4b3d      	ldr	r3, [pc, #244]	; (80088e0 <USBD_SetConfig+0x148>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff f992 	bl	8007b18 <USBD_SetClassConfig>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d004      	beq.n	8008808 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f949 	bl	8008a98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008806:	e065      	b.n	80088d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa10 	bl	8008c2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2203      	movs	r2, #3
 8008812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008816:	e05d      	b.n	80088d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fa08 	bl	8008c2e <USBD_CtlSendStatus>
      break;
 800881e:	e059      	b.n	80088d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008820:	4b2f      	ldr	r3, [pc, #188]	; (80088e0 <USBD_SetConfig+0x148>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d112      	bne.n	800884e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008830:	4b2b      	ldr	r3, [pc, #172]	; (80088e0 <USBD_SetConfig+0x148>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800883a:	4b29      	ldr	r3, [pc, #164]	; (80088e0 <USBD_SetConfig+0x148>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff f985 	bl	8007b50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f9f1 	bl	8008c2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800884c:	e042      	b.n	80088d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <USBD_SetConfig+0x148>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	429a      	cmp	r2, r3
 800885a:	d02a      	beq.n	80088b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff f973 	bl	8007b50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800886a:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <USBD_SetConfig+0x148>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008874:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <USBD_SetConfig+0x148>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7ff f94c 	bl	8007b18 <USBD_SetClassConfig>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00f      	beq.n	80088aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f903 	bl	8008a98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff f958 	bl	8007b50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088a8:	e014      	b.n	80088d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f9bf 	bl	8008c2e <USBD_CtlSendStatus>
      break;
 80088b0:	e010      	b.n	80088d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f9bb 	bl	8008c2e <USBD_CtlSendStatus>
      break;
 80088b8:	e00c      	b.n	80088d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8eb 	bl	8008a98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <USBD_SetConfig+0x148>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff f941 	bl	8007b50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088ce:	2303      	movs	r3, #3
 80088d0:	73fb      	strb	r3, [r7, #15]
      break;
 80088d2:	bf00      	nop
  }

  return ret;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000244 	.word	0x20000244

080088e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88db      	ldrh	r3, [r3, #6]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d004      	beq.n	8008900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f8cd 	bl	8008a98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088fe:	e023      	b.n	8008948 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	dc02      	bgt.n	8008912 <USBD_GetConfig+0x2e>
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc03      	bgt.n	8008918 <USBD_GetConfig+0x34>
 8008910:	e015      	b.n	800893e <USBD_GetConfig+0x5a>
 8008912:	2b03      	cmp	r3, #3
 8008914:	d00b      	beq.n	800892e <USBD_GetConfig+0x4a>
 8008916:	e012      	b.n	800893e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3308      	adds	r3, #8
 8008922:	2201      	movs	r2, #1
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f927 	bl	8008b7a <USBD_CtlSendData>
        break;
 800892c:	e00c      	b.n	8008948 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3304      	adds	r3, #4
 8008932:	2201      	movs	r2, #1
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f91f 	bl	8008b7a <USBD_CtlSendData>
        break;
 800893c:	e004      	b.n	8008948 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f8a9 	bl	8008a98 <USBD_CtlError>
        break;
 8008946:	bf00      	nop
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008960:	b2db      	uxtb	r3, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	2b02      	cmp	r3, #2
 8008966:	d81e      	bhi.n	80089a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	88db      	ldrh	r3, [r3, #6]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d004      	beq.n	800897a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f890 	bl	8008a98 <USBD_CtlError>
        break;
 8008978:	e01a      	b.n	80089b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d005      	beq.n	8008996 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f043 0202 	orr.w	r2, r3, #2
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	330c      	adds	r3, #12
 800899a:	2202      	movs	r2, #2
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f8eb 	bl	8008b7a <USBD_CtlSendData>
      break;
 80089a4:	e004      	b.n	80089b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f875 	bl	8008a98 <USBD_CtlError>
      break;
 80089ae:	bf00      	nop
  }
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d106      	bne.n	80089d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f92b 	bl	8008c2e <USBD_CtlSendStatus>
  }
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	3b01      	subs	r3, #1
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d80b      	bhi.n	8008a10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	885b      	ldrh	r3, [r3, #2]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d10c      	bne.n	8008a1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f910 	bl	8008c2e <USBD_CtlSendStatus>
      }
      break;
 8008a0e:	e004      	b.n	8008a1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f840 	bl	8008a98 <USBD_CtlError>
      break;
 8008a18:	e000      	b.n	8008a1c <USBD_ClrFeature+0x3c>
      break;
 8008a1a:	bf00      	nop
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff fa92 	bl	8007f78 <SWAPBYTE>
 8008a54:	4603      	mov	r3, r0
 8008a56:	461a      	mov	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff fa85 	bl	8007f78 <SWAPBYTE>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7ff fa78 	bl	8007f78 <SWAPBYTE>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	80da      	strh	r2, [r3, #6]
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aa2:	2180      	movs	r1, #128	; 0x80
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fcab 	bl	8009400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008aaa:	2100      	movs	r1, #0
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fca7 	bl	8009400 <USBD_LL_StallEP>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b086      	sub	sp, #24
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d036      	beq.n	8008b3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ad4:	6938      	ldr	r0, [r7, #16]
 8008ad6:	f000 f836 	bl	8008b46 <USBD_GetLen>
 8008ada:	4603      	mov	r3, r0
 8008adc:	3301      	adds	r3, #1
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ae8:	7dfb      	ldrb	r3, [r7, #23]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	4413      	add	r3, r2
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	7812      	ldrb	r2, [r2, #0]
 8008af2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	3301      	adds	r3, #1
 8008af8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	4413      	add	r3, r2
 8008b00:	2203      	movs	r2, #3
 8008b02:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	3301      	adds	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b0a:	e013      	b.n	8008b34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4413      	add	r3, r2
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	7812      	ldrb	r2, [r2, #0]
 8008b16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	613b      	str	r3, [r7, #16]
    idx++;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	3301      	adds	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	3301      	adds	r3, #1
 8008b32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e7      	bne.n	8008b0c <USBD_GetString+0x52>
 8008b3c:	e000      	b.n	8008b40 <USBD_GetString+0x86>
    return;
 8008b3e:	bf00      	nop
  }
}
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b085      	sub	sp, #20
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b56:	e005      	b.n	8008b64 <USBD_GetLen+0x1e>
  {
    len++;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1f5      	bne.n	8008b58 <USBD_GetLen+0x12>
  }

  return len;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fcb7 	bl	8009514 <USBD_LL_Transmit>

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fca6 	bl	8009514 <USBD_LL_Transmit>

  return USBD_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2203      	movs	r2, #3
 8008be2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fcaa 	bl	8009556 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fc99 	bl	8009556 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2204      	movs	r2, #4
 8008c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2200      	movs	r2, #0
 8008c42:	2100      	movs	r1, #0
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fc65 	bl	8009514 <USBD_LL_Transmit>

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2205      	movs	r2, #5
 8008c60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c64:	2300      	movs	r3, #0
 8008c66:	2200      	movs	r2, #0
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fc73 	bl	8009556 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008c80:	2200      	movs	r2, #0
 8008c82:	4912      	ldr	r1, [pc, #72]	; (8008ccc <MX_USB_Device_Init+0x50>)
 8008c84:	4812      	ldr	r0, [pc, #72]	; (8008cd0 <MX_USB_Device_Init+0x54>)
 8008c86:	f7fe fed9 	bl	8007a3c <USBD_Init>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008c90:	f7f7 ff26 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008c94:	490f      	ldr	r1, [pc, #60]	; (8008cd4 <MX_USB_Device_Init+0x58>)
 8008c96:	480e      	ldr	r0, [pc, #56]	; (8008cd0 <MX_USB_Device_Init+0x54>)
 8008c98:	f7fe ff00 	bl	8007a9c <USBD_RegisterClass>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008ca2:	f7f7 ff1d 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008ca6:	490c      	ldr	r1, [pc, #48]	; (8008cd8 <MX_USB_Device_Init+0x5c>)
 8008ca8:	4809      	ldr	r0, [pc, #36]	; (8008cd0 <MX_USB_Device_Init+0x54>)
 8008caa:	f7fe fe21 	bl	80078f0 <USBD_CDC_RegisterInterface>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008cb4:	f7f7 ff14 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008cb8:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <MX_USB_Device_Init+0x54>)
 8008cba:	f7fe ff16 	bl	8007aea <USBD_Start>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008cc4:	f7f7 ff0c 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008cc8:	bf00      	nop
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000130 	.word	0x20000130
 8008cd0:	20000248 	.word	0x20000248
 8008cd4:	20000018 	.word	0x20000018
 8008cd8:	2000011c 	.word	0x2000011c

08008cdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4905      	ldr	r1, [pc, #20]	; (8008cf8 <CDC_Init_FS+0x1c>)
 8008ce4:	4805      	ldr	r0, [pc, #20]	; (8008cfc <CDC_Init_FS+0x20>)
 8008ce6:	f7fe fe18 	bl	800791a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cea:	4905      	ldr	r1, [pc, #20]	; (8008d00 <CDC_Init_FS+0x24>)
 8008cec:	4803      	ldr	r0, [pc, #12]	; (8008cfc <CDC_Init_FS+0x20>)
 8008cee:	f7fe fe32 	bl	8007956 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20000d7c 	.word	0x20000d7c
 8008cfc:	20000248 	.word	0x20000248
 8008d00:	2000057c 	.word	0x2000057c

08008d04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
 8008d20:	4613      	mov	r3, r2
 8008d22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b23      	cmp	r3, #35	; 0x23
 8008d28:	d84a      	bhi.n	8008dc0 <CDC_Control_FS+0xac>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <CDC_Control_FS+0x1c>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008dc1 	.word	0x08008dc1
 8008d34:	08008dc1 	.word	0x08008dc1
 8008d38:	08008dc1 	.word	0x08008dc1
 8008d3c:	08008dc1 	.word	0x08008dc1
 8008d40:	08008dc1 	.word	0x08008dc1
 8008d44:	08008dc1 	.word	0x08008dc1
 8008d48:	08008dc1 	.word	0x08008dc1
 8008d4c:	08008dc1 	.word	0x08008dc1
 8008d50:	08008dc1 	.word	0x08008dc1
 8008d54:	08008dc1 	.word	0x08008dc1
 8008d58:	08008dc1 	.word	0x08008dc1
 8008d5c:	08008dc1 	.word	0x08008dc1
 8008d60:	08008dc1 	.word	0x08008dc1
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008dc1 	.word	0x08008dc1
 8008d6c:	08008dc1 	.word	0x08008dc1
 8008d70:	08008dc1 	.word	0x08008dc1
 8008d74:	08008dc1 	.word	0x08008dc1
 8008d78:	08008dc1 	.word	0x08008dc1
 8008d7c:	08008dc1 	.word	0x08008dc1
 8008d80:	08008dc1 	.word	0x08008dc1
 8008d84:	08008dc1 	.word	0x08008dc1
 8008d88:	08008dc1 	.word	0x08008dc1
 8008d8c:	08008dc1 	.word	0x08008dc1
 8008d90:	08008dc1 	.word	0x08008dc1
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	08008dc1 	.word	0x08008dc1
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc1 	.word	0x08008dc1
 8008da4:	08008dc1 	.word	0x08008dc1
 8008da8:	08008dc1 	.word	0x08008dc1
 8008dac:	08008dc1 	.word	0x08008dc1
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc1 	.word	0x08008dc1
 8008db8:	08008dc1 	.word	0x08008dc1
 8008dbc:	08008dc1 	.word	0x08008dc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dc0:	bf00      	nop
  }

  return (USBD_OK);
 8008dc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  start_of_flash = 1;
 8008dda:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <CDC_Receive_FS+0x44>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	701a      	strb	r2, [r3, #0]
  end_of_coordinate = 0;
 8008de0:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <CDC_Receive_FS+0x48>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	480c      	ldr	r0, [pc, #48]	; (8008e1c <CDC_Receive_FS+0x4c>)
 8008dea:	f7fe fdb4 	bl	8007956 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008dee:	480b      	ldr	r0, [pc, #44]	; (8008e1c <CDC_Receive_FS+0x4c>)
 8008df0:	f7fe fdfa 	bl	80079e8 <USBD_CDC_ReceivePacket>
  strcat(RX_BUFFER,Buf);
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	480a      	ldr	r0, [pc, #40]	; (8008e20 <CDC_Receive_FS+0x50>)
 8008df8:	f000 fc8e 	bl	8009718 <strcat>
	  /* clear the RX_BUFFER_ARRAY */
	  memset(RX_BUFFER, 0, sizeof(RX_BUFFER));
  }

  /* If the received char is \n then it mean end of coordinate */
  if(Buf[0] == 0x10){
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d102      	bne.n	8008e0a <CDC_Receive_FS+0x3a>
	  end_of_coordinate = 1;
 8008e04:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <CDC_Receive_FS+0x48>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]

  /* check si on a la commande de fin de trame et sinon on ecrit dans la flash */
//#error "Create then bootloader end here (look for end of external flashing procedure + split incomming data into Alt + longi + lati)"
//#error "Also use the external flash driver to store it into external flash after"

  return (USBD_OK);
 8008e0a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	200001a0 	.word	0x200001a0
 8008e18:	200001a2 	.word	0x200001a2
 8008e1c:	20000248 	.word	0x20000248
 8008e20:	20000518 	.word	0x20000518

08008e24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e34:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <CDC_Transmit_FS+0x48>)
 8008e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e00b      	b.n	8008e62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4806      	ldr	r0, [pc, #24]	; (8008e6c <CDC_Transmit_FS+0x48>)
 8008e52:	f7fe fd62 	bl	800791a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e56:	4805      	ldr	r0, [pc, #20]	; (8008e6c <CDC_Transmit_FS+0x48>)
 8008e58:	f7fe fd96 	bl	8007988 <USBD_CDC_TransmitPacket>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000248 	.word	0x20000248

08008e70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
	...

08008e94 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	6039      	str	r1, [r7, #0]
 8008e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2212      	movs	r2, #18
 8008ea4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	20000150 	.word	0x20000150

08008eb8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	20000164 	.word	0x20000164

08008edc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d105      	bne.n	8008efa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	4907      	ldr	r1, [pc, #28]	; (8008f10 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008ef2:	4808      	ldr	r0, [pc, #32]	; (8008f14 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ef4:	f7ff fde1 	bl	8008aba <USBD_GetString>
 8008ef8:	e004      	b.n	8008f04 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	4904      	ldr	r1, [pc, #16]	; (8008f10 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008efe:	4805      	ldr	r0, [pc, #20]	; (8008f14 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008f00:	f7ff fddb 	bl	8008aba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f04:	4b02      	ldr	r3, [pc, #8]	; (8008f10 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000157c 	.word	0x2000157c
 8008f14:	08009834 	.word	0x08009834

08008f18 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	6039      	str	r1, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	4904      	ldr	r1, [pc, #16]	; (8008f38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008f28:	4804      	ldr	r0, [pc, #16]	; (8008f3c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008f2a:	f7ff fdc6 	bl	8008aba <USBD_GetString>
  return USBD_StrDesc;
 8008f2e:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	2000157c 	.word	0x2000157c
 8008f3c:	0800984c 	.word	0x0800984c

08008f40 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	221a      	movs	r2, #26
 8008f50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f52:	f000 f843 	bl	8008fdc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008f56:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000168 	.word	0x20000168

08008f64 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d105      	bne.n	8008f82 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	4907      	ldr	r1, [pc, #28]	; (8008f98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f7a:	4808      	ldr	r0, [pc, #32]	; (8008f9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f7c:	f7ff fd9d 	bl	8008aba <USBD_GetString>
 8008f80:	e004      	b.n	8008f8c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4904      	ldr	r1, [pc, #16]	; (8008f98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008f86:	4805      	ldr	r0, [pc, #20]	; (8008f9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008f88:	f7ff fd97 	bl	8008aba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000157c 	.word	0x2000157c
 8008f9c:	08009860 	.word	0x08009860

08008fa0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	4907      	ldr	r1, [pc, #28]	; (8008fd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008fb6:	4808      	ldr	r0, [pc, #32]	; (8008fd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008fb8:	f7ff fd7f 	bl	8008aba <USBD_GetString>
 8008fbc:	e004      	b.n	8008fc8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4904      	ldr	r1, [pc, #16]	; (8008fd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008fc2:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008fc4:	f7ff fd79 	bl	8008aba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fc8:	4b02      	ldr	r3, [pc, #8]	; (8008fd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	2000157c 	.word	0x2000157c
 8008fd8:	0800986c 	.word	0x0800986c

08008fdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <Get_SerialNum+0x44>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <Get_SerialNum+0x48>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <Get_SerialNum+0x4c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009002:	2208      	movs	r2, #8
 8009004:	4909      	ldr	r1, [pc, #36]	; (800902c <Get_SerialNum+0x50>)
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 f814 	bl	8009034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800900c:	2204      	movs	r2, #4
 800900e:	4908      	ldr	r1, [pc, #32]	; (8009030 <Get_SerialNum+0x54>)
 8009010:	68b8      	ldr	r0, [r7, #8]
 8009012:	f000 f80f 	bl	8009034 <IntToUnicode>
  }
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	1fff7590 	.word	0x1fff7590
 8009024:	1fff7594 	.word	0x1fff7594
 8009028:	1fff7598 	.word	0x1fff7598
 800902c:	2000016a 	.word	0x2000016a
 8009030:	2000017a 	.word	0x2000017a

08009034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009046:	2300      	movs	r3, #0
 8009048:	75fb      	strb	r3, [r7, #23]
 800904a:	e027      	b.n	800909c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	0f1b      	lsrs	r3, r3, #28
 8009050:	2b09      	cmp	r3, #9
 8009052:	d80b      	bhi.n	800906c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	0f1b      	lsrs	r3, r3, #28
 8009058:	b2da      	uxtb	r2, r3
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	4619      	mov	r1, r3
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	440b      	add	r3, r1
 8009064:	3230      	adds	r2, #48	; 0x30
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e00a      	b.n	8009082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	0f1b      	lsrs	r3, r3, #28
 8009070:	b2da      	uxtb	r2, r3
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	4619      	mov	r1, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	440b      	add	r3, r1
 800907c:	3237      	adds	r2, #55	; 0x37
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	3301      	adds	r3, #1
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	4413      	add	r3, r2
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	3301      	adds	r3, #1
 800909a:	75fb      	strb	r3, [r7, #23]
 800909c:	7dfa      	ldrb	r2, [r7, #23]
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d3d3      	bcc.n	800904c <IntToUnicode+0x18>
  }
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
	...

080090b4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b098      	sub	sp, #96	; 0x60
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80090bc:	f107 030c 	add.w	r3, r7, #12
 80090c0:	2254      	movs	r2, #84	; 0x54
 80090c2:	2100      	movs	r1, #0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fb1f 	bl	8009708 <memset>
  if(pcdHandle->Instance==USB)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a15      	ldr	r2, [pc, #84]	; (8009124 <HAL_PCD_MspInit+0x70>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d122      	bne.n	800911a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80090d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80090da:	2300      	movs	r3, #0
 80090dc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80090de:	f107 030c 	add.w	r3, r7, #12
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fa fd4c 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80090ee:	f7f7 fcf7 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090f2:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <HAL_PCD_MspInit+0x74>)
 80090f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f6:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <HAL_PCD_MspInit+0x74>)
 80090f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090fc:	6593      	str	r3, [r2, #88]	; 0x58
 80090fe:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <HAL_PCD_MspInit+0x74>)
 8009100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009106:	60bb      	str	r3, [r7, #8]
 8009108:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800910a:	2200      	movs	r2, #0
 800910c:	2100      	movs	r1, #0
 800910e:	2014      	movs	r0, #20
 8009110:	f7f7 ff2f 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009114:	2014      	movs	r0, #20
 8009116:	f7f7 ff46 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800911a:	bf00      	nop
 800911c:	3760      	adds	r7, #96	; 0x60
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	40005c00 	.word	0x40005c00
 8009128:	40021000 	.word	0x40021000

0800912c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe fd1c 	bl	8007b80 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	440b      	add	r3, r1
 8009170:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	4619      	mov	r1, r3
 800917a:	f7fe fd56 	bl	8007c2a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009198:	78fa      	ldrb	r2, [r7, #3]
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	4613      	mov	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	440b      	add	r3, r1
 80091a6:	333c      	adds	r3, #60	; 0x3c
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	4619      	mov	r1, r3
 80091ae:	f7fe fd9f 	bl	8007cf0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe feb3 	bl	8007f34 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091de:	2301      	movs	r3, #1
 80091e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d001      	beq.n	80091ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091ea:	f7f7 fc79 	bl	8000ae0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80091f4:	7bfa      	ldrb	r2, [r7, #15]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fe5d 	bl	8007eb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe fe09 	bl	8007e1c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fe58 	bl	8007ed8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d005      	beq.n	800923c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009230:	4b04      	ldr	r3, [pc, #16]	; (8009244 <HAL_PCD_SuspendCallback+0x30>)
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	4a03      	ldr	r2, [pc, #12]	; (8009244 <HAL_PCD_SuspendCallback+0x30>)
 8009236:	f043 0306 	orr.w	r3, r3, #6
 800923a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	e000ed00 	.word	0xe000ed00

08009248 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d007      	beq.n	8009268 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <HAL_PCD_ResumeCallback+0x34>)
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	4a07      	ldr	r2, [pc, #28]	; (800927c <HAL_PCD_ResumeCallback+0x34>)
 800925e:	f023 0306 	bic.w	r3, r3, #6
 8009262:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009264:	f000 f9fa 	bl	800965c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe fe48 	bl	8007f04 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	e000ed00 	.word	0xe000ed00

08009280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009288:	4a2b      	ldr	r2, [pc, #172]	; (8009338 <USBD_LL_Init+0xb8>)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a29      	ldr	r2, [pc, #164]	; (8009338 <USBD_LL_Init+0xb8>)
 8009294:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009298:	4b27      	ldr	r3, [pc, #156]	; (8009338 <USBD_LL_Init+0xb8>)
 800929a:	4a28      	ldr	r2, [pc, #160]	; (800933c <USBD_LL_Init+0xbc>)
 800929c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800929e:	4b26      	ldr	r3, [pc, #152]	; (8009338 <USBD_LL_Init+0xb8>)
 80092a0:	2208      	movs	r2, #8
 80092a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092a4:	4b24      	ldr	r3, [pc, #144]	; (8009338 <USBD_LL_Init+0xb8>)
 80092a6:	2202      	movs	r2, #2
 80092a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092aa:	4b23      	ldr	r3, [pc, #140]	; (8009338 <USBD_LL_Init+0xb8>)
 80092ac:	2202      	movs	r2, #2
 80092ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80092b0:	4b21      	ldr	r3, [pc, #132]	; (8009338 <USBD_LL_Init+0xb8>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092b6:	4b20      	ldr	r3, [pc, #128]	; (8009338 <USBD_LL_Init+0xb8>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092bc:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <USBD_LL_Init+0xb8>)
 80092be:	2200      	movs	r2, #0
 80092c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092c2:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <USBD_LL_Init+0xb8>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092c8:	481b      	ldr	r0, [pc, #108]	; (8009338 <USBD_LL_Init+0xb8>)
 80092ca:	f7f8 f903 	bl	80014d4 <HAL_PCD_Init>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80092d4:	f7f7 fc04 	bl	8000ae0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092de:	2318      	movs	r3, #24
 80092e0:	2200      	movs	r2, #0
 80092e2:	2100      	movs	r1, #0
 80092e4:	f7f9 fdbc 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092ee:	2358      	movs	r3, #88	; 0x58
 80092f0:	2200      	movs	r2, #0
 80092f2:	2180      	movs	r1, #128	; 0x80
 80092f4:	f7f9 fdb4 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092fe:	23c0      	movs	r3, #192	; 0xc0
 8009300:	2200      	movs	r2, #0
 8009302:	2181      	movs	r1, #129	; 0x81
 8009304:	f7f9 fdac 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800930e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009312:	2200      	movs	r2, #0
 8009314:	2101      	movs	r1, #1
 8009316:	f7f9 fda3 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009324:	2200      	movs	r2, #0
 8009326:	2182      	movs	r1, #130	; 0x82
 8009328:	f7f9 fd9a 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	2000177c 	.word	0x2000177c
 800933c:	40005c00 	.word	0x40005c00

08009340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009356:	4618      	mov	r0, r3
 8009358:	f7f8 f9a1 	bl	800169e <HAL_PCD_Start>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f980 	bl	8009668 <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936c:	7bbb      	ldrb	r3, [r7, #14]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	4608      	mov	r0, r1
 8009380:	4611      	mov	r1, r2
 8009382:	461a      	mov	r2, r3
 8009384:	4603      	mov	r3, r0
 8009386:	70fb      	strb	r3, [r7, #3]
 8009388:	460b      	mov	r3, r1
 800938a:	70bb      	strb	r3, [r7, #2]
 800938c:	4613      	mov	r3, r2
 800938e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800939e:	78bb      	ldrb	r3, [r7, #2]
 80093a0:	883a      	ldrh	r2, [r7, #0]
 80093a2:	78f9      	ldrb	r1, [r7, #3]
 80093a4:	f7f8 fae9 	bl	800197a <HAL_PCD_EP_Open>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f95a 	bl	8009668 <USBD_Get_USB_Status>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7f8 fb30 	bl	8001a46 <HAL_PCD_EP_Close>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 f93b 	bl	8009668 <USBD_Get_USB_Status>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7f8 fbf1 	bl	8001c06 <HAL_PCD_EP_SetStall>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f91c 	bl	8009668 <USBD_Get_USB_Status>
 8009430:	4603      	mov	r3, r0
 8009432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009434:	7bbb      	ldrb	r3, [r7, #14]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7f8 fc24 	bl	8001caa <HAL_PCD_EP_ClrStall>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f8fd 	bl	8009668 <USBD_Get_USB_Status>
 800946e:	4603      	mov	r3, r0
 8009470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009472:	7bbb      	ldrb	r3, [r7, #14]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800948e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0c      	bge.n	80094b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	440b      	add	r3, r1
 80094ac:	3302      	adds	r3, #2
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	e00b      	b.n	80094ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b8:	68f9      	ldr	r1, [r7, #12]
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f8 fa1b 	bl	8001930 <HAL_PCD_SetAddress>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f8b1 	bl	8009668 <USBD_Get_USB_Status>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950a:	7bbb      	ldrb	r3, [r7, #14]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	460b      	mov	r3, r1
 8009522:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009532:	7af9      	ldrb	r1, [r7, #11]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	f7f8 fb22 	bl	8001b80 <HAL_PCD_EP_Transmit>
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 f890 	bl	8009668 <USBD_Get_USB_Status>
 8009548:	4603      	mov	r3, r0
 800954a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800954c:	7dbb      	ldrb	r3, [r7, #22]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	460b      	mov	r3, r1
 8009564:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009574:	7af9      	ldrb	r1, [r7, #11]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	f7f8 faac 	bl	8001ad6 <HAL_PCD_EP_Receive>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f86f 	bl	8009668 <USBD_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800958e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f8 face 	bl	8001b50 <HAL_PCD_EP_GetRxCount>
 80095b4:	4603      	mov	r3, r0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_PCDEx_LPM_Callback+0x18>
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d013      	beq.n	80095fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80095d6:	e023      	b.n	8009620 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80095e0:	f000 f83c 	bl	800965c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095e4:	4b10      	ldr	r3, [pc, #64]	; (8009628 <HAL_PCDEx_LPM_Callback+0x68>)
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	4a0f      	ldr	r2, [pc, #60]	; (8009628 <HAL_PCDEx_LPM_Callback+0x68>)
 80095ea:	f023 0306 	bic.w	r3, r3, #6
 80095ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fc84 	bl	8007f04 <USBD_LL_Resume>
    break;
 80095fc:	e010      	b.n	8009620 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fc67 	bl	8007ed8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d005      	beq.n	800961e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <HAL_PCDEx_LPM_Callback+0x68>)
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	4a04      	ldr	r2, [pc, #16]	; (8009628 <HAL_PCDEx_LPM_Callback+0x68>)
 8009618:	f043 0306 	orr.w	r3, r3, #6
 800961c:	6113      	str	r3, [r2, #16]
    break;
 800961e:	bf00      	nop
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	e000ed00 	.word	0xe000ed00

0800962c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009634:	4b03      	ldr	r3, [pc, #12]	; (8009644 <USBD_static_malloc+0x18>)
}
 8009636:	4618      	mov	r0, r3
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20001a70 	.word	0x20001a70

08009648 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009660:	f7f7 f94e 	bl	8000900 <SystemClock_Config>
}
 8009664:	bf00      	nop
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	2b03      	cmp	r3, #3
 800967a:	d817      	bhi.n	80096ac <USBD_Get_USB_Status+0x44>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <USBD_Get_USB_Status+0x1c>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	08009695 	.word	0x08009695
 8009688:	0800969b 	.word	0x0800969b
 800968c:	080096a1 	.word	0x080096a1
 8009690:	080096a7 	.word	0x080096a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
    break;
 8009698:	e00b      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800969a:	2303      	movs	r3, #3
 800969c:	73fb      	strb	r3, [r7, #15]
    break;
 800969e:	e008      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096a0:	2301      	movs	r3, #1
 80096a2:	73fb      	strb	r3, [r7, #15]
    break;
 80096a4:	e005      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096a6:	2303      	movs	r3, #3
 80096a8:	73fb      	strb	r3, [r7, #15]
    break;
 80096aa:	e002      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096ac:	2303      	movs	r3, #3
 80096ae:	73fb      	strb	r3, [r7, #15]
    break;
 80096b0:	bf00      	nop
  }
  return usb_status;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <__libc_init_array>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	4d0d      	ldr	r5, [pc, #52]	; (80096f8 <__libc_init_array+0x38>)
 80096c4:	4c0d      	ldr	r4, [pc, #52]	; (80096fc <__libc_init_array+0x3c>)
 80096c6:	1b64      	subs	r4, r4, r5
 80096c8:	10a4      	asrs	r4, r4, #2
 80096ca:	2600      	movs	r6, #0
 80096cc:	42a6      	cmp	r6, r4
 80096ce:	d109      	bne.n	80096e4 <__libc_init_array+0x24>
 80096d0:	4d0b      	ldr	r5, [pc, #44]	; (8009700 <__libc_init_array+0x40>)
 80096d2:	4c0c      	ldr	r4, [pc, #48]	; (8009704 <__libc_init_array+0x44>)
 80096d4:	f000 f830 	bl	8009738 <_init>
 80096d8:	1b64      	subs	r4, r4, r5
 80096da:	10a4      	asrs	r4, r4, #2
 80096dc:	2600      	movs	r6, #0
 80096de:	42a6      	cmp	r6, r4
 80096e0:	d105      	bne.n	80096ee <__libc_init_array+0x2e>
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e8:	4798      	blx	r3
 80096ea:	3601      	adds	r6, #1
 80096ec:	e7ee      	b.n	80096cc <__libc_init_array+0xc>
 80096ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f2:	4798      	blx	r3
 80096f4:	3601      	adds	r6, #1
 80096f6:	e7f2      	b.n	80096de <__libc_init_array+0x1e>
 80096f8:	0800988c 	.word	0x0800988c
 80096fc:	0800988c 	.word	0x0800988c
 8009700:	0800988c 	.word	0x0800988c
 8009704:	08009890 	.word	0x08009890

08009708 <memset>:
 8009708:	4402      	add	r2, r0
 800970a:	4603      	mov	r3, r0
 800970c:	4293      	cmp	r3, r2
 800970e:	d100      	bne.n	8009712 <memset+0xa>
 8009710:	4770      	bx	lr
 8009712:	f803 1b01 	strb.w	r1, [r3], #1
 8009716:	e7f9      	b.n	800970c <memset+0x4>

08009718 <strcat>:
 8009718:	b510      	push	{r4, lr}
 800971a:	4602      	mov	r2, r0
 800971c:	7814      	ldrb	r4, [r2, #0]
 800971e:	4613      	mov	r3, r2
 8009720:	3201      	adds	r2, #1
 8009722:	2c00      	cmp	r4, #0
 8009724:	d1fa      	bne.n	800971c <strcat+0x4>
 8009726:	3b01      	subs	r3, #1
 8009728:	f811 2b01 	ldrb.w	r2, [r1], #1
 800972c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009730:	2a00      	cmp	r2, #0
 8009732:	d1f9      	bne.n	8009728 <strcat+0x10>
 8009734:	bd10      	pop	{r4, pc}
	...

08009738 <_init>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

08009744 <_fini>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	bf00      	nop
 8009748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974a:	bc08      	pop	{r3}
 800974c:	469e      	mov	lr, r3
 800974e:	4770      	bx	lr
