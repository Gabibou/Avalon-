
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014510  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080146f0  080146f0  000246f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148b8  080148b8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080148b8  080148b8  000248b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080148c0  080148c0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148c0  080148c0  000248c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080148c4  080148c4  000248c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080148c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055bc  200001f0  08014ab8  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057ac  08014ab8  000357ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032577  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000070b5  00000000  00000000  0006284f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025b8  00000000  00000000  00069908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cdc  00000000  00000000  0006bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031e9f  00000000  00000000  0006db9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034f45  00000000  00000000  0009fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00125ebc  00000000  00000000  000d4980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a474  00000000  00000000  001fa83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00204cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  00204d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080146d8 	.word	0x080146d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	080146d8 	.word	0x080146d8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpun>:
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__aeabi_dcmpun+0x10>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d10a      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x20>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0001 	mov.w	r0, #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f012 fbe5 	bl	8013684 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ebc:	4a3a      	ldr	r2, [pc, #232]	; (8000fa8 <MX_ADC2_Init+0x100>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000ec0:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ec2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8000ec6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ece:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f24:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f26:	f003 fa27 	bl	8004378 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f002 f868 	bl	8003004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_ADC2_Init+0x104>)
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f38:	2306      	movs	r3, #6
 8000f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_ADC2_Init+0x108>)
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f44:	2304      	movs	r3, #4
 8000f46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f52:	f003 fcc5 	bl	80048e0 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000f5c:	f002 f852 	bl	8003004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0x10c>)
 8000f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f64:	230c      	movs	r3, #12
 8000f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f6e:	f003 fcb7 	bl	80048e0 <HAL_ADC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000f78:	f002 f844 	bl	8003004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_ADC2_Init+0x110>)
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f80:	2312      	movs	r3, #18
 8000f82:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f84:	237f      	movs	r3, #127	; 0x7f
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f8e:	f003 fca7 	bl	80048e0 <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8000f98:	f002 f834 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000020c 	.word	0x2000020c
 8000fa8:	50000100 	.word	0x50000100
 8000fac:	04300002 	.word	0x04300002
 8000fb0:	407f0000 	.word	0x407f0000
 8000fb4:	19200040 	.word	0x19200040
 8000fb8:	2a000400 	.word	0x2a000400

08000fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0a0      	sub	sp, #128	; 0x80
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	2254      	movs	r2, #84	; 0x54
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f012 fb51 	bl	8013684 <memset>
  if(adcHandle->Instance==ADC2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a4c      	ldr	r2, [pc, #304]	; (8001118 <HAL_ADC_MspInit+0x15c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	f040 8090 	bne.w	800110e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 f8c4 	bl	800918c <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800100a:	f001 fffb 	bl	8003004 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a42      	ldr	r2, [pc, #264]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b40      	ldr	r3, [pc, #256]	; (800111c <HAL_ADC_MspInit+0x160>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b3d      	ldr	r3, [pc, #244]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a3c      	ldr	r2, [pc, #240]	; (800111c <HAL_ADC_MspInit+0x160>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a36      	ldr	r2, [pc, #216]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <HAL_ADC_MspInit+0x160>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a30      	ldr	r2, [pc, #192]	; (800111c <HAL_ADC_MspInit+0x160>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800106e:	2302      	movs	r3, #2
 8001070:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800107e:	4619      	mov	r1, r3
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <HAL_ADC_MspInit+0x164>)
 8001082:	f004 fd75 	bl	8005b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001086:	2303      	movs	r3, #3
 8001088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001096:	4619      	mov	r1, r3
 8001098:	4822      	ldr	r0, [pc, #136]	; (8001124 <HAL_ADC_MspInit+0x168>)
 800109a:	f004 fd69 	bl	8005b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800109e:	2303      	movs	r3, #3
 80010a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f004 fd5c 	bl	8005b70 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_ADC_MspInit+0x170>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010c0:	2224      	movs	r2, #36	; 0x24
 80010c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010e8:	2220      	movs	r2, #32
 80010ea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010f4:	f004 fa0a 	bl	800550c <HAL_DMA_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80010fe:	f001 ff81 	bl	8003004 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 8001106:	655a      	str	r2, [r3, #84]	; 0x54
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3780      	adds	r7, #128	; 0x80
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	50000100 	.word	0x50000100
 800111c:	40021000 	.word	0x40021000
 8001120:	48001400 	.word	0x48001400
 8001124:	48000800 	.word	0x48000800
 8001128:	20000278 	.word	0x20000278
 800112c:	40020008 	.word	0x40020008

08001130 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3304      	adds	r3, #4
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9c9 	bl	80004d8 <__aeabi_i2d>
 8001146:	a30f      	add	r3, pc, #60	; (adr r3, 8001184 <Battery_ReadBatteryVoltage+0x54>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa2e 	bl	80005ac <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <Battery_ReadBatteryVoltage+0x50>)
 800115e:	f7ff fb4f 	bl	8000800 <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fccf 	bl	8000b0c <__aeabi_d2f>
 800116e:	4602      	mov	r2, r0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	40b00000 	.word	0x40b00000
 8001184:	66666666 	.word	0x66666666
 8001188:	400a6666 	.word	0x400a6666
 800118c:	00000000 	.word	0x00000000

08001190 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3302      	adds	r3, #2
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f999 	bl	80004d8 <__aeabi_i2d>
 80011a6:	a319      	add	r3, pc, #100	; (adr r3, 800120c <Battery_ReadCurrent3V3+0x7c>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff f9fe 	bl	80005ac <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <Battery_ReadCurrent3V3+0x78>)
 80011be:	f7ff fb1f 	bl	8000800 <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc9f 	bl	8000b0c <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff f992 	bl	80004fc <__aeabi_f2d>
 80011d8:	a309      	add	r3, pc, #36	; (adr r3, 8001200 <Battery_ReadCurrent3V3+0x70>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb0f 	bl	8000800 <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fc8f 	bl	8000b0c <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	f3af 8000 	nop.w
 8001200:	d2f1a9fc 	.word	0xd2f1a9fc
 8001204:	3f60624d 	.word	0x3f60624d
 8001208:	40b00000 	.word	0x40b00000
 800120c:	66666666 	.word	0x66666666
 8001210:	400a6666 	.word	0x400a6666
 8001214:	00000000 	.word	0x00000000

08001218 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f956 	bl	80004d8 <__aeabi_i2d>
 800122c:	a319      	add	r3, pc, #100	; (adr r3, 8001294 <Battery_ReadCurrent5V+0x7c>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff f9bb 	bl	80005ac <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <Battery_ReadCurrent5V+0x78>)
 8001244:	f7ff fadc 	bl	8000800 <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fc5c 	bl	8000b0c <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f7ff f94f 	bl	80004fc <__aeabi_f2d>
 800125e:	a30a      	add	r3, pc, #40	; (adr r3, 8001288 <Battery_ReadCurrent5V+0x70>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff facc 	bl	8000800 <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc4c 	bl	8000b0c <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	609a      	str	r2, [r3, #8]
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	d2f1a9fc 	.word	0xd2f1a9fc
 800128c:	3f60624d 	.word	0x3f60624d
 8001290:	40b00000 	.word	0x40b00000
 8001294:	66666666 	.word	0x66666666
 8001298:	400a6666 	.word	0x400a6666
 800129c:	00000000 	.word	0x00000000

080012a0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff f91d 	bl	80004fc <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	a10f      	add	r1, pc, #60	; (adr r1, 8001304 <Battery_RemaningTime+0x64>)
 80012c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012cc:	f7ff fa98 	bl	8000800 <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc18 	bl	8000b0c <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80012e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001300 <Battery_RemaningTime+0x60>
 80012e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f0:	ee17 2a90 	vmov	r2, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	60da      	str	r2, [r3, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	4a5bba00 	.word	0x4a5bba00
 8001304:	9999999a 	.word	0x9999999a
 8001308:	40019999 	.word	0x40019999

0800130c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b0b4      	sub	sp, #208	; 0xd0
 8001310:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <MX_FREERTOS_Init+0x194>)
 8001314:	9306      	str	r3, [sp, #24]
 8001316:	2302      	movs	r3, #2
 8001318:	9305      	str	r3, [sp, #20]
 800131a:	2301      	movs	r3, #1
 800131c:	9304      	str	r3, [sp, #16]
 800131e:	2304      	movs	r3, #4
 8001320:	9303      	str	r3, [sp, #12]
 8001322:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <MX_FREERTOS_Init+0x198>)
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <MX_FREERTOS_Init+0x198>)
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	4a5c      	ldr	r2, [pc, #368]	; (80014a4 <MX_FREERTOS_Init+0x198>)
 8001332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001336:	485c      	ldr	r0, [pc, #368]	; (80014a8 <MX_FREERTOS_Init+0x19c>)
 8001338:	f002 f8da 	bl	80034f0 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800133c:	495b      	ldr	r1, [pc, #364]	; (80014ac <MX_FREERTOS_Init+0x1a0>)
 800133e:	485c      	ldr	r0, [pc, #368]	; (80014b0 <MX_FREERTOS_Init+0x1a4>)
 8001340:	f000 fe1d 	bl	8001f7e <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800134a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800134e:	4618      	mov	r0, r3
 8001350:	f00f fbd3 	bl	8010afa <osMutexCreate>
 8001354:	4603      	mov	r3, r0
 8001356:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <MX_FREERTOS_Init+0x1a8>)
 8001358:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8001360:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f00f fbd3 	bl	8010b12 <osSemaphoreCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <MX_FREERTOS_Init+0x1ac>)
 8001370:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8001378:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800137c:	2101      	movs	r1, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f00f fbc7 	bl	8010b12 <osSemaphoreCreate>
 8001384:	4603      	mov	r3, r0
 8001386:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <MX_FREERTOS_Init+0x1b0>)
 8001388:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <MX_FREERTOS_Init+0x1b4>)
 800138c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001390:	461d      	mov	r5, r3
 8001392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800139a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00f fb6f 	bl	8010a84 <osThreadCreate>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <MX_FREERTOS_Init+0x1b8>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80013ac:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <MX_FREERTOS_Init+0x1bc>)
 80013ae:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80013b2:	461d      	mov	r5, r3
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80013bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00f fb5e 	bl	8010a84 <osThreadCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a40      	ldr	r2, [pc, #256]	; (80014cc <MX_FREERTOS_Init+0x1c0>)
 80013cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <MX_FREERTOS_Init+0x1c4>)
 80013d0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80013d4:	461d      	mov	r5, r3
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80013de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00f fb4d 	bl	8010a84 <osThreadCreate>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a39      	ldr	r2, [pc, #228]	; (80014d4 <MX_FREERTOS_Init+0x1c8>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <MX_FREERTOS_Init+0x1cc>)
 80013f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013f6:	461d      	mov	r5, r3
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8001400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00f fb3c 	bl	8010a84 <osThreadCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a33      	ldr	r2, [pc, #204]	; (80014dc <MX_FREERTOS_Init+0x1d0>)
 8001410:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_FREERTOS_Init+0x1d4>)
 8001414:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001418:	461d      	mov	r5, r3
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 8001422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f00f fb2b 	bl	8010a84 <osThreadCreate>
 800142e:	4603      	mov	r3, r0
 8001430:	4a2c      	ldr	r2, [pc, #176]	; (80014e4 <MX_FREERTOS_Init+0x1d8>)
 8001432:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <MX_FREERTOS_Init+0x1dc>)
 8001436:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800143a:	461d      	mov	r5, r3
 800143c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8001444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f00f fb1a 	bl	8010a84 <osThreadCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <MX_FREERTOS_Init+0x1e0>)
 8001454:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_FREERTOS_Init+0x1e4>)
 8001458:	f107 0418 	add.w	r4, r7, #24
 800145c:	461d      	mov	r5, r3
 800145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00f fb09 	bl	8010a84 <osThreadCreate>
 8001472:	4603      	mov	r3, r0
 8001474:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <MX_FREERTOS_Init+0x1e8>)
 8001476:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_FREERTOS_Init+0x1ec>)
 800147a:	1d3c      	adds	r4, r7, #4
 800147c:	461d      	mov	r5, r3
 800147e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f00f fafa 	bl	8010a84 <osThreadCreate>
 8001490:	4603      	mov	r3, r0
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <MX_FREERTOS_Init+0x1f0>)
 8001494:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001496:	bf00      	nop
 8001498:	37b0      	adds	r7, #176	; 0xb0
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop
 80014a0:	200009c0 	.word	0x200009c0
 80014a4:	48000400 	.word	0x48000400
 80014a8:	20000478 	.word	0x20000478
 80014ac:	200003bc 	.word	0x200003bc
 80014b0:	20000370 	.word	0x20000370
 80014b4:	20000364 	.word	0x20000364
 80014b8:	20000368 	.word	0x20000368
 80014bc:	2000036c 	.word	0x2000036c
 80014c0:	080146f8 	.word	0x080146f8
 80014c4:	20000344 	.word	0x20000344
 80014c8:	08014718 	.word	0x08014718
 80014cc:	20000348 	.word	0x20000348
 80014d0:	08014738 	.word	0x08014738
 80014d4:	2000034c 	.word	0x2000034c
 80014d8:	08014754 	.word	0x08014754
 80014dc:	20000350 	.word	0x20000350
 80014e0:	08014778 	.word	0x08014778
 80014e4:	20000354 	.word	0x20000354
 80014e8:	08014790 	.word	0x08014790
 80014ec:	20000358 	.word	0x20000358
 80014f0:	080147b0 	.word	0x080147b0
 80014f4:	2000035c 	.word	0x2000035c
 80014f8:	080147d4 	.word	0x080147d4
 80014fc:	20000360 	.word	0x20000360

08001500 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001510:	f004 fcc8 	bl	8005ea4 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8001514:	f241 3088 	movw	r0, #5000	; 0x1388
 8001518:	f010 f966 	bl	80117e8 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800151c:	e7f4      	b.n	8001508 <StartLedTask+0x8>
	...

08001520 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8001528:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8001570 <StartRoll_PID+0x50>
 800152c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001574 <StartRoll_PID+0x54>
 8001530:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001578 <StartRoll_PID+0x58>
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <StartRoll_PID+0x5c>)
 8001536:	f001 fdb5 	bl	80030a4 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <StartRoll_PID+0x60>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2119      	movs	r1, #25
 8001540:	4618      	mov	r0, r3
 8001542:	f00f fe0f 	bl	8011164 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8001546:	490f      	ldr	r1, [pc, #60]	; (8001584 <StartRoll_PID+0x64>)
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <StartRoll_PID+0x68>)
 800154a:	f000 fe93 	bl	8002274 <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <StartRoll_PID+0x60>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	f00f fc90 	bl	8010e7c <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <StartRoll_PID+0x6c>)
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <StartRoll_PID+0x64>)
 8001560:	490b      	ldr	r1, [pc, #44]	; (8001590 <StartRoll_PID+0x70>)
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <StartRoll_PID+0x5c>)
 8001564:	f001 fdfc 	bl	8003160 <Pid_CompensateRoll>
		vTaskDelay(150);
 8001568:	2096      	movs	r0, #150	; 0x96
 800156a:	f010 f93d 	bl	80117e8 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800156e:	e7e4      	b.n	800153a <StartRoll_PID+0x1a>
 8001570:	bdb15662 	.word	0xbdb15662
 8001574:	bce59984 	.word	0xbce59984
 8001578:	be07bf5a 	.word	0xbe07bf5a
 800157c:	20000320 	.word	0x20000320
 8001580:	20000364 	.word	0x20000364
 8001584:	200003bc 	.word	0x200003bc
 8001588:	20000370 	.word	0x20000370
 800158c:	20000478 	.word	0x20000478
 8001590:	20000464 	.word	0x20000464

08001594 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 800159c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80015a0:	eddf 0a10 	vldr	s1, [pc, #64]	; 80015e4 <StartPitch_PID+0x50>
 80015a4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80015e8 <StartPitch_PID+0x54>
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <StartPitch_PID+0x58>)
 80015aa:	f001 fd7b 	bl	80030a4 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <StartPitch_PID+0x5c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2119      	movs	r1, #25
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00f fdd5 	bl	8011164 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <StartPitch_PID+0x60>)
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <StartPitch_PID+0x64>)
 80015be:	f000 feab 	bl	8002318 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <StartPitch_PID+0x5c>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	f00f fc56 	bl	8010e7c <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <StartPitch_PID+0x68>)
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <StartPitch_PID+0x60>)
 80015d4:	490a      	ldr	r1, [pc, #40]	; (8001600 <StartPitch_PID+0x6c>)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <StartPitch_PID+0x58>)
 80015d8:	f001 fe88 	bl	80032ec <Pid_CompensatePitch>
		vTaskDelay(150);
 80015dc:	2096      	movs	r0, #150	; 0x96
 80015de:	f010 f903 	bl	80117e8 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80015e2:	e7e4      	b.n	80015ae <StartPitch_PID+0x1a>
 80015e4:	3ccccccd 	.word	0x3ccccccd
 80015e8:	42c80000 	.word	0x42c80000
 80015ec:	200002d8 	.word	0x200002d8
 80015f0:	20000364 	.word	0x20000364
 80015f4:	200003bc 	.word	0x200003bc
 80015f8:	20000370 	.word	0x20000370
 80015fc:	20000478 	.word	0x20000478
 8001600:	20000464 	.word	0x20000464

08001604 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800160c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8001610:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001654 <StartYaw_PID+0x50>
 8001614:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001658 <StartYaw_PID+0x54>
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <StartYaw_PID+0x58>)
 800161a:	f001 fd43 	bl	80030a4 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <StartYaw_PID+0x5c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2119      	movs	r1, #25
 8001624:	4618      	mov	r0, r3
 8001626:	f00f fd9d 	bl	8011164 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <StartYaw_PID+0x60>)
 800162c:	480e      	ldr	r0, [pc, #56]	; (8001668 <StartYaw_PID+0x64>)
 800162e:	f000 fec5 	bl	80023bc <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <StartYaw_PID+0x5c>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	f00f fc1e 	bl	8010e7c <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <StartYaw_PID+0x68>)
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <StartYaw_PID+0x60>)
 8001644:	490a      	ldr	r1, [pc, #40]	; (8001670 <StartYaw_PID+0x6c>)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <StartYaw_PID+0x58>)
 8001648:	f001 fd47 	bl	80030da <Pid_CompensateYaw>
		vTaskDelay(150);
 800164c:	2096      	movs	r0, #150	; 0x96
 800164e:	f010 f8cb 	bl	80117e8 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8001652:	e7e4      	b.n	800161e <StartYaw_PID+0x1a>
 8001654:	3ccccccd 	.word	0x3ccccccd
 8001658:	42c80000 	.word	0x42c80000
 800165c:	200002fc 	.word	0x200002fc
 8001660:	20000364 	.word	0x20000364
 8001664:	200003bc 	.word	0x200003bc
 8001668:	20000370 	.word	0x20000370
 800166c:	20000478 	.word	0x20000478
 8001670:	20000464 	.word	0x20000464

08001674 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <StartPressureMonitor+0x48>)
 800167e:	f000 f9f1 	bl	8001a64 <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <StartPressureMonitor+0x4c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <StartPressureMonitor+0x50>)
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <StartPressureMonitor+0x48>)
 800168c:	f000 fa34 	bl	8001af8 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <StartPressureMonitor+0x4c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	490b      	ldr	r1, [pc, #44]	; (80016c4 <StartPressureMonitor+0x50>)
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <StartPressureMonitor+0x48>)
 800169a:	f000 f97d 	bl	8001998 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <StartPressureMonitor+0x4c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <StartPressureMonitor+0x50>)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <StartPressureMonitor+0x48>)
 80016a8:	f000 f920 	bl	80018ec <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <StartPressureMonitor+0x50>)
 80016ae:	f000 fa4f 	bl	8001b50 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 80016b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b6:	f010 f897 	bl	80117e8 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80016ba:	e7e9      	b.n	8001690 <StartPressureMonitor+0x1c>
 80016bc:	20000370 	.word	0x20000370
 80016c0:	20000364 	.word	0x20000364
 80016c4:	200004a8 	.word	0x200004a8

080016c8 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80016d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <StartGPS+0x34>)
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <StartGPS+0x38>)
 80016d8:	f009 fb34 	bl	800ad44 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <StartGPS+0x3c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4909      	ldr	r1, [pc, #36]	; (8001708 <StartGPS+0x40>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00f fd3e 	bl	8011164 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 80016e8:	4908      	ldr	r1, [pc, #32]	; (800170c <StartGPS+0x44>)
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <StartGPS+0x34>)
 80016ec:	f001 f82e 	bl	800274c <gps_ReadNMEA>
	  vTaskDelay(1000);
 80016f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f4:	f010 f878 	bl	80117e8 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80016f8:	e7ea      	b.n	80016d0 <StartGPS+0x8>
 80016fa:	bf00      	nop
 80016fc:	200004ec 	.word	0x200004ec
 8001700:	20000a0c 	.word	0x20000a0c
 8001704:	20000368 	.word	0x20000368
 8001708:	000186a0 	.word	0x000186a0
 800170c:	200004bc 	.word	0x200004bc

08001710 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b09c      	sub	sp, #112	; 0x70
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <StartMainTask+0x8c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4920      	ldr	r1, [pc, #128]	; (80017a0 <StartMainTask+0x90>)
 800171e:	4618      	mov	r0, r3
 8001720:	f00f fd20 	bl	8011164 <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <StartMainTask+0x8c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	491d      	ldr	r1, [pc, #116]	; (80017a0 <StartMainTask+0x90>)
 800172a:	4618      	mov	r0, r3
 800172c:	f00f fd1a 	bl	8011164 <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8001730:	2300      	movs	r3, #0
 8001732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001734:	e011      	b.n	800175a <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <StartMainTask+0x94>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8001740:	2064      	movs	r0, #100	; 0x64
 8001742:	f010 f851 	bl	80117e8 <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <StartMainTask+0x94>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800174e:	2064      	movs	r0, #100	; 0x64
 8001750:	f010 f84a 	bl	80117e8 <vTaskDelay>
	for(int i=0;i<5;i++){
 8001754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001756:	3301      	adds	r3, #1
 8001758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800175a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800175c:	2b04      	cmp	r3, #4
 800175e:	ddea      	ble.n	8001736 <StartMainTask+0x26>
	}
	uint8_t test[100];
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart5, "AT\r\n", 8, 100);
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	2208      	movs	r2, #8
 8001764:	4910      	ldr	r1, [pc, #64]	; (80017a8 <StartMainTask+0x98>)
 8001766:	4811      	ldr	r0, [pc, #68]	; (80017ac <StartMainTask+0x9c>)
 8001768:	f009 f982 	bl	800aa70 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart5, &test, 100, 1000);
 800176c:	f107 0108 	add.w	r1, r7, #8
 8001770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001774:	2264      	movs	r2, #100	; 0x64
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <StartMainTask+0x9c>)
 8001778:	f009 fa10 	bl	800ab9c <HAL_UART_Receive>
//	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <StartMainTask+0xa0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	490c      	ldr	r1, [pc, #48]	; (80017b4 <StartMainTask+0xa4>)
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <StartMainTask+0xa8>)
 8001786:	f000 fc57 	bl	8002038 <BNO055_ReadAccel>
	  BNO055_ComputeSpeed(&hi2c2, &IMU_BNO055_struct);
 800178a:	490a      	ldr	r1, [pc, #40]	; (80017b4 <StartMainTask+0xa4>)
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <StartMainTask+0xa8>)
 800178e:	f000 fe4f 	bl	8002430 <BNO055_ComputeSpeed>


	  vTaskDelay(500);
 8001792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001796:	f010 f827 	bl	80117e8 <vTaskDelay>
	  HAL_UART_Transmit(&huart5, "AT\r\n", 8, 100);
 800179a:	e7e1      	b.n	8001760 <StartMainTask+0x50>
 800179c:	2000036c 	.word	0x2000036c
 80017a0:	6fc0ffff 	.word	0x6fc0ffff
 80017a4:	20000974 	.word	0x20000974
 80017a8:	080147e8 	.word	0x080147e8
 80017ac:	20000a9c 	.word	0x20000a9c
 80017b0:	20000364 	.word	0x20000364
 80017b4:	200003bc 	.word	0x200003bc
 80017b8:	20000370 	.word	0x20000370

080017bc <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80017c4:	4909      	ldr	r1, [pc, #36]	; (80017ec <StartBatteryMonitoring+0x30>)
 80017c6:	480a      	ldr	r0, [pc, #40]	; (80017f0 <StartBatteryMonitoring+0x34>)
 80017c8:	f7ff fcb2 	bl	8001130 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <StartBatteryMonitoring+0x30>)
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <StartBatteryMonitoring+0x34>)
 80017d0:	f7ff fd22 	bl	8001218 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80017d4:	4905      	ldr	r1, [pc, #20]	; (80017ec <StartBatteryMonitoring+0x30>)
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <StartBatteryMonitoring+0x34>)
 80017d8:	f7ff fcda 	bl	8001190 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <StartBatteryMonitoring+0x34>)
 80017de:	f7ff fd5f 	bl	80012a0 <Battery_RemaningTime>
    vTaskDelay(5000);
 80017e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80017e6:	f00f ffff 	bl	80117e8 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80017ea:	e7eb      	b.n	80017c4 <StartBatteryMonitoring+0x8>
 80017ec:	200008d4 	.word	0x200008d4
 80017f0:	200004dc 	.word	0x200004dc

080017f4 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af04      	add	r7, sp, #16
 80017fa:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80017fc:	230a      	movs	r3, #10
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	2301      	movs	r3, #1
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	f107 030f 	add.w	r3, r7, #15
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	221b      	movs	r2, #27
 800180e:	21ec      	movs	r1, #236	; 0xec
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f004 fd27 	bl	8006264 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800181c:	b2db      	uxtb	r3, r3
 800181e:	3301      	adds	r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8001824:	230a      	movs	r3, #10
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2301      	movs	r3, #1
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	f107 030e 	add.w	r3, r7, #14
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	221b      	movs	r2, #27
 8001836:	21ec      	movs	r1, #236	; 0xec
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f004 fbff 	bl	800603c <HAL_I2C_Mem_Write>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 8001846:	b580      	push	{r7, lr}
 8001848:	b088      	sub	sp, #32
 800184a:	af04      	add	r7, sp, #16
 800184c:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800184e:	230a      	movs	r3, #10
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	2301      	movs	r3, #1
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	f107 030f 	add.w	r3, r7, #15
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	221b      	movs	r2, #27
 8001860:	21ec      	movs	r1, #236	; 0xec
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f004 fcfe 	bl	8006264 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f003 0331 	and.w	r3, r3, #49	; 0x31
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3301      	adds	r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8001876:	230a      	movs	r3, #10
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2301      	movs	r3, #1
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f107 030e 	add.w	r3, r7, #14
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	221b      	movs	r2, #27
 8001888:	21ec      	movs	r1, #236	; 0xec
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f004 fbd6 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af04      	add	r7, sp, #16
 800189e:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80018a0:	230a      	movs	r3, #10
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	2301      	movs	r3, #1
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	f107 030f 	add.w	r3, r7, #15
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	221b      	movs	r2, #27
 80018b2:	21ec      	movs	r1, #236	; 0xec
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f004 fcd5 	bl	8006264 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	3330      	adds	r3, #48	; 0x30
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80018c8:	230a      	movs	r3, #10
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	2301      	movs	r3, #1
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	f107 030e 	add.w	r3, r7, #14
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	221b      	movs	r2, #27
 80018da:	21ec      	movs	r1, #236	; 0xec
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f004 fbad 	bl	800603c <HAL_I2C_Mem_Write>
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af04      	add	r7, sp, #16
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 80018f8:	2123      	movs	r1, #35	; 0x23
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f00f fc32 	bl	8011164 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8001900:	230a      	movs	r3, #10
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 0313 	add.w	r3, r7, #19
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	2207      	movs	r2, #7
 8001912:	21ec      	movs	r1, #236	; 0xec
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f004 fca5 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 800191a:	230a      	movs	r3, #10
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	2301      	movs	r3, #1
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	f107 0312 	add.w	r3, r7, #18
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	2208      	movs	r2, #8
 800192c:	21ec      	movs	r1, #236	; 0xec
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f004 fc98 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 8001934:	230a      	movs	r3, #10
 8001936:	9302      	str	r3, [sp, #8]
 8001938:	2301      	movs	r3, #1
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	f107 0311 	add.w	r3, r7, #17
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	2209      	movs	r2, #9
 8001946:	21ec      	movs	r1, #236	; 0xec
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f004 fc8b 	bl	8006264 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800194e:	2300      	movs	r3, #0
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f00f fa91 	bl	8010e7c <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 800195a:	7cfb      	ldrb	r3, [r7, #19]
 800195c:	461a      	mov	r2, r3
 800195e:	7cbb      	ldrb	r3, [r7, #18]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	441a      	add	r2, r3
 8001964:	7c7b      	ldrb	r3, [r7, #17]
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <BMP390_ReadTemp+0xa8>)
 8001970:	fba3 1302 	umull	r1, r3, r3, r2
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	0852      	lsrs	r2, r2, #1
 8001978:	4413      	add	r3, r2
 800197a:	0c5b      	lsrs	r3, r3, #17
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	04000105 	.word	0x04000105

08001998 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af04      	add	r7, sp, #16
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80019a4:	2123      	movs	r1, #35	; 0x23
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f00f fbdc 	bl	8011164 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80019ac:	230a      	movs	r3, #10
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2301      	movs	r3, #1
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	f107 0313 	add.w	r3, r7, #19
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	2204      	movs	r2, #4
 80019be:	21ec      	movs	r1, #236	; 0xec
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f004 fc4f 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80019c6:	230a      	movs	r3, #10
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2301      	movs	r3, #1
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	f107 0312 	add.w	r3, r7, #18
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2301      	movs	r3, #1
 80019d6:	2205      	movs	r2, #5
 80019d8:	21ec      	movs	r1, #236	; 0xec
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f004 fc42 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 80019e0:	230a      	movs	r3, #10
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	2301      	movs	r3, #1
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	f107 0311 	add.w	r3, r7, #17
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	2206      	movs	r2, #6
 80019f2:	21ec      	movs	r1, #236	; 0xec
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f004 fc35 	bl	8006264 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80019fa:	2300      	movs	r3, #0
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f00f fa3b 	bl	8010e7c <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 8001a06:	7cfb      	ldrb	r3, [r7, #19]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	7cbb      	ldrb	r3, [r7, #18]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	441a      	add	r2, r3
 8001a10:	7c7b      	ldrb	r3, [r7, #17]
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8001a18:	6978      	ldr	r0, [r7, #20]
 8001a1a:	f7fe fd4d 	bl	80004b8 <__aeabi_ui2d>
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <BMP390_ReadPress+0xc8>)
 8001a24:	f7fe fdc2 	bl	80005ac <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	a309      	add	r3, pc, #36	; (adr r3, 8001a58 <BMP390_ReadPress+0xc0>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fc03 	bl	8000240 <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff f863 	bl	8000b0c <__aeabi_d2f>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	601a      	str	r2, [r3, #0]

}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	4072c000 	.word	0x4072c000
 8001a60:	3f0db000 	.word	0x3f0db000

08001a64 <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af04      	add	r7, sp, #16
 8001a6a:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8001a70:	230a      	movs	r3, #10
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	f107 030e 	add.w	r3, r7, #14
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2200      	movs	r2, #0
 8001a82:	21ec      	movs	r1, #236	; 0xec
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f004 fbed 	bl	8006264 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	2b60      	cmp	r3, #96	; 0x60
 8001a8e:	d001      	beq.n	8001a94 <BMP390_Init+0x30>
		res = 1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8001a94:	230a      	movs	r3, #10
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f107 030e 	add.w	r3, r7, #14
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	21ec      	movs	r1, #236	; 0xec
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f004 fbdb 	bl	8006264 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d001      	beq.n	8001ab8 <BMP390_Init+0x54>
		res = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fec4 	bl	8001846 <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fe98 	bl	80017f4 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fee7 	bl	8001898 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8001aca:	2005      	movs	r0, #5
 8001acc:	f002 fa10 	bl	8003ef0 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8001ad0:	2342      	movs	r3, #66	; 0x42
 8001ad2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	f107 030e 	add.w	r3, r7, #14
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2219      	movs	r2, #25
 8001ae6:	21ec      	movs	r1, #236	; 0xec
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f004 faa7 	bl	800603c <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e010      	b.n	8001b2c <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff42 	bl	8001998 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b22:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b09      	cmp	r3, #9
 8001b30:	ddeb      	ble.n	8001b0a <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8001b32:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0000      	movs	r0, r0
	...

08001b50 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	ed93 7a00 	vldr	s14, [r3]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b68:	ee16 0a90 	vmov	r0, s13
 8001b6c:	f7fe fcc6 	bl	80004fc <__aeabi_f2d>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001bc0 <BMP390_GetRelativeAltitude+0x70>
 8001b78:	ec43 2b10 	vmov	d0, r2, r3
 8001b7c:	f011 fe72 	bl	8013864 <pow>
 8001b80:	ec53 2b10 	vmov	r2, r3, d0
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	4911      	ldr	r1, [pc, #68]	; (8001bd0 <BMP390_GetRelativeAltitude+0x80>)
 8001b8a:	f7fe fb57 	bl	800023c <__aeabi_dsub>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	a30c      	add	r3, pc, #48	; (adr r3, 8001bc8 <BMP390_GetRelativeAltitude+0x78>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fd06 	bl	80005ac <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe ffb0 	bl	8000b0c <__aeabi_d2f>
 8001bac:	4602      	mov	r2, r0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	1a36e2eb 	.word	0x1a36e2eb
 8001bc4:	3fc85bc0 	.word	0x3fc85bc0
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40e5a540 	.word	0x40e5a540
 8001bd0:	3ff00000 	.word	0x3ff00000

08001bd4 <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8001be0:	230a      	movs	r3, #10
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2301      	movs	r3, #1
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	1cfb      	adds	r3, r7, #3
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	2207      	movs	r2, #7
 8001bf0:	2150      	movs	r1, #80	; 0x50
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f004 fa22 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af04      	add	r7, sp, #16
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8001c0e:	7afa      	ldrb	r2, [r7, #11]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8001c16:	230a      	movs	r3, #10
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f107 030b 	add.w	r3, r7, #11
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	223d      	movs	r2, #61	; 0x3d
 8001c28:	2150      	movs	r1, #80	; 0x50
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f004 fa06 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af04      	add	r7, sp, #16
 8001c3e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2301      	movs	r3, #1
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	f107 030f 	add.w	r3, r7, #15
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	2150      	movs	r1, #80	; 0x50
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f004 fb05 	bl	8006264 <HAL_I2C_Mem_Read>
	return system_reg;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af04      	add	r7, sp, #16
 8001c6a:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8001c6c:	2364      	movs	r3, #100	; 0x64
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2301      	movs	r3, #1
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	f107 030f 	add.w	r3, r7, #15
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	2237      	movs	r2, #55	; 0x37
 8001c7e:	2150      	movs	r1, #80	; 0x50
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f004 faef 	bl	8006264 <HAL_I2C_Mem_Read>
	return system_reg;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8001c98:	2364      	movs	r3, #100	; 0x64
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	f107 030f 	add.w	r3, r7, #15
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	2210      	movs	r2, #16
 8001caa:	2150      	movs	r1, #80	; 0x50
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f004 fad9 	bl	8006264 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8001cbc:	230a      	movs	r3, #10
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	f107 030f 	add.w	r3, r7, #15
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	2210      	movs	r2, #16
 8001cce:	2150      	movs	r1, #80	; 0x50
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f004 f9b3 	bl	800603c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8001cd6:	2364      	movs	r3, #100	; 0x64
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f107 030f 	add.w	r3, r7, #15
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	2150      	movs	r1, #80	; 0x50
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f004 faba 	bl	8006264 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	f043 0320 	orr.w	r3, r3, #32
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	f107 030f 	add.w	r3, r7, #15
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	2150      	movs	r1, #80	; 0x50
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f004 f994 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8001d28:	2364      	movs	r3, #100	; 0x64
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	f107 030f 	add.w	r3, r7, #15
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2212      	movs	r2, #18
 8001d3a:	2150      	movs	r1, #80	; 0x50
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f004 fa91 	bl	8006264 <HAL_I2C_Mem_Read>
	switch (axis) {
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	2b5a      	cmp	r3, #90	; 0x5a
 8001d46:	d012      	beq.n	8001d6e <BNO055_EnableHighGAcc+0x52>
 8001d48:	2b5a      	cmp	r3, #90	; 0x5a
 8001d4a:	dc16      	bgt.n	8001d7a <BNO055_EnableHighGAcc+0x5e>
 8001d4c:	2b58      	cmp	r3, #88	; 0x58
 8001d4e:	d002      	beq.n	8001d56 <BNO055_EnableHighGAcc+0x3a>
 8001d50:	2b59      	cmp	r3, #89	; 0x59
 8001d52:	d006      	beq.n	8001d62 <BNO055_EnableHighGAcc+0x46>
 8001d54:	e011      	b.n	8001d7a <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	73fb      	strb	r3, [r7, #15]
			break;
 8001d60:	e00b      	b.n	8001d7a <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	73fb      	strb	r3, [r7, #15]
			break;
 8001d6c:	e005      	b.n	8001d7a <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	73fb      	strb	r3, [r7, #15]
			break;
 8001d78:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	f107 030f 	add.w	r3, r7, #15
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	2212      	movs	r2, #18
 8001d8c:	2150      	movs	r1, #80	; 0x50
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f004 f954 	bl	800603c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8001d94:	2364      	movs	r3, #100	; 0x64
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f107 030f 	add.w	r3, r7, #15
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2301      	movs	r3, #1
 8001da4:	2212      	movs	r2, #18
 8001da6:	2150      	movs	r1, #80	; 0x50
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f004 fa5b 	bl	8006264 <HAL_I2C_Mem_Read>
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b088      	sub	sp, #32
 8001dba:	af04      	add	r7, sp, #16
 8001dbc:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	f107 030f 	add.w	r3, r7, #15
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	223f      	movs	r2, #63	; 0x3f
 8001dd0:	2150      	movs	r1, #80	; 0x50
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f004 fa46 	bl	8006264 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8001de2:	230a      	movs	r3, #10
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	2301      	movs	r3, #1
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f107 030f 	add.w	r3, r7, #15
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2301      	movs	r3, #1
 8001df2:	223f      	movs	r2, #63	; 0x3f
 8001df4:	2150      	movs	r1, #80	; 0x50
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f004 f920 	bl	800603c <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff31 	bl	8001c64 <BNO055_ReadITStatus>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b088      	sub	sp, #32
 8001e0e:	af04      	add	r7, sp, #16
 8001e10:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff10 	bl	8001c38 <BNO055_ReadSystemReg>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3b80      	subs	r3, #128	; 0x80
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	f107 030e 	add.w	r3, r7, #14
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	223f      	movs	r2, #63	; 0x3f
 8001e3c:	2150      	movs	r1, #80	; 0x50
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f004 f8fc 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af04      	add	r7, sp, #16
 8001e52:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff feef 	bl	8001c38 <BNO055_ReadSystemReg>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	2301      	movs	r3, #1
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	f107 030e 	add.w	r3, r7, #14
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	223f      	movs	r2, #63	; 0x3f
 8001e7e:	2150      	movs	r1, #80	; 0x50
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f004 f8db 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b088      	sub	sp, #32
 8001e92:	af04      	add	r7, sp, #16
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8001e9c:	230a      	movs	r3, #10
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	f107 030e 	add.w	r3, r7, #14
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	2236      	movs	r2, #54	; 0x36
 8001eae:	2150      	movs	r1, #80	; 0x50
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f004 f9d7 	bl	8006264 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8001eb6:	7bbb      	ldrb	r3, [r7, #14]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d001      	beq.n	8001ec4 <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffc1 	bl	8001e4c <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8001eca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ece:	f00e fe00 	bl	8010ad2 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	9302      	str	r3, [sp, #8]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	f107 030e 	add.w	r3, r7, #14
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	223a      	movs	r2, #58	; 0x3a
 8001ee4:	2150      	movs	r1, #80	; 0x50
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f004 f9bc 	bl	8006264 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2301      	movs	r3, #1
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	f107 030e 	add.w	r3, r7, #14
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	2239      	movs	r2, #57	; 0x39
 8001f08:	2150      	movs	r1, #80	; 0x50
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f004 f9aa 	bl	8006264 <HAL_I2C_Mem_Read>

	return res;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af04      	add	r7, sp, #16
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	f107 030f 	add.w	r3, r7, #15
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	2214      	movs	r2, #20
 8001f3c:	2150      	movs	r1, #80	; 0x50
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f004 f87c 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	2301      	movs	r3, #1
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	f107 030f 	add.w	r3, r7, #15
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2213      	movs	r2, #19
 8001f6e:	2150      	movs	r1, #80	; 0x50
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f004 f863 	bl	800603c <HAL_I2C_Mem_Write>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b088      	sub	sp, #32
 8001f82:	af04      	add	r7, sp, #16
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fe18 	bl	8001bd4 <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fe73 	bl	8001c90 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8001faa:	2158      	movs	r1, #88	; 0x58
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff feb5 	bl	8001d1c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8001fb2:	2159      	movs	r1, #89	; 0x59
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff feb1 	bl	8001d1c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8001fba:	215a      	movs	r1, #90	; 0x5a
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fead 	bl	8001d1c <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8001fc2:	2150      	movs	r1, #80	; 0x50
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ffa8 	bl	8001f1a <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffbd 	bl	8001f4c <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fdfd 	bl	8001bd4 <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff15 	bl	8001e0a <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8001fe0:	20c8      	movs	r0, #200	; 0xc8
 8001fe2:	f00e fd76 	bl	8010ad2 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8001fe6:	6839      	ldr	r1, [r7, #0]
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff50 	bl	8001e8e <BNO055_CheckSelfTestResult>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8001ff2:	7bbb      	ldrb	r3, [r7, #14]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <BNO055_Init+0x7e>
		res = 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	210c      	movs	r1, #12
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fdfd 	bl	8001c00 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8002006:	230a      	movs	r3, #10
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	2301      	movs	r3, #1
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	f107 030e 	add.w	r3, r7, #14
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	223d      	movs	r2, #61	; 0x3d
 8002018:	2150      	movs	r1, #80	; 0x50
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f004 f922 	bl	8006264 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8002020:	7bbb      	ldrb	r3, [r7, #14]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d001      	beq.n	800202a <BNO055_Init+0xac>
		res = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0000      	movs	r0, r0
	...

08002038 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af04      	add	r7, sp, #16
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 8002044:	2119      	movs	r1, #25
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f00f f88c 	bl	8011164 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 800204c:	230a      	movs	r3, #10
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	f107 0317 	add.w	r3, r7, #23
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2301      	movs	r3, #1
 800205c:	2208      	movs	r2, #8
 800205e:	2150      	movs	r1, #80	; 0x50
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f004 f8ff 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 8002066:	230a      	movs	r3, #10
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	2301      	movs	r3, #1
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	f107 0316 	add.w	r3, r7, #22
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2301      	movs	r3, #1
 8002076:	2209      	movs	r2, #9
 8002078:	2150      	movs	r1, #80	; 0x50
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f004 f8f2 	bl	8006264 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002080:	2300      	movs	r3, #0
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f00e fef8 	bl	8010e7c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	461a      	mov	r2, r3
 8002090:	7dbb      	ldrb	r3, [r7, #22]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	4413      	add	r3, r2
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800209e:	4b74      	ldr	r3, [pc, #464]	; (8002270 <BNO055_ReadAccel+0x238>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa1f 	bl	80004fc <__aeabi_f2d>
 80020be:	a368      	add	r3, pc, #416	; (adr r3, 8002260 <BNO055_ReadAccel+0x228>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe fd02 	bl	8000acc <__aeabi_dcmpgt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d012      	beq.n	80020f4 <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa12 	bl	80004fc <__aeabi_f2d>
 80020d8:	a363      	add	r3, pc, #396	; (adr r3, 8002268 <BNO055_ReadAccel+0x230>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe f8ad 	bl	800023c <__aeabi_dsub>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fd0f 	bl	8000b0c <__aeabi_d2f>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 80020f4:	2119      	movs	r1, #25
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f00f f834 	bl	8011164 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 80020fc:	230a      	movs	r3, #10
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	2301      	movs	r3, #1
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	f107 0317 	add.w	r3, r7, #23
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2301      	movs	r3, #1
 800210c:	220a      	movs	r2, #10
 800210e:	2150      	movs	r1, #80	; 0x50
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f004 f8a7 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 8002116:	230a      	movs	r3, #10
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	2301      	movs	r3, #1
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	f107 0316 	add.w	r3, r7, #22
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	220b      	movs	r2, #11
 8002128:	2150      	movs	r1, #80	; 0x50
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f004 f89a 	bl	8006264 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f00e fea0 	bl	8010e7c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	461a      	mov	r2, r3
 8002140:	7dbb      	ldrb	r3, [r7, #22]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	4413      	add	r3, r2
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <BNO055_ReadAccel+0x238>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800215a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f9c7 	bl	80004fc <__aeabi_f2d>
 800216e:	a33c      	add	r3, pc, #240	; (adr r3, 8002260 <BNO055_ReadAccel+0x228>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe fcaa 	bl	8000acc <__aeabi_dcmpgt>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9ba 	bl	80004fc <__aeabi_f2d>
 8002188:	a337      	add	r3, pc, #220	; (adr r3, 8002268 <BNO055_ReadAccel+0x230>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe f855 	bl	800023c <__aeabi_dsub>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fcb7 	bl	8000b0c <__aeabi_d2f>
 800219e:	4602      	mov	r2, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 80021a4:	2119      	movs	r1, #25
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f00e ffdc 	bl	8011164 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80021ac:	230a      	movs	r3, #10
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	2301      	movs	r3, #1
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	f107 0317 	add.w	r3, r7, #23
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	220c      	movs	r2, #12
 80021be:	2150      	movs	r1, #80	; 0x50
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f004 f84f 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80021c6:	230a      	movs	r3, #10
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	f107 0316 	add.w	r3, r7, #22
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	220d      	movs	r2, #13
 80021d8:	2150      	movs	r1, #80	; 0x50
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f004 f842 	bl	8006264 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80021e0:	2300      	movs	r3, #0
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f00e fe48 	bl	8010e7c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	461a      	mov	r2, r3
 80021f0:	7dbb      	ldrb	r3, [r7, #22]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	4413      	add	r3, r2
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <BNO055_ReadAccel+0x238>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800220a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f96f 	bl	80004fc <__aeabi_f2d>
 800221e:	a310      	add	r3, pc, #64	; (adr r3, 8002260 <BNO055_ReadAccel+0x228>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe fc52 	bl	8000acc <__aeabi_dcmpgt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d100      	bne.n	8002230 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 800222e:	e012      	b.n	8002256 <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f961 	bl	80004fc <__aeabi_f2d>
 800223a:	a30b      	add	r3, pc, #44	; (adr r3, 8002268 <BNO055_ReadAccel+0x230>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fd fffc 	bl	800023c <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fc5e 	bl	8000b0c <__aeabi_d2f>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	615a      	str	r2, [r3, #20]
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	47ae147b 	.word	0x47ae147b
 8002264:	40747ae1 	.word	0x40747ae1
 8002268:	47ae147b 	.word	0x47ae147b
 800226c:	40847ae1 	.word	0x40847ae1
 8002270:	20000000 	.word	0x20000000

08002274 <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af04      	add	r7, sp, #16
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 800227e:	230a      	movs	r3, #10
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2301      	movs	r3, #1
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	f107 030f 	add.w	r3, r7, #15
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2301      	movs	r3, #1
 800228e:	221c      	movs	r2, #28
 8002290:	2150      	movs	r1, #80	; 0x50
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f003 ffe6 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 8002298:	230a      	movs	r3, #10
 800229a:	9302      	str	r3, [sp, #8]
 800229c:	2301      	movs	r3, #1
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	f107 030e 	add.w	r3, r7, #14
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2301      	movs	r3, #1
 80022a8:	221d      	movs	r2, #29
 80022aa:	2150      	movs	r1, #80	; 0x50
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f003 ffd9 	bl	8006264 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	461a      	mov	r2, r3
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	4413      	add	r3, r2
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <BNO055_ReadEuler_Roll+0x98>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022e0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002310 <BNO055_ReadEuler_Roll+0x9c>
 80022e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	dc00      	bgt.n	80022f0 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 80022ee:	e009      	b.n	8002304 <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002314 <BNO055_ReadEuler_Roll+0xa0>
 80022fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000002 	.word	0x20000002
 8002310:	44fa0000 	.word	0x44fa0000
 8002314:	45800000 	.word	0x45800000

08002318 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af04      	add	r7, sp, #16
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 8002322:	230a      	movs	r3, #10
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030f 	add.w	r3, r7, #15
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	221e      	movs	r2, #30
 8002334:	2150      	movs	r1, #80	; 0x50
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f003 ff94 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 800233c:	230a      	movs	r3, #10
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	f107 030e 	add.w	r3, r7, #14
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2301      	movs	r3, #1
 800234c:	221f      	movs	r2, #31
 800234e:	2150      	movs	r1, #80	; 0x50
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f003 ff87 	bl	8006264 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	461a      	mov	r2, r3
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	4413      	add	r3, r2
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <BNO055_ReadEuler_Pitch+0x98>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002384:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80023b4 <BNO055_ReadEuler_Pitch+0x9c>
 8002388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	dc00      	bgt.n	8002394 <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 8002392:	e009      	b.n	80023a8 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800239a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80023b8 <BNO055_ReadEuler_Pitch+0xa0>
 800239e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000002 	.word	0x20000002
 80023b4:	44fa0000 	.word	0x44fa0000
 80023b8:	45800000 	.word	0x45800000

080023bc <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80023c6:	230a      	movs	r3, #10
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	2301      	movs	r3, #1
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	f107 030f 	add.w	r3, r7, #15
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2301      	movs	r3, #1
 80023d6:	221a      	movs	r2, #26
 80023d8:	2150      	movs	r1, #80	; 0x50
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f003 ff42 	bl	8006264 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 80023e0:	230a      	movs	r3, #10
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030e 	add.w	r3, r7, #14
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	221b      	movs	r2, #27
 80023f2:	2150      	movs	r1, #80	; 0x50
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f003 ff35 	bl	8006264 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	461a      	mov	r2, r3
 80023fe:	7bbb      	ldrb	r3, [r7, #14]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	4413      	add	r3, r2
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <BNO055_ReadEuler_Yaw+0x70>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000002 	.word	0x20000002

08002430 <BNO055_ComputeSpeed>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @INFORMATIONS - Need to be call after a ReadAccel function in order to work correctly
 * Tick should be increment every ms in order to gather correct data
 */
void BNO055_ComputeSpeed(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]

	float speed_vector_x;
	float current_acceleration =BNO055->raw_data.accelerometer.x;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	61fb      	str	r3, [r7, #28]
	uint32_t current_tick = HAL_GetTick();
 8002440:	f001 fd4a 	bl	8003ed8 <HAL_GetTick>
 8002444:	61b8      	str	r0, [r7, #24]
	float delta_acceleration = (current_acceleration - BNO055->reserved_for_operation.previous_acceleration.x);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800244c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t delta_tick = (current_tick - BNO055->reserved_for_operation.last_call_tick.x);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	613b      	str	r3, [r7, #16]


	speed_vector_x = (float)(delta_tick/1000)*current_acceleration;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <BNO055_ComputeSpeed+0x60>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002476:	ed97 7a07 	vldr	s14, [r7, #28]
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc7 7a03 	vstr	s15, [r7, #12]
	BNO055->processed_data.speed_vector.x = speed_vector_x;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002488:	bf00      	nop
 800248a:	3720      	adds	r7, #32
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <MX_DMA_Init+0x50>)
 800249c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249e:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <MX_DMA_Init+0x50>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6493      	str	r3, [r2, #72]	; 0x48
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <MX_DMA_Init+0x50>)
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_DMA_Init+0x50>)
 80024b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <MX_DMA_Init+0x50>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6493      	str	r3, [r2, #72]	; 0x48
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_DMA_Init+0x50>)
 80024c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2105      	movs	r1, #5
 80024ce:	200b      	movs	r0, #11
 80024d0:	f002 fff4 	bl	80054bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024d4:	200b      	movs	r0, #11
 80024d6:	f003 f80b 	bl	80054f0 <HAL_NVIC_EnableIRQ>

}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000

080024e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024fe:	4b37      	ldr	r3, [pc, #220]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4a36      	ldr	r2, [pc, #216]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250a:	4b34      	ldr	r3, [pc, #208]	; (80025dc <MX_GPIO_Init+0xf4>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002516:	4b31      	ldr	r3, [pc, #196]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a30      	ldr	r2, [pc, #192]	; (80025dc <MX_GPIO_Init+0xf4>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <MX_GPIO_Init+0xf4>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <MX_GPIO_Init+0xf4>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <MX_GPIO_Init+0xf4>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <MX_GPIO_Init+0xf4>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002580:	f003 fc78 	bl	8005e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258a:	2301      	movs	r3, #1
 800258c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a0:	f003 fae6 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 80025a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025be:	f003 fad7 	bl	8005b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2105      	movs	r1, #5
 80025c6:	2028      	movs	r0, #40	; 0x28
 80025c8:	f002 ff78 	bl	80054bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025cc:	2028      	movs	r0, #40	; 0x28
 80025ce:	f002 ff8f 	bl	80054f0 <HAL_NVIC_EnableIRQ>

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000

080025e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <MX_I2C2_Init+0x74>)
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <MX_I2C2_Init+0x78>)
 80025e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_I2C2_Init+0x74>)
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <MX_I2C2_Init+0x7c>)
 80025ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_I2C2_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_I2C2_Init+0x74>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_I2C2_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_I2C2_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_I2C2_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MX_I2C2_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_I2C2_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800261a:	480e      	ldr	r0, [pc, #56]	; (8002654 <MX_I2C2_Init+0x74>)
 800261c:	f003 fc7f 	bl	8005f1e <HAL_I2C_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002626:	f000 fced 	bl	8003004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800262a:	2100      	movs	r1, #0
 800262c:	4809      	ldr	r0, [pc, #36]	; (8002654 <MX_I2C2_Init+0x74>)
 800262e:	f004 f9d9 	bl	80069e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002638:	f000 fce4 	bl	8003004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800263c:	2100      	movs	r1, #0
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <MX_I2C2_Init+0x74>)
 8002640:	f004 fa1b 	bl	8006a7a <HAL_I2CEx_ConfigDigitalFilter>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800264a:	f000 fcdb 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000370 	.word	0x20000370
 8002658:	40005800 	.word	0x40005800
 800265c:	20c0edff 	.word	0x20c0edff

08002660 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0a0      	sub	sp, #128	; 0x80
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	2254      	movs	r2, #84	; 0x54
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f010 ffff 	bl	8013684 <memset>
  if(i2cHandle->Instance==I2C2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2c      	ldr	r2, [pc, #176]	; (800273c <HAL_I2C_MspInit+0xdc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d151      	bne.n	8002734 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002694:	2300      	movs	r3, #0
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	4618      	mov	r0, r3
 800269e:	f006 fd75 	bl	800918c <HAL_RCCEx_PeriphCLKConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026a8:	f000 fcac 	bl	8003004 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 80026b2:	f043 0320 	orr.w	r3, r3, #32
 80026b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 80026ca:	f043 0304 	orr.w	r3, r3, #4
 80026ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026dc:	2301      	movs	r3, #1
 80026de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e0:	2312      	movs	r3, #18
 80026e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026ec:	2304      	movs	r3, #4
 80026ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026f4:	4619      	mov	r1, r3
 80026f6:	4813      	ldr	r0, [pc, #76]	; (8002744 <HAL_I2C_MspInit+0xe4>)
 80026f8:	f003 fa3a 	bl	8005b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026fc:	2310      	movs	r3, #16
 80026fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002700:	2312      	movs	r3, #18
 8002702:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800270c:	2304      	movs	r3, #4
 800270e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002710:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002714:	4619      	mov	r1, r3
 8002716:	480c      	ldr	r0, [pc, #48]	; (8002748 <HAL_I2C_MspInit+0xe8>)
 8002718:	f003 fa2a 	bl	8005b70 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 8002722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002726:	6593      	str	r3, [r2, #88]	; 0x58
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_I2C_MspInit+0xe0>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002734:	bf00      	nop
 8002736:	3780      	adds	r7, #128	; 0x80
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40005800 	.word	0x40005800
 8002740:	40021000 	.word	0x40021000
 8002744:	48001400 	.word	0x48001400
 8002748:	48000800 	.word	0x48000800

0800274c <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 8002756:	4a70      	ldr	r2, [pc, #448]	; (8002918 <gps_ReadNMEA+0x1cc>)
 8002758:	f107 0318 	add.w	r3, r7, #24
 800275c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002760:	6018      	str	r0, [r3, #0]
 8002762:	3304      	adds	r3, #4
 8002764:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800276c:	2300      	movs	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
 8002770:	e0c8      	b.n	8002904 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b24      	cmp	r3, #36	; 0x24
 800277c:	f040 80bf 	bne.w	80028fe <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002784:	e00f      	b.n	80027a6 <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 8002786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	4413      	add	r3, r2
 800278c:	3301      	adds	r3, #1
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	7819      	ldrb	r1, [r3, #0]
 8002794:	f107 0220 	add.w	r2, r7, #32
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	4413      	add	r3, r2
 800279c:	460a      	mov	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	3301      	adds	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	ddec      	ble.n	8002786 <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80027b2:	f107 0218 	add.w	r2, r7, #24
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fd2f 	bl	8000220 <strcmp>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 809a 	bne.w	80028fe <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	3306      	adds	r3, #6
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 80027d0:	2300      	movs	r3, #0
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d4:	e08e      	b.n	80028f4 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	3301      	adds	r3, #1
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 80027e8:	e013      	b.n	8002812 <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	441a      	add	r2, r3
 80027f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	3338      	adds	r3, #56	; 0x38
 80027f8:	443b      	add	r3, r7
 80027fa:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	3301      	adds	r3, #1
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	b2da      	uxtb	r2, r3
 8002808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <gps_ReadNMEA+0xde>
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b2c      	cmp	r3, #44	; 0x2c
 8002828:	d1df      	bne.n	80027ea <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 800282a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800282e:	3301      	adds	r3, #1
 8002830:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 8002834:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002838:	3b01      	subs	r3, #1
 800283a:	2b0a      	cmp	r3, #10
 800283c:	d857      	bhi.n	80028ee <gps_ReadNMEA+0x1a2>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <gps_ReadNMEA+0xf8>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002871 	.word	0x08002871
 8002848:	0800287f 	.word	0x0800287f
 800284c:	0800288d 	.word	0x0800288d
 8002850:	0800289b 	.word	0x0800289b
 8002854:	080028a9 	.word	0x080028a9
 8002858:	080028b7 	.word	0x080028b7
 800285c:	080028c5 	.word	0x080028c5
 8002860:	080028ef 	.word	0x080028ef
 8002864:	080028d3 	.word	0x080028d3
 8002868:	080028ef 	.word	0x080028ef
 800286c:	080028e1 	.word	0x080028e1
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f850 	bl	800291c <gps_ProcessUTC>
							break;
 800287c:	e037      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f887 	bl	8002998 <gps_ProcessLatitude>
							break;
 800288a:	e030      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f9fa 	bl	8002c8c <gps_ProcessNorthSouth>
							break;
 8002898:	e029      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f935 	bl	8002b10 <gps_ProcessLongitude>
							break;
 80028a6:	e022      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fa02 	bl	8002cb8 <gps_ProcessEastWest>
							break;
 80028b4:	e01b      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fa11 	bl	8002ce4 <gps_ProcessFix>
							break;
 80028c2:	e014      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	6839      	ldr	r1, [r7, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fa28 	bl	8002d20 <gps_ProcessSatelliteCount>
							break;
 80028d0:	e00d      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fa3d 	bl	8002d58 <gps_ProcessAltitude>
							break;
 80028de:	e006      	b.n	80028ee <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	6839      	ldr	r1, [r7, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fa92 	bl	8002e10 <gps_ProcessAltitudeCorre>
							break;
 80028ec:	bf00      	nop
				for(int k=0;k<12;k++){
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	3301      	adds	r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2b0b      	cmp	r3, #11
 80028f8:	f77f af6d 	ble.w	80027d6 <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 80028fc:	e008      	b.n	8002910 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	3301      	adds	r3, #1
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290a:	f6ff af32 	blt.w	8002772 <gps_ReadNMEA+0x26>

			}
		}
	}
}
 800290e:	bf00      	nop
 8002910:	bf00      	nop
 8002912:	3738      	adds	r7, #56	; 0x38
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	080147f0 	.word	0x080147f0

0800291c <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3301      	adds	r3, #1
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4413      	add	r3, r2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	3b10      	subs	r3, #16
 8002940:	b2da      	uxtb	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3302      	adds	r3, #2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4413      	add	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3303      	adds	r3, #3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4413      	add	r3, r2
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3b10      	subs	r3, #16
 8002962:	b2da      	uxtb	r2, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	4413      	add	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3305      	adds	r3, #5
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3b10      	subs	r3, #16
 8002984:	b2da      	uxtb	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	769a      	strb	r2, [r3, #26]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	3b30      	subs	r3, #48	; 0x30
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3301      	adds	r3, #1
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3b30      	subs	r3, #48	; 0x30
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3302      	adds	r3, #2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3303      	adds	r3, #3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	3b30      	subs	r3, #48	; 0x30
 80029ec:	4413      	add	r3, r2
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f6:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 80029fa:	68b8      	ldr	r0, [r7, #8]
 80029fc:	f7fd fd7e 	bl	80004fc <__aeabi_f2d>
 8002a00:	4604      	mov	r4, r0
 8002a02:	460d      	mov	r5, r1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3305      	adds	r3, #5
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	3b30      	subs	r3, #48	; 0x30
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fd63 	bl	80004d8 <__aeabi_i2d>
 8002a12:	a336      	add	r3, pc, #216	; (adr r3, 8002aec <gps_ProcessLatitude+0x154>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fdc8 	bl	80005ac <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4690      	mov	r8, r2
 8002a22:	4699      	mov	r9, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3306      	adds	r3, #6
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	3b30      	subs	r3, #48	; 0x30
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fd53 	bl	80004d8 <__aeabi_i2d>
 8002a32:	a330      	add	r3, pc, #192	; (adr r3, 8002af4 <gps_ProcessLatitude+0x15c>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fd fdb8 	bl	80005ac <__aeabi_dmul>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4640      	mov	r0, r8
 8002a42:	4649      	mov	r1, r9
 8002a44:	f7fd fbfc 	bl	8000240 <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3307      	adds	r3, #7
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3b30      	subs	r3, #48	; 0x30
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fd3d 	bl	80004d8 <__aeabi_i2d>
 8002a5e:	a327      	add	r3, pc, #156	; (adr r3, 8002afc <gps_ProcessLatitude+0x164>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fda2 	bl	80005ac <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4640      	mov	r0, r8
 8002a6e:	4649      	mov	r1, r9
 8002a70:	f7fd fbe6 	bl	8000240 <__adddf3>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4690      	mov	r8, r2
 8002a7a:	4699      	mov	r9, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	3b30      	subs	r3, #48	; 0x30
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd27 	bl	80004d8 <__aeabi_i2d>
 8002a8a:	a31e      	add	r3, pc, #120	; (adr r3, 8002b04 <gps_ProcessLatitude+0x16c>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fd8c 	bl	80005ac <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4640      	mov	r0, r8
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	f7fd fbd0 	bl	8000240 <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fbca 	bl	8000240 <__adddf3>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f82a 	bl	8000b0c <__aeabi_d2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ac8:	edd7 6a02 	vldr	s13, [r7, #8]
 8002acc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8002ae8 <gps_ProcessLatitude+0x150>
 8002ad0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	edc3 7a00 	vstr	s15, [r3]
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ae8:	42700000 	.word	0x42700000
 8002aec:	9999999a 	.word	0x9999999a
 8002af0:	3fb99999 	.word	0x3fb99999
 8002af4:	47ae147b 	.word	0x47ae147b
 8002af8:	3f847ae1 	.word	0x3f847ae1
 8002afc:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b00:	3f50624d 	.word	0x3f50624d
 8002b04:	eb1c432d 	.word	0xeb1c432d
 8002b08:	3f1a36e2 	.word	0x3f1a36e2
 8002b0c:	00000000 	.word	0x00000000

08002b10 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	3b30      	subs	r3, #48	; 0x30
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3b30      	subs	r3, #48	; 0x30
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3303      	adds	r3, #3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	3b30      	subs	r3, #48	; 0x30
 8002b66:	4413      	add	r3, r2
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b70:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8002b74:	68b8      	ldr	r0, [r7, #8]
 8002b76:	f7fd fcc1 	bl	80004fc <__aeabi_f2d>
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	460d      	mov	r5, r1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3305      	adds	r3, #5
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	3b30      	subs	r3, #48	; 0x30
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fca6 	bl	80004d8 <__aeabi_i2d>
 8002b8c:	a337      	add	r3, pc, #220	; (adr r3, 8002c6c <gps_ProcessLongitude+0x15c>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	f7fd fd0b 	bl	80005ac <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4690      	mov	r8, r2
 8002b9c:	4699      	mov	r9, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3306      	adds	r3, #6
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	3b30      	subs	r3, #48	; 0x30
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fc96 	bl	80004d8 <__aeabi_i2d>
 8002bac:	a331      	add	r3, pc, #196	; (adr r3, 8002c74 <gps_ProcessLongitude+0x164>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fcfb 	bl	80005ac <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4640      	mov	r0, r8
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	f7fd fb3f 	bl	8000240 <__adddf3>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4690      	mov	r8, r2
 8002bc8:	4699      	mov	r9, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3307      	adds	r3, #7
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3b30      	subs	r3, #48	; 0x30
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc80 	bl	80004d8 <__aeabi_i2d>
 8002bd8:	a328      	add	r3, pc, #160	; (adr r3, 8002c7c <gps_ProcessLongitude+0x16c>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f7fd fce5 	bl	80005ac <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4640      	mov	r0, r8
 8002be8:	4649      	mov	r1, r9
 8002bea:	f7fd fb29 	bl	8000240 <__adddf3>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3b30      	subs	r3, #48	; 0x30
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc6a 	bl	80004d8 <__aeabi_i2d>
 8002c04:	a31f      	add	r3, pc, #124	; (adr r3, 8002c84 <gps_ProcessLongitude+0x174>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f7fd fccf 	bl	80005ac <__aeabi_dmul>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4640      	mov	r0, r8
 8002c14:	4649      	mov	r1, r9
 8002c16:	f7fd fb13 	bl	8000240 <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4620      	mov	r0, r4
 8002c20:	4629      	mov	r1, r5
 8002c22:	f7fd fb0d 	bl	8000240 <__adddf3>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7fd ff6d 	bl	8000b0c <__aeabi_d2f>
 8002c32:	4603      	mov	r3, r0
 8002c34:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c42:	edd7 6a02 	vldr	s13, [r7, #8]
 8002c46:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8002c68 <gps_ProcessLongitude+0x158>
 8002c4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	42700000 	.word	0x42700000
 8002c6c:	9999999a 	.word	0x9999999a
 8002c70:	3fb99999 	.word	0x3fb99999
 8002c74:	47ae147b 	.word	0x47ae147b
 8002c78:	3f847ae1 	.word	0x3f847ae1
 8002c7c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c80:	3f50624d 	.word	0x3f50624d
 8002c84:	eb1c432d 	.word	0xeb1c432d
 8002c88:	3f1a36e2 	.word	0x3f1a36e2

08002c8c <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b4e      	cmp	r3, #78	; 0x4e
 8002c9c:	d103      	bne.n	8002ca6 <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8002ca4:	e002      	b.n	8002cac <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	741a      	strb	r2, [r3, #16]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b45      	cmp	r3, #69	; 0x45
 8002cc8:	d103      	bne.n	8002cd2 <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8002cd0:	e002      	b.n	8002cd8 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	745a      	strb	r2, [r3, #17]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b31      	cmp	r3, #49	; 0x31
 8002cf4:	d103      	bne.n	8002cfe <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8002cfc:	e00a      	b.n	8002d14 <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b32      	cmp	r3, #50	; 0x32
 8002d04:	d103      	bne.n	8002d0e <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	771a      	strb	r2, [r3, #28]
}
 8002d0c:	e002      	b.n	8002d14 <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	3b10      	subs	r3, #16
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	76da      	strb	r2, [r3, #27]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e03f      	b.n	8002df2 <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d7c:	d104      	bne.n	8002d88 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	74fb      	strb	r3, [r7, #19]
			i++;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01b      	beq.n	8002dc6 <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	3b30      	subs	r3, #48	; 0x30
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fb9d 	bl	80004d8 <__aeabi_i2d>
 8002d9e:	a31a      	add	r3, pc, #104	; (adr r3, 8002e08 <gps_ProcessAltitude+0xb0>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f7fd fc02 	bl	80005ac <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fd feac 	bl	8000b0c <__aeabi_d2f>
 8002db4:	ee07 0a10 	vmov	s14, r0
 8002db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dc0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002dc4:	e018      	b.n	8002df8 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8002dc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002dce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	3b30      	subs	r3, #48	; 0x30
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d9bc      	bls.n	8002d72 <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	609a      	str	r2, [r3, #8]
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	9999999a 	.word	0x9999999a
 8002e0c:	3fb99999 	.word	0x3fb99999

08002e10 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e03f      	b.n	8002eaa <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b2e      	cmp	r3, #46	; 0x2e
 8002e34:	d104      	bne.n	8002e40 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	74fb      	strb	r3, [r7, #19]
			i++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01b      	beq.n	8002e7e <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	3b30      	subs	r3, #48	; 0x30
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fb41 	bl	80004d8 <__aeabi_i2d>
 8002e56:	a31a      	add	r3, pc, #104	; (adr r3, 8002ec0 <gps_ProcessAltitudeCorre+0xb0>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fba6 	bl	80005ac <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd fe50 	bl	8000b0c <__aeabi_d2f>
 8002e6c:	ee07 0a10 	vmov	s14, r0
 8002e70:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e78:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002e7c:	e018      	b.n	8002eb0 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8002e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	3b30      	subs	r3, #48	; 0x30
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d9bc      	bls.n	8002e2a <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	60da      	str	r2, [r3, #12]
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	9999999a 	.word	0x9999999a
 8002ec4:	3fb99999 	.word	0x3fb99999

08002ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002ecc:	b662      	cpsie	i
}
 8002ece:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ed0:	f000 ffd7 	bl	8003e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ed4:	f000 f836 	bl	8002f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ed8:	f7ff fb06 	bl	80024e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002edc:	f7ff fada 	bl	8002494 <MX_DMA_Init>
  MX_I2C2_Init();
 8002ee0:	f7ff fb7e 	bl	80025e0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002ee4:	f000 fc76 	bl	80037d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ee8:	f000 fccc 	bl	8003884 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002eec:	f000 fd24 	bl	8003938 <MX_TIM4_Init>
  MX_UART4_Init();
 8002ef0:	f000 fe3a 	bl	8003b68 <MX_UART4_Init>
  MX_UART5_Init();
 8002ef4:	f000 fe84 	bl	8003c00 <MX_UART5_Init>
  MX_ADC2_Init();
 8002ef8:	f7fd ffd6 	bl	8000ea8 <MX_ADC2_Init>
  MX_USB_Device_Init();
 8002efc:	f00f febe 	bl	8012c7c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f00:	2100      	movs	r1, #0
 8002f02:	480c      	ldr	r0, [pc, #48]	; (8002f34 <main+0x6c>)
 8002f04:	f006 fcc2 	bl	800988c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	480b      	ldr	r0, [pc, #44]	; (8002f38 <main+0x70>)
 8002f0c:	f006 fcbe 	bl	800988c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002f10:	2104      	movs	r1, #4
 8002f12:	4809      	ldr	r0, [pc, #36]	; (8002f38 <main+0x70>)
 8002f14:	f006 fcba 	bl	800988c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002f18:	210c      	movs	r1, #12
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <main+0x70>)
 8002f1c:	f006 fcb6 	bl	800988c <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 8002f20:	2203      	movs	r2, #3
 8002f22:	4906      	ldr	r1, [pc, #24]	; (8002f3c <main+0x74>)
 8002f24:	4806      	ldr	r0, [pc, #24]	; (8002f40 <main+0x78>)
 8002f26:	f001 fbe9 	bl	80046fc <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002f2a:	f7fe f9ef 	bl	800130c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002f2e:	f00d fda2 	bl	8010a76 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <main+0x6a>
 8002f34:	20000974 	.word	0x20000974
 8002f38:	200009c0 	.word	0x200009c0
 8002f3c:	200008d4 	.word	0x200008d4
 8002f40:	2000020c 	.word	0x2000020c

08002f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b094      	sub	sp, #80	; 0x50
 8002f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4a:	f107 0318 	add.w	r3, r7, #24
 8002f4e:	2238      	movs	r2, #56	; 0x38
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f010 fb96 	bl	8013684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f6a:	f005 fb05 	bl	8008578 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002f6e:	2322      	movs	r3, #34	; 0x22
 8002f70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f80:	2302      	movs	r3, #2
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f84:	2302      	movs	r3, #2
 8002f86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f88:	2304      	movs	r3, #4
 8002f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8002f8c:	234b      	movs	r3, #75	; 0x4b
 8002f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f90:	2302      	movs	r3, #2
 8002f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f94:	2302      	movs	r3, #2
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f9c:	f107 0318 	add.w	r3, r7, #24
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f005 fb8d 	bl	80086c0 <HAL_RCC_OscConfig>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002fac:	f000 f82a 	bl	8003004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f005 fe91 	bl	8008cf0 <HAL_RCC_ClockConfig>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fd4:	f000 f816 	bl	8003004 <Error_Handler>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3750      	adds	r7, #80	; 0x50
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ff2:	f000 ff5f 	bl	8003eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40012c00 	.word	0x40012c00

08003004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800300c:	e7fe      	b.n	800300c <Error_Handler+0x8>

0800300e <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	edd3 7a02 	vldr	s15, [r3, #8]
 8003024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003028:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	ee07 3a90 	vmov	s15, r3
}
 8003032:	eeb0 0a67 	vmov.f32	s0, s15
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	edd3 7a03 	vldr	s15, [r3, #12]
 8003056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305a:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	ee07 3a90 	vmov	s15, r3
}
 8003064:	eeb0 0a67 	vmov.f32	s0, s15
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	edd3 7a04 	vldr	s15, [r3, #16]
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	ee07 3a90 	vmov	s15, r3
}
 8003096:	eeb0 0a67 	vmov.f32	s0, s15
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80030b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80030b4:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 80030ca:	2101      	movs	r1, #1
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f010 fabb 	bl	8013648 <arm_pid_init_f32>

}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80030da:	b580      	push	{r7, lr}
 80030dc:	b08a      	sub	sp, #40	; 0x28
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	68b8      	ldr	r0, [r7, #8]
 80030ec:	f7ff ffa8 	bl	8003040 <Pid_CalculateYawError>
 80030f0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	edd7 7a06 	vldr	s15, [r7, #24]
 8003106:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	edd3 7a03 	vldr	s15, [r3, #12]
 8003116:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800311a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	edd3 6a02 	vldr	s13, [r3, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	edd3 7a04 	vldr	s15, [r3, #16]
 800312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8003154:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8003156:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8003158:	bf00      	nop
 800315a:	3728      	adds	r7, #40	; 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	68b8      	ldr	r0, [r7, #8]
 8003172:	f7ff ff7e 	bl	8003072 <Pid_CalculateRollError>
 8003176:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	ed93 7a00 	vldr	s14, [r3]
 8003188:	edd7 7a06 	vldr	s15, [r7, #24]
 800318c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	edd3 6a01 	vldr	s13, [r3, #4]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	edd3 7a03 	vldr	s15, [r3, #12]
 800319c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80031a0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80031b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80031be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c2:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	615a      	str	r2, [r3, #20]
    return (out);
 80031da:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 80031dc:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032e4 <Pid_CompensateRoll+0x184>
 80031f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fe:	dd04      	ble.n	800320a <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
 8003208:	e025      	b.n	8003256 <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003216:	edd7 7a08 	vldr	s15, [r7, #32]
 800321a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80032e8 <Pid_CompensateRoll+0x188>
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d504      	bpl.n	8003236 <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f240 5214 	movw	r2, #1300	; 0x514
 8003232:	625a      	str	r2, [r3, #36]	; 0x24
 8003234:	e00f      	b.n	8003256 <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003242:	edd7 7a08 	vldr	s15, [r7, #32]
 8003246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800324e:	ee17 2a90 	vmov	r2, s15
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003262:	edd7 7a08 	vldr	s15, [r7, #32]
 8003266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80032e4 <Pid_CompensateRoll+0x184>
 800326e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	dd04      	ble.n	8003282 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
 8003280:	e025      	b.n	80032ce <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800328e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003296:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80032e8 <Pid_CompensateRoll+0x188>
 800329a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	d504      	bpl.n	80032ae <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f240 5214 	movw	r2, #1300	; 0x514
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
 80032ac:	e00f      	b.n	80032ce <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80032be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c6:	ee17 2a90 	vmov	r2, s15
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80032ce:	6838      	ldr	r0, [r7, #0]
 80032d0:	f000 f8d2 	bl	8003478 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80032d4:	6838      	ldr	r0, [r7, #0]
 80032d6:	f000 f8ed 	bl	80034b4 <PropulsionAndControl_UpdateRightFlaps>

}
 80032da:	bf00      	nop
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	455ac000 	.word	0x455ac000
 80032e8:	44a28000 	.word	0x44a28000

080032ec <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	68b8      	ldr	r0, [r7, #8]
 80032fe:	f7ff fe86 	bl	800300e <Pid_CalculatePitchError>
 8003302:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	ed93 7a00 	vldr	s14, [r3]
 8003314:	edd7 7a06 	vldr	s15, [r7, #24]
 8003318:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	edd3 7a03 	vldr	s15, [r3, #12]
 8003328:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800332c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	edd3 6a02 	vldr	s13, [r3, #8]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	edd3 7a04 	vldr	s15, [r3, #16]
 800333c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334e:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	615a      	str	r2, [r3, #20]
    return (out);
 8003366:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8003368:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003376:	edd7 7a08 	vldr	s15, [r7, #32]
 800337a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003470 <Pid_CompensatePitch+0x184>
 8003382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	dd04      	ble.n	8003396 <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
 8003394:	e025      	b.n	80033e2 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80033a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033aa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003474 <Pid_CompensatePitch+0x188>
 80033ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d504      	bpl.n	80033c2 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f240 5214 	movw	r2, #1300	; 0x514
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
 80033c0:	e00f      	b.n	80033e2 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80033d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033da:	ee17 2a90 	vmov	r2, s15
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80033f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003470 <Pid_CompensatePitch+0x184>
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	dd04      	ble.n	800340e <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f640 52ac 	movw	r2, #3500	; 0xdac
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
 800340c:	e025      	b.n	800345a <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800341a:	edd7 7a08 	vldr	s15, [r7, #32]
 800341e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003422:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003474 <Pid_CompensatePitch+0x188>
 8003426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342e:	d504      	bpl.n	800343a <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f240 5214 	movw	r2, #1300	; 0x514
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
 8003438:	e00f      	b.n	800345a <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003446:	edd7 7a08 	vldr	s15, [r7, #32]
 800344a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003452:	ee17 2a90 	vmov	r2, s15
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800345a:	6838      	ldr	r0, [r7, #0]
 800345c:	f000 f80c 	bl	8003478 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003460:	6838      	ldr	r0, [r7, #0]
 8003462:	f000 f827 	bl	80034b4 <PropulsionAndControl_UpdateRightFlaps>

}
 8003466:	bf00      	nop
 8003468:	3728      	adds	r7, #40	; 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	455ac000 	.word	0x455ac000
 8003474:	44a28000 	.word	0x44a28000

08003478 <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3334      	adds	r3, #52	; 0x34
 8003488:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7f5b      	ldrb	r3, [r3, #29]
 800348e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003492:	3b01      	subs	r3, #1
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800349e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3334      	adds	r3, #52	; 0x34
 80034c4:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7f9b      	ldrb	r3, [r3, #30]
 80034ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034ce:	3b01      	subs	r3, #1
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4413      	add	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034da:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a3a      	ldr	r2, [r7, #32]
 8003530:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353e:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8003540:	2014      	movs	r0, #20
 8003542:	f000 fcd5 	bl	8003ef0 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f240 5214 	movw	r2, #1300	; 0x514
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff ff92 	bl	8003478 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f640 52ac 	movw	r2, #3500	; 0xdac
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff ffa9 	bl	80034b4 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 8003562:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003566:	f000 fcc3 	bl	8003ef0 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff ff80 	bl	8003478 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f240 5214 	movw	r2, #1300	; 0x514
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff ff97 	bl	80034b4 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 8003586:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800358a:	f000 fcb1 	bl	8003ef0 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003594:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff ff6e 	bl	8003478 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff ff85 	bl	80034b4 <PropulsionAndControl_UpdateRightFlaps>
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_MspInit+0x4c>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_MspInit+0x4c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6613      	str	r3, [r2, #96]	; 0x60
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_MspInit+0x4c>)
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_MspInit+0x4c>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_MspInit+0x4c>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_MspInit+0x4c>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	210f      	movs	r1, #15
 80035ee:	f06f 0001 	mvn.w	r0, #1
 80035f2:	f001 ff63 	bl	80054bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	; 0x30
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003614:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <HAL_InitTick+0xc4>)
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	4a2b      	ldr	r2, [pc, #172]	; (80036c8 <HAL_InitTick+0xc4>)
 800361a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800361e:	6613      	str	r3, [r2, #96]	; 0x60
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_InitTick+0xc4>)
 8003622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800362c:	f107 020c 	add.w	r2, r7, #12
 8003630:	f107 0310 	add.w	r3, r7, #16
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f005 fd30 	bl	800909c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800363c:	f005 fd18 	bl	8009070 <HAL_RCC_GetPCLK2Freq>
 8003640:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	4a21      	ldr	r2, [pc, #132]	; (80036cc <HAL_InitTick+0xc8>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	0c9b      	lsrs	r3, r3, #18
 800364c:	3b01      	subs	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003650:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <HAL_InitTick+0xcc>)
 8003652:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <HAL_InitTick+0xd0>)
 8003654:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <HAL_InitTick+0xcc>)
 8003658:	f240 32e7 	movw	r2, #999	; 0x3e7
 800365c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_InitTick+0xcc>)
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <HAL_InitTick+0xcc>)
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800366a:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_InitTick+0xcc>)
 800366c:	2200      	movs	r2, #0
 800366e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003670:	4817      	ldr	r0, [pc, #92]	; (80036d0 <HAL_InitTick+0xcc>)
 8003672:	f005 ffd9 	bl	8009628 <HAL_TIM_Base_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800367c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11b      	bne.n	80036bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003684:	4812      	ldr	r0, [pc, #72]	; (80036d0 <HAL_InitTick+0xcc>)
 8003686:	f006 f831 	bl	80096ec <HAL_TIM_Base_Start_IT>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d111      	bne.n	80036bc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003698:	2019      	movs	r0, #25
 800369a:	f001 ff29 	bl	80054f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d808      	bhi.n	80036b6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	2019      	movs	r0, #25
 80036aa:	f001 ff07 	bl	80054bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_InitTick+0xd4>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e002      	b.n	80036bc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80036bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3730      	adds	r7, #48	; 0x30
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	431bde83 	.word	0x431bde83
 80036d0:	200008dc 	.word	0x200008dc
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	20000008 	.word	0x20000008

080036dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e0:	e7fe      	b.n	80036e0 <NMI_Handler+0x4>

080036e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e6:	e7fe      	b.n	80036e6 <HardFault_Handler+0x4>

080036e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036ec:	e7fe      	b.n	80036ec <MemManage_Handler+0x4>

080036ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036f2:	e7fe      	b.n	80036f2 <BusFault_Handler+0x4>

080036f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <UsageFault_Handler+0x4>

080036fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <DMA1_Channel1_IRQHandler+0x10>)
 800370e:	f002 f8e0 	bl	80058d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000278 	.word	0x20000278

0800371c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <USB_LP_IRQHandler+0x10>)
 8003722:	f003 fafd 	bl	8006d20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20005158 	.word	0x20005158

08003730 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003736:	f006 f9bb 	bl	8009ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200008dc 	.word	0x200008dc

08003744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 8003748:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800374c:	f002 fbc4 	bl	8005ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8003750:	4805      	ldr	r0, [pc, #20]	; (8003768 <EXTI15_10_IRQHandler+0x24>)
 8003752:	f7fe fb30 	bl	8001db6 <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <EXTI15_10_IRQHandler+0x28>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	4618      	mov	r0, r3
 800375e:	f00d fc73 	bl	8011048 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000370 	.word	0x20000370
 800376c:	2000036c 	.word	0x2000036c

08003770 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <UART4_IRQHandler+0x1c>)
 8003776:	f007 fb3b 	bl	800adf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <UART4_IRQHandler+0x20>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f00d fc61 	bl	8011048 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000a0c 	.word	0x20000a0c
 8003790:	20000368 	.word	0x20000368

08003794 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <UART5_IRQHandler+0x10>)
 800379a:	f007 fb29 	bl	800adf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000a9c 	.word	0x20000a9c

080037a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <SystemInit+0x28>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <SystemInit+0x28>)
 80037b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <SystemInit+0x28>)
 80037be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037c2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037da:	f107 031c 	add.w	r3, r7, #28
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037e6:	463b      	mov	r3, r7
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
 80037f4:	615a      	str	r2, [r3, #20]
 80037f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <MX_TIM2_Init+0xa8>)
 80037fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003800:	4b1e      	ldr	r3, [pc, #120]	; (800387c <MX_TIM2_Init+0xa8>)
 8003802:	2200      	movs	r2, #0
 8003804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <MX_TIM2_Init+0xa8>)
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <MX_TIM2_Init+0xa8>)
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <MX_TIM2_Init+0xac>)
 8003810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <MX_TIM2_Init+0xa8>)
 8003814:	2200      	movs	r2, #0
 8003816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003818:	4b18      	ldr	r3, [pc, #96]	; (800387c <MX_TIM2_Init+0xa8>)
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800381e:	4817      	ldr	r0, [pc, #92]	; (800387c <MX_TIM2_Init+0xa8>)
 8003820:	f005 ffdc 	bl	80097dc <HAL_TIM_PWM_Init>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800382a:	f7ff fbeb 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	4619      	mov	r1, r3
 800383c:	480f      	ldr	r0, [pc, #60]	; (800387c <MX_TIM2_Init+0xa8>)
 800383e:	f006 ffeb 	bl	800a818 <HAL_TIMEx_MasterConfigSynchronization>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003848:	f7ff fbdc 	bl	8003004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800384c:	2360      	movs	r3, #96	; 0x60
 800384e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800385c:	463b      	mov	r3, r7
 800385e:	2208      	movs	r2, #8
 8003860:	4619      	mov	r1, r3
 8003862:	4806      	ldr	r0, [pc, #24]	; (800387c <MX_TIM2_Init+0xa8>)
 8003864:	f006 faa4 	bl	8009db0 <HAL_TIM_PWM_ConfigChannel>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800386e:	f7ff fbc9 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003872:	bf00      	nop
 8003874:	3728      	adds	r7, #40	; 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000928 	.word	0x20000928
 8003880:	0015f900 	.word	0x0015f900

08003884 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388a:	f107 031c 	add.w	r3, r7, #28
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003896:	463b      	mov	r3, r7
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
 80038a4:	615a      	str	r2, [r3, #20]
 80038a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038a8:	4b21      	ldr	r3, [pc, #132]	; (8003930 <MX_TIM3_Init+0xac>)
 80038aa:	4a22      	ldr	r2, [pc, #136]	; (8003934 <MX_TIM3_Init+0xb0>)
 80038ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <MX_TIM3_Init+0xac>)
 80038b0:	2232      	movs	r2, #50	; 0x32
 80038b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b4:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <MX_TIM3_Init+0xac>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80038ba:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <MX_TIM3_Init+0xac>)
 80038bc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80038c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c2:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <MX_TIM3_Init+0xac>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <MX_TIM3_Init+0xac>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038ce:	4818      	ldr	r0, [pc, #96]	; (8003930 <MX_TIM3_Init+0xac>)
 80038d0:	f005 ff84 	bl	80097dc <HAL_TIM_PWM_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80038da:	f7ff fb93 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038e6:	f107 031c 	add.w	r3, r7, #28
 80038ea:	4619      	mov	r1, r3
 80038ec:	4810      	ldr	r0, [pc, #64]	; (8003930 <MX_TIM3_Init+0xac>)
 80038ee:	f006 ff93 	bl	800a818 <HAL_TIMEx_MasterConfigSynchronization>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80038f8:	f7ff fb84 	bl	8003004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038fc:	2360      	movs	r3, #96	; 0x60
 80038fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800390c:	463b      	mov	r3, r7
 800390e:	2200      	movs	r2, #0
 8003910:	4619      	mov	r1, r3
 8003912:	4807      	ldr	r0, [pc, #28]	; (8003930 <MX_TIM3_Init+0xac>)
 8003914:	f006 fa4c 	bl	8009db0 <HAL_TIM_PWM_ConfigChannel>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800391e:	f7ff fb71 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003922:	4803      	ldr	r0, [pc, #12]	; (8003930 <MX_TIM3_Init+0xac>)
 8003924:	f000 f8c2 	bl	8003aac <HAL_TIM_MspPostInit>

}
 8003928:	bf00      	nop
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000974 	.word	0x20000974
 8003934:	40000400 	.word	0x40000400

08003938 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800393e:	f107 031c 	add.w	r3, r7, #28
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800394a:	463b      	mov	r3, r7
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
 8003958:	615a      	str	r2, [r3, #20]
 800395a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800395c:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <MX_TIM4_Init+0xe0>)
 800395e:	4a2f      	ldr	r2, [pc, #188]	; (8003a1c <MX_TIM4_Init+0xe4>)
 8003960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <MX_TIM4_Init+0xe0>)
 8003964:	2232      	movs	r2, #50	; 0x32
 8003966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <MX_TIM4_Init+0xe0>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 800396e:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <MX_TIM4_Init+0xe0>)
 8003970:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003974:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003976:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <MX_TIM4_Init+0xe0>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397c:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <MX_TIM4_Init+0xe0>)
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003982:	4825      	ldr	r0, [pc, #148]	; (8003a18 <MX_TIM4_Init+0xe0>)
 8003984:	f005 ff2a 	bl	80097dc <HAL_TIM_PWM_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800398e:	f7ff fb39 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800399a:	f107 031c 	add.w	r3, r7, #28
 800399e:	4619      	mov	r1, r3
 80039a0:	481d      	ldr	r0, [pc, #116]	; (8003a18 <MX_TIM4_Init+0xe0>)
 80039a2:	f006 ff39 	bl	800a818 <HAL_TIMEx_MasterConfigSynchronization>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80039ac:	f7ff fb2a 	bl	8003004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b0:	2360      	movs	r3, #96	; 0x60
 80039b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 80039b4:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80039b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039c2:	463b      	mov	r3, r7
 80039c4:	2200      	movs	r2, #0
 80039c6:	4619      	mov	r1, r3
 80039c8:	4813      	ldr	r0, [pc, #76]	; (8003a18 <MX_TIM4_Init+0xe0>)
 80039ca:	f006 f9f1 	bl	8009db0 <HAL_TIM_PWM_ConfigChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80039d4:	f7ff fb16 	bl	8003004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039d8:	463b      	mov	r3, r7
 80039da:	2204      	movs	r2, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	480e      	ldr	r0, [pc, #56]	; (8003a18 <MX_TIM4_Init+0xe0>)
 80039e0:	f006 f9e6 	bl	8009db0 <HAL_TIM_PWM_ConfigChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80039ea:	f7ff fb0b 	bl	8003004 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 80039ee:	f241 7370 	movw	r3, #6000	; 0x1770
 80039f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039f4:	463b      	mov	r3, r7
 80039f6:	220c      	movs	r2, #12
 80039f8:	4619      	mov	r1, r3
 80039fa:	4807      	ldr	r0, [pc, #28]	; (8003a18 <MX_TIM4_Init+0xe0>)
 80039fc:	f006 f9d8 	bl	8009db0 <HAL_TIM_PWM_ConfigChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003a06:	f7ff fafd 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a0a:	4803      	ldr	r0, [pc, #12]	; (8003a18 <MX_TIM4_Init+0xe0>)
 8003a0c:	f000 f84e 	bl	8003aac <HAL_TIM_MspPostInit>

}
 8003a10:	bf00      	nop
 8003a12:	3728      	adds	r7, #40	; 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200009c0 	.word	0x200009c0
 8003a1c:	40000800 	.word	0x40000800

08003a20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d10c      	bne.n	8003a4c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	4a1a      	ldr	r2, [pc, #104]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a3e:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003a4a:	e022      	b.n	8003a92 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <HAL_TIM_PWM_MspInit+0x84>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	6593      	str	r3, [r2, #88]	; 0x58
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
}
 8003a6e:	e010      	b.n	8003a92 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <HAL_TIM_PWM_MspInit+0x88>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10b      	bne.n	8003a92 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x80>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800

08003aac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <HAL_TIM_MspPostInit+0xa8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d11c      	bne.n	8003b08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_TIM_MspPostInit+0xac>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	4a21      	ldr	r2, [pc, #132]	; (8003b58 <HAL_TIM_MspPostInit+0xac>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_TIM_MspPostInit+0xac>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003af6:	2302      	movs	r3, #2
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	4619      	mov	r1, r3
 8003b00:	4816      	ldr	r0, [pc, #88]	; (8003b5c <HAL_TIM_MspPostInit+0xb0>)
 8003b02:	f002 f835 	bl	8005b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003b06:	e021      	b.n	8003b4c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <HAL_TIM_MspPostInit+0xb4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d11c      	bne.n	8003b4c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_TIM_MspPostInit+0xac>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <HAL_TIM_MspPostInit+0xac>)
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_TIM_MspPostInit+0xac>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003b2a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4619      	mov	r1, r3
 8003b46:	4807      	ldr	r0, [pc, #28]	; (8003b64 <HAL_TIM_MspPostInit+0xb8>)
 8003b48:	f002 f812 	bl	8005b70 <HAL_GPIO_Init>
}
 8003b4c:	bf00      	nop
 8003b4e:	3728      	adds	r7, #40	; 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	48000800 	.word	0x48000800
 8003b60:	40000800 	.word	0x40000800
 8003b64:	48000400 	.word	0x48000400

08003b68 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b6e:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <MX_UART4_Init+0x94>)
 8003b70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003b72:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003b86:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b8e:	220c      	movs	r2, #12
 8003b90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b92:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003bb0:	4811      	ldr	r0, [pc, #68]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003bb2:	f006 ff0d 	bl	800a9d0 <HAL_UART_Init>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003bbc:	f7ff fa22 	bl	8003004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003bc4:	f008 ff8d 	bl	800cae2 <HAL_UARTEx_SetTxFifoThreshold>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003bce:	f7ff fa19 	bl	8003004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4808      	ldr	r0, [pc, #32]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003bd6:	f008 ffc2 	bl	800cb5e <HAL_UARTEx_SetRxFifoThreshold>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003be0:	f7ff fa10 	bl	8003004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003be4:	4804      	ldr	r0, [pc, #16]	; (8003bf8 <MX_UART4_Init+0x90>)
 8003be6:	f008 ff43 	bl	800ca70 <HAL_UARTEx_DisableFifoMode>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003bf0:	f7ff fa08 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000a0c 	.word	0x20000a0c
 8003bfc:	40004c00 	.word	0x40004c00

08003c00 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c06:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <MX_UART5_Init+0x94>)
 8003c08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c26:	220c      	movs	r2, #12
 8003c28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c30:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003c48:	4811      	ldr	r0, [pc, #68]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c4a:	f006 fec1 	bl	800a9d0 <HAL_UART_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003c54:	f7ff f9d6 	bl	8003004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c58:	2100      	movs	r1, #0
 8003c5a:	480d      	ldr	r0, [pc, #52]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c5c:	f008 ff41 	bl	800cae2 <HAL_UARTEx_SetTxFifoThreshold>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003c66:	f7ff f9cd 	bl	8003004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4808      	ldr	r0, [pc, #32]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c6e:	f008 ff76 	bl	800cb5e <HAL_UARTEx_SetRxFifoThreshold>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003c78:	f7ff f9c4 	bl	8003004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003c7c:	4804      	ldr	r0, [pc, #16]	; (8003c90 <MX_UART5_Init+0x90>)
 8003c7e:	f008 fef7 	bl	800ca70 <HAL_UARTEx_DisableFifoMode>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003c88:	f7ff f9bc 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000a9c 	.word	0x20000a9c
 8003c94:	40005000 	.word	0x40005000

08003c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0a2      	sub	sp, #136	; 0x88
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cb0:	f107 0320 	add.w	r3, r7, #32
 8003cb4:	2254      	movs	r2, #84	; 0x54
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f00f fce3 	bl	8013684 <memset>
  if(uartHandle->Instance==UART4)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a56      	ldr	r2, [pc, #344]	; (8003e1c <HAL_UART_MspInit+0x184>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d141      	bne.n	8003d4c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003cc8:	2308      	movs	r3, #8
 8003cca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cd0:	f107 0320 	add.w	r3, r7, #32
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f005 fa59 	bl	800918c <HAL_RCCEx_PeriphCLKConfig>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ce0:	f7ff f990 	bl	8003004 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ce4:	4b4e      	ldr	r3, [pc, #312]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	4a4d      	ldr	r2, [pc, #308]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cee:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf0:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	4a47      	ldr	r2, [pc, #284]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d08:	4b45      	ldr	r3, [pc, #276]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d18:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003d28:	2305      	movs	r3, #5
 8003d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d32:	4619      	mov	r1, r3
 8003d34:	483b      	ldr	r0, [pc, #236]	; (8003e24 <HAL_UART_MspInit+0x18c>)
 8003d36:	f001 ff1b 	bl	8005b70 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2105      	movs	r1, #5
 8003d3e:	2034      	movs	r0, #52	; 0x34
 8003d40:	f001 fbbc 	bl	80054bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003d44:	2034      	movs	r0, #52	; 0x34
 8003d46:	f001 fbd3 	bl	80054f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003d4a:	e063      	b.n	8003e14 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==UART5)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <HAL_UART_MspInit+0x190>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d15e      	bne.n	8003e14 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003d56:	2310      	movs	r3, #16
 8003d58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d5e:	f107 0320 	add.w	r3, r7, #32
 8003d62:	4618      	mov	r0, r3
 8003d64:	f005 fa12 	bl	800918c <HAL_RCCEx_PeriphCLKConfig>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8003d6e:	f7ff f949 	bl	8003004 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7e:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8a:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003da8:	f043 0308 	orr.w	r3, r3, #8
 8003dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dae:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <HAL_UART_MspInit+0x188>)
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dbe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003dce:	2305      	movs	r3, #5
 8003dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4812      	ldr	r0, [pc, #72]	; (8003e24 <HAL_UART_MspInit+0x18c>)
 8003ddc:	f001 fec8 	bl	8005b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003de0:	2304      	movs	r3, #4
 8003de2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003df2:	2305      	movs	r3, #5
 8003df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003df8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	480b      	ldr	r0, [pc, #44]	; (8003e2c <HAL_UART_MspInit+0x194>)
 8003e00:	f001 feb6 	bl	8005b70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2105      	movs	r1, #5
 8003e08:	2035      	movs	r0, #53	; 0x35
 8003e0a:	f001 fb57 	bl	80054bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003e0e:	2035      	movs	r0, #53	; 0x35
 8003e10:	f001 fb6e 	bl	80054f0 <HAL_NVIC_EnableIRQ>
}
 8003e14:	bf00      	nop
 8003e16:	3788      	adds	r7, #136	; 0x88
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40004c00 	.word	0x40004c00
 8003e20:	40021000 	.word	0x40021000
 8003e24:	48000800 	.word	0x48000800
 8003e28:	40005000 	.word	0x40005000
 8003e2c:	48000c00 	.word	0x48000c00

08003e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e30:	480d      	ldr	r0, [pc, #52]	; (8003e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e36:	490e      	ldr	r1, [pc, #56]	; (8003e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e38:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <LoopForever+0xe>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e3c:	e002      	b.n	8003e44 <LoopCopyDataInit>

08003e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e42:	3304      	adds	r3, #4

08003e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e48:	d3f9      	bcc.n	8003e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4a:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e4c:	4c0b      	ldr	r4, [pc, #44]	; (8003e7c <LoopForever+0x16>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e50:	e001      	b.n	8003e56 <LoopFillZerobss>

08003e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e54:	3204      	adds	r2, #4

08003e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e58:	d3fb      	bcc.n	8003e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e5a:	f7ff fca5 	bl	80037a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e5e:	f00f fc75 	bl	801374c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e62:	f7ff f831 	bl	8002ec8 <main>

08003e66 <LoopForever>:

LoopForever:
    b LoopForever
 8003e66:	e7fe      	b.n	8003e66 <LoopForever>
  ldr   r0, =_estack
 8003e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e70:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003e74:	080148c8 	.word	0x080148c8
  ldr r2, =_sbss
 8003e78:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003e7c:	200057ac 	.word	0x200057ac

08003e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC1_2_IRQHandler>

08003e82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f001 fb0a 	bl	80054a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e92:	200f      	movs	r0, #15
 8003e94:	f7ff fbb6 	bl	8003604 <HAL_InitTick>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	71fb      	strb	r3, [r7, #7]
 8003ea2:	e001      	b.n	8003ea8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ea4:	f7ff fb86 	bl	80035b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ea8:	79fb      	ldrb	r3, [r7, #7]

}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_IncTick+0x1c>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_IncTick+0x20>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	4a03      	ldr	r2, [pc, #12]	; (8003ed0 <HAL_IncTick+0x1c>)
 8003ec4:	6013      	str	r3, [r2, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000b2c 	.word	0x20000b2c
 8003ed4:	2000000c 	.word	0x2000000c

08003ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return uwTick;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_GetTick+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000b2c 	.word	0x20000b2c

08003ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ef8:	f7ff ffee 	bl	8003ed8 <HAL_GetTick>
 8003efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d004      	beq.n	8003f14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_Delay+0x40>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f14:	bf00      	nop
 8003f16:	f7ff ffdf 	bl	8003ed8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d8f7      	bhi.n	8003f16 <HAL_Delay+0x26>
  {
  }
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	2000000c 	.word	0x2000000c

08003f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3360      	adds	r3, #96	; 0x60
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <LL_ADC_SetOffset+0x44>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	03fff000 	.word	0x03fff000

08003fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3360      	adds	r3, #96	; 0x60
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3360      	adds	r3, #96	; 0x60
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	431a      	orrs	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004046:	b480      	push	{r7}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	461a      	mov	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	431a      	orrs	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3360      	adds	r3, #96	; 0x60
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	615a      	str	r2, [r3, #20]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040fe:	b480      	push	{r7}
 8004100:	b087      	sub	sp, #28
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3330      	adds	r3, #48	; 0x30
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	4413      	add	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	211f      	movs	r1, #31
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	401a      	ands	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	f003 011f 	and.w	r1, r3, #31
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa01 f303 	lsl.w	r3, r1, r3
 8004144:	431a      	orrs	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3314      	adds	r3, #20
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	0e5b      	lsrs	r3, r3, #25
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	4413      	add	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	0d1b      	lsrs	r3, r3, #20
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2107      	movs	r1, #7
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0d1b      	lsrs	r3, r3, #20
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	431a      	orrs	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10a      	bne.n	80041d6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80041d4:	e00a      	b.n	80041ec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e2:	43db      	mvns	r3, r3
 80041e4:	401a      	ands	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	407f0000 	.word	0x407f0000

080041fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 031f 	and.w	r3, r3, #31
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6093      	str	r3, [r2, #8]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004250:	d101      	bne.n	8004256 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004278:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a0:	d101      	bne.n	80042a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042c8:	f043 0201 	orr.w	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <LL_ADC_IsEnabled+0x18>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <LL_ADC_IsEnabled+0x1a>
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004312:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004316:	f043 0204 	orr.w	r2, r3, #4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b04      	cmp	r3, #4
 800433c:	d101      	bne.n	8004342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d101      	bne.n	8004368 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e1af      	b.n	80046f2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fc fe0b 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff3f 	bl	800423c <LL_ADC_IsDeepPowerDownEnabled>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ff25 	bl	8004218 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff5a 	bl	800428c <LL_ADC_IsInternalRegulatorEnabled>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d115      	bne.n	800440a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff ff3e 	bl	8004264 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043e8:	4b9f      	ldr	r3, [pc, #636]	; (8004668 <HAL_ADC_Init+0x2f0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	4a9f      	ldr	r2, [pc, #636]	; (800466c <HAL_ADC_Init+0x2f4>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	099b      	lsrs	r3, r3, #6
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043fc:	e002      	b.n	8004404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3b01      	subs	r3, #1
 8004402:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f9      	bne.n	80043fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff3c 	bl	800428c <LL_ADC_IsInternalRegulatorEnabled>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	f043 0210 	orr.w	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	f043 0201 	orr.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff ff75 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 8004440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 8148 	bne.w	80046e0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8144 	bne.w	80046e0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004460:	f043 0202 	orr.w	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff35 	bl	80042dc <LL_ADC_IsEnabled>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d141      	bne.n	80044fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004480:	d004      	beq.n	800448c <HAL_ADC_Init+0x114>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7a      	ldr	r2, [pc, #488]	; (8004670 <HAL_ADC_Init+0x2f8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10f      	bne.n	80044ac <HAL_ADC_Init+0x134>
 800448c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004490:	f7ff ff24 	bl	80042dc <LL_ADC_IsEnabled>
 8004494:	4604      	mov	r4, r0
 8004496:	4876      	ldr	r0, [pc, #472]	; (8004670 <HAL_ADC_Init+0x2f8>)
 8004498:	f7ff ff20 	bl	80042dc <LL_ADC_IsEnabled>
 800449c:	4603      	mov	r3, r0
 800449e:	4323      	orrs	r3, r4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e012      	b.n	80044d2 <HAL_ADC_Init+0x15a>
 80044ac:	4871      	ldr	r0, [pc, #452]	; (8004674 <HAL_ADC_Init+0x2fc>)
 80044ae:	f7ff ff15 	bl	80042dc <LL_ADC_IsEnabled>
 80044b2:	4604      	mov	r4, r0
 80044b4:	4870      	ldr	r0, [pc, #448]	; (8004678 <HAL_ADC_Init+0x300>)
 80044b6:	f7ff ff11 	bl	80042dc <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	431c      	orrs	r4, r3
 80044be:	486f      	ldr	r0, [pc, #444]	; (800467c <HAL_ADC_Init+0x304>)
 80044c0:	f7ff ff0c 	bl	80042dc <LL_ADC_IsEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4323      	orrs	r3, r4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044de:	d004      	beq.n	80044ea <HAL_ADC_Init+0x172>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a62      	ldr	r2, [pc, #392]	; (8004670 <HAL_ADC_Init+0x2f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_Init+0x176>
 80044ea:	4a65      	ldr	r2, [pc, #404]	; (8004680 <HAL_ADC_Init+0x308>)
 80044ec:	e000      	b.n	80044f0 <HAL_ADC_Init+0x178>
 80044ee:	4a65      	ldr	r2, [pc, #404]	; (8004684 <HAL_ADC_Init+0x30c>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7ff fd1c 	bl	8003f34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7f5b      	ldrb	r3, [r3, #29]
 8004500:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004506:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800450c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004512:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800451a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004526:	2b01      	cmp	r3, #1
 8004528:	d106      	bne.n	8004538 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	045b      	lsls	r3, r3, #17
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	4b4b      	ldr	r3, [pc, #300]	; (8004688 <HAL_ADC_Init+0x310>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	430b      	orrs	r3, r1
 8004566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fed1 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 8004588:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fede 	bl	8004350 <LL_ADC_INJ_IsConversionOngoing>
 8004594:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d17f      	bne.n	800469c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d17c      	bne.n	800469c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045be:	f023 0302 	bic.w	r3, r3, #2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	69b9      	ldr	r1, [r7, #24]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6911      	ldr	r1, [r2, #16]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004602:	e013      	b.n	800462c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004628:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	2b01      	cmp	r3, #1
 8004634:	d12a      	bne.n	800468c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004658:	430a      	orrs	r2, r1
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	e019      	b.n	800469c <HAL_ADC_Init+0x324>
 8004668:	20000004 	.word	0x20000004
 800466c:	053e2d63 	.word	0x053e2d63
 8004670:	50000100 	.word	0x50000100
 8004674:	50000400 	.word	0x50000400
 8004678:	50000500 	.word	0x50000500
 800467c:	50000600 	.word	0x50000600
 8004680:	50000300 	.word	0x50000300
 8004684:	50000700 	.word	0x50000700
 8004688:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10c      	bne.n	80046be <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f023 010f 	bic.w	r1, r3, #15
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
 80046bc:	e007      	b.n	80046ce <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 020f 	bic.w	r2, r2, #15
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80046de:	e007      	b.n	80046f0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f043 0210 	orr.w	r2, r3, #16
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3724      	adds	r7, #36	; 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd90      	pop	{r4, r7, pc}
 80046fa:	bf00      	nop

080046fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004710:	d004      	beq.n	800471c <HAL_ADC_Start_DMA+0x20>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a5a      	ldr	r2, [pc, #360]	; (8004880 <HAL_ADC_Start_DMA+0x184>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_ADC_Start_DMA+0x24>
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_ADC_Start_DMA+0x188>)
 800471e:	e000      	b.n	8004722 <HAL_ADC_Start_DMA+0x26>
 8004720:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_ADC_Start_DMA+0x18c>)
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fd6a 	bl	80041fc <LL_ADC_GetMultimode>
 8004728:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fdfb 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 809b 	bne.w	8004872 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_ADC_Start_DMA+0x4e>
 8004746:	2302      	movs	r3, #2
 8004748:	e096      	b.n	8004878 <HAL_ADC_Start_DMA+0x17c>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4d      	ldr	r2, [pc, #308]	; (800488c <HAL_ADC_Start_DMA+0x190>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d008      	beq.n	800476e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b05      	cmp	r3, #5
 8004766:	d002      	beq.n	800476e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b09      	cmp	r3, #9
 800476c:	d17a      	bne.n	8004864 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fcf6 	bl	8005160 <ADC_Enable>
 8004774:	4603      	mov	r3, r0
 8004776:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d16d      	bne.n	800485a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a3a      	ldr	r2, [pc, #232]	; (8004880 <HAL_ADC_Start_DMA+0x184>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_ADC_Start_DMA+0xb4>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a3b      	ldr	r2, [pc, #236]	; (8004890 <HAL_ADC_Start_DMA+0x194>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d002      	beq.n	80047ac <HAL_ADC_Start_DMA+0xb0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	e003      	b.n	80047b4 <HAL_ADC_Start_DMA+0xb8>
 80047ac:	4b39      	ldr	r3, [pc, #228]	; (8004894 <HAL_ADC_Start_DMA+0x198>)
 80047ae:	e001      	b.n	80047b4 <HAL_ADC_Start_DMA+0xb8>
 80047b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d002      	beq.n	80047c2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047de:	f023 0206 	bic.w	r2, r3, #6
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60
 80047e6:	e002      	b.n	80047ee <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	4a29      	ldr	r2, [pc, #164]	; (8004898 <HAL_ADC_Start_DMA+0x19c>)
 80047f4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	4a28      	ldr	r2, [pc, #160]	; (800489c <HAL_ADC_Start_DMA+0x1a0>)
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	4a27      	ldr	r2, [pc, #156]	; (80048a0 <HAL_ADC_Start_DMA+0x1a4>)
 8004804:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	221c      	movs	r2, #28
 800480c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0210 	orr.w	r2, r2, #16
 8004824:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3340      	adds	r3, #64	; 0x40
 8004840:	4619      	mov	r1, r3
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f000 ff09 	bl	800565c <HAL_DMA_Start_IT>
 800484a:	4603      	mov	r3, r0
 800484c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fd55 	bl	8004302 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004858:	e00d      	b.n	8004876 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004862:	e008      	b.n	8004876 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004870:	e001      	b.n	8004876 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004872:	2302      	movs	r3, #2
 8004874:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004876:	7dfb      	ldrb	r3, [r7, #23]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	50000100 	.word	0x50000100
 8004884:	50000300 	.word	0x50000300
 8004888:	50000700 	.word	0x50000700
 800488c:	50000600 	.word	0x50000600
 8004890:	50000500 	.word	0x50000500
 8004894:	50000400 	.word	0x50000400
 8004898:	08005225 	.word	0x08005225
 800489c:	080052fd 	.word	0x080052fd
 80048a0:	08005319 	.word	0x08005319

080048a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b0b6      	sub	sp, #216	; 0xd8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x24>
 80048fe:	2302      	movs	r3, #2
 8004900:	f000 bc13 	b.w	800512a <HAL_ADC_ConfigChannel+0x84a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fd0a 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	f040 83f3 	bne.w	8005104 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f7ff fbe7 	bl	80040fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fcf8 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 800493a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fd04 	bl	8004350 <LL_ADC_INJ_IsConversionOngoing>
 8004948:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800494c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 81d9 	bne.w	8004d08 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800495a:	2b00      	cmp	r3, #0
 800495c:	f040 81d4 	bne.w	8004d08 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004968:	d10f      	bne.n	800498a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	4619      	mov	r1, r3
 8004976:	f7ff fbee 	bl	8004156 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fb95 	bl	80040b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004988:	e00e      	b.n	80049a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	461a      	mov	r2, r3
 8004998:	f7ff fbdd 	bl	8004156 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fb85 	bl	80040b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d022      	beq.n	8004a10 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6919      	ldr	r1, [r3, #16]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049da:	f7ff fadf 	bl	8003f9c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6919      	ldr	r1, [r3, #16]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7ff fb2b 	bl	8004046 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6919      	ldr	r1, [r3, #16]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	7f1b      	ldrb	r3, [r3, #28]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x126>
 8004a00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a04:	e000      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x128>
 8004a06:	2300      	movs	r3, #0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f7ff fb37 	bl	800407c <LL_ADC_SetOffsetSaturation>
 8004a0e:	e17b      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fae4 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x15c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fad9 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004a32:	4603      	mov	r3, r0
 8004a34:	0e9b      	lsrs	r3, r3, #26
 8004a36:	f003 021f 	and.w	r2, r3, #31
 8004a3a:	e01e      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x19a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff face 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	e004      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d105      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x1b2>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	0e9b      	lsrs	r3, r3, #26
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	e018      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x1e4>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	e004      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d106      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fa9d 	bl	8004010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2101      	movs	r1, #1
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fa81 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x222>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2101      	movs	r1, #1
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fa76 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004af8:	4603      	mov	r3, r0
 8004afa:	0e9b      	lsrs	r3, r3, #26
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	e01e      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x260>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fa6b 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004b30:	2320      	movs	r3, #32
 8004b32:	e004      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x278>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	0e9b      	lsrs	r3, r3, #26
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	e018      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x2aa>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	e004      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b84:	fab3 f383 	clz	r3, r3
 8004b88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d106      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2101      	movs	r1, #1
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fa3a 	bl	8004010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fa1e 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x2e8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fa13 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	0e9b      	lsrs	r3, r3, #26
 8004bc2:	f003 021f 	and.w	r2, r3, #31
 8004bc6:	e01e      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x326>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fa08 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004bf6:	2320      	movs	r3, #32
 8004bf8:	e004      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bfe:	fab3 f383 	clz	r3, r3
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x33e>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	0e9b      	lsrs	r3, r3, #26
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	e016      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x36c>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004c3e:	2320      	movs	r3, #32
 8004c40:	e004      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d106      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2102      	movs	r1, #2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff f9d9 	bl	8004010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2103      	movs	r1, #3
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff f9bd 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x3aa>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2103      	movs	r1, #3
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff f9b2 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004c80:	4603      	mov	r3, r0
 8004c82:	0e9b      	lsrs	r3, r3, #26
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	e017      	b.n	8004cba <HAL_ADC_ConfigChannel+0x3da>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2103      	movs	r1, #3
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff f9a7 	bl	8003fe4 <LL_ADC_GetOffsetChannel>
 8004c96:	4603      	mov	r3, r0
 8004c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c9c:	fa93 f3a3 	rbit	r3, r3
 8004ca0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ca4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004cac:	2320      	movs	r3, #32
 8004cae:	e003      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x3f2>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	0e9b      	lsrs	r3, r3, #26
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	e011      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x416>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004cea:	2320      	movs	r3, #32
 8004cec:	e003      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	fab3 f383 	clz	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d106      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2103      	movs	r1, #3
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff f984 	bl	8004010 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fae5 	bl	80042dc <LL_ADC_IsEnabled>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 813d 	bne.w	8004f94 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f7ff fa40 	bl	80041ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4aa2      	ldr	r2, [pc, #648]	; (8004fbc <HAL_ADC_ConfigChannel+0x6dc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f040 812e 	bne.w	8004f94 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x480>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0e9b      	lsrs	r3, r3, #26
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2b09      	cmp	r3, #9
 8004d56:	bf94      	ite	ls
 8004d58:	2301      	movls	r3, #1
 8004d5a:	2300      	movhi	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e019      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x4b4>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d68:	fa93 f3a3 	rbit	r3, r3
 8004d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004d78:	2320      	movs	r3, #32
 8004d7a:	e003      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	3301      	adds	r3, #1
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	2b09      	cmp	r3, #9
 8004d8c:	bf94      	ite	ls
 8004d8e:	2301      	movls	r3, #1
 8004d90:	2300      	movhi	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d079      	beq.n	8004e8c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x4d4>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	0e9b      	lsrs	r3, r3, #26
 8004daa:	3301      	adds	r3, #1
 8004dac:	069b      	lsls	r3, r3, #26
 8004dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004db2:	e015      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x500>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004dcc:	2320      	movs	r3, #32
 8004dce:	e003      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	069b      	lsls	r3, r3, #26
 8004ddc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x520>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	0e9b      	lsrs	r3, r3, #26
 8004df2:	3301      	adds	r3, #1
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	e017      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x550>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e08:	fa93 f3a3 	rbit	r3, r3
 8004e0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004e18:	2320      	movs	r3, #32
 8004e1a:	e003      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	3301      	adds	r3, #1
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	ea42 0103 	orr.w	r1, r2, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x576>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	0e9b      	lsrs	r3, r3, #26
 8004e46:	3301      	adds	r3, #1
 8004e48:	f003 021f 	and.w	r2, r3, #31
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	4413      	add	r3, r2
 8004e52:	051b      	lsls	r3, r3, #20
 8004e54:	e018      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x5a8>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	fa93 f3a3 	rbit	r3, r3
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004e6e:	2320      	movs	r3, #32
 8004e70:	e003      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f003 021f 	and.w	r2, r3, #31
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	e07e      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x5c8>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0e9b      	lsrs	r3, r3, #26
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	069b      	lsls	r3, r3, #26
 8004ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ea6:	e015      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x5f4>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	fa93 f3a3 	rbit	r3, r3
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004ec0:	2320      	movs	r3, #32
 8004ec2:	e003      	b.n	8004ecc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	069b      	lsls	r3, r3, #26
 8004ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x614>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	0e9b      	lsrs	r3, r3, #26
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	e017      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x644>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	61fb      	str	r3, [r7, #28]
  return result;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	e003      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2101      	movs	r1, #1
 8004f20:	fa01 f303 	lsl.w	r3, r1, r3
 8004f24:	ea42 0103 	orr.w	r1, r2, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10d      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x670>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	0e9b      	lsrs	r3, r3, #26
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	3b1e      	subs	r3, #30
 8004f48:	051b      	lsls	r3, r3, #20
 8004f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	e01b      	b.n	8004f88 <HAL_ADC_ConfigChannel+0x6a8>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	fa93 f3a3 	rbit	r3, r3
 8004f5c:	613b      	str	r3, [r7, #16]
  return result;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004f68:	2320      	movs	r3, #32
 8004f6a:	e003      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	fab3 f383 	clz	r3, r3
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	3301      	adds	r3, #1
 8004f76:	f003 021f 	and.w	r2, r3, #31
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	3b1e      	subs	r3, #30
 8004f82:	051b      	lsls	r3, r3, #20
 8004f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	6892      	ldr	r2, [r2, #8]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f7ff f8e1 	bl	8004156 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_ADC_ConfigChannel+0x6e0>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80be 	beq.w	800511e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004faa:	d004      	beq.n	8004fb6 <HAL_ADC_ConfigChannel+0x6d6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <HAL_ADC_ConfigChannel+0x6e4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d10a      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x6ec>
 8004fb6:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <HAL_ADC_ConfigChannel+0x6e8>)
 8004fb8:	e009      	b.n	8004fce <HAL_ADC_ConfigChannel+0x6ee>
 8004fba:	bf00      	nop
 8004fbc:	407f0000 	.word	0x407f0000
 8004fc0:	80080000 	.word	0x80080000
 8004fc4:	50000100 	.word	0x50000100
 8004fc8:	50000300 	.word	0x50000300
 8004fcc:	4b59      	ldr	r3, [pc, #356]	; (8005134 <HAL_ADC_ConfigChannel+0x854>)
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe ffd6 	bl	8003f80 <LL_ADC_GetCommonPathInternalCh>
 8004fd4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a56      	ldr	r2, [pc, #344]	; (8005138 <HAL_ADC_ConfigChannel+0x858>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_ADC_ConfigChannel+0x70c>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a55      	ldr	r2, [pc, #340]	; (800513c <HAL_ADC_ConfigChannel+0x85c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d13a      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d134      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005000:	d005      	beq.n	800500e <HAL_ADC_ConfigChannel+0x72e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a4e      	ldr	r2, [pc, #312]	; (8005140 <HAL_ADC_ConfigChannel+0x860>)
 8005008:	4293      	cmp	r3, r2
 800500a:	f040 8085 	bne.w	8005118 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005016:	d004      	beq.n	8005022 <HAL_ADC_ConfigChannel+0x742>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a49      	ldr	r2, [pc, #292]	; (8005144 <HAL_ADC_ConfigChannel+0x864>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d101      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x746>
 8005022:	4a49      	ldr	r2, [pc, #292]	; (8005148 <HAL_ADC_ConfigChannel+0x868>)
 8005024:	e000      	b.n	8005028 <HAL_ADC_ConfigChannel+0x748>
 8005026:	4a43      	ldr	r2, [pc, #268]	; (8005134 <HAL_ADC_ConfigChannel+0x854>)
 8005028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800502c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fe ff91 	bl	8003f5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005038:	4b44      	ldr	r3, [pc, #272]	; (800514c <HAL_ADC_ConfigChannel+0x86c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	4a44      	ldr	r2, [pc, #272]	; (8005150 <HAL_ADC_ConfigChannel+0x870>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	099b      	lsrs	r3, r3, #6
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005052:	e002      	b.n	800505a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b01      	subs	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f9      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005060:	e05a      	b.n	8005118 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3b      	ldr	r2, [pc, #236]	; (8005154 <HAL_ADC_ConfigChannel+0x874>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d125      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x7d8>
 800506c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d11f      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a31      	ldr	r2, [pc, #196]	; (8005144 <HAL_ADC_ConfigChannel+0x864>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d104      	bne.n	800508c <HAL_ADC_ConfigChannel+0x7ac>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a34      	ldr	r2, [pc, #208]	; (8005158 <HAL_ADC_ConfigChannel+0x878>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d047      	beq.n	800511c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005094:	d004      	beq.n	80050a0 <HAL_ADC_ConfigChannel+0x7c0>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <HAL_ADC_ConfigChannel+0x864>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x7c4>
 80050a0:	4a29      	ldr	r2, [pc, #164]	; (8005148 <HAL_ADC_ConfigChannel+0x868>)
 80050a2:	e000      	b.n	80050a6 <HAL_ADC_ConfigChannel+0x7c6>
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_ADC_ConfigChannel+0x854>)
 80050a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f7fe ff52 	bl	8003f5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050b6:	e031      	b.n	800511c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a27      	ldr	r2, [pc, #156]	; (800515c <HAL_ADC_ConfigChannel+0x87c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d12d      	bne.n	800511e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d127      	bne.n	800511e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_ADC_ConfigChannel+0x864>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e0:	d004      	beq.n	80050ec <HAL_ADC_ConfigChannel+0x80c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <HAL_ADC_ConfigChannel+0x864>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x810>
 80050ec:	4a16      	ldr	r2, [pc, #88]	; (8005148 <HAL_ADC_ConfigChannel+0x868>)
 80050ee:	e000      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x812>
 80050f0:	4a10      	ldr	r2, [pc, #64]	; (8005134 <HAL_ADC_ConfigChannel+0x854>)
 80050f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fe ff2c 	bl	8003f5a <LL_ADC_SetCommonPathInternalCh>
 8005102:	e00c      	b.n	800511e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005116:	e002      	b.n	800511e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800511c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005126:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800512a:	4618      	mov	r0, r3
 800512c:	37d8      	adds	r7, #216	; 0xd8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	50000700 	.word	0x50000700
 8005138:	c3210000 	.word	0xc3210000
 800513c:	90c00010 	.word	0x90c00010
 8005140:	50000600 	.word	0x50000600
 8005144:	50000100 	.word	0x50000100
 8005148:	50000300 	.word	0x50000300
 800514c:	20000004 	.word	0x20000004
 8005150:	053e2d63 	.word	0x053e2d63
 8005154:	c7520000 	.word	0xc7520000
 8005158:	50000500 	.word	0x50000500
 800515c:	cb840000 	.word	0xcb840000

08005160 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f8b5 	bl	80042dc <LL_ADC_IsEnabled>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d14d      	bne.n	8005214 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	4b28      	ldr	r3, [pc, #160]	; (8005220 <ADC_Enable+0xc0>)
 8005180:	4013      	ands	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	f043 0210 	orr.w	r2, r3, #16
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005196:	f043 0201 	orr.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e039      	b.n	8005216 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff f884 	bl	80042b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80051ac:	f7fe fe94 	bl	8003ed8 <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051b2:	e028      	b.n	8005206 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f88f 	bl	80042dc <LL_ADC_IsEnabled>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff f873 	bl	80042b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051ce:	f7fe fe83 	bl	8003ed8 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d914      	bls.n	8005206 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d00d      	beq.n	8005206 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ee:	f043 0210 	orr.w	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fa:	f043 0201 	orr.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e007      	b.n	8005216 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d1cf      	bne.n	80051b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	8000003f 	.word	0x8000003f

08005224 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005236:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d14b      	bne.n	80052d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d021      	beq.n	800529c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe ff3b 	bl	80040d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d032      	beq.n	80052ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d12b      	bne.n	80052ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d11f      	bne.n	80052ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	65da      	str	r2, [r3, #92]	; 0x5c
 800529a:	e018      	b.n	80052ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d111      	bne.n	80052ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff fae8 	bl	80048a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052d4:	e00e      	b.n	80052f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff faf2 	bl	80048cc <HAL_ADC_ErrorCallback>
}
 80052e8:	e004      	b.n	80052f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	4798      	blx	r3
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff fad4 	bl	80048b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005336:	f043 0204 	orr.w	r2, r3, #4
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff fac4 	bl	80048cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <__NVIC_SetPriorityGrouping+0x44>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005368:	4013      	ands	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800537e:	4a04      	ldr	r2, [pc, #16]	; (8005390 <__NVIC_SetPriorityGrouping+0x44>)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	60d3      	str	r3, [r2, #12]
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	e000ed00 	.word	0xe000ed00

08005394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <__NVIC_GetPriorityGrouping+0x18>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	f003 0307 	and.w	r3, r3, #7
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	db0b      	blt.n	80053da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	f003 021f 	and.w	r2, r3, #31
 80053c8:	4907      	ldr	r1, [pc, #28]	; (80053e8 <__NVIC_EnableIRQ+0x38>)
 80053ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	2001      	movs	r0, #1
 80053d2:	fa00 f202 	lsl.w	r2, r0, r2
 80053d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	e000e100 	.word	0xe000e100

080053ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	6039      	str	r1, [r7, #0]
 80053f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	db0a      	blt.n	8005416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	490c      	ldr	r1, [pc, #48]	; (8005438 <__NVIC_SetPriority+0x4c>)
 8005406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540a:	0112      	lsls	r2, r2, #4
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	440b      	add	r3, r1
 8005410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005414:	e00a      	b.n	800542c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	b2da      	uxtb	r2, r3
 800541a:	4908      	ldr	r1, [pc, #32]	; (800543c <__NVIC_SetPriority+0x50>)
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	3b04      	subs	r3, #4
 8005424:	0112      	lsls	r2, r2, #4
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	440b      	add	r3, r1
 800542a:	761a      	strb	r2, [r3, #24]
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	e000e100 	.word	0xe000e100
 800543c:	e000ed00 	.word	0xe000ed00

08005440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f1c3 0307 	rsb	r3, r3, #7
 800545a:	2b04      	cmp	r3, #4
 800545c:	bf28      	it	cs
 800545e:	2304      	movcs	r3, #4
 8005460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3304      	adds	r3, #4
 8005466:	2b06      	cmp	r3, #6
 8005468:	d902      	bls.n	8005470 <NVIC_EncodePriority+0x30>
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3b03      	subs	r3, #3
 800546e:	e000      	b.n	8005472 <NVIC_EncodePriority+0x32>
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005474:	f04f 32ff 	mov.w	r2, #4294967295
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43da      	mvns	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	401a      	ands	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005488:	f04f 31ff 	mov.w	r1, #4294967295
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	43d9      	mvns	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005498:	4313      	orrs	r3, r2
         );
}
 800549a:	4618      	mov	r0, r3
 800549c:	3724      	adds	r7, #36	; 0x24
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ff4c 	bl	800534c <__NVIC_SetPriorityGrouping>
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054ca:	f7ff ff63 	bl	8005394 <__NVIC_GetPriorityGrouping>
 80054ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	6978      	ldr	r0, [r7, #20]
 80054d6:	f7ff ffb3 	bl	8005440 <NVIC_EncodePriority>
 80054da:	4602      	mov	r2, r0
 80054dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff ff82 	bl	80053ec <__NVIC_SetPriority>
}
 80054e8:	bf00      	nop
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff ff56 	bl	80053b0 <__NVIC_EnableIRQ>
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e08d      	b.n	800563a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	4b47      	ldr	r3, [pc, #284]	; (8005644 <HAL_DMA_Init+0x138>)
 8005526:	429a      	cmp	r2, r3
 8005528:	d80f      	bhi.n	800554a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	4b45      	ldr	r3, [pc, #276]	; (8005648 <HAL_DMA_Init+0x13c>)
 8005532:	4413      	add	r3, r2
 8005534:	4a45      	ldr	r2, [pc, #276]	; (800564c <HAL_DMA_Init+0x140>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	009a      	lsls	r2, r3, #2
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a42      	ldr	r2, [pc, #264]	; (8005650 <HAL_DMA_Init+0x144>)
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
 8005548:	e00e      	b.n	8005568 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	4b40      	ldr	r3, [pc, #256]	; (8005654 <HAL_DMA_Init+0x148>)
 8005552:	4413      	add	r3, r2
 8005554:	4a3d      	ldr	r2, [pc, #244]	; (800564c <HAL_DMA_Init+0x140>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	009a      	lsls	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a3c      	ldr	r2, [pc, #240]	; (8005658 <HAL_DMA_Init+0x14c>)
 8005566:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800558c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa76 	bl	8005aac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c8:	d102      	bne.n	80055d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_DMA_Init+0x104>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d80c      	bhi.n	8005610 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fa96 	bl	8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	e008      	b.n	8005622 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40020407 	.word	0x40020407
 8005648:	bffdfff8 	.word	0xbffdfff8
 800564c:	cccccccd 	.word	0xcccccccd
 8005650:	40020000 	.word	0x40020000
 8005654:	bffdfbf8 	.word	0xbffdfbf8
 8005658:	40020400 	.word	0x40020400

0800565c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_DMA_Start_IT+0x20>
 8005678:	2302      	movs	r3, #2
 800567a:	e066      	b.n	800574a <HAL_DMA_Start_IT+0xee>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d155      	bne.n	800573c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f9bb 	bl	8005a30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 020e 	orr.w	r2, r2, #14
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e00f      	b.n	80056f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0204 	bic.w	r2, r2, #4
 80056e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 020a 	orr.w	r2, r2, #10
 80056f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005710:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	2b00      	cmp	r3, #0
 8005718:	d007      	beq.n	800572a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005728:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e005      	b.n	8005748 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005744:	2302      	movs	r3, #2
 8005746:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d005      	beq.n	8005776 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2204      	movs	r2, #4
 800576e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
 8005774:	e037      	b.n	80057e6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 020e 	bic.w	r2, r2, #14
 8005784:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005794:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	f003 021f 	and.w	r2, r3, #31
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2101      	movs	r1, #1
 80057b4:	fa01 f202 	lsl.w	r2, r1, r2
 80057b8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057c2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057da:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057e4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d00d      	beq.n	8005838 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2204      	movs	r2, #4
 8005820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e047      	b.n	80058c8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 020e 	bic.w	r2, r2, #14
 8005846:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005866:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586c:	f003 021f 	and.w	r2, r3, #31
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f202 	lsl.w	r2, r1, r2
 800587a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005884:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800589c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
    }
  }
  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	2204      	movs	r2, #4
 80058f4:	409a      	lsls	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d026      	beq.n	800594c <HAL_DMA_IRQHandler+0x7a>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d021      	beq.n	800594c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d107      	bne.n	8005926 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0204 	bic.w	r2, r2, #4
 8005924:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	f003 021f 	and.w	r2, r3, #31
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	2104      	movs	r1, #4
 8005934:	fa01 f202 	lsl.w	r2, r1, r2
 8005938:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	2b00      	cmp	r3, #0
 8005940:	d071      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800594a:	e06c      	b.n	8005a26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	2202      	movs	r2, #2
 8005956:	409a      	lsls	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d02e      	beq.n	80059be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d029      	beq.n	80059be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 020a 	bic.w	r2, r2, #10
 8005986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005994:	f003 021f 	and.w	r2, r3, #31
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2102      	movs	r1, #2
 800599e:	fa01 f202 	lsl.w	r2, r1, r2
 80059a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d038      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80059bc:	e033      	b.n	8005a26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2208      	movs	r2, #8
 80059c8:	409a      	lsls	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d02a      	beq.n	8005a28 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d025      	beq.n	8005a28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 020e 	bic.w	r2, r2, #14
 80059ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f003 021f 	and.w	r2, r3, #31
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f202 	lsl.w	r2, r1, r2
 80059fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
}
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f003 021f 	and.w	r2, r3, #31
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2101      	movs	r1, #1
 8005a68:	fa01 f202 	lsl.w	r2, r1, r2
 8005a6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	2b10      	cmp	r3, #16
 8005a7c:	d108      	bne.n	8005a90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a8e:	e007      	b.n	8005aa0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4b16      	ldr	r3, [pc, #88]	; (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d802      	bhi.n	8005ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ac0:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	e001      	b.n	8005aca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ac8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	3b08      	subs	r3, #8
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	009a      	lsls	r2, r3, #2
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	4413      	add	r3, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a0b      	ldr	r2, [pc, #44]	; (8005b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	2201      	movs	r2, #1
 8005b00:	409a      	lsls	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40020407 	.word	0x40020407
 8005b18:	40020800 	.word	0x40020800
 8005b1c:	40020820 	.word	0x40020820
 8005b20:	cccccccd 	.word	0xcccccccd
 8005b24:	40020880 	.word	0x40020880

08005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b4a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	2201      	movs	r2, #1
 8005b56:	409a      	lsls	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	1000823f 	.word	0x1000823f
 8005b6c:	40020940 	.word	0x40020940

08005b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b7e:	e15a      	b.n	8005e36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	2101      	movs	r1, #1
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 814c 	beq.w	8005e30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d005      	beq.n	8005bb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d130      	bne.n	8005c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	2203      	movs	r2, #3
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005be6:	2201      	movs	r2, #1
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	091b      	lsrs	r3, r3, #4
 8005bfc:	f003 0201 	and.w	r2, r3, #1
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d017      	beq.n	8005c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	2203      	movs	r2, #3
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4013      	ands	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d123      	bne.n	8005ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	08da      	lsrs	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3208      	adds	r2, #8
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	220f      	movs	r2, #15
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	08da      	lsrs	r2, r3, #3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3208      	adds	r2, #8
 8005c9c:	6939      	ldr	r1, [r7, #16]
 8005c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	2203      	movs	r2, #3
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 0203 	and.w	r2, r3, #3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80a6 	beq.w	8005e30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce4:	4b5b      	ldr	r3, [pc, #364]	; (8005e54 <HAL_GPIO_Init+0x2e4>)
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce8:	4a5a      	ldr	r2, [pc, #360]	; (8005e54 <HAL_GPIO_Init+0x2e4>)
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	6613      	str	r3, [r2, #96]	; 0x60
 8005cf0:	4b58      	ldr	r3, [pc, #352]	; (8005e54 <HAL_GPIO_Init+0x2e4>)
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cfc:	4a56      	ldr	r2, [pc, #344]	; (8005e58 <HAL_GPIO_Init+0x2e8>)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	089b      	lsrs	r3, r3, #2
 8005d02:	3302      	adds	r3, #2
 8005d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	220f      	movs	r2, #15
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d26:	d01f      	beq.n	8005d68 <HAL_GPIO_Init+0x1f8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a4c      	ldr	r2, [pc, #304]	; (8005e5c <HAL_GPIO_Init+0x2ec>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d019      	beq.n	8005d64 <HAL_GPIO_Init+0x1f4>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a4b      	ldr	r2, [pc, #300]	; (8005e60 <HAL_GPIO_Init+0x2f0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_GPIO_Init+0x1f0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a4a      	ldr	r2, [pc, #296]	; (8005e64 <HAL_GPIO_Init+0x2f4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00d      	beq.n	8005d5c <HAL_GPIO_Init+0x1ec>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a49      	ldr	r2, [pc, #292]	; (8005e68 <HAL_GPIO_Init+0x2f8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d007      	beq.n	8005d58 <HAL_GPIO_Init+0x1e8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a48      	ldr	r2, [pc, #288]	; (8005e6c <HAL_GPIO_Init+0x2fc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d101      	bne.n	8005d54 <HAL_GPIO_Init+0x1e4>
 8005d50:	2305      	movs	r3, #5
 8005d52:	e00a      	b.n	8005d6a <HAL_GPIO_Init+0x1fa>
 8005d54:	2306      	movs	r3, #6
 8005d56:	e008      	b.n	8005d6a <HAL_GPIO_Init+0x1fa>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	e006      	b.n	8005d6a <HAL_GPIO_Init+0x1fa>
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e004      	b.n	8005d6a <HAL_GPIO_Init+0x1fa>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e002      	b.n	8005d6a <HAL_GPIO_Init+0x1fa>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <HAL_GPIO_Init+0x1fa>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	f002 0203 	and.w	r2, r2, #3
 8005d70:	0092      	lsls	r2, r2, #2
 8005d72:	4093      	lsls	r3, r2
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d7a:	4937      	ldr	r1, [pc, #220]	; (8005e58 <HAL_GPIO_Init+0x2e8>)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	089b      	lsrs	r3, r3, #2
 8005d80:	3302      	adds	r3, #2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d88:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4013      	ands	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005dac:	4a30      	ldr	r2, [pc, #192]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005db2:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005dd6:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	43db      	mvns	r3, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4013      	ands	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e00:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4013      	ands	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e2a:	4a11      	ldr	r2, [pc, #68]	; (8005e70 <HAL_GPIO_Init+0x300>)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3301      	adds	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f47f ae9d 	bne.w	8005b80 <HAL_GPIO_Init+0x10>
  }
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	48000400 	.word	0x48000400
 8005e60:	48000800 	.word	0x48000800
 8005e64:	48000c00 	.word	0x48000c00
 8005e68:	48001000 	.word	0x48001000
 8005e6c:	48001400 	.word	0x48001400
 8005e70:	40010400 	.word	0x40010400

08005e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	807b      	strh	r3, [r7, #2]
 8005e80:	4613      	mov	r3, r2
 8005e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e84:	787b      	ldrb	r3, [r7, #1]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e8a:	887a      	ldrh	r2, [r7, #2]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e90:	e002      	b.n	8005e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005eb6:	887a      	ldrh	r2, [r7, #2]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	041a      	lsls	r2, r3, #16
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	43d9      	mvns	r1, r3
 8005ec2:	887b      	ldrh	r3, [r7, #2]
 8005ec4:	400b      	ands	r3, r1
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	619a      	str	r2, [r3, #24]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eee:	4a05      	ldr	r2, [pc, #20]	; (8005f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f806 	bl	8005f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40010400 	.word	0x40010400

08005f08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e081      	b.n	8006034 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fc fb8b 	bl	8002660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2224      	movs	r2, #36	; 0x24
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d107      	bne.n	8005f98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f94:	609a      	str	r2, [r3, #8]
 8005f96:	e006      	b.n	8005fa6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fa4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d104      	bne.n	8005fb8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69d9      	ldr	r1, [r3, #28]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1a      	ldr	r2, [r3, #32]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	4608      	mov	r0, r1
 8006046:	4611      	mov	r1, r2
 8006048:	461a      	mov	r2, r3
 800604a:	4603      	mov	r3, r0
 800604c:	817b      	strh	r3, [r7, #10]
 800604e:	460b      	mov	r3, r1
 8006050:	813b      	strh	r3, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b20      	cmp	r3, #32
 8006060:	f040 80f9 	bne.w	8006256 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_I2C_Mem_Write+0x34>
 800606a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0ed      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_I2C_Mem_Write+0x4e>
 8006086:	2302      	movs	r3, #2
 8006088:	e0e6      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006092:	f7fd ff21 	bl	8003ed8 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2319      	movs	r3, #25
 800609e:	2201      	movs	r2, #1
 80060a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fac3 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0d1      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2221      	movs	r2, #33	; 0x21
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2240      	movs	r2, #64	; 0x40
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060dc:	88f8      	ldrh	r0, [r7, #6]
 80060de:	893a      	ldrh	r2, [r7, #8]
 80060e0:	8979      	ldrh	r1, [r7, #10]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	4603      	mov	r3, r0
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f9d3 	bl	8006498 <I2C_RequestMemoryWrite>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0a9      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2bff      	cmp	r3, #255	; 0xff
 800610c:	d90e      	bls.n	800612c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	22ff      	movs	r2, #255	; 0xff
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	8979      	ldrh	r1, [r7, #10]
 800611c:	2300      	movs	r3, #0
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fc2b 	bl	8006980 <I2C_TransferConfig>
 800612a:	e00f      	b.n	800614c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	b2da      	uxtb	r2, r3
 800613c:	8979      	ldrh	r1, [r7, #10]
 800613e:	2300      	movs	r3, #0
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fc1a 	bl	8006980 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 faad 	bl	80066b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e07b      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d034      	beq.n	8006204 <HAL_I2C_Mem_Write+0x1c8>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d130      	bne.n	8006204 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	2200      	movs	r2, #0
 80061aa:	2180      	movs	r1, #128	; 0x80
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fa3f 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e04d      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2bff      	cmp	r3, #255	; 0xff
 80061c4:	d90e      	bls.n	80061e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	22ff      	movs	r2, #255	; 0xff
 80061ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	8979      	ldrh	r1, [r7, #10]
 80061d4:	2300      	movs	r3, #0
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fbcf 	bl	8006980 <I2C_TransferConfig>
 80061e2:	e00f      	b.n	8006204 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	8979      	ldrh	r1, [r7, #10]
 80061f6:	2300      	movs	r3, #0
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fbbe 	bl	8006980 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d19e      	bne.n	800614c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fa8c 	bl	8006730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e01a      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2220      	movs	r2, #32
 8006228:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <HAL_I2C_Mem_Write+0x224>)
 8006236:	400b      	ands	r3, r1
 8006238:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e000      	b.n	8006258 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006256:	2302      	movs	r3, #2
  }
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	fe00e800 	.word	0xfe00e800

08006264 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	4603      	mov	r3, r0
 8006274:	817b      	strh	r3, [r7, #10]
 8006276:	460b      	mov	r3, r1
 8006278:	813b      	strh	r3, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b20      	cmp	r3, #32
 8006288:	f040 80fd 	bne.w	8006486 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_I2C_Mem_Read+0x34>
 8006292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d105      	bne.n	80062a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800629e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0f1      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_I2C_Mem_Read+0x4e>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0ea      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062ba:	f7fd fe0d 	bl	8003ed8 <HAL_GetTick>
 80062be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2319      	movs	r3, #25
 80062c6:	2201      	movs	r2, #1
 80062c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f9af 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0d5      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2222      	movs	r2, #34	; 0x22
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2240      	movs	r2, #64	; 0x40
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006304:	88f8      	ldrh	r0, [r7, #6]
 8006306:	893a      	ldrh	r2, [r7, #8]
 8006308:	8979      	ldrh	r1, [r7, #10]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4603      	mov	r3, r0
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f913 	bl	8006540 <I2C_RequestMemoryRead>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0ad      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	2bff      	cmp	r3, #255	; 0xff
 8006334:	d90e      	bls.n	8006354 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006340:	b2da      	uxtb	r2, r3
 8006342:	8979      	ldrh	r1, [r7, #10]
 8006344:	4b52      	ldr	r3, [pc, #328]	; (8006490 <HAL_I2C_Mem_Read+0x22c>)
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fb17 	bl	8006980 <I2C_TransferConfig>
 8006352:	e00f      	b.n	8006374 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006362:	b2da      	uxtb	r2, r3
 8006364:	8979      	ldrh	r1, [r7, #10]
 8006366:	4b4a      	ldr	r3, [pc, #296]	; (8006490 <HAL_I2C_Mem_Read+0x22c>)
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fb06 	bl	8006980 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	2200      	movs	r2, #0
 800637c:	2104      	movs	r1, #4
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f956 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e07c      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d034      	beq.n	8006434 <HAL_I2C_Mem_Read+0x1d0>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d130      	bne.n	8006434 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	2200      	movs	r2, #0
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f927 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e04d      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2bff      	cmp	r3, #255	; 0xff
 80063f4:	d90e      	bls.n	8006414 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	22ff      	movs	r2, #255	; 0xff
 80063fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	b2da      	uxtb	r2, r3
 8006402:	8979      	ldrh	r1, [r7, #10]
 8006404:	2300      	movs	r3, #0
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fab7 	bl	8006980 <I2C_TransferConfig>
 8006412:	e00f      	b.n	8006434 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006422:	b2da      	uxtb	r2, r3
 8006424:	8979      	ldrh	r1, [r7, #10]
 8006426:	2300      	movs	r3, #0
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 faa6 	bl	8006980 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d19a      	bne.n	8006374 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f974 	bl	8006730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e01a      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2220      	movs	r2, #32
 8006458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6859      	ldr	r1, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_I2C_Mem_Read+0x230>)
 8006466:	400b      	ands	r3, r1
 8006468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e000      	b.n	8006488 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006486:	2302      	movs	r3, #2
  }
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	80002400 	.word	0x80002400
 8006494:	fe00e800 	.word	0xfe00e800

08006498 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	817b      	strh	r3, [r7, #10]
 80064aa:	460b      	mov	r3, r1
 80064ac:	813b      	strh	r3, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	8979      	ldrh	r1, [r7, #10]
 80064b8:	4b20      	ldr	r3, [pc, #128]	; (800653c <I2C_RequestMemoryWrite+0xa4>)
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fa5d 	bl	8006980 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	69b9      	ldr	r1, [r7, #24]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f8f0 	bl	80066b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e02c      	b.n	8006534 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d105      	bne.n	80064ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064e0:	893b      	ldrh	r3, [r7, #8]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	629a      	str	r2, [r3, #40]	; 0x28
 80064ea:	e015      	b.n	8006518 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064ec:	893b      	ldrh	r3, [r7, #8]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f8d6 	bl	80066b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e012      	b.n	8006534 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800650e:	893b      	ldrh	r3, [r7, #8]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2200      	movs	r2, #0
 8006520:	2180      	movs	r1, #128	; 0x80
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f884 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	80002000 	.word	0x80002000

08006540 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	4608      	mov	r0, r1
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	4603      	mov	r3, r0
 8006550:	817b      	strh	r3, [r7, #10]
 8006552:	460b      	mov	r3, r1
 8006554:	813b      	strh	r3, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	8979      	ldrh	r1, [r7, #10]
 8006560:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <I2C_RequestMemoryRead+0xa4>)
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa0a 	bl	8006980 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	69b9      	ldr	r1, [r7, #24]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f89d 	bl	80066b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e02c      	b.n	80065da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d105      	bne.n	8006592 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006586:	893b      	ldrh	r3, [r7, #8]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28
 8006590:	e015      	b.n	80065be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006592:	893b      	ldrh	r3, [r7, #8]
 8006594:	0a1b      	lsrs	r3, r3, #8
 8006596:	b29b      	uxth	r3, r3
 8006598:	b2da      	uxtb	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	69b9      	ldr	r1, [r7, #24]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f883 	bl	80066b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e012      	b.n	80065da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065b4:	893b      	ldrh	r3, [r7, #8]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2200      	movs	r2, #0
 80065c6:	2140      	movs	r1, #64	; 0x40
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f831 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	80002000 	.word	0x80002000

080065e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d103      	bne.n	8006606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d007      	beq.n	8006624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	619a      	str	r2, [r3, #24]
  }
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006640:	e022      	b.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d01e      	beq.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664a:	f7fd fc45 	bl	8003ed8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d113      	bne.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e00f      	b.n	80066a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4013      	ands	r3, r2
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d0cd      	beq.n	8006642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066bc:	e02c      	b.n	8006718 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f870 	bl	80067a8 <I2C_IsErrorOccurred>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e02a      	b.n	8006728 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d01e      	beq.n	8006718 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066da:	f7fd fbfd 	bl	8003ed8 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d113      	bne.n	8006718 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e007      	b.n	8006728 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d1cb      	bne.n	80066be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800673c:	e028      	b.n	8006790 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f830 	bl	80067a8 <I2C_IsErrorOccurred>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e026      	b.n	80067a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fd fbc1 	bl	8003ed8 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d113      	bne.n	8006790 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e007      	b.n	80067a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b20      	cmp	r3, #32
 800679c:	d1cf      	bne.n	800673e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d075      	beq.n	80068c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2210      	movs	r2, #16
 80067da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067dc:	e056      	b.n	800688c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e4:	d052      	beq.n	800688c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067e6:	f7fd fb77 	bl	8003ed8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d302      	bcc.n	80067fc <I2C_IsErrorOccurred+0x54>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d147      	bne.n	800688c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006806:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800680e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681e:	d12e      	bne.n	800687e <I2C_IsErrorOccurred+0xd6>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006826:	d02a      	beq.n	800687e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006828:	7cfb      	ldrb	r3, [r7, #19]
 800682a:	2b20      	cmp	r3, #32
 800682c:	d027      	beq.n	800687e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800683c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800683e:	f7fd fb4b 	bl	8003ed8 <HAL_GetTick>
 8006842:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006844:	e01b      	b.n	800687e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006846:	f7fd fb47 	bl	8003ed8 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b19      	cmp	r3, #25
 8006852:	d914      	bls.n	800687e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	f043 0220 	orr.w	r2, r3, #32
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b20      	cmp	r3, #32
 800688a:	d1dc      	bne.n	8006846 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b20      	cmp	r3, #32
 8006898:	d003      	beq.n	80068a2 <I2C_IsErrorOccurred+0xfa>
 800689a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d09d      	beq.n	80067de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80068a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2220      	movs	r2, #32
 80068b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f043 0304 	orr.w	r3, r3, #4
 80068b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	f043 0308 	orr.w	r3, r3, #8
 80068fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006904:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006926:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800692e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01c      	beq.n	8006970 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fe56 	bl	80065e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6859      	ldr	r1, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b0d      	ldr	r3, [pc, #52]	; (800697c <I2C_IsErrorOccurred+0x1d4>)
 8006948:	400b      	ands	r3, r1
 800694a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	431a      	orrs	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006974:	4618      	mov	r0, r3
 8006976:	3728      	adds	r7, #40	; 0x28
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	fe00e800 	.word	0xfe00e800

08006980 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	817b      	strh	r3, [r7, #10]
 800698e:	4613      	mov	r3, r2
 8006990:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006992:	897b      	ldrh	r3, [r7, #10]
 8006994:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006998:	7a7b      	ldrb	r3, [r7, #9]
 800699a:	041b      	lsls	r3, r3, #16
 800699c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069a0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ae:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	0d5b      	lsrs	r3, r3, #21
 80069ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <I2C_TransferConfig+0x60>)
 80069c0:	430b      	orrs	r3, r1
 80069c2:	43db      	mvns	r3, r3
 80069c4:	ea02 0103 	and.w	r1, r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	03ff63ff 	.word	0x03ff63ff

080069e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d138      	bne.n	8006a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e032      	b.n	8006a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6819      	ldr	r1, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e000      	b.n	8006a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
  }
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d139      	bne.n	8006b04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e033      	b.n	8006b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2224      	movs	r2, #36	; 0x24
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006acc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e000      	b.n	8006b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
  }
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b14:	b08b      	sub	sp, #44	; 0x2c
 8006b16:	af06      	add	r7, sp, #24
 8006b18:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0d7      	b.n	8006cd4 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f00c fa7f 	bl	801303c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2203      	movs	r2, #3
 8006b42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f006 f8ab 	bl	800cca6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
 8006b54:	e04c      	b.n	8006bf0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	440b      	add	r3, r1
 8006b66:	3301      	adds	r3, #1
 8006b68:	2201      	movs	r2, #1
 8006b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	440b      	add	r3, r1
 8006b7c:	7bfa      	ldrb	r2, [r7, #15]
 8006b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b80:	7bfa      	ldrb	r2, [r7, #15]
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	b298      	uxth	r0, r3
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	440b      	add	r3, r1
 8006b92:	3336      	adds	r3, #54	; 0x36
 8006b94:	4602      	mov	r2, r0
 8006b96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3303      	adds	r3, #3
 8006baa:	2200      	movs	r2, #0
 8006bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bae:	7bfa      	ldrb	r2, [r7, #15]
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	440b      	add	r3, r1
 8006bbc:	3338      	adds	r3, #56	; 0x38
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006bc2:	7bfa      	ldrb	r2, [r7, #15]
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	440b      	add	r3, r1
 8006bd0:	333c      	adds	r3, #60	; 0x3c
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006bd6:	7bfa      	ldrb	r2, [r7, #15]
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	440b      	add	r3, r1
 8006be4:	3340      	adds	r3, #64	; 0x40
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	3301      	adds	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
 8006bf0:	7bfa      	ldrb	r2, [r7, #15]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d3ad      	bcc.n	8006b56 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	e044      	b.n	8006c8a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c00:	7bfa      	ldrb	r2, [r7, #15]
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	440b      	add	r3, r1
 8006c0e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	440b      	add	r3, r1
 8006c24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c28:	7bfa      	ldrb	r2, [r7, #15]
 8006c2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c2c:	7bfa      	ldrb	r2, [r7, #15]
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	440b      	add	r3, r1
 8006c3a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c42:	7bfa      	ldrb	r2, [r7, #15]
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	440b      	add	r3, r1
 8006c50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c58:	7bfa      	ldrb	r2, [r7, #15]
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	440b      	add	r3, r1
 8006c66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c6e:	7bfa      	ldrb	r2, [r7, #15]
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	3301      	adds	r3, #1
 8006c88:	73fb      	strb	r3, [r7, #15]
 8006c8a:	7bfa      	ldrb	r2, [r7, #15]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d3b5      	bcc.n	8006c00 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	603b      	str	r3, [r7, #0]
 8006c9a:	687e      	ldr	r6, [r7, #4]
 8006c9c:	466d      	mov	r5, sp
 8006c9e:	f106 0410 	add.w	r4, r6, #16
 8006ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	1d33      	adds	r3, r6, #4
 8006cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cae:	6838      	ldr	r0, [r7, #0]
 8006cb0:	f006 f814 	bl	800ccdc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d102      	bne.n	8006cd2 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fc29 	bl	8008524 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_PCD_Start+0x16>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e012      	b.n	8006d18 <HAL_PCD_Start+0x3c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f005 ffba 	bl	800cc78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f008 f9d3 	bl	800f0b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f008 f9d8 	bl	800f0e2 <USB_ReadInterrupts>
 8006d32:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb26 	bl	8007390 <PCD_EP_ISR_Handler>

    return;
 8006d44:	e110      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d013      	beq.n	8006d78 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d62:	b292      	uxth	r2, r2
 8006d64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f00c f9f8 	bl	801315e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f8fc 	bl	8006f6e <HAL_PCD_SetAddress>

    return;
 8006d76:	e0f7      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d94:	b292      	uxth	r2, r2
 8006d96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006d9a:	e0e5      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00c      	beq.n	8006dc0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006db8:	b292      	uxth	r2, r2
 8006dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006dbe:	e0d3      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d034      	beq.n	8006e34 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0204 	bic.w	r2, r2, #4
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0208 	bic.w	r2, r2, #8
 8006df4:	b292      	uxth	r2, r2
 8006df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d107      	bne.n	8006e14 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f00c fb9a 	bl	8013548 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f00c f9db 	bl	80131d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e2c:	b292      	uxth	r2, r2
 8006e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006e32:	e099      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d027      	beq.n	8006e8e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0208 	orr.w	r2, r2, #8
 8006e50:	b292      	uxth	r2, r2
 8006e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f042 0204 	orr.w	r2, r2, #4
 8006e80:	b292      	uxth	r2, r2
 8006e82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f00c f988 	bl	801319c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006e8c:	e06c      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d040      	beq.n	8006f1a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d12b      	bne.n	8006f12 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0204 	orr.w	r2, r2, #4
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0208 	orr.w	r2, r2, #8
 8006ee4:	b292      	uxth	r2, r2
 8006ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	089b      	lsrs	r3, r3, #2
 8006efe:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006f08:	2101      	movs	r1, #1
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f00c fb1c 	bl	8013548 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006f10:	e02a      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f00c f942 	bl	801319c <HAL_PCD_SuspendCallback>
    return;
 8006f18:	e026      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00f      	beq.n	8006f44 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f36:	b292      	uxth	r2, r2
 8006f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f00c f900 	bl	8013142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f42:	e011      	b.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f60:	b292      	uxth	r2, r2
 8006f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006f66:	bf00      	nop
  }
}
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_PCD_SetAddress+0x1a>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e013      	b.n	8006fb0 <HAL_PCD_SetAddress+0x42>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f008 f873 	bl	800f08c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	70fb      	strb	r3, [r7, #3]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	803b      	strh	r3, [r7, #0]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	da0e      	bge.n	8006ffc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	705a      	strb	r2, [r3, #1]
 8006ffa:	e00e      	b.n	800701a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	f003 0207 	and.w	r2, r3, #7
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	b2da      	uxtb	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007026:	883a      	ldrh	r2, [r7, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	78ba      	ldrb	r2, [r7, #2]
 8007030:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007044:	78bb      	ldrb	r3, [r7, #2]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d102      	bne.n	8007050 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_PCD_EP_Open+0xa6>
 800705a:	2302      	movs	r3, #2
 800705c:	e00e      	b.n	800707c <HAL_PCD_EP_Open+0xc4>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	4618      	mov	r0, r3
 800706e:	f005 fe57 	bl	800cd20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800707a:	7afb      	ldrb	r3, [r7, #11]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007094:	2b00      	cmp	r3, #0
 8007096:	da0e      	bge.n	80070b6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	4413      	add	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	705a      	strb	r2, [r3, #1]
 80070b4:	e00e      	b.n	80070d4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	f003 0207 	and.w	r2, r3, #7
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	4413      	add	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_PCD_EP_Close+0x6a>
 80070ea:	2302      	movs	r3, #2
 80070ec:	e00e      	b.n	800710c <HAL_PCD_EP_Close+0x88>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f006 f9a3 	bl	800d448 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	607a      	str	r2, [r7, #4]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	460b      	mov	r3, r1
 8007122:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	f003 0207 	and.w	r2, r3, #7
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2200      	movs	r2, #0
 800714c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2200      	movs	r2, #0
 8007152:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007154:	7afb      	ldrb	r3, [r7, #11]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	b2da      	uxtb	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6979      	ldr	r1, [r7, #20]
 8007170:	4618      	mov	r0, r3
 8007172:	f006 fb56 	bl	800d822 <USB_EPStartXfer>
 8007176:	e005      	b.n	8007184 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6979      	ldr	r1, [r7, #20]
 800717e:	4618      	mov	r0, r3
 8007180:	f006 fb4f 	bl	800d822 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	f003 0207 	and.w	r2, r3, #7
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	440b      	add	r3, r1
 80071ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80071b0:	681b      	ldr	r3, [r3, #0]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	460b      	mov	r3, r1
 80071cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071ce:	7afb      	ldrb	r3, [r7, #11]
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2200      	movs	r2, #0
 8007202:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2201      	movs	r2, #1
 8007208:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	b2da      	uxtb	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6979      	ldr	r1, [r7, #20]
 8007226:	4618      	mov	r0, r3
 8007228:	f006 fafb 	bl	800d822 <USB_EPStartXfer>
 800722c:	e005      	b.n	800723a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6979      	ldr	r1, [r7, #20]
 8007234:	4618      	mov	r0, r3
 8007236:	f006 faf4 	bl	800d822 <USB_EPStartXfer>
  }

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	f003 0207 	and.w	r2, r3, #7
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	429a      	cmp	r2, r3
 800725c:	d901      	bls.n	8007262 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e03e      	b.n	80072e0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007266:	2b00      	cmp	r3, #0
 8007268:	da0e      	bge.n	8007288 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	705a      	strb	r2, [r3, #1]
 8007286:	e00c      	b.n	80072a2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007288:	78fa      	ldrb	r2, [r7, #3]
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4413      	add	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_PCD_EP_SetStall+0x7e>
 80072be:	2302      	movs	r3, #2
 80072c0:	e00e      	b.n	80072e0 <HAL_PCD_EP_SetStall+0x9c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f007 fddc 	bl	800ee8e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d901      	bls.n	8007306 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e040      	b.n	8007388 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800730a:	2b00      	cmp	r3, #0
 800730c:	da0e      	bge.n	800732c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	705a      	strb	r2, [r3, #1]
 800732a:	e00e      	b.n	800734a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	f003 0207 	and.w	r2, r3, #7
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4413      	add	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_PCD_EP_ClrStall+0x82>
 8007366:	2302      	movs	r3, #2
 8007368:	e00e      	b.n	8007388 <HAL_PCD_EP_ClrStall+0xa0>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	4618      	mov	r0, r3
 800737a:	f007 fdd9 	bl	800ef30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b096      	sub	sp, #88	; 0x58
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007398:	e39c      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80073a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f003 030f 	and.w	r3, r3, #15
 80073b0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80073b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f040 815e 	bne.w	800767a <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80073be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d150      	bne.n	800746c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	81fb      	strh	r3, [r7, #14]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3328      	adds	r3, #40	; 0x28
 80073f2:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	4413      	add	r3, r2
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	4413      	add	r3, r2
 800740e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800741c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741e:	695a      	ldr	r2, [r3, #20]
 8007420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	441a      	add	r2, r3
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800742a:	2100      	movs	r1, #0
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f00b fe6e 	bl	801310e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 834a 	beq.w	8007ad4 <PCD_EP_ISR_Handler+0x744>
 8007440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 8345 	bne.w	8007ad4 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007456:	b2da      	uxtb	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	b292      	uxth	r2, r2
 800745e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800746a:	e333      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007472:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800747e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007486:	2b00      	cmp	r3, #0
 8007488:	d032      	beq.n	80074f0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007492:	b29b      	uxth	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	4413      	add	r3, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80074bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f007 fe5e 	bl	800f186 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80074d6:	4013      	ands	r3, r2
 80074d8:	823b      	strh	r3, [r7, #16]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	8a3a      	ldrh	r2, [r7, #16]
 80074e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074e4:	b292      	uxth	r2, r2
 80074e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f00b fde3 	bl	80130b4 <HAL_PCD_SetupStageCallback>
 80074ee:	e2f1      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80074f0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f280 82ed 	bge.w	8007ad4 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29a      	uxth	r2, r3
 8007502:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007506:	4013      	ands	r3, r2
 8007508:	83fb      	strh	r3, [r7, #30]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	8bfa      	ldrh	r2, [r7, #30]
 8007510:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007514:	b292      	uxth	r2, r2
 8007516:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007520:	b29b      	uxth	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	4413      	add	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6812      	ldr	r2, [r2, #0]
 8007530:	4413      	add	r3, r2
 8007532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800753c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d019      	beq.n	800757c <PCD_EP_ISR_Handler+0x1ec>
 8007548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d015      	beq.n	800757c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6818      	ldr	r0, [r3, #0]
 8007554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007556:	6959      	ldr	r1, [r3, #20]
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800755c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007560:	b29b      	uxth	r3, r3
 8007562:	f007 fe10 	bl	800f186 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007568:	695a      	ldr	r2, [r3, #20]
 800756a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	441a      	add	r2, r3
 8007570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007572:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f00b fdae 	bl	80130d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 82a3 	bne.w	8007ad4 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759c:	b29b      	uxth	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	4413      	add	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b3e      	cmp	r3, #62	; 0x3e
 80075b4:	d918      	bls.n	80075e8 <PCD_EP_ISR_Handler+0x258>
 80075b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	647b      	str	r3, [r7, #68]	; 0x44
 80075be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <PCD_EP_ISR_Handler+0x240>
 80075ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075cc:	3b01      	subs	r3, #1
 80075ce:	647b      	str	r3, [r7, #68]	; 0x44
 80075d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	029b      	lsls	r3, r3, #10
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e029      	b.n	800763c <PCD_EP_ISR_Handler+0x2ac>
 80075e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d112      	bne.n	8007616 <PCD_EP_ISR_Handler+0x286>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	801a      	strh	r2, [r3, #0]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760e:	b29a      	uxth	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	e012      	b.n	800763c <PCD_EP_ISR_Handler+0x2ac>
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	647b      	str	r3, [r7, #68]	; 0x44
 800761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <PCD_EP_ISR_Handler+0x2a0>
 800762a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762c:	3301      	adds	r3, #1
 800762e:	647b      	str	r3, [r7, #68]	; 0x44
 8007630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007632:	b29b      	uxth	r3, r3
 8007634:	029b      	lsls	r3, r3, #10
 8007636:	b29a      	uxth	r2, r3
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764c:	827b      	strh	r3, [r7, #18]
 800764e:	8a7b      	ldrh	r3, [r7, #18]
 8007650:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007654:	827b      	strh	r3, [r7, #18]
 8007656:	8a7b      	ldrh	r3, [r7, #18]
 8007658:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800765c:	827b      	strh	r3, [r7, #18]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	8a7b      	ldrh	r3, [r7, #18]
 8007664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007674:	b29b      	uxth	r3, r3
 8007676:	8013      	strh	r3, [r2, #0]
 8007678:	e22c      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800768e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8007692:	2b00      	cmp	r3, #0
 8007694:	f280 80f6 	bge.w	8007884 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80076ae:	4013      	ands	r3, r2
 80076b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80076c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076ca:	b292      	uxth	r2, r2
 80076cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80076ce:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	4413      	add	r3, r2
 80076e2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80076e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e6:	7b1b      	ldrb	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d123      	bne.n	8007734 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	4413      	add	r3, r2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	4413      	add	r3, r2
 8007706:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007710:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8007714:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 808e 	beq.w	800783a <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007724:	6959      	ldr	r1, [r3, #20]
 8007726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007728:	88da      	ldrh	r2, [r3, #6]
 800772a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800772e:	f007 fd2a 	bl	800f186 <USB_ReadPMA>
 8007732:	e082      	b.n	800783a <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007736:	78db      	ldrb	r3, [r3, #3]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d10a      	bne.n	8007752 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800773c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007740:	461a      	mov	r2, r3
 8007742:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9d3 	bl	8007af0 <HAL_PCD_EP_DB_Receive>
 800774a:	4603      	mov	r3, r0
 800774c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007750:	e073      	b.n	800783a <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	b29b      	uxth	r3, r3
 8007764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d022      	beq.n	80077f6 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	4413      	add	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80077d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d02c      	beq.n	800783a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e6:	6959      	ldr	r1, [r3, #20]
 80077e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ea:	891a      	ldrh	r2, [r3, #8]
 80077ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80077f0:	f007 fcc9 	bl	800f186 <USB_ReadPMA>
 80077f4:	e021      	b.n	800783a <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4413      	add	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	4413      	add	r3, r2
 8007810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800781a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800781e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782c:	6959      	ldr	r1, [r3, #20]
 800782e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007830:	895a      	ldrh	r2, [r3, #10]
 8007832:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007836:	f007 fca6 	bl	800f186 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007842:	441a      	add	r2, r3
 8007844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007846:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800784a:	695a      	ldr	r2, [r3, #20]
 800784c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007850:	441a      	add	r2, r3
 8007852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007854:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <PCD_EP_ISR_Handler+0x4da>
 800785e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	429a      	cmp	r2, r3
 8007868:	d206      	bcs.n	8007878 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800786a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f00b fc31 	bl	80130d8 <HAL_PCD_DataOutStageCallback>
 8007876:	e005      	b.n	8007884 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800787e:	4618      	mov	r0, r3
 8007880:	f005 ffcf 	bl	800d822 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007884:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 8121 	beq.w	8007ad4 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8007892:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80078bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	441a      	add	r2, r3
 80078d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80078d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078de:	b29b      	uxth	r3, r3
 80078e0:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80078e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e4:	78db      	ldrb	r3, [r3, #3]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	f000 80a2 	beq.w	8007a30 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80078ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ee:	2200      	movs	r2, #0
 80078f0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80078f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f4:	7b1b      	ldrb	r3, [r3, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8093 	beq.w	8007a22 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80078fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d046      	beq.n	8007996 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d126      	bne.n	800795e <PCD_EP_ISR_Handler+0x5ce>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	4413      	add	r3, r2
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
 8007928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	00da      	lsls	r2, r3, #3
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	4413      	add	r3, r2
 8007932:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007936:	623b      	str	r3, [r7, #32]
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007942:	b29a      	uxth	r2, r3
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007956:	b29a      	uxth	r2, r3
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	e061      	b.n	8007a22 <PCD_EP_ISR_Handler+0x692>
 800795e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d15d      	bne.n	8007a22 <PCD_EP_ISR_Handler+0x692>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007974:	b29b      	uxth	r3, r3
 8007976:	461a      	mov	r2, r3
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	4413      	add	r3, r2
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800797e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	00da      	lsls	r2, r3, #3
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	4413      	add	r3, r2
 8007988:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	2200      	movs	r2, #0
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	e045      	b.n	8007a22 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d126      	bne.n	80079f2 <PCD_EP_ISR_Handler+0x662>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b8:	4413      	add	r3, r2
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
 80079bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00da      	lsls	r2, r3, #3
 80079c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c4:	4413      	add	r3, r2
 80079c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079ca:	633b      	str	r3, [r7, #48]	; 0x30
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	e017      	b.n	8007a22 <PCD_EP_ISR_Handler+0x692>
 80079f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d113      	bne.n	8007a22 <PCD_EP_ISR_Handler+0x692>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a08:	4413      	add	r3, r2
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	00da      	lsls	r2, r3, #3
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a14:	4413      	add	r3, r2
 8007a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	2200      	movs	r2, #0
 8007a20:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f00b fb70 	bl	801310e <HAL_PCD_DataInStageCallback>
 8007a2e:	e051      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a30:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d144      	bne.n	8007ac6 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	4413      	add	r3, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a66:	699a      	ldr	r2, [r3, #24]
 8007a68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d907      	bls.n	8007a80 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8007a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a78:	1ad2      	subs	r2, r2, r3
 8007a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a7c:	619a      	str	r2, [r3, #24]
 8007a7e:	e002      	b.n	8007a86 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8007a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a82:	2200      	movs	r2, #0
 8007a84:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f00b fb3a 	bl	801310e <HAL_PCD_DataInStageCallback>
 8007a9a:	e01b      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007aa4:	441a      	add	r2, r3
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aac:	69da      	ldr	r2, [r3, #28]
 8007aae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ab2:	441a      	add	r2, r3
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f005 feaf 	bl	800d822 <USB_EPStartXfer>
 8007ac4:	e006      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007ac6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007aca:	461a      	mov	r2, r3
 8007acc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f917 	bl	8007d02 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	b21b      	sxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f6ff ac5a 	blt.w	800739a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3758      	adds	r7, #88	; 0x58
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d07c      	beq.n	8007c02 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	4413      	add	r3, r2
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	4413      	add	r3, r2
 8007b22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	8b7b      	ldrh	r3, [r7, #26]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d306      	bcc.n	8007b46 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	8b7b      	ldrh	r3, [r7, #26]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	619a      	str	r2, [r3, #24]
 8007b44:	e002      	b.n	8007b4c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d123      	bne.n	8007b9c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	833b      	strh	r3, [r7, #24]
 8007b70:	8b3b      	ldrh	r3, [r7, #24]
 8007b72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b76:	833b      	strh	r3, [r7, #24]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	441a      	add	r2, r3
 8007b86:	8b3b      	ldrh	r3, [r7, #24]
 8007b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007b9c:	88fb      	ldrh	r3, [r7, #6]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01f      	beq.n	8007be6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc0:	82fb      	strh	r3, [r7, #22]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	441a      	add	r2, r3
 8007bd0:	8afb      	ldrh	r3, [r7, #22]
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007be6:	8b7b      	ldrh	r3, [r7, #26]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 8085 	beq.w	8007cf8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6959      	ldr	r1, [r3, #20]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	891a      	ldrh	r2, [r3, #8]
 8007bfa:	8b7b      	ldrh	r3, [r7, #26]
 8007bfc:	f007 fac3 	bl	800f186 <USB_ReadPMA>
 8007c00:	e07a      	b.n	8007cf8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	8b7b      	ldrh	r3, [r7, #26]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d306      	bcc.n	8007c40 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	8b7b      	ldrh	r3, [r7, #26]
 8007c38:	1ad2      	subs	r2, r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	619a      	str	r2, [r3, #24]
 8007c3e:	e002      	b.n	8007c46 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d123      	bne.n	8007c96 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c68:	83fb      	strh	r3, [r7, #30]
 8007c6a:	8bfb      	ldrh	r3, [r7, #30]
 8007c6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c70:	83fb      	strh	r3, [r7, #30]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8bfb      	ldrh	r3, [r7, #30]
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007c96:	88fb      	ldrh	r3, [r7, #6]
 8007c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d11f      	bne.n	8007ce0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	83bb      	strh	r3, [r7, #28]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	441a      	add	r2, r3
 8007cca:	8bbb      	ldrh	r3, [r7, #28]
 8007ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ce0:	8b7b      	ldrh	r3, [r7, #26]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d008      	beq.n	8007cf8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6959      	ldr	r1, [r3, #20]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	895a      	ldrh	r2, [r3, #10]
 8007cf2:	8b7b      	ldrh	r3, [r7, #26]
 8007cf4:	f007 fa47 	bl	800f186 <USB_ReadPMA>
    }
  }

  return count;
 8007cf8:	8b7b      	ldrh	r3, [r7, #26]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b0a2      	sub	sp, #136	; 0x88
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 81c5 	beq.w	80080a6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4413      	add	r3, r2
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	4413      	add	r3, r2
 8007d36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d907      	bls.n	8007d60 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	699a      	ldr	r2, [r3, #24]
 8007d54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d58:	1ad2      	subs	r2, r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	619a      	str	r2, [r3, #24]
 8007d5e:	e002      	b.n	8007d66 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2200      	movs	r2, #0
 8007d64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f040 80b9 	bne.w	8007ee2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d126      	bne.n	8007dc6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	4413      	add	r3, r2
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	00da      	lsls	r2, r3, #3
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	4413      	add	r3, r2
 8007d9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	801a      	strh	r2, [r3, #0]
 8007dc4:	e01a      	b.n	8007dfc <HAL_PCD_EP_DB_Transmit+0xfa>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d116      	bne.n	8007dfc <HAL_PCD_EP_DB_Transmit+0xfa>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	461a      	mov	r2, r3
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	4413      	add	r3, r2
 8007de4:	633b      	str	r3, [r7, #48]	; 0x30
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	00da      	lsls	r2, r3, #3
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	4413      	add	r3, r2
 8007df0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2200      	movs	r2, #0
 8007dfa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d126      	bne.n	8007e58 <HAL_PCD_EP_DB_Transmit+0x156>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	4413      	add	r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	00da      	lsls	r2, r3, #3
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	801a      	strh	r2, [r3, #0]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	801a      	strh	r2, [r3, #0]
 8007e56:	e017      	b.n	8007e88 <HAL_PCD_EP_DB_Transmit+0x186>
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d113      	bne.n	8007e88 <HAL_PCD_EP_DB_Transmit+0x186>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	4413      	add	r3, r2
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	00da      	lsls	r2, r3, #3
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2200      	movs	r2, #0
 8007e86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f00b f93d 	bl	801310e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 82d2 	beq.w	8008444 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	827b      	strh	r3, [r7, #18]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	441a      	add	r2, r3
 8007eca:	8a7b      	ldrh	r3, [r7, #18]
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
 8007ee0:	e2b0      	b.n	8008444 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d021      	beq.n	8007f30 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	441a      	add	r2, r3
 8007f18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	f040 8284 	bne.w	8008444 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	695a      	ldr	r2, [r3, #20]
 8007f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f44:	441a      	add	r2, r3
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	69da      	ldr	r2, [r3, #28]
 8007f4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f52:	441a      	add	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6a1a      	ldr	r2, [r3, #32]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d309      	bcc.n	8007f78 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f70:	1ad2      	subs	r2, r2, r3
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	621a      	str	r2, [r3, #32]
 8007f76:	e015      	b.n	8007fa4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d107      	bne.n	8007f90 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007f80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007f8e:	e009      	b.n	8007fa4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d155      	bne.n	8008058 <HAL_PCD_EP_DB_Transmit+0x356>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	4413      	add	r3, r2
 8007fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	00da      	lsls	r2, r3, #3
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	4413      	add	r3, r2
 8007fce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fd8:	d916      	bls.n	8008008 <HAL_PCD_EP_DB_Transmit+0x306>
 8007fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fec:	3b01      	subs	r3, #1
 8007fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	029b      	lsls	r3, r3, #10
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008000:	b29a      	uxth	r2, r3
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e043      	b.n	8008090 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800a:	2b00      	cmp	r3, #0
 800800c:	d112      	bne.n	8008034 <HAL_PCD_EP_DB_Transmit+0x332>
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008018:	b29a      	uxth	r2, r3
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802c:	b29a      	uxth	r2, r3
 800802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e02d      	b.n	8008090 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	64bb      	str	r3, [r7, #72]	; 0x48
 800803a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <HAL_PCD_EP_DB_Transmit+0x348>
 8008044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008046:	3301      	adds	r3, #1
 8008048:	64bb      	str	r3, [r7, #72]	; 0x48
 800804a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800804c:	b29b      	uxth	r3, r3
 800804e:	029b      	lsls	r3, r3, #10
 8008050:	b29a      	uxth	r2, r3
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	e01b      	b.n	8008090 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d117      	bne.n	8008090 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	643b      	str	r3, [r7, #64]	; 0x40
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800806e:	b29b      	uxth	r3, r3
 8008070:	461a      	mov	r2, r3
 8008072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008074:	4413      	add	r3, r2
 8008076:	643b      	str	r3, [r7, #64]	; 0x40
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	00da      	lsls	r2, r3, #3
 800807e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008080:	4413      	add	r3, r2
 8008082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800808a:	b29a      	uxth	r2, r3
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	6959      	ldr	r1, [r3, #20]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	891a      	ldrh	r2, [r3, #8]
 800809c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f007 f82f 	bl	800f102 <USB_WritePMA>
 80080a4:	e1ce      	b.n	8008444 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	4413      	add	r3, r2
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	4413      	add	r3, r2
 80080c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d307      	bcc.n	80080ea <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	619a      	str	r2, [r3, #24]
 80080e8:	e002      	b.n	80080f0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2200      	movs	r2, #0
 80080ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 80c4 	bne.w	8008282 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	785b      	ldrb	r3, [r3, #1]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d126      	bne.n	8008150 <HAL_PCD_EP_DB_Transmit+0x44e>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	66bb      	str	r3, [r7, #104]	; 0x68
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008110:	b29b      	uxth	r3, r3
 8008112:	461a      	mov	r2, r3
 8008114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008116:	4413      	add	r3, r2
 8008118:	66bb      	str	r3, [r7, #104]	; 0x68
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	00da      	lsls	r2, r3, #3
 8008120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008122:	4413      	add	r3, r2
 8008124:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008128:	667b      	str	r3, [r7, #100]	; 0x64
 800812a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008134:	b29a      	uxth	r2, r3
 8008136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008148:	b29a      	uxth	r2, r3
 800814a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	e01a      	b.n	8008186 <HAL_PCD_EP_DB_Transmit+0x484>
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d116      	bne.n	8008186 <HAL_PCD_EP_DB_Transmit+0x484>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	673b      	str	r3, [r7, #112]	; 0x70
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008166:	b29b      	uxth	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800816c:	4413      	add	r3, r2
 800816e:	673b      	str	r3, [r7, #112]	; 0x70
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	00da      	lsls	r2, r3, #3
 8008176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008178:	4413      	add	r3, r2
 800817a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800817e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008182:	2200      	movs	r2, #0
 8008184:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d12f      	bne.n	80081f4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	461a      	mov	r2, r3
 80081a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081ac:	4413      	add	r3, r2
 80081ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	00da      	lsls	r2, r3, #3
 80081b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081bc:	4413      	add	r3, r2
 80081be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	e017      	b.n	8008224 <HAL_PCD_EP_DB_Transmit+0x522>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d113      	bne.n	8008224 <HAL_PCD_EP_DB_Transmit+0x522>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008204:	b29b      	uxth	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800820a:	4413      	add	r3, r2
 800820c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	00da      	lsls	r2, r3, #3
 8008214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008216:	4413      	add	r3, r2
 8008218:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800821c:	67bb      	str	r3, [r7, #120]	; 0x78
 800821e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008220:	2200      	movs	r2, #0
 8008222:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f00a ff6f 	bl	801310e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 8104 	bne.w	8008444 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008256:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	441a      	add	r2, r3
 8008268:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800826c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827c:	b29b      	uxth	r3, r3
 800827e:	8013      	strh	r3, [r2, #0]
 8008280:	e0e0      	b.n	8008444 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008282:	88fb      	ldrh	r3, [r7, #6]
 8008284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d121      	bne.n	80082d0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	441a      	add	r2, r3
 80082b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80082bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	f040 80b4 	bne.w	8008444 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80082e4:	441a      	add	r2, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	69da      	ldr	r2, [r3, #28]
 80082ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80082f2:	441a      	add	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6a1a      	ldr	r2, [r3, #32]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	429a      	cmp	r2, r3
 8008302:	d309      	bcc.n	8008318 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6a1a      	ldr	r2, [r3, #32]
 800830e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008310:	1ad2      	subs	r2, r2, r3
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	621a      	str	r2, [r3, #32]
 8008316:	e015      	b.n	8008344 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d107      	bne.n	8008330 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8008320:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008324:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800832e:	e009      	b.n	8008344 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	663b      	str	r3, [r7, #96]	; 0x60
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d155      	bne.n	80083fe <HAL_PCD_EP_DB_Transmit+0x6fc>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	65bb      	str	r3, [r7, #88]	; 0x58
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008360:	b29b      	uxth	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008366:	4413      	add	r3, r2
 8008368:	65bb      	str	r3, [r7, #88]	; 0x58
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	00da      	lsls	r2, r3, #3
 8008370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008372:	4413      	add	r3, r2
 8008374:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008378:	657b      	str	r3, [r7, #84]	; 0x54
 800837a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837c:	2b3e      	cmp	r3, #62	; 0x3e
 800837e:	d916      	bls.n	80083ae <HAL_PCD_EP_DB_Transmit+0x6ac>
 8008380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	677b      	str	r3, [r7, #116]	; 0x74
 8008386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008388:	f003 031f 	and.w	r3, r3, #31
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <HAL_PCD_EP_DB_Transmit+0x694>
 8008390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008392:	3b01      	subs	r3, #1
 8008394:	677b      	str	r3, [r7, #116]	; 0x74
 8008396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008398:	b29b      	uxth	r3, r3
 800839a:	029b      	lsls	r3, r3, #10
 800839c:	b29b      	uxth	r3, r3
 800839e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e040      	b.n	8008430 <HAL_PCD_EP_DB_Transmit+0x72e>
 80083ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d112      	bne.n	80083da <HAL_PCD_EP_DB_Transmit+0x6d8>
 80083b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083be:	b29a      	uxth	r2, r3
 80083c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	e02a      	b.n	8008430 <HAL_PCD_EP_DB_Transmit+0x72e>
 80083da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083dc:	085b      	lsrs	r3, r3, #1
 80083de:	677b      	str	r3, [r7, #116]	; 0x74
 80083e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80083ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083ec:	3301      	adds	r3, #1
 80083ee:	677b      	str	r3, [r7, #116]	; 0x74
 80083f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083fa:	801a      	strh	r2, [r3, #0]
 80083fc:	e018      	b.n	8008430 <HAL_PCD_EP_DB_Transmit+0x72e>
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d114      	bne.n	8008430 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840e:	b29b      	uxth	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008414:	4413      	add	r3, r2
 8008416:	663b      	str	r3, [r7, #96]	; 0x60
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	00da      	lsls	r2, r3, #3
 800841e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008420:	4413      	add	r3, r2
 8008422:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800842a:	b29a      	uxth	r2, r3
 800842c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800842e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	6959      	ldr	r1, [r3, #20]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	895a      	ldrh	r2, [r3, #10]
 800843c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843e:	b29b      	uxth	r3, r3
 8008440:	f006 fe5f 	bl	800f102 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	b29b      	uxth	r3, r3
 8008456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845e:	823b      	strh	r3, [r7, #16]
 8008460:	8a3b      	ldrh	r3, [r7, #16]
 8008462:	f083 0310 	eor.w	r3, r3, #16
 8008466:	823b      	strh	r3, [r7, #16]
 8008468:	8a3b      	ldrh	r3, [r7, #16]
 800846a:	f083 0320 	eor.w	r3, r3, #32
 800846e:	823b      	strh	r3, [r7, #16]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	441a      	add	r2, r3
 800847e:	8a3b      	ldrh	r3, [r7, #16]
 8008480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800848c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008490:	b29b      	uxth	r3, r3
 8008492:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3788      	adds	r7, #136	; 0x88
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800849e:	b480      	push	{r7}
 80084a0:	b087      	sub	sp, #28
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	607b      	str	r3, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	817b      	strh	r3, [r7, #10]
 80084ac:	4613      	mov	r3, r2
 80084ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80084b0:	897b      	ldrh	r3, [r7, #10]
 80084b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084bc:	897b      	ldrh	r3, [r7, #10]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	e009      	b.n	80084e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80084d4:	897a      	ldrh	r2, [r7, #10]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80084e8:	893b      	ldrh	r3, [r7, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2200      	movs	r2, #0
 80084f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	80da      	strh	r2, [r3, #6]
 80084fc:	e00b      	b.n	8008516 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2201      	movs	r2, #1
 8008502:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	b29a      	uxth	r2, r3
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	0c1b      	lsrs	r3, r3, #16
 8008510:	b29a      	uxth	r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008548:	b29b      	uxth	r3, r3
 800854a:	f043 0301 	orr.w	r3, r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800855c:	b29b      	uxth	r3, r3
 800855e:	f043 0302 	orr.w	r3, r3, #2
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d141      	bne.n	800860a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008586:	4b4b      	ldr	r3, [pc, #300]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800858e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008592:	d131      	bne.n	80085f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008594:	4b47      	ldr	r3, [pc, #284]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800859a:	4a46      	ldr	r2, [pc, #280]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800859c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085a4:	4b43      	ldr	r3, [pc, #268]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085ac:	4a41      	ldr	r2, [pc, #260]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80085b4:	4b40      	ldr	r3, [pc, #256]	; (80086b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2232      	movs	r2, #50	; 0x32
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
 80085be:	4a3f      	ldr	r2, [pc, #252]	; (80086bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80085c0:	fba2 2303 	umull	r2, r3, r2, r3
 80085c4:	0c9b      	lsrs	r3, r3, #18
 80085c6:	3301      	adds	r3, #1
 80085c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085ca:	e002      	b.n	80085d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085d2:	4b38      	ldr	r3, [pc, #224]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085de:	d102      	bne.n	80085e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f2      	bne.n	80085cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085e6:	4b33      	ldr	r3, [pc, #204]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085f2:	d158      	bne.n	80086a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e057      	b.n	80086a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085f8:	4b2e      	ldr	r3, [pc, #184]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fe:	4a2d      	ldr	r2, [pc, #180]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008608:	e04d      	b.n	80086a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008610:	d141      	bne.n	8008696 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008612:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800861a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861e:	d131      	bne.n	8008684 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008620:	4b24      	ldr	r3, [pc, #144]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008626:	4a23      	ldr	r2, [pc, #140]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800862c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008630:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008638:	4a1e      	ldr	r2, [pc, #120]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800863a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800863e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008640:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2232      	movs	r2, #50	; 0x32
 8008646:	fb02 f303 	mul.w	r3, r2, r3
 800864a:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800864c:	fba2 2303 	umull	r2, r3, r2, r3
 8008650:	0c9b      	lsrs	r3, r3, #18
 8008652:	3301      	adds	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008656:	e002      	b.n	800865e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3b01      	subs	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866a:	d102      	bne.n	8008672 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f2      	bne.n	8008658 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008672:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800867a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800867e:	d112      	bne.n	80086a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e011      	b.n	80086a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800868a:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800868c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008694:	e007      	b.n	80086a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800869e:	4a05      	ldr	r2, [pc, #20]	; (80086b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	40007000 	.word	0x40007000
 80086b8:	20000004 	.word	0x20000004
 80086bc:	431bde83 	.word	0x431bde83

080086c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e306      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d075      	beq.n	80087ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086de:	4b97      	ldr	r3, [pc, #604]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f003 030c 	and.w	r3, r3, #12
 80086e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086e8:	4b94      	ldr	r3, [pc, #592]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	d102      	bne.n	80086fe <HAL_RCC_OscConfig+0x3e>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d002      	beq.n	8008704 <HAL_RCC_OscConfig+0x44>
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b08      	cmp	r3, #8
 8008702:	d10b      	bne.n	800871c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008704:	4b8d      	ldr	r3, [pc, #564]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d05b      	beq.n	80087c8 <HAL_RCC_OscConfig+0x108>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d157      	bne.n	80087c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e2e1      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008724:	d106      	bne.n	8008734 <HAL_RCC_OscConfig+0x74>
 8008726:	4b85      	ldr	r3, [pc, #532]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a84      	ldr	r2, [pc, #528]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800872c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	e01d      	b.n	8008770 <HAL_RCC_OscConfig+0xb0>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800873c:	d10c      	bne.n	8008758 <HAL_RCC_OscConfig+0x98>
 800873e:	4b7f      	ldr	r3, [pc, #508]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a7e      	ldr	r2, [pc, #504]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4b7c      	ldr	r3, [pc, #496]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a7b      	ldr	r2, [pc, #492]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e00b      	b.n	8008770 <HAL_RCC_OscConfig+0xb0>
 8008758:	4b78      	ldr	r3, [pc, #480]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a77      	ldr	r2, [pc, #476]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800875e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b75      	ldr	r3, [pc, #468]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a74      	ldr	r2, [pc, #464]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800876a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800876e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d013      	beq.n	80087a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008778:	f7fb fbae 	bl	8003ed8 <HAL_GetTick>
 800877c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008780:	f7fb fbaa 	bl	8003ed8 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b64      	cmp	r3, #100	; 0x64
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e2a6      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008792:	4b6a      	ldr	r3, [pc, #424]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f0      	beq.n	8008780 <HAL_RCC_OscConfig+0xc0>
 800879e:	e014      	b.n	80087ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a0:	f7fb fb9a 	bl	8003ed8 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a8:	f7fb fb96 	bl	8003ed8 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b64      	cmp	r3, #100	; 0x64
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e292      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087ba:	4b60      	ldr	r3, [pc, #384]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f0      	bne.n	80087a8 <HAL_RCC_OscConfig+0xe8>
 80087c6:	e000      	b.n	80087ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d075      	beq.n	80088c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087d6:	4b59      	ldr	r3, [pc, #356]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 030c 	and.w	r3, r3, #12
 80087de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087e0:	4b56      	ldr	r3, [pc, #344]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b0c      	cmp	r3, #12
 80087ee:	d102      	bne.n	80087f6 <HAL_RCC_OscConfig+0x136>
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d002      	beq.n	80087fc <HAL_RCC_OscConfig+0x13c>
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d11f      	bne.n	800883c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087fc:	4b4f      	ldr	r3, [pc, #316]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <HAL_RCC_OscConfig+0x154>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e265      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008814:	4b49      	ldr	r3, [pc, #292]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	061b      	lsls	r3, r3, #24
 8008822:	4946      	ldr	r1, [pc, #280]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008828:	4b45      	ldr	r3, [pc, #276]	; (8008940 <HAL_RCC_OscConfig+0x280>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f7fa fee9 	bl	8003604 <HAL_InitTick>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d043      	beq.n	80088c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e251      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d023      	beq.n	800888c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008844:	4b3d      	ldr	r3, [pc, #244]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a3c      	ldr	r2, [pc, #240]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800884a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800884e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fb fb42 	bl	8003ed8 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008858:	f7fb fb3e 	bl	8003ed8 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e23a      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800886a:	4b34      	ldr	r3, [pc, #208]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0f0      	beq.n	8008858 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008876:	4b31      	ldr	r3, [pc, #196]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	061b      	lsls	r3, r3, #24
 8008884:	492d      	ldr	r1, [pc, #180]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008886:	4313      	orrs	r3, r2
 8008888:	604b      	str	r3, [r1, #4]
 800888a:	e01a      	b.n	80088c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800888c:	4b2b      	ldr	r3, [pc, #172]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a2a      	ldr	r2, [pc, #168]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008898:	f7fb fb1e 	bl	8003ed8 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088a0:	f7fb fb1a 	bl	8003ed8 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e216      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088b2:	4b22      	ldr	r3, [pc, #136]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0x1e0>
 80088be:	e000      	b.n	80088c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d041      	beq.n	8008952 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01c      	beq.n	8008910 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80088d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088dc:	4a17      	ldr	r2, [pc, #92]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e6:	f7fb faf7 	bl	8003ed8 <HAL_GetTick>
 80088ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088ec:	e008      	b.n	8008900 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088ee:	f7fb faf3 	bl	8003ed8 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e1ef      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008900:	4b0e      	ldr	r3, [pc, #56]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ef      	beq.n	80088ee <HAL_RCC_OscConfig+0x22e>
 800890e:	e020      	b.n	8008952 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008916:	4a09      	ldr	r2, [pc, #36]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008920:	f7fb fada 	bl	8003ed8 <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008926:	e00d      	b.n	8008944 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008928:	f7fb fad6 	bl	8003ed8 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b02      	cmp	r3, #2
 8008934:	d906      	bls.n	8008944 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e1d2      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
 800893a:	bf00      	nop
 800893c:	40021000 	.word	0x40021000
 8008940:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008944:	4b8c      	ldr	r3, [pc, #560]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1ea      	bne.n	8008928 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 80a6 	beq.w	8008aac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008960:	2300      	movs	r3, #0
 8008962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008964:	4b84      	ldr	r3, [pc, #528]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_RCC_OscConfig+0x2b4>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <HAL_RCC_OscConfig+0x2b6>
 8008974:	2300      	movs	r3, #0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00d      	beq.n	8008996 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800897a:	4b7f      	ldr	r3, [pc, #508]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897e:	4a7e      	ldr	r2, [pc, #504]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008984:	6593      	str	r3, [r2, #88]	; 0x58
 8008986:	4b7c      	ldr	r3, [pc, #496]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008992:	2301      	movs	r3, #1
 8008994:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008996:	4b79      	ldr	r3, [pc, #484]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d118      	bne.n	80089d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089a2:	4b76      	ldr	r3, [pc, #472]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a75      	ldr	r2, [pc, #468]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 80089a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ae:	f7fb fa93 	bl	8003ed8 <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b6:	f7fb fa8f 	bl	8003ed8 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e18b      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c8:	4b6c      	ldr	r3, [pc, #432]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d108      	bne.n	80089ee <HAL_RCC_OscConfig+0x32e>
 80089dc:	4b66      	ldr	r3, [pc, #408]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e2:	4a65      	ldr	r2, [pc, #404]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089ec:	e024      	b.n	8008a38 <HAL_RCC_OscConfig+0x378>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	d110      	bne.n	8008a18 <HAL_RCC_OscConfig+0x358>
 80089f6:	4b60      	ldr	r3, [pc, #384]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fc:	4a5e      	ldr	r2, [pc, #376]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089fe:	f043 0304 	orr.w	r3, r3, #4
 8008a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a06:	4b5c      	ldr	r3, [pc, #368]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0c:	4a5a      	ldr	r2, [pc, #360]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a16:	e00f      	b.n	8008a38 <HAL_RCC_OscConfig+0x378>
 8008a18:	4b57      	ldr	r3, [pc, #348]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1e:	4a56      	ldr	r2, [pc, #344]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a28:	4b53      	ldr	r3, [pc, #332]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	4a52      	ldr	r2, [pc, #328]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a30:	f023 0304 	bic.w	r3, r3, #4
 8008a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d016      	beq.n	8008a6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a40:	f7fb fa4a 	bl	8003ed8 <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a46:	e00a      	b.n	8008a5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a48:	f7fb fa46 	bl	8003ed8 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e140      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a5e:	4b46      	ldr	r3, [pc, #280]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0ed      	beq.n	8008a48 <HAL_RCC_OscConfig+0x388>
 8008a6c:	e015      	b.n	8008a9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6e:	f7fb fa33 	bl	8003ed8 <HAL_GetTick>
 8008a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a74:	e00a      	b.n	8008a8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a76:	f7fb fa2f 	bl	8003ed8 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d901      	bls.n	8008a8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e129      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a8c:	4b3a      	ldr	r3, [pc, #232]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1ed      	bne.n	8008a76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a9a:	7ffb      	ldrb	r3, [r7, #31]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d105      	bne.n	8008aac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa0:	4b35      	ldr	r3, [pc, #212]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa4:	4a34      	ldr	r2, [pc, #208]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d03c      	beq.n	8008b32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01c      	beq.n	8008afa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ac0:	4b2d      	ldr	r3, [pc, #180]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ac6:	4a2c      	ldr	r2, [pc, #176]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad0:	f7fb fa02 	bl	8003ed8 <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ad8:	f7fb f9fe 	bl	8003ed8 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e0fa      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008aea:	4b23      	ldr	r3, [pc, #140]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0ef      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x418>
 8008af8:	e01b      	b.n	8008b32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008afa:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b00:	4a1d      	ldr	r2, [pc, #116]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b02:	f023 0301 	bic.w	r3, r3, #1
 8008b06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0a:	f7fb f9e5 	bl	8003ed8 <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b12:	f7fb f9e1 	bl	8003ed8 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e0dd      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b24:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1ef      	bne.n	8008b12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 80d1 	beq.w	8008cde <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 030c 	and.w	r3, r3, #12
 8008b44:	2b0c      	cmp	r3, #12
 8008b46:	f000 808b 	beq.w	8008c60 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d15e      	bne.n	8008c10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a08      	ldr	r2, [pc, #32]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5e:	f7fb f9bb 	bl	8003ed8 <HAL_GetTick>
 8008b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b64:	e00c      	b.n	8008b80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b66:	f7fb f9b7 	bl	8003ed8 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d905      	bls.n	8008b80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e0b3      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
 8008b78:	40021000 	.word	0x40021000
 8008b7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b80:	4b59      	ldr	r3, [pc, #356]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1ec      	bne.n	8008b66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b8c:	4b56      	ldr	r3, [pc, #344]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	4b56      	ldr	r3, [pc, #344]	; (8008cec <HAL_RCC_OscConfig+0x62c>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6a11      	ldr	r1, [r2, #32]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b9c:	3a01      	subs	r2, #1
 8008b9e:	0112      	lsls	r2, r2, #4
 8008ba0:	4311      	orrs	r1, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008ba6:	0212      	lsls	r2, r2, #8
 8008ba8:	4311      	orrs	r1, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008bae:	0852      	lsrs	r2, r2, #1
 8008bb0:	3a01      	subs	r2, #1
 8008bb2:	0552      	lsls	r2, r2, #21
 8008bb4:	4311      	orrs	r1, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bba:	0852      	lsrs	r2, r2, #1
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	0652      	lsls	r2, r2, #25
 8008bc0:	4311      	orrs	r1, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008bc6:	06d2      	lsls	r2, r2, #27
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	4947      	ldr	r1, [pc, #284]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bd0:	4b45      	ldr	r3, [pc, #276]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a44      	ldr	r2, [pc, #272]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bdc:	4b42      	ldr	r3, [pc, #264]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	4a41      	ldr	r2, [pc, #260]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008be6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be8:	f7fb f976 	bl	8003ed8 <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf0:	f7fb f972 	bl	8003ed8 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e06e      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c02:	4b39      	ldr	r3, [pc, #228]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f0      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x530>
 8008c0e:	e066      	b.n	8008cde <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c10:	4b35      	ldr	r3, [pc, #212]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a34      	ldr	r2, [pc, #208]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c1a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008c1c:	4b32      	ldr	r3, [pc, #200]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	4a31      	ldr	r2, [pc, #196]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008c28:	4b2f      	ldr	r3, [pc, #188]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c38:	f7fb f94e 	bl	8003ed8 <HAL_GetTick>
 8008c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c3e:	e008      	b.n	8008c52 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c40:	f7fb f94a 	bl	8003ed8 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d901      	bls.n	8008c52 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e046      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c52:	4b25      	ldr	r3, [pc, #148]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1f0      	bne.n	8008c40 <HAL_RCC_OscConfig+0x580>
 8008c5e:	e03e      	b.n	8008cde <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d101      	bne.n	8008c6c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e039      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008c6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ce8 <HAL_RCC_OscConfig+0x628>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f003 0203 	and.w	r2, r3, #3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d12c      	bne.n	8008cda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d123      	bne.n	8008cda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d11b      	bne.n	8008cda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d113      	bne.n	8008cda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	085b      	lsrs	r3, r3, #1
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d109      	bne.n	8008cda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd0:	085b      	lsrs	r3, r3, #1
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d001      	beq.n	8008cde <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40021000 	.word	0x40021000
 8008cec:	019f800c 	.word	0x019f800c

08008cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e11e      	b.n	8008f46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d08:	4b91      	ldr	r3, [pc, #580]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d910      	bls.n	8008d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d16:	4b8e      	ldr	r3, [pc, #568]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 020f 	bic.w	r2, r3, #15
 8008d1e:	498c      	ldr	r1, [pc, #560]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d26:	4b8a      	ldr	r3, [pc, #552]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d001      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e106      	b.n	8008f46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d073      	beq.n	8008e2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d129      	bne.n	8008da0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d4c:	4b81      	ldr	r3, [pc, #516]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e0f4      	b.n	8008f46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008d5c:	f000 f9d0 	bl	8009100 <RCC_GetSysClockFreqFromPLLSource>
 8008d60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	4a7c      	ldr	r2, [pc, #496]	; (8008f58 <HAL_RCC_ClockConfig+0x268>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d93f      	bls.n	8008dea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d6a:	4b7a      	ldr	r3, [pc, #488]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d009      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d033      	beq.n	8008dea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d12f      	bne.n	8008dea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d8a:	4b72      	ldr	r3, [pc, #456]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d92:	4a70      	ldr	r2, [pc, #448]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008d9a:	2380      	movs	r3, #128	; 0x80
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	e024      	b.n	8008dea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d107      	bne.n	8008db8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008da8:	4b6a      	ldr	r3, [pc, #424]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e0c6      	b.n	8008f46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008db8:	4b66      	ldr	r3, [pc, #408]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e0be      	b.n	8008f46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008dc8:	f000 f8ce 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 8008dcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	4a61      	ldr	r2, [pc, #388]	; (8008f58 <HAL_RCC_ClockConfig+0x268>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d909      	bls.n	8008dea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008dd6:	4b5f      	ldr	r3, [pc, #380]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dde:	4a5d      	ldr	r2, [pc, #372]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008de6:	2380      	movs	r3, #128	; 0x80
 8008de8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dea:	4b5a      	ldr	r3, [pc, #360]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f023 0203 	bic.w	r2, r3, #3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	4957      	ldr	r1, [pc, #348]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dfc:	f7fb f86c 	bl	8003ed8 <HAL_GetTick>
 8008e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e02:	e00a      	b.n	8008e1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e04:	f7fb f868 	bl	8003ed8 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e095      	b.n	8008f46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1a:	4b4e      	ldr	r3, [pc, #312]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 020c 	and.w	r2, r3, #12
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d1eb      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d023      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d005      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e44:	4b43      	ldr	r3, [pc, #268]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	4a42      	ldr	r2, [pc, #264]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d007      	beq.n	8008e6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008e5c:	4b3d      	ldr	r3, [pc, #244]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e64:	4a3b      	ldr	r2, [pc, #236]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e6c:	4b39      	ldr	r3, [pc, #228]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	4936      	ldr	r1, [pc, #216]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	608b      	str	r3, [r1, #8]
 8008e7e:	e008      	b.n	8008e92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2b80      	cmp	r3, #128	; 0x80
 8008e84:	d105      	bne.n	8008e92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e86:	4b33      	ldr	r3, [pc, #204]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	4a32      	ldr	r2, [pc, #200]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e92:	4b2f      	ldr	r3, [pc, #188]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d21d      	bcs.n	8008edc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ea0:	4b2b      	ldr	r3, [pc, #172]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f023 020f 	bic.w	r2, r3, #15
 8008ea8:	4929      	ldr	r1, [pc, #164]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008eb0:	f7fb f812 	bl	8003ed8 <HAL_GetTick>
 8008eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eb6:	e00a      	b.n	8008ece <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eb8:	f7fb f80e 	bl	8003ed8 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e03b      	b.n	8008f46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ece:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <HAL_RCC_ClockConfig+0x260>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d1ed      	bne.n	8008eb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ee8:	4b1a      	ldr	r3, [pc, #104]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	4917      	ldr	r1, [pc, #92]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d009      	beq.n	8008f1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f06:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	490f      	ldr	r1, [pc, #60]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f1a:	f000 f825 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <HAL_RCC_ClockConfig+0x264>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	091b      	lsrs	r3, r3, #4
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	490c      	ldr	r1, [pc, #48]	; (8008f5c <HAL_RCC_ClockConfig+0x26c>)
 8008f2c:	5ccb      	ldrb	r3, [r1, r3]
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	fa22 f303 	lsr.w	r3, r2, r3
 8008f36:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <HAL_RCC_ClockConfig+0x270>)
 8008f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <HAL_RCC_ClockConfig+0x274>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fa fb60 	bl	8003604 <HAL_InitTick>
 8008f44:	4603      	mov	r3, r0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40022000 	.word	0x40022000
 8008f54:	40021000 	.word	0x40021000
 8008f58:	04c4b400 	.word	0x04c4b400
 8008f5c:	08014848 	.word	0x08014848
 8008f60:	20000004 	.word	0x20000004
 8008f64:	20000008 	.word	0x20000008

08008f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008f6e:	4b2c      	ldr	r3, [pc, #176]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f003 030c 	and.w	r3, r3, #12
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d102      	bne.n	8008f80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f7a:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	e047      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008f80:	4b27      	ldr	r3, [pc, #156]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 030c 	and.w	r3, r3, #12
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d102      	bne.n	8008f92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f8c:	4b26      	ldr	r3, [pc, #152]	; (8009028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f8e:	613b      	str	r3, [r7, #16]
 8008f90:	e03e      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008f92:	4b23      	ldr	r3, [pc, #140]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 030c 	and.w	r3, r3, #12
 8008f9a:	2b0c      	cmp	r3, #12
 8008f9c:	d136      	bne.n	800900c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f9e:	4b20      	ldr	r3, [pc, #128]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008fa8:	4b1d      	ldr	r3, [pc, #116]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	091b      	lsrs	r3, r3, #4
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d10c      	bne.n	8008fd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fbc:	4a1a      	ldr	r2, [pc, #104]	; (8009028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc4:	4a16      	ldr	r2, [pc, #88]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fc6:	68d2      	ldr	r2, [r2, #12]
 8008fc8:	0a12      	lsrs	r2, r2, #8
 8008fca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
 8008fd2:	617b      	str	r3, [r7, #20]
      break;
 8008fd4:	e00c      	b.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fd6:	4a13      	ldr	r2, [pc, #76]	; (8009024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fde:	4a10      	ldr	r2, [pc, #64]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fe0:	68d2      	ldr	r2, [r2, #12]
 8008fe2:	0a12      	lsrs	r2, r2, #8
 8008fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fe8:	fb02 f303 	mul.w	r3, r2, r3
 8008fec:	617b      	str	r3, [r7, #20]
      break;
 8008fee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	0e5b      	lsrs	r3, r3, #25
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	fbb2 f3f3 	udiv	r3, r2, r3
 8009008:	613b      	str	r3, [r7, #16]
 800900a:	e001      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009010:	693b      	ldr	r3, [r7, #16]
}
 8009012:	4618      	mov	r0, r3
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40021000 	.word	0x40021000
 8009024:	00f42400 	.word	0x00f42400
 8009028:	007a1200 	.word	0x007a1200

0800902c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009030:	4b03      	ldr	r3, [pc, #12]	; (8009040 <HAL_RCC_GetHCLKFreq+0x14>)
 8009032:	681b      	ldr	r3, [r3, #0]
}
 8009034:	4618      	mov	r0, r3
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000004 	.word	0x20000004

08009044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009048:	f7ff fff0 	bl	800902c <HAL_RCC_GetHCLKFreq>
 800904c:	4602      	mov	r2, r0
 800904e:	4b06      	ldr	r3, [pc, #24]	; (8009068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	0a1b      	lsrs	r3, r3, #8
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	4904      	ldr	r1, [pc, #16]	; (800906c <HAL_RCC_GetPCLK1Freq+0x28>)
 800905a:	5ccb      	ldrb	r3, [r1, r3]
 800905c:	f003 031f 	and.w	r3, r3, #31
 8009060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009064:	4618      	mov	r0, r3
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40021000 	.word	0x40021000
 800906c:	08014858 	.word	0x08014858

08009070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009074:	f7ff ffda 	bl	800902c <HAL_RCC_GetHCLKFreq>
 8009078:	4602      	mov	r2, r0
 800907a:	4b06      	ldr	r3, [pc, #24]	; (8009094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	0adb      	lsrs	r3, r3, #11
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	4904      	ldr	r1, [pc, #16]	; (8009098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009086:	5ccb      	ldrb	r3, [r1, r3]
 8009088:	f003 031f 	and.w	r3, r3, #31
 800908c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009090:	4618      	mov	r0, r3
 8009092:	bd80      	pop	{r7, pc}
 8009094:	40021000 	.word	0x40021000
 8009098:	08014858 	.word	0x08014858

0800909c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	220f      	movs	r2, #15
 80090aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80090ac:	4b12      	ldr	r3, [pc, #72]	; (80090f8 <HAL_RCC_GetClockConfig+0x5c>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f003 0203 	and.w	r2, r3, #3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80090b8:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <HAL_RCC_GetClockConfig+0x5c>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80090c4:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <HAL_RCC_GetClockConfig+0x5c>)
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80090d0:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <HAL_RCC_GetClockConfig+0x5c>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	08db      	lsrs	r3, r3, #3
 80090d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <HAL_RCC_GetClockConfig+0x60>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 020f 	and.w	r2, r3, #15
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	601a      	str	r2, [r3, #0]
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40021000 	.word	0x40021000
 80090fc:	40022000 	.word	0x40022000

08009100 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009106:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	091b      	lsrs	r3, r3, #4
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	3301      	adds	r3, #1
 800911c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b03      	cmp	r3, #3
 8009122:	d10c      	bne.n	800913e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009124:	4a17      	ldr	r2, [pc, #92]	; (8009184 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	fbb2 f3f3 	udiv	r3, r2, r3
 800912c:	4a14      	ldr	r2, [pc, #80]	; (8009180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800912e:	68d2      	ldr	r2, [r2, #12]
 8009130:	0a12      	lsrs	r2, r2, #8
 8009132:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009136:	fb02 f303 	mul.w	r3, r2, r3
 800913a:	617b      	str	r3, [r7, #20]
    break;
 800913c:	e00c      	b.n	8009158 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800913e:	4a12      	ldr	r2, [pc, #72]	; (8009188 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	fbb2 f3f3 	udiv	r3, r2, r3
 8009146:	4a0e      	ldr	r2, [pc, #56]	; (8009180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009148:	68d2      	ldr	r2, [r2, #12]
 800914a:	0a12      	lsrs	r2, r2, #8
 800914c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009150:	fb02 f303 	mul.w	r3, r2, r3
 8009154:	617b      	str	r3, [r7, #20]
    break;
 8009156:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009158:	4b09      	ldr	r3, [pc, #36]	; (8009180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	0e5b      	lsrs	r3, r3, #25
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	3301      	adds	r3, #1
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009170:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009172:	687b      	ldr	r3, [r7, #4]
}
 8009174:	4618      	mov	r0, r3
 8009176:	371c      	adds	r7, #28
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	40021000 	.word	0x40021000
 8009184:	007a1200 	.word	0x007a1200
 8009188:	00f42400 	.word	0x00f42400

0800918c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009194:	2300      	movs	r3, #0
 8009196:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009198:	2300      	movs	r3, #0
 800919a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8098 	beq.w	80092da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091aa:	2300      	movs	r3, #0
 80091ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ae:	4b43      	ldr	r3, [pc, #268]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10d      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ba:	4b40      	ldr	r3, [pc, #256]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091be:	4a3f      	ldr	r2, [pc, #252]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091c4:	6593      	str	r3, [r2, #88]	; 0x58
 80091c6:	4b3d      	ldr	r3, [pc, #244]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ce:	60bb      	str	r3, [r7, #8]
 80091d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091d2:	2301      	movs	r3, #1
 80091d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091d6:	4b3a      	ldr	r3, [pc, #232]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a39      	ldr	r2, [pc, #228]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80091dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091e2:	f7fa fe79 	bl	8003ed8 <HAL_GetTick>
 80091e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091e8:	e009      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091ea:	f7fa fe75 	bl	8003ed8 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d902      	bls.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	74fb      	strb	r3, [r7, #19]
        break;
 80091fc:	e005      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091fe:	4b30      	ldr	r3, [pc, #192]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0ef      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800920a:	7cfb      	ldrb	r3, [r7, #19]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d159      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009210:	4b2a      	ldr	r3, [pc, #168]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800921a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01e      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	429a      	cmp	r2, r3
 800922a:	d019      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800922c:	4b23      	ldr	r3, [pc, #140]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800922e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009236:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009238:	4b20      	ldr	r3, [pc, #128]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800923a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923e:	4a1f      	ldr	r2, [pc, #124]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009248:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800924e:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009258:	4a18      	ldr	r2, [pc, #96]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d016      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800926a:	f7fa fe35 	bl	8003ed8 <HAL_GetTick>
 800926e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009270:	e00b      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fa fe31 	bl	8003ed8 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d902      	bls.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	74fb      	strb	r3, [r7, #19]
            break;
 8009288:	e006      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800928a:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800928c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0ec      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009298:	7cfb      	ldrb	r3, [r7, #19]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10b      	bne.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800929e:	4b07      	ldr	r3, [pc, #28]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ac:	4903      	ldr	r1, [pc, #12]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80092b4:	e008      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092b6:	7cfb      	ldrb	r3, [r7, #19]
 80092b8:	74bb      	strb	r3, [r7, #18]
 80092ba:	e005      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80092bc:	40021000 	.word	0x40021000
 80092c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c4:	7cfb      	ldrb	r3, [r7, #19]
 80092c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092c8:	7c7b      	ldrb	r3, [r7, #17]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d105      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092ce:	4ba7      	ldr	r3, [pc, #668]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d2:	4aa6      	ldr	r2, [pc, #664]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80092e6:	4ba1      	ldr	r3, [pc, #644]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ec:	f023 0203 	bic.w	r2, r3, #3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	499d      	ldr	r1, [pc, #628]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009308:	4b98      	ldr	r3, [pc, #608]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800930a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930e:	f023 020c 	bic.w	r2, r3, #12
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	4995      	ldr	r1, [pc, #596]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0304 	and.w	r3, r3, #4
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800932a:	4b90      	ldr	r3, [pc, #576]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800932c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009330:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	498c      	ldr	r1, [pc, #560]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800934c:	4b87      	ldr	r3, [pc, #540]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800934e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009352:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	4984      	ldr	r1, [pc, #528]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800936e:	4b7f      	ldr	r3, [pc, #508]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	497b      	ldr	r1, [pc, #492]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009390:	4b76      	ldr	r3, [pc, #472]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009396:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	4973      	ldr	r1, [pc, #460]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80093b2:	4b6e      	ldr	r3, [pc, #440]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	496a      	ldr	r1, [pc, #424]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80093d4:	4b65      	ldr	r3, [pc, #404]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	4962      	ldr	r1, [pc, #392]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80093f6:	4b5d      	ldr	r3, [pc, #372]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	4959      	ldr	r1, [pc, #356]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009418:	4b54      	ldr	r3, [pc, #336]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800941e:	f023 0203 	bic.w	r2, r3, #3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	4951      	ldr	r1, [pc, #324]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009428:	4313      	orrs	r3, r2
 800942a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800943a:	4b4c      	ldr	r3, [pc, #304]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	4948      	ldr	r1, [pc, #288]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800944a:	4313      	orrs	r3, r2
 800944c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009458:	2b00      	cmp	r3, #0
 800945a:	d015      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800945c:	4b43      	ldr	r3, [pc, #268]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800945e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946a:	4940      	ldr	r1, [pc, #256]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800946c:	4313      	orrs	r3, r2
 800946e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800947a:	d105      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800947c:	4b3b      	ldr	r3, [pc, #236]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	4a3a      	ldr	r2, [pc, #232]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009486:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009490:	2b00      	cmp	r3, #0
 8009492:	d015      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009494:	4b35      	ldr	r3, [pc, #212]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	4932      	ldr	r1, [pc, #200]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094b2:	d105      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094b4:	4b2d      	ldr	r3, [pc, #180]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	4a2c      	ldr	r2, [pc, #176]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d015      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80094cc:	4b27      	ldr	r3, [pc, #156]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	4924      	ldr	r1, [pc, #144]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094ea:	d105      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094ec:	4b1f      	ldr	r3, [pc, #124]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	4a1e      	ldr	r2, [pc, #120]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d015      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009504:	4b19      	ldr	r3, [pc, #100]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800950a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009512:	4916      	ldr	r1, [pc, #88]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009514:	4313      	orrs	r3, r2
 8009516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009522:	d105      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009524:	4b11      	ldr	r3, [pc, #68]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	4a10      	ldr	r2, [pc, #64]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800952a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800952e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d019      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800953c:	4b0b      	ldr	r3, [pc, #44]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954a:	4908      	ldr	r1, [pc, #32]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954c:	4313      	orrs	r3, r2
 800954e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800955a:	d109      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800955c:	4b03      	ldr	r3, [pc, #12]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	4a02      	ldr	r2, [pc, #8]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009566:	60d3      	str	r3, [r2, #12]
 8009568:	e002      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800956a:	bf00      	nop
 800956c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d015      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800957c:	4b29      	ldr	r3, [pc, #164]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800957e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009582:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958a:	4926      	ldr	r1, [pc, #152]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800959a:	d105      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800959c:	4b21      	ldr	r3, [pc, #132]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4a20      	ldr	r2, [pc, #128]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d015      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80095b4:	4b1b      	ldr	r3, [pc, #108]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095c2:	4918      	ldr	r1, [pc, #96]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d2:	d105      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80095d4:	4b13      	ldr	r3, [pc, #76]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	4a12      	ldr	r2, [pc, #72]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d015      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095fa:	490a      	ldr	r1, [pc, #40]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800960a:	d105      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800960c:	4b05      	ldr	r3, [pc, #20]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	4a04      	ldr	r2, [pc, #16]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009616:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009618:	7cbb      	ldrb	r3, [r7, #18]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	40021000 	.word	0x40021000

08009628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e049      	b.n	80096ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f841 	bl	80096d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f000 fcde 	bl	800a028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80096de:	bf00      	nop
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
	...

080096ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d001      	beq.n	8009704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e054      	b.n	80097ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2202      	movs	r2, #2
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0201 	orr.w	r2, r2, #1
 800971a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a26      	ldr	r2, [pc, #152]	; (80097bc <HAL_TIM_Base_Start_IT+0xd0>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d022      	beq.n	800976c <HAL_TIM_Base_Start_IT+0x80>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800972e:	d01d      	beq.n	800976c <HAL_TIM_Base_Start_IT+0x80>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a22      	ldr	r2, [pc, #136]	; (80097c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d018      	beq.n	800976c <HAL_TIM_Base_Start_IT+0x80>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a21      	ldr	r2, [pc, #132]	; (80097c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d013      	beq.n	800976c <HAL_TIM_Base_Start_IT+0x80>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1f      	ldr	r2, [pc, #124]	; (80097c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00e      	beq.n	800976c <HAL_TIM_Base_Start_IT+0x80>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a1e      	ldr	r2, [pc, #120]	; (80097cc <HAL_TIM_Base_Start_IT+0xe0>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d009      	beq.n	800976c <HAL_TIM_Base_Start_IT+0x80>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1c      	ldr	r2, [pc, #112]	; (80097d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d004      	beq.n	800976c <HAL_TIM_Base_Start_IT+0x80>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a1b      	ldr	r2, [pc, #108]	; (80097d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d115      	bne.n	8009798 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689a      	ldr	r2, [r3, #8]
 8009772:	4b19      	ldr	r3, [pc, #100]	; (80097d8 <HAL_TIM_Base_Start_IT+0xec>)
 8009774:	4013      	ands	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b06      	cmp	r3, #6
 800977c:	d015      	beq.n	80097aa <HAL_TIM_Base_Start_IT+0xbe>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009784:	d011      	beq.n	80097aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0201 	orr.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009796:	e008      	b.n	80097aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0201 	orr.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	e000      	b.n	80097ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	40012c00 	.word	0x40012c00
 80097c0:	40000400 	.word	0x40000400
 80097c4:	40000800 	.word	0x40000800
 80097c8:	40000c00 	.word	0x40000c00
 80097cc:	40013400 	.word	0x40013400
 80097d0:	40014000 	.word	0x40014000
 80097d4:	40015000 	.word	0x40015000
 80097d8:	00010007 	.word	0x00010007

080097dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e049      	b.n	8009882 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d106      	bne.n	8009808 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fa f90c 	bl	8003a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3304      	adds	r3, #4
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f000 fc04 	bl	800a028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d109      	bne.n	80098b0 <HAL_TIM_PWM_Start+0x24>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	bf14      	ite	ne
 80098a8:	2301      	movne	r3, #1
 80098aa:	2300      	moveq	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	e03c      	b.n	800992a <HAL_TIM_PWM_Start+0x9e>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d109      	bne.n	80098ca <HAL_TIM_PWM_Start+0x3e>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b01      	cmp	r3, #1
 80098c0:	bf14      	ite	ne
 80098c2:	2301      	movne	r3, #1
 80098c4:	2300      	moveq	r3, #0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	e02f      	b.n	800992a <HAL_TIM_PWM_Start+0x9e>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d109      	bne.n	80098e4 <HAL_TIM_PWM_Start+0x58>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b01      	cmp	r3, #1
 80098da:	bf14      	ite	ne
 80098dc:	2301      	movne	r3, #1
 80098de:	2300      	moveq	r3, #0
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	e022      	b.n	800992a <HAL_TIM_PWM_Start+0x9e>
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b0c      	cmp	r3, #12
 80098e8:	d109      	bne.n	80098fe <HAL_TIM_PWM_Start+0x72>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	bf14      	ite	ne
 80098f6:	2301      	movne	r3, #1
 80098f8:	2300      	moveq	r3, #0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	e015      	b.n	800992a <HAL_TIM_PWM_Start+0x9e>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b10      	cmp	r3, #16
 8009902:	d109      	bne.n	8009918 <HAL_TIM_PWM_Start+0x8c>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	e008      	b.n	800992a <HAL_TIM_PWM_Start+0x9e>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b01      	cmp	r3, #1
 8009922:	bf14      	ite	ne
 8009924:	2301      	movne	r3, #1
 8009926:	2300      	moveq	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e0a6      	b.n	8009a80 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <HAL_TIM_PWM_Start+0xb6>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009940:	e023      	b.n	800998a <HAL_TIM_PWM_Start+0xfe>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b04      	cmp	r3, #4
 8009946:	d104      	bne.n	8009952 <HAL_TIM_PWM_Start+0xc6>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009950:	e01b      	b.n	800998a <HAL_TIM_PWM_Start+0xfe>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b08      	cmp	r3, #8
 8009956:	d104      	bne.n	8009962 <HAL_TIM_PWM_Start+0xd6>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009960:	e013      	b.n	800998a <HAL_TIM_PWM_Start+0xfe>
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b0c      	cmp	r3, #12
 8009966:	d104      	bne.n	8009972 <HAL_TIM_PWM_Start+0xe6>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009970:	e00b      	b.n	800998a <HAL_TIM_PWM_Start+0xfe>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b10      	cmp	r3, #16
 8009976:	d104      	bne.n	8009982 <HAL_TIM_PWM_Start+0xf6>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009980:	e003      	b.n	800998a <HAL_TIM_PWM_Start+0xfe>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2201      	movs	r2, #1
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 ff1a 	bl	800a7cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a3a      	ldr	r2, [pc, #232]	; (8009a88 <HAL_TIM_PWM_Start+0x1fc>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d018      	beq.n	80099d4 <HAL_TIM_PWM_Start+0x148>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a39      	ldr	r2, [pc, #228]	; (8009a8c <HAL_TIM_PWM_Start+0x200>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d013      	beq.n	80099d4 <HAL_TIM_PWM_Start+0x148>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a37      	ldr	r2, [pc, #220]	; (8009a90 <HAL_TIM_PWM_Start+0x204>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00e      	beq.n	80099d4 <HAL_TIM_PWM_Start+0x148>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a36      	ldr	r2, [pc, #216]	; (8009a94 <HAL_TIM_PWM_Start+0x208>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d009      	beq.n	80099d4 <HAL_TIM_PWM_Start+0x148>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a34      	ldr	r2, [pc, #208]	; (8009a98 <HAL_TIM_PWM_Start+0x20c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d004      	beq.n	80099d4 <HAL_TIM_PWM_Start+0x148>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a33      	ldr	r2, [pc, #204]	; (8009a9c <HAL_TIM_PWM_Start+0x210>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d101      	bne.n	80099d8 <HAL_TIM_PWM_Start+0x14c>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e000      	b.n	80099da <HAL_TIM_PWM_Start+0x14e>
 80099d8:	2300      	movs	r3, #0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a25      	ldr	r2, [pc, #148]	; (8009a88 <HAL_TIM_PWM_Start+0x1fc>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d022      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x1b2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a00:	d01d      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x1b2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a26      	ldr	r2, [pc, #152]	; (8009aa0 <HAL_TIM_PWM_Start+0x214>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d018      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x1b2>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a24      	ldr	r2, [pc, #144]	; (8009aa4 <HAL_TIM_PWM_Start+0x218>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d013      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x1b2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a23      	ldr	r2, [pc, #140]	; (8009aa8 <HAL_TIM_PWM_Start+0x21c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00e      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x1b2>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a19      	ldr	r2, [pc, #100]	; (8009a8c <HAL_TIM_PWM_Start+0x200>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d009      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x1b2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a18      	ldr	r2, [pc, #96]	; (8009a90 <HAL_TIM_PWM_Start+0x204>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d004      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x1b2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a18      	ldr	r2, [pc, #96]	; (8009a9c <HAL_TIM_PWM_Start+0x210>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d115      	bne.n	8009a6a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	4b19      	ldr	r3, [pc, #100]	; (8009aac <HAL_TIM_PWM_Start+0x220>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b06      	cmp	r3, #6
 8009a4e:	d015      	beq.n	8009a7c <HAL_TIM_PWM_Start+0x1f0>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a56:	d011      	beq.n	8009a7c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a68:	e008      	b.n	8009a7c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0201 	orr.w	r2, r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	e000      	b.n	8009a7e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40012c00 	.word	0x40012c00
 8009a8c:	40013400 	.word	0x40013400
 8009a90:	40014000 	.word	0x40014000
 8009a94:	40014400 	.word	0x40014400
 8009a98:	40014800 	.word	0x40014800
 8009a9c:	40015000 	.word	0x40015000
 8009aa0:	40000400 	.word	0x40000400
 8009aa4:	40000800 	.word	0x40000800
 8009aa8:	40000c00 	.word	0x40000c00
 8009aac:	00010007 	.word	0x00010007

08009ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d122      	bne.n	8009b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d11b      	bne.n	8009b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f06f 0202 	mvn.w	r2, #2
 8009adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa7a 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009af8:	e005      	b.n	8009b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa6c 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa7d 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	f003 0304 	and.w	r3, r3, #4
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d122      	bne.n	8009b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d11b      	bne.n	8009b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f06f 0204 	mvn.w	r2, #4
 8009b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2202      	movs	r2, #2
 8009b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa50 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009b4c:	e005      	b.n	8009b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa42 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fa53 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	f003 0308 	and.w	r3, r3, #8
 8009b6a:	2b08      	cmp	r3, #8
 8009b6c:	d122      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	d11b      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f06f 0208 	mvn.w	r2, #8
 8009b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2204      	movs	r2, #4
 8009b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fa26 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009ba0:	e005      	b.n	8009bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa18 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fa29 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	f003 0310 	and.w	r3, r3, #16
 8009bbe:	2b10      	cmp	r3, #16
 8009bc0:	d122      	bne.n	8009c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f003 0310 	and.w	r3, r3, #16
 8009bcc:	2b10      	cmp	r3, #16
 8009bce:	d11b      	bne.n	8009c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f06f 0210 	mvn.w	r2, #16
 8009bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2208      	movs	r2, #8
 8009bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d003      	beq.n	8009bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f9fc 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009bf4:	e005      	b.n	8009c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f9ee 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f9ff 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d10e      	bne.n	8009c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d107      	bne.n	8009c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f06f 0201 	mvn.w	r2, #1
 8009c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7f9 f9d6 	bl	8002fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3e:	2b80      	cmp	r3, #128	; 0x80
 8009c40:	d10e      	bne.n	8009c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4c:	2b80      	cmp	r3, #128	; 0x80
 8009c4e:	d107      	bne.n	8009c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fe7c 	bl	800a958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c6e:	d10e      	bne.n	8009c8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7a:	2b80      	cmp	r3, #128	; 0x80
 8009c7c:	d107      	bne.n	8009c8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fe6f 	bl	800a96c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c98:	2b40      	cmp	r3, #64	; 0x40
 8009c9a:	d10e      	bne.n	8009cba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca6:	2b40      	cmp	r3, #64	; 0x40
 8009ca8:	d107      	bne.n	8009cba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f9ad 	bl	800a014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	f003 0320 	and.w	r3, r3, #32
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d10e      	bne.n	8009ce6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d107      	bne.n	8009ce6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f06f 0220 	mvn.w	r2, #32
 8009cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fe2f 	bl	800a944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cf4:	d10f      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d04:	d107      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fe35 	bl	800a980 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d24:	d10f      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d34:	d107      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fe27 	bl	800a994 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d54:	d10f      	bne.n	8009d76 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d64:	d107      	bne.n	8009d76 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fe19 	bl	800a9a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d84:	d10f      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d94:	d107      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fe0b 	bl	800a9bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e0ff      	b.n	8009fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b14      	cmp	r3, #20
 8009dda:	f200 80f0 	bhi.w	8009fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009dde:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009e39 	.word	0x08009e39
 8009de8:	08009fbf 	.word	0x08009fbf
 8009dec:	08009fbf 	.word	0x08009fbf
 8009df0:	08009fbf 	.word	0x08009fbf
 8009df4:	08009e79 	.word	0x08009e79
 8009df8:	08009fbf 	.word	0x08009fbf
 8009dfc:	08009fbf 	.word	0x08009fbf
 8009e00:	08009fbf 	.word	0x08009fbf
 8009e04:	08009ebb 	.word	0x08009ebb
 8009e08:	08009fbf 	.word	0x08009fbf
 8009e0c:	08009fbf 	.word	0x08009fbf
 8009e10:	08009fbf 	.word	0x08009fbf
 8009e14:	08009efb 	.word	0x08009efb
 8009e18:	08009fbf 	.word	0x08009fbf
 8009e1c:	08009fbf 	.word	0x08009fbf
 8009e20:	08009fbf 	.word	0x08009fbf
 8009e24:	08009f3d 	.word	0x08009f3d
 8009e28:	08009fbf 	.word	0x08009fbf
 8009e2c:	08009fbf 	.word	0x08009fbf
 8009e30:	08009fbf 	.word	0x08009fbf
 8009e34:	08009f7d 	.word	0x08009f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f99a 	bl	800a178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f042 0208 	orr.w	r2, r2, #8
 8009e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	699a      	ldr	r2, [r3, #24]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0204 	bic.w	r2, r2, #4
 8009e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6999      	ldr	r1, [r3, #24]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	691a      	ldr	r2, [r3, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	619a      	str	r2, [r3, #24]
      break;
 8009e76:	e0a5      	b.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68b9      	ldr	r1, [r7, #8]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 fa14 	bl	800a2ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	699a      	ldr	r2, [r3, #24]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	699a      	ldr	r2, [r3, #24]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6999      	ldr	r1, [r3, #24]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	021a      	lsls	r2, r3, #8
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	619a      	str	r2, [r3, #24]
      break;
 8009eb8:	e084      	b.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fa87 	bl	800a3d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f042 0208 	orr.w	r2, r2, #8
 8009ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0204 	bic.w	r2, r2, #4
 8009ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69d9      	ldr	r1, [r3, #28]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	61da      	str	r2, [r3, #28]
      break;
 8009ef8:	e064      	b.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 faf9 	bl	800a4f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	69da      	ldr	r2, [r3, #28]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69da      	ldr	r2, [r3, #28]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	69d9      	ldr	r1, [r3, #28]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	021a      	lsls	r2, r3, #8
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	61da      	str	r2, [r3, #28]
      break;
 8009f3a:	e043      	b.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fb6c 	bl	800a620 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0208 	orr.w	r2, r2, #8
 8009f56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0204 	bic.w	r2, r2, #4
 8009f66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009f7a:	e023      	b.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fbb6 	bl	800a6f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	021a      	lsls	r2, r3, #8
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009fbc:	e002      	b.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop

08009fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a46      	ldr	r2, [pc, #280]	; (800a154 <TIM_Base_SetConfig+0x12c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d017      	beq.n	800a070 <TIM_Base_SetConfig+0x48>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a046:	d013      	beq.n	800a070 <TIM_Base_SetConfig+0x48>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a43      	ldr	r2, [pc, #268]	; (800a158 <TIM_Base_SetConfig+0x130>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00f      	beq.n	800a070 <TIM_Base_SetConfig+0x48>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a42      	ldr	r2, [pc, #264]	; (800a15c <TIM_Base_SetConfig+0x134>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d00b      	beq.n	800a070 <TIM_Base_SetConfig+0x48>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a41      	ldr	r2, [pc, #260]	; (800a160 <TIM_Base_SetConfig+0x138>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d007      	beq.n	800a070 <TIM_Base_SetConfig+0x48>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a40      	ldr	r2, [pc, #256]	; (800a164 <TIM_Base_SetConfig+0x13c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d003      	beq.n	800a070 <TIM_Base_SetConfig+0x48>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a3f      	ldr	r2, [pc, #252]	; (800a168 <TIM_Base_SetConfig+0x140>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d108      	bne.n	800a082 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a33      	ldr	r2, [pc, #204]	; (800a154 <TIM_Base_SetConfig+0x12c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d023      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a090:	d01f      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a30      	ldr	r2, [pc, #192]	; (800a158 <TIM_Base_SetConfig+0x130>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d01b      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a2f      	ldr	r2, [pc, #188]	; (800a15c <TIM_Base_SetConfig+0x134>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d017      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a2e      	ldr	r2, [pc, #184]	; (800a160 <TIM_Base_SetConfig+0x138>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d013      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a2d      	ldr	r2, [pc, #180]	; (800a164 <TIM_Base_SetConfig+0x13c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00f      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a2d      	ldr	r2, [pc, #180]	; (800a16c <TIM_Base_SetConfig+0x144>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00b      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a2c      	ldr	r2, [pc, #176]	; (800a170 <TIM_Base_SetConfig+0x148>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d007      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a2b      	ldr	r2, [pc, #172]	; (800a174 <TIM_Base_SetConfig+0x14c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d003      	beq.n	800a0d2 <TIM_Base_SetConfig+0xaa>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a26      	ldr	r2, [pc, #152]	; (800a168 <TIM_Base_SetConfig+0x140>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d108      	bne.n	800a0e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a12      	ldr	r2, [pc, #72]	; (800a154 <TIM_Base_SetConfig+0x12c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d013      	beq.n	800a138 <TIM_Base_SetConfig+0x110>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a14      	ldr	r2, [pc, #80]	; (800a164 <TIM_Base_SetConfig+0x13c>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d00f      	beq.n	800a138 <TIM_Base_SetConfig+0x110>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a14      	ldr	r2, [pc, #80]	; (800a16c <TIM_Base_SetConfig+0x144>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d00b      	beq.n	800a138 <TIM_Base_SetConfig+0x110>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a13      	ldr	r2, [pc, #76]	; (800a170 <TIM_Base_SetConfig+0x148>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d007      	beq.n	800a138 <TIM_Base_SetConfig+0x110>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a12      	ldr	r2, [pc, #72]	; (800a174 <TIM_Base_SetConfig+0x14c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d003      	beq.n	800a138 <TIM_Base_SetConfig+0x110>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a0d      	ldr	r2, [pc, #52]	; (800a168 <TIM_Base_SetConfig+0x140>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d103      	bne.n	800a140 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	691a      	ldr	r2, [r3, #16]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	615a      	str	r2, [r3, #20]
}
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	40012c00 	.word	0x40012c00
 800a158:	40000400 	.word	0x40000400
 800a15c:	40000800 	.word	0x40000800
 800a160:	40000c00 	.word	0x40000c00
 800a164:	40013400 	.word	0x40013400
 800a168:	40015000 	.word	0x40015000
 800a16c:	40014000 	.word	0x40014000
 800a170:	40014400 	.word	0x40014400
 800a174:	40014800 	.word	0x40014800

0800a178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	f023 0201 	bic.w	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 0303 	bic.w	r3, r3, #3
 800a1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f023 0302 	bic.w	r3, r3, #2
 800a1c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a30      	ldr	r2, [pc, #192]	; (800a294 <TIM_OC1_SetConfig+0x11c>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d013      	beq.n	800a200 <TIM_OC1_SetConfig+0x88>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a2f      	ldr	r2, [pc, #188]	; (800a298 <TIM_OC1_SetConfig+0x120>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00f      	beq.n	800a200 <TIM_OC1_SetConfig+0x88>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a2e      	ldr	r2, [pc, #184]	; (800a29c <TIM_OC1_SetConfig+0x124>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00b      	beq.n	800a200 <TIM_OC1_SetConfig+0x88>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a2d      	ldr	r2, [pc, #180]	; (800a2a0 <TIM_OC1_SetConfig+0x128>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d007      	beq.n	800a200 <TIM_OC1_SetConfig+0x88>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a2c      	ldr	r2, [pc, #176]	; (800a2a4 <TIM_OC1_SetConfig+0x12c>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC1_SetConfig+0x88>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a2b      	ldr	r2, [pc, #172]	; (800a2a8 <TIM_OC1_SetConfig+0x130>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10c      	bne.n	800a21a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f023 0308 	bic.w	r3, r3, #8
 800a206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f023 0304 	bic.w	r3, r3, #4
 800a218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a1d      	ldr	r2, [pc, #116]	; (800a294 <TIM_OC1_SetConfig+0x11c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d013      	beq.n	800a24a <TIM_OC1_SetConfig+0xd2>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <TIM_OC1_SetConfig+0x120>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00f      	beq.n	800a24a <TIM_OC1_SetConfig+0xd2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a1b      	ldr	r2, [pc, #108]	; (800a29c <TIM_OC1_SetConfig+0x124>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d00b      	beq.n	800a24a <TIM_OC1_SetConfig+0xd2>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a1a      	ldr	r2, [pc, #104]	; (800a2a0 <TIM_OC1_SetConfig+0x128>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d007      	beq.n	800a24a <TIM_OC1_SetConfig+0xd2>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <TIM_OC1_SetConfig+0x12c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d003      	beq.n	800a24a <TIM_OC1_SetConfig+0xd2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <TIM_OC1_SetConfig+0x130>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d111      	bne.n	800a26e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	4313      	orrs	r3, r2
 800a262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	621a      	str	r2, [r3, #32]
}
 800a288:	bf00      	nop
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	40012c00 	.word	0x40012c00
 800a298:	40013400 	.word	0x40013400
 800a29c:	40014000 	.word	0x40014000
 800a2a0:	40014400 	.word	0x40014400
 800a2a4:	40014800 	.word	0x40014800
 800a2a8:	40015000 	.word	0x40015000

0800a2ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f023 0210 	bic.w	r2, r3, #16
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	021b      	lsls	r3, r3, #8
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f023 0320 	bic.w	r3, r3, #32
 800a2fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	4313      	orrs	r3, r2
 800a306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a2c      	ldr	r2, [pc, #176]	; (800a3bc <TIM_OC2_SetConfig+0x110>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d007      	beq.n	800a320 <TIM_OC2_SetConfig+0x74>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a2b      	ldr	r2, [pc, #172]	; (800a3c0 <TIM_OC2_SetConfig+0x114>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d003      	beq.n	800a320 <TIM_OC2_SetConfig+0x74>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a2a      	ldr	r2, [pc, #168]	; (800a3c4 <TIM_OC2_SetConfig+0x118>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d10d      	bne.n	800a33c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a1f      	ldr	r2, [pc, #124]	; (800a3bc <TIM_OC2_SetConfig+0x110>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d013      	beq.n	800a36c <TIM_OC2_SetConfig+0xc0>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a1e      	ldr	r2, [pc, #120]	; (800a3c0 <TIM_OC2_SetConfig+0x114>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d00f      	beq.n	800a36c <TIM_OC2_SetConfig+0xc0>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a1e      	ldr	r2, [pc, #120]	; (800a3c8 <TIM_OC2_SetConfig+0x11c>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d00b      	beq.n	800a36c <TIM_OC2_SetConfig+0xc0>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a1d      	ldr	r2, [pc, #116]	; (800a3cc <TIM_OC2_SetConfig+0x120>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d007      	beq.n	800a36c <TIM_OC2_SetConfig+0xc0>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <TIM_OC2_SetConfig+0x124>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d003      	beq.n	800a36c <TIM_OC2_SetConfig+0xc0>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a17      	ldr	r2, [pc, #92]	; (800a3c4 <TIM_OC2_SetConfig+0x118>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d113      	bne.n	800a394 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a37a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4313      	orrs	r3, r2
 800a386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	4313      	orrs	r3, r2
 800a392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	621a      	str	r2, [r3, #32]
}
 800a3ae:	bf00      	nop
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40012c00 	.word	0x40012c00
 800a3c0:	40013400 	.word	0x40013400
 800a3c4:	40015000 	.word	0x40015000
 800a3c8:	40014000 	.word	0x40014000
 800a3cc:	40014400 	.word	0x40014400
 800a3d0:	40014800 	.word	0x40014800

0800a3d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	021b      	lsls	r3, r3, #8
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a2b      	ldr	r2, [pc, #172]	; (800a4e0 <TIM_OC3_SetConfig+0x10c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d007      	beq.n	800a446 <TIM_OC3_SetConfig+0x72>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a2a      	ldr	r2, [pc, #168]	; (800a4e4 <TIM_OC3_SetConfig+0x110>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d003      	beq.n	800a446 <TIM_OC3_SetConfig+0x72>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a29      	ldr	r2, [pc, #164]	; (800a4e8 <TIM_OC3_SetConfig+0x114>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d10d      	bne.n	800a462 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a44c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	4313      	orrs	r3, r2
 800a458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a1e      	ldr	r2, [pc, #120]	; (800a4e0 <TIM_OC3_SetConfig+0x10c>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d013      	beq.n	800a492 <TIM_OC3_SetConfig+0xbe>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a1d      	ldr	r2, [pc, #116]	; (800a4e4 <TIM_OC3_SetConfig+0x110>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d00f      	beq.n	800a492 <TIM_OC3_SetConfig+0xbe>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a1d      	ldr	r2, [pc, #116]	; (800a4ec <TIM_OC3_SetConfig+0x118>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d00b      	beq.n	800a492 <TIM_OC3_SetConfig+0xbe>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a1c      	ldr	r2, [pc, #112]	; (800a4f0 <TIM_OC3_SetConfig+0x11c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d007      	beq.n	800a492 <TIM_OC3_SetConfig+0xbe>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a1b      	ldr	r2, [pc, #108]	; (800a4f4 <TIM_OC3_SetConfig+0x120>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d003      	beq.n	800a492 <TIM_OC3_SetConfig+0xbe>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a16      	ldr	r2, [pc, #88]	; (800a4e8 <TIM_OC3_SetConfig+0x114>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d113      	bne.n	800a4ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	011b      	lsls	r3, r3, #4
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	621a      	str	r2, [r3, #32]
}
 800a4d4:	bf00      	nop
 800a4d6:	371c      	adds	r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	40012c00 	.word	0x40012c00
 800a4e4:	40013400 	.word	0x40013400
 800a4e8:	40015000 	.word	0x40015000
 800a4ec:	40014000 	.word	0x40014000
 800a4f0:	40014400 	.word	0x40014400
 800a4f4:	40014800 	.word	0x40014800

0800a4f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	021b      	lsls	r3, r3, #8
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	031b      	lsls	r3, r3, #12
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	4313      	orrs	r3, r2
 800a552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a2c      	ldr	r2, [pc, #176]	; (800a608 <TIM_OC4_SetConfig+0x110>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d007      	beq.n	800a56c <TIM_OC4_SetConfig+0x74>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a2b      	ldr	r2, [pc, #172]	; (800a60c <TIM_OC4_SetConfig+0x114>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d003      	beq.n	800a56c <TIM_OC4_SetConfig+0x74>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a2a      	ldr	r2, [pc, #168]	; (800a610 <TIM_OC4_SetConfig+0x118>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d10d      	bne.n	800a588 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	031b      	lsls	r3, r3, #12
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a586:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a1f      	ldr	r2, [pc, #124]	; (800a608 <TIM_OC4_SetConfig+0x110>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d013      	beq.n	800a5b8 <TIM_OC4_SetConfig+0xc0>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a1e      	ldr	r2, [pc, #120]	; (800a60c <TIM_OC4_SetConfig+0x114>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d00f      	beq.n	800a5b8 <TIM_OC4_SetConfig+0xc0>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a1e      	ldr	r2, [pc, #120]	; (800a614 <TIM_OC4_SetConfig+0x11c>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d00b      	beq.n	800a5b8 <TIM_OC4_SetConfig+0xc0>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <TIM_OC4_SetConfig+0x120>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d007      	beq.n	800a5b8 <TIM_OC4_SetConfig+0xc0>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a1c      	ldr	r2, [pc, #112]	; (800a61c <TIM_OC4_SetConfig+0x124>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d003      	beq.n	800a5b8 <TIM_OC4_SetConfig+0xc0>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a17      	ldr	r2, [pc, #92]	; (800a610 <TIM_OC4_SetConfig+0x118>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d113      	bne.n	800a5e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	019b      	lsls	r3, r3, #6
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	019b      	lsls	r3, r3, #6
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	621a      	str	r2, [r3, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	40012c00 	.word	0x40012c00
 800a60c:	40013400 	.word	0x40013400
 800a610:	40015000 	.word	0x40015000
 800a614:	40014000 	.word	0x40014000
 800a618:	40014400 	.word	0x40014400
 800a61c:	40014800 	.word	0x40014800

0800a620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a664:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	041b      	lsls	r3, r3, #16
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a19      	ldr	r2, [pc, #100]	; (800a6dc <TIM_OC5_SetConfig+0xbc>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d013      	beq.n	800a6a2 <TIM_OC5_SetConfig+0x82>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a18      	ldr	r2, [pc, #96]	; (800a6e0 <TIM_OC5_SetConfig+0xc0>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d00f      	beq.n	800a6a2 <TIM_OC5_SetConfig+0x82>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a17      	ldr	r2, [pc, #92]	; (800a6e4 <TIM_OC5_SetConfig+0xc4>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00b      	beq.n	800a6a2 <TIM_OC5_SetConfig+0x82>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a16      	ldr	r2, [pc, #88]	; (800a6e8 <TIM_OC5_SetConfig+0xc8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d007      	beq.n	800a6a2 <TIM_OC5_SetConfig+0x82>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a15      	ldr	r2, [pc, #84]	; (800a6ec <TIM_OC5_SetConfig+0xcc>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d003      	beq.n	800a6a2 <TIM_OC5_SetConfig+0x82>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a14      	ldr	r2, [pc, #80]	; (800a6f0 <TIM_OC5_SetConfig+0xd0>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d109      	bne.n	800a6b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	021b      	lsls	r3, r3, #8
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	621a      	str	r2, [r3, #32]
}
 800a6d0:	bf00      	nop
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	40012c00 	.word	0x40012c00
 800a6e0:	40013400 	.word	0x40013400
 800a6e4:	40014000 	.word	0x40014000
 800a6e8:	40014400 	.word	0x40014400
 800a6ec:	40014800 	.word	0x40014800
 800a6f0:	40015000 	.word	0x40015000

0800a6f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	4313      	orrs	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a73a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	051b      	lsls	r3, r3, #20
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	4313      	orrs	r3, r2
 800a746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1a      	ldr	r2, [pc, #104]	; (800a7b4 <TIM_OC6_SetConfig+0xc0>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d013      	beq.n	800a778 <TIM_OC6_SetConfig+0x84>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a19      	ldr	r2, [pc, #100]	; (800a7b8 <TIM_OC6_SetConfig+0xc4>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00f      	beq.n	800a778 <TIM_OC6_SetConfig+0x84>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a18      	ldr	r2, [pc, #96]	; (800a7bc <TIM_OC6_SetConfig+0xc8>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d00b      	beq.n	800a778 <TIM_OC6_SetConfig+0x84>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a17      	ldr	r2, [pc, #92]	; (800a7c0 <TIM_OC6_SetConfig+0xcc>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d007      	beq.n	800a778 <TIM_OC6_SetConfig+0x84>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a16      	ldr	r2, [pc, #88]	; (800a7c4 <TIM_OC6_SetConfig+0xd0>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d003      	beq.n	800a778 <TIM_OC6_SetConfig+0x84>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <TIM_OC6_SetConfig+0xd4>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d109      	bne.n	800a78c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a77e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	029b      	lsls	r3, r3, #10
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	4313      	orrs	r3, r2
 800a78a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	621a      	str	r2, [r3, #32]
}
 800a7a6:	bf00      	nop
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	40012c00 	.word	0x40012c00
 800a7b8:	40013400 	.word	0x40013400
 800a7bc:	40014000 	.word	0x40014000
 800a7c0:	40014400 	.word	0x40014400
 800a7c4:	40014800 	.word	0x40014800
 800a7c8:	40015000 	.word	0x40015000

0800a7cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f003 031f 	and.w	r3, r3, #31
 800a7de:	2201      	movs	r2, #1
 800a7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6a1a      	ldr	r2, [r3, #32]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	43db      	mvns	r3, r3
 800a7ee:	401a      	ands	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6a1a      	ldr	r2, [r3, #32]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	f003 031f 	and.w	r3, r3, #31
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	fa01 f303 	lsl.w	r3, r1, r3
 800a804:	431a      	orrs	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	621a      	str	r2, [r3, #32]
}
 800a80a:	bf00      	nop
 800a80c:	371c      	adds	r7, #28
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
	...

0800a818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d101      	bne.n	800a830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a82c:	2302      	movs	r3, #2
 800a82e:	e074      	b.n	800a91a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a34      	ldr	r2, [pc, #208]	; (800a928 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d009      	beq.n	800a86e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a33      	ldr	r2, [pc, #204]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d004      	beq.n	800a86e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a31      	ldr	r2, [pc, #196]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d108      	bne.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a874:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a88a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a21      	ldr	r2, [pc, #132]	; (800a928 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d022      	beq.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b0:	d01d      	beq.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a1f      	ldr	r2, [pc, #124]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d018      	beq.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1d      	ldr	r2, [pc, #116]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d013      	beq.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1c      	ldr	r2, [pc, #112]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d00e      	beq.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a15      	ldr	r2, [pc, #84]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d009      	beq.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a18      	ldr	r2, [pc, #96]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d004      	beq.n	800a8ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a11      	ldr	r2, [pc, #68]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d10c      	bne.n	800a908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40012c00 	.word	0x40012c00
 800a92c:	40013400 	.word	0x40013400
 800a930:	40015000 	.word	0x40015000
 800a934:	40000400 	.word	0x40000400
 800a938:	40000800 	.word	0x40000800
 800a93c:	40000c00 	.word	0x40000c00
 800a940:	40014000 	.word	0x40014000

0800a944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d101      	bne.n	800a9e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e042      	b.n	800aa68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d106      	bne.n	800a9fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7f9 f94f 	bl	8003c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2224      	movs	r2, #36	; 0x24
 800a9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f022 0201 	bic.w	r2, r2, #1
 800aa10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fd2e 	bl	800b474 <UART_SetConfig>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e022      	b.n	800aa68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 f81e 	bl	800ba6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689a      	ldr	r2, [r3, #8]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 f8a5 	bl	800bbb0 <UART_CheckIdleState>
 800aa66:	4603      	mov	r3, r0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08a      	sub	sp, #40	; 0x28
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	f040 8083 	bne.w	800ab92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <HAL_UART_Transmit+0x28>
 800aa92:	88fb      	ldrh	r3, [r7, #6]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e07b      	b.n	800ab94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d101      	bne.n	800aaaa <HAL_UART_Transmit+0x3a>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e074      	b.n	800ab94 <HAL_UART_Transmit+0x124>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2221      	movs	r2, #33	; 0x21
 800aabe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aac2:	f7f9 fa09 	bl	8003ed8 <HAL_GetTick>
 800aac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	88fa      	ldrh	r2, [r7, #6]
 800aacc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	88fa      	ldrh	r2, [r7, #6]
 800aad4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae0:	d108      	bne.n	800aaf4 <HAL_UART_Transmit+0x84>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d104      	bne.n	800aaf4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	61bb      	str	r3, [r7, #24]
 800aaf2:	e003      	b.n	800aafc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ab04:	e02c      	b.n	800ab60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2180      	movs	r1, #128	; 0x80
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f001 f898 	bl	800bc46 <UART_WaitOnFlagUntilTimeout>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e039      	b.n	800ab94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10b      	bne.n	800ab3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	3302      	adds	r3, #2
 800ab3a:	61bb      	str	r3, [r7, #24]
 800ab3c:	e007      	b.n	800ab4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	781a      	ldrb	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1cc      	bne.n	800ab06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2200      	movs	r2, #0
 800ab74:	2140      	movs	r1, #64	; 0x40
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f001 f865 	bl	800bc46 <UART_WaitOnFlagUntilTimeout>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e006      	b.n	800ab94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2220      	movs	r2, #32
 800ab8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e000      	b.n	800ab94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ab92:	2302      	movs	r3, #2
  }
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3720      	adds	r7, #32
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af02      	add	r7, sp, #8
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	4613      	mov	r3, r2
 800abaa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb2:	2b20      	cmp	r3, #32
 800abb4:	f040 80c0 	bne.w	800ad38 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <HAL_UART_Receive+0x28>
 800abbe:	88fb      	ldrh	r3, [r7, #6]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e0b8      	b.n	800ad3a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_UART_Receive+0x3a>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e0b1      	b.n	800ad3a <HAL_UART_Receive+0x19e>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2222      	movs	r2, #34	; 0x22
 800abea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abf4:	f7f9 f970 	bl	8003ed8 <HAL_GetTick>
 800abf8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	88fa      	ldrh	r2, [r7, #6]
 800abfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	88fa      	ldrh	r2, [r7, #6]
 800ac06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac12:	d10e      	bne.n	800ac32 <HAL_UART_Receive+0x96>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d105      	bne.n	800ac28 <HAL_UART_Receive+0x8c>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac26:	e02d      	b.n	800ac84 <HAL_UART_Receive+0xe8>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	22ff      	movs	r2, #255	; 0xff
 800ac2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac30:	e028      	b.n	800ac84 <HAL_UART_Receive+0xe8>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10d      	bne.n	800ac56 <HAL_UART_Receive+0xba>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <HAL_UART_Receive+0xb0>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	22ff      	movs	r2, #255	; 0xff
 800ac46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac4a:	e01b      	b.n	800ac84 <HAL_UART_Receive+0xe8>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	227f      	movs	r2, #127	; 0x7f
 800ac50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac54:	e016      	b.n	800ac84 <HAL_UART_Receive+0xe8>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac5e:	d10d      	bne.n	800ac7c <HAL_UART_Receive+0xe0>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d104      	bne.n	800ac72 <HAL_UART_Receive+0xd6>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	227f      	movs	r2, #127	; 0x7f
 800ac6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac70:	e008      	b.n	800ac84 <HAL_UART_Receive+0xe8>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	223f      	movs	r2, #63	; 0x3f
 800ac76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac7a:	e003      	b.n	800ac84 <HAL_UART_Receive+0xe8>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac8a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac94:	d108      	bne.n	800aca8 <HAL_UART_Receive+0x10c>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d104      	bne.n	800aca8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	61bb      	str	r3, [r7, #24]
 800aca6:	e003      	b.n	800acb0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800acb8:	e032      	b.n	800ad20 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2200      	movs	r2, #0
 800acc2:	2120      	movs	r1, #32
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 ffbe 	bl	800bc46 <UART_WaitOnFlagUntilTimeout>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e032      	b.n	800ad3a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10c      	bne.n	800acf4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	8a7b      	ldrh	r3, [r7, #18]
 800ace4:	4013      	ands	r3, r2
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	3302      	adds	r3, #2
 800acf0:	61bb      	str	r3, [r7, #24]
 800acf2:	e00c      	b.n	800ad0e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	8a7b      	ldrh	r3, [r7, #18]
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	4013      	ands	r3, r2
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	3b01      	subs	r3, #1
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1c6      	bne.n	800acba <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	e000      	b.n	800ad3a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800ad38:	2302      	movs	r3, #2
  }
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
	...

0800ad44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08a      	sub	sp, #40	; 0x28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d142      	bne.n	800ade2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <HAL_UART_Receive_IT+0x24>
 800ad62:	88fb      	ldrh	r3, [r7, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e03b      	b.n	800ade4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d101      	bne.n	800ad7a <HAL_UART_Receive_IT+0x36>
 800ad76:	2302      	movs	r3, #2
 800ad78:	e034      	b.n	800ade4 <HAL_UART_Receive_IT+0xa0>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a17      	ldr	r2, [pc, #92]	; (800adec <HAL_UART_Receive_IT+0xa8>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d01f      	beq.n	800add2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d018      	beq.n	800add2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	e853 3f00 	ldrex	r3, [r3]
 800adac:	613b      	str	r3, [r7, #16]
   return(result);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	623b      	str	r3, [r7, #32]
 800adc0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc2:	69f9      	ldr	r1, [r7, #28]
 800adc4:	6a3a      	ldr	r2, [r7, #32]
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	61bb      	str	r3, [r7, #24]
   return(result);
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e6      	bne.n	800ada0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	461a      	mov	r2, r3
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 fffd 	bl	800bdd8 <UART_Start_Receive_IT>
 800adde:	4603      	mov	r3, r0
 800ade0:	e000      	b.n	800ade4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ade2:	2302      	movs	r3, #2
  }
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3728      	adds	r7, #40	; 0x28
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	40008000 	.word	0x40008000

0800adf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b0ba      	sub	sp, #232	; 0xe8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ae1a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae1e:	4013      	ands	r3, r2
 800ae20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ae24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d11b      	bne.n	800ae64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae30:	f003 0320 	and.w	r3, r3, #32
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d015      	beq.n	800ae64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae3c:	f003 0320 	and.w	r3, r3, #32
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d105      	bne.n	800ae50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d009      	beq.n	800ae64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 82d6 	beq.w	800b406 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	4798      	blx	r3
      }
      return;
 800ae62:	e2d0      	b.n	800b406 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 811f 	beq.w	800b0ac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ae6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae72:	4b8b      	ldr	r3, [pc, #556]	; (800b0a0 <HAL_UART_IRQHandler+0x2b0>)
 800ae74:	4013      	ands	r3, r2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ae7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ae7e:	4b89      	ldr	r3, [pc, #548]	; (800b0a4 <HAL_UART_IRQHandler+0x2b4>)
 800ae80:	4013      	ands	r3, r2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 8112 	beq.w	800b0ac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d011      	beq.n	800aeb8 <HAL_UART_IRQHandler+0xc8>
 800ae94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2201      	movs	r2, #1
 800aea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeae:	f043 0201 	orr.w	r2, r3, #1
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aeb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d011      	beq.n	800aee8 <HAL_UART_IRQHandler+0xf8>
 800aec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00b      	beq.n	800aee8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2202      	movs	r2, #2
 800aed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aede:	f043 0204 	orr.w	r2, r3, #4
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d011      	beq.n	800af18 <HAL_UART_IRQHandler+0x128>
 800aef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2204      	movs	r2, #4
 800af06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af0e:	f043 0202 	orr.w	r2, r3, #2
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1c:	f003 0308 	and.w	r3, r3, #8
 800af20:	2b00      	cmp	r3, #0
 800af22:	d017      	beq.n	800af54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af28:	f003 0320 	and.w	r3, r3, #32
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d105      	bne.n	800af3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800af30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800af34:	4b5a      	ldr	r3, [pc, #360]	; (800b0a0 <HAL_UART_IRQHandler+0x2b0>)
 800af36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00b      	beq.n	800af54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2208      	movs	r2, #8
 800af42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af4a:	f043 0208 	orr.w	r2, r3, #8
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d012      	beq.n	800af86 <HAL_UART_IRQHandler+0x196>
 800af60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00c      	beq.n	800af86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af7c:	f043 0220 	orr.w	r2, r3, #32
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 823c 	beq.w	800b40a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af96:	f003 0320 	and.w	r3, r3, #32
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d013      	beq.n	800afc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d105      	bne.n	800afb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800afaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d007      	beq.n	800afc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d005      	beq.n	800afea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800afde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afe2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d04f      	beq.n	800b08a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f001 f81e 	bl	800c02c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800affa:	2b40      	cmp	r3, #64	; 0x40
 800affc:	d141      	bne.n	800b082 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3308      	adds	r3, #8
 800b004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b00c:	e853 3f00 	ldrex	r3, [r3]
 800b010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b01c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3308      	adds	r3, #8
 800b026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b02a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b02e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1d9      	bne.n	800affe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d013      	beq.n	800b07a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b056:	4a14      	ldr	r2, [pc, #80]	; (800b0a8 <HAL_UART_IRQHandler+0x2b8>)
 800b058:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fa fbd0 	bl	8005804 <HAL_DMA_Abort_IT>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d017      	beq.n	800b09a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b074:	4610      	mov	r0, r2
 800b076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b078:	e00f      	b.n	800b09a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f9e4 	bl	800b448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b080:	e00b      	b.n	800b09a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f9e0 	bl	800b448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b088:	e007      	b.n	800b09a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f9dc 	bl	800b448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b098:	e1b7      	b.n	800b40a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b09a:	bf00      	nop
    return;
 800b09c:	e1b5      	b.n	800b40a <HAL_UART_IRQHandler+0x61a>
 800b09e:	bf00      	nop
 800b0a0:	10000001 	.word	0x10000001
 800b0a4:	04000120 	.word	0x04000120
 800b0a8:	0800c0f9 	.word	0x0800c0f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	f040 814a 	bne.w	800b34a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ba:	f003 0310 	and.w	r3, r3, #16
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 8143 	beq.w	800b34a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c8:	f003 0310 	and.w	r3, r3, #16
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 813c 	beq.w	800b34a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2210      	movs	r2, #16
 800b0d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e4:	2b40      	cmp	r3, #64	; 0x40
 800b0e6:	f040 80b5 	bne.w	800b254 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 8187 	beq.w	800b40e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b10a:	429a      	cmp	r2, r3
 800b10c:	f080 817f 	bcs.w	800b40e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b116:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	f040 8086 	bne.w	800b238 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b15a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b16e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1da      	bne.n	800b12c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	3308      	adds	r3, #8
 800b17c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b188:	f023 0301 	bic.w	r3, r3, #1
 800b18c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3308      	adds	r3, #8
 800b196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b19a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b19e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b1a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b1a6:	e841 2300 	strex	r3, r2, [r1]
 800b1aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b1ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1e1      	bne.n	800b176 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1bc:	e853 3f00 	ldrex	r3, [r3]
 800b1c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b1c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1de:	e841 2300 	strex	r3, r2, [r1]
 800b1e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1e3      	bne.n	800b1b2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2220      	movs	r2, #32
 800b1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b208:	f023 0310 	bic.w	r3, r3, #16
 800b20c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	461a      	mov	r2, r3
 800b216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b21a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b21c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b222:	e841 2300 	strex	r3, r2, [r1]
 800b226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1e4      	bne.n	800b1f8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b232:	4618      	mov	r0, r3
 800b234:	f7fa fa8d 	bl	8005752 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b244:	b29b      	uxth	r3, r3
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	b29b      	uxth	r3, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f905 	bl	800b45c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b252:	e0dc      	b.n	800b40e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b260:	b29b      	uxth	r3, r3
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b26e:	b29b      	uxth	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 80ce 	beq.w	800b412 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f000 80c9 	beq.w	800b412 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	461a      	mov	r2, r3
 800b29e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b2a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e4      	bne.n	800b280 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	e853 3f00 	ldrex	r3, [r3]
 800b2c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2cc:	f023 0301 	bic.w	r3, r3, #1
 800b2d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3308      	adds	r3, #8
 800b2da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2de:	633a      	str	r2, [r7, #48]	; 0x30
 800b2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e6:	e841 2300 	strex	r3, r2, [r1]
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1e1      	bne.n	800b2b6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	e853 3f00 	ldrex	r3, [r3]
 800b312:	60fb      	str	r3, [r7, #12]
   return(result);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f023 0310 	bic.w	r3, r3, #16
 800b31a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b328:	61fb      	str	r3, [r7, #28]
 800b32a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32c:	69b9      	ldr	r1, [r7, #24]
 800b32e:	69fa      	ldr	r2, [r7, #28]
 800b330:	e841 2300 	strex	r3, r2, [r1]
 800b334:	617b      	str	r3, [r7, #20]
   return(result);
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1e4      	bne.n	800b306 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b33c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f88a 	bl	800b45c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b348:	e063      	b.n	800b412 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00e      	beq.n	800b374 <HAL_UART_IRQHandler+0x584>
 800b356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b35a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d008      	beq.n	800b374 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b36a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f001 fb61 	bl	800ca34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b372:	e051      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d014      	beq.n	800b3aa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d105      	bne.n	800b398 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b38c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d008      	beq.n	800b3aa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d03a      	beq.n	800b416 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	4798      	blx	r3
    }
    return;
 800b3a8:	e035      	b.n	800b416 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <HAL_UART_IRQHandler+0x5da>
 800b3b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 feae 	bl	800c124 <UART_EndTransmit_IT>
    return;
 800b3c8:	e026      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d009      	beq.n	800b3ea <HAL_UART_IRQHandler+0x5fa>
 800b3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 fb3a 	bl	800ca5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3e8:	e016      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d010      	beq.n	800b418 <HAL_UART_IRQHandler+0x628>
 800b3f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	da0c      	bge.n	800b418 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 fb22 	bl	800ca48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b404:	e008      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
      return;
 800b406:	bf00      	nop
 800b408:	e006      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
    return;
 800b40a:	bf00      	nop
 800b40c:	e004      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
      return;
 800b40e:	bf00      	nop
 800b410:	e002      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
      return;
 800b412:	bf00      	nop
 800b414:	e000      	b.n	800b418 <HAL_UART_IRQHandler+0x628>
    return;
 800b416:	bf00      	nop
  }
}
 800b418:	37e8      	adds	r7, #232	; 0xe8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop

0800b420 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b478:	b08c      	sub	sp, #48	; 0x30
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	431a      	orrs	r2, r3
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	431a      	orrs	r2, r3
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	4313      	orrs	r3, r2
 800b49a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4baa      	ldr	r3, [pc, #680]	; (800b74c <UART_SetConfig+0x2d8>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	6812      	ldr	r2, [r2, #0]
 800b4aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a9f      	ldr	r2, [pc, #636]	; (800b750 <UART_SetConfig+0x2dc>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d004      	beq.n	800b4e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b4ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	6812      	ldr	r2, [r2, #0]
 800b4f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fe:	f023 010f 	bic.w	r1, r3, #15
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a90      	ldr	r2, [pc, #576]	; (800b754 <UART_SetConfig+0x2e0>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d125      	bne.n	800b564 <UART_SetConfig+0xf0>
 800b518:	4b8f      	ldr	r3, [pc, #572]	; (800b758 <UART_SetConfig+0x2e4>)
 800b51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	2b03      	cmp	r3, #3
 800b524:	d81a      	bhi.n	800b55c <UART_SetConfig+0xe8>
 800b526:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <UART_SetConfig+0xb8>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b53d 	.word	0x0800b53d
 800b530:	0800b54d 	.word	0x0800b54d
 800b534:	0800b545 	.word	0x0800b545
 800b538:	0800b555 	.word	0x0800b555
 800b53c:	2301      	movs	r3, #1
 800b53e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b542:	e116      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b544:	2302      	movs	r3, #2
 800b546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b54a:	e112      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b54c:	2304      	movs	r3, #4
 800b54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b552:	e10e      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b554:	2308      	movs	r3, #8
 800b556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b55a:	e10a      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b55c:	2310      	movs	r3, #16
 800b55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b562:	e106      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a7c      	ldr	r2, [pc, #496]	; (800b75c <UART_SetConfig+0x2e8>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d138      	bne.n	800b5e0 <UART_SetConfig+0x16c>
 800b56e:	4b7a      	ldr	r3, [pc, #488]	; (800b758 <UART_SetConfig+0x2e4>)
 800b570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b574:	f003 030c 	and.w	r3, r3, #12
 800b578:	2b0c      	cmp	r3, #12
 800b57a:	d82d      	bhi.n	800b5d8 <UART_SetConfig+0x164>
 800b57c:	a201      	add	r2, pc, #4	; (adr r2, 800b584 <UART_SetConfig+0x110>)
 800b57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b582:	bf00      	nop
 800b584:	0800b5b9 	.word	0x0800b5b9
 800b588:	0800b5d9 	.word	0x0800b5d9
 800b58c:	0800b5d9 	.word	0x0800b5d9
 800b590:	0800b5d9 	.word	0x0800b5d9
 800b594:	0800b5c9 	.word	0x0800b5c9
 800b598:	0800b5d9 	.word	0x0800b5d9
 800b59c:	0800b5d9 	.word	0x0800b5d9
 800b5a0:	0800b5d9 	.word	0x0800b5d9
 800b5a4:	0800b5c1 	.word	0x0800b5c1
 800b5a8:	0800b5d9 	.word	0x0800b5d9
 800b5ac:	0800b5d9 	.word	0x0800b5d9
 800b5b0:	0800b5d9 	.word	0x0800b5d9
 800b5b4:	0800b5d1 	.word	0x0800b5d1
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5be:	e0d8      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5c6:	e0d4      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ce:	e0d0      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b5d0:	2308      	movs	r3, #8
 800b5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5d6:	e0cc      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b5d8:	2310      	movs	r3, #16
 800b5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5de:	e0c8      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a5e      	ldr	r2, [pc, #376]	; (800b760 <UART_SetConfig+0x2ec>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d125      	bne.n	800b636 <UART_SetConfig+0x1c2>
 800b5ea:	4b5b      	ldr	r3, [pc, #364]	; (800b758 <UART_SetConfig+0x2e4>)
 800b5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b5f4:	2b30      	cmp	r3, #48	; 0x30
 800b5f6:	d016      	beq.n	800b626 <UART_SetConfig+0x1b2>
 800b5f8:	2b30      	cmp	r3, #48	; 0x30
 800b5fa:	d818      	bhi.n	800b62e <UART_SetConfig+0x1ba>
 800b5fc:	2b20      	cmp	r3, #32
 800b5fe:	d00a      	beq.n	800b616 <UART_SetConfig+0x1a2>
 800b600:	2b20      	cmp	r3, #32
 800b602:	d814      	bhi.n	800b62e <UART_SetConfig+0x1ba>
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <UART_SetConfig+0x19a>
 800b608:	2b10      	cmp	r3, #16
 800b60a:	d008      	beq.n	800b61e <UART_SetConfig+0x1aa>
 800b60c:	e00f      	b.n	800b62e <UART_SetConfig+0x1ba>
 800b60e:	2300      	movs	r3, #0
 800b610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b614:	e0ad      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b616:	2302      	movs	r3, #2
 800b618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b61c:	e0a9      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b61e:	2304      	movs	r3, #4
 800b620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b624:	e0a5      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b626:	2308      	movs	r3, #8
 800b628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b62c:	e0a1      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b62e:	2310      	movs	r3, #16
 800b630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b634:	e09d      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a4a      	ldr	r2, [pc, #296]	; (800b764 <UART_SetConfig+0x2f0>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d125      	bne.n	800b68c <UART_SetConfig+0x218>
 800b640:	4b45      	ldr	r3, [pc, #276]	; (800b758 <UART_SetConfig+0x2e4>)
 800b642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b64a:	2bc0      	cmp	r3, #192	; 0xc0
 800b64c:	d016      	beq.n	800b67c <UART_SetConfig+0x208>
 800b64e:	2bc0      	cmp	r3, #192	; 0xc0
 800b650:	d818      	bhi.n	800b684 <UART_SetConfig+0x210>
 800b652:	2b80      	cmp	r3, #128	; 0x80
 800b654:	d00a      	beq.n	800b66c <UART_SetConfig+0x1f8>
 800b656:	2b80      	cmp	r3, #128	; 0x80
 800b658:	d814      	bhi.n	800b684 <UART_SetConfig+0x210>
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <UART_SetConfig+0x1f0>
 800b65e:	2b40      	cmp	r3, #64	; 0x40
 800b660:	d008      	beq.n	800b674 <UART_SetConfig+0x200>
 800b662:	e00f      	b.n	800b684 <UART_SetConfig+0x210>
 800b664:	2300      	movs	r3, #0
 800b666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b66a:	e082      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b66c:	2302      	movs	r3, #2
 800b66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b672:	e07e      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b674:	2304      	movs	r3, #4
 800b676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b67a:	e07a      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b67c:	2308      	movs	r3, #8
 800b67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b682:	e076      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b684:	2310      	movs	r3, #16
 800b686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b68a:	e072      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a35      	ldr	r2, [pc, #212]	; (800b768 <UART_SetConfig+0x2f4>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d12a      	bne.n	800b6ec <UART_SetConfig+0x278>
 800b696:	4b30      	ldr	r3, [pc, #192]	; (800b758 <UART_SetConfig+0x2e4>)
 800b698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b69c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6a4:	d01a      	beq.n	800b6dc <UART_SetConfig+0x268>
 800b6a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6aa:	d81b      	bhi.n	800b6e4 <UART_SetConfig+0x270>
 800b6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6b0:	d00c      	beq.n	800b6cc <UART_SetConfig+0x258>
 800b6b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6b6:	d815      	bhi.n	800b6e4 <UART_SetConfig+0x270>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <UART_SetConfig+0x250>
 800b6bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c0:	d008      	beq.n	800b6d4 <UART_SetConfig+0x260>
 800b6c2:	e00f      	b.n	800b6e4 <UART_SetConfig+0x270>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6ca:	e052      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6d2:	e04e      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b6d4:	2304      	movs	r3, #4
 800b6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6da:	e04a      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b6dc:	2308      	movs	r3, #8
 800b6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6e2:	e046      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b6e4:	2310      	movs	r3, #16
 800b6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6ea:	e042      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a17      	ldr	r2, [pc, #92]	; (800b750 <UART_SetConfig+0x2dc>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d13a      	bne.n	800b76c <UART_SetConfig+0x2f8>
 800b6f6:	4b18      	ldr	r3, [pc, #96]	; (800b758 <UART_SetConfig+0x2e4>)
 800b6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b704:	d01a      	beq.n	800b73c <UART_SetConfig+0x2c8>
 800b706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b70a:	d81b      	bhi.n	800b744 <UART_SetConfig+0x2d0>
 800b70c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b710:	d00c      	beq.n	800b72c <UART_SetConfig+0x2b8>
 800b712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b716:	d815      	bhi.n	800b744 <UART_SetConfig+0x2d0>
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <UART_SetConfig+0x2b0>
 800b71c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b720:	d008      	beq.n	800b734 <UART_SetConfig+0x2c0>
 800b722:	e00f      	b.n	800b744 <UART_SetConfig+0x2d0>
 800b724:	2300      	movs	r3, #0
 800b726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b72a:	e022      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b72c:	2302      	movs	r3, #2
 800b72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b732:	e01e      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b734:	2304      	movs	r3, #4
 800b736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b73a:	e01a      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b73c:	2308      	movs	r3, #8
 800b73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b742:	e016      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b744:	2310      	movs	r3, #16
 800b746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b74a:	e012      	b.n	800b772 <UART_SetConfig+0x2fe>
 800b74c:	cfff69f3 	.word	0xcfff69f3
 800b750:	40008000 	.word	0x40008000
 800b754:	40013800 	.word	0x40013800
 800b758:	40021000 	.word	0x40021000
 800b75c:	40004400 	.word	0x40004400
 800b760:	40004800 	.word	0x40004800
 800b764:	40004c00 	.word	0x40004c00
 800b768:	40005000 	.word	0x40005000
 800b76c:	2310      	movs	r3, #16
 800b76e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4aae      	ldr	r2, [pc, #696]	; (800ba30 <UART_SetConfig+0x5bc>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	f040 8097 	bne.w	800b8ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b77e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b782:	2b08      	cmp	r3, #8
 800b784:	d823      	bhi.n	800b7ce <UART_SetConfig+0x35a>
 800b786:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <UART_SetConfig+0x318>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b7b1 	.word	0x0800b7b1
 800b790:	0800b7cf 	.word	0x0800b7cf
 800b794:	0800b7b9 	.word	0x0800b7b9
 800b798:	0800b7cf 	.word	0x0800b7cf
 800b79c:	0800b7bf 	.word	0x0800b7bf
 800b7a0:	0800b7cf 	.word	0x0800b7cf
 800b7a4:	0800b7cf 	.word	0x0800b7cf
 800b7a8:	0800b7cf 	.word	0x0800b7cf
 800b7ac:	0800b7c7 	.word	0x0800b7c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7b0:	f7fd fc48 	bl	8009044 <HAL_RCC_GetPCLK1Freq>
 800b7b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7b6:	e010      	b.n	800b7da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7b8:	4b9e      	ldr	r3, [pc, #632]	; (800ba34 <UART_SetConfig+0x5c0>)
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7bc:	e00d      	b.n	800b7da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7be:	f7fd fbd3 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 800b7c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7c4:	e009      	b.n	800b7da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7cc:	e005      	b.n	800b7da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b7d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8130 	beq.w	800ba42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	4a94      	ldr	r2, [pc, #592]	; (800ba38 <UART_SetConfig+0x5c4>)
 800b7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	4413      	add	r3, r2
 800b800:	69ba      	ldr	r2, [r7, #24]
 800b802:	429a      	cmp	r2, r3
 800b804:	d305      	bcc.n	800b812 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d903      	bls.n	800b81a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b818:	e113      	b.n	800ba42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	2200      	movs	r2, #0
 800b81e:	60bb      	str	r3, [r7, #8]
 800b820:	60fa      	str	r2, [r7, #12]
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	4a84      	ldr	r2, [pc, #528]	; (800ba38 <UART_SetConfig+0x5c4>)
 800b828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	2200      	movs	r2, #0
 800b830:	603b      	str	r3, [r7, #0]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b83c:	f7f5 f9b6 	bl	8000bac <__aeabi_uldivmod>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	4610      	mov	r0, r2
 800b846:	4619      	mov	r1, r3
 800b848:	f04f 0200 	mov.w	r2, #0
 800b84c:	f04f 0300 	mov.w	r3, #0
 800b850:	020b      	lsls	r3, r1, #8
 800b852:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b856:	0202      	lsls	r2, r0, #8
 800b858:	6979      	ldr	r1, [r7, #20]
 800b85a:	6849      	ldr	r1, [r1, #4]
 800b85c:	0849      	lsrs	r1, r1, #1
 800b85e:	2000      	movs	r0, #0
 800b860:	460c      	mov	r4, r1
 800b862:	4605      	mov	r5, r0
 800b864:	eb12 0804 	adds.w	r8, r2, r4
 800b868:	eb43 0905 	adc.w	r9, r3, r5
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	469a      	mov	sl, r3
 800b874:	4693      	mov	fp, r2
 800b876:	4652      	mov	r2, sl
 800b878:	465b      	mov	r3, fp
 800b87a:	4640      	mov	r0, r8
 800b87c:	4649      	mov	r1, r9
 800b87e:	f7f5 f995 	bl	8000bac <__aeabi_uldivmod>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4613      	mov	r3, r2
 800b888:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b890:	d308      	bcc.n	800b8a4 <UART_SetConfig+0x430>
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b898:	d204      	bcs.n	800b8a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6a3a      	ldr	r2, [r7, #32]
 800b8a0:	60da      	str	r2, [r3, #12]
 800b8a2:	e0ce      	b.n	800ba42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b8aa:	e0ca      	b.n	800ba42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	69db      	ldr	r3, [r3, #28]
 800b8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b4:	d166      	bne.n	800b984 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b8b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8ba:	2b08      	cmp	r3, #8
 800b8bc:	d827      	bhi.n	800b90e <UART_SetConfig+0x49a>
 800b8be:	a201      	add	r2, pc, #4	; (adr r2, 800b8c4 <UART_SetConfig+0x450>)
 800b8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c4:	0800b8e9 	.word	0x0800b8e9
 800b8c8:	0800b8f1 	.word	0x0800b8f1
 800b8cc:	0800b8f9 	.word	0x0800b8f9
 800b8d0:	0800b90f 	.word	0x0800b90f
 800b8d4:	0800b8ff 	.word	0x0800b8ff
 800b8d8:	0800b90f 	.word	0x0800b90f
 800b8dc:	0800b90f 	.word	0x0800b90f
 800b8e0:	0800b90f 	.word	0x0800b90f
 800b8e4:	0800b907 	.word	0x0800b907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8e8:	f7fd fbac 	bl	8009044 <HAL_RCC_GetPCLK1Freq>
 800b8ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8ee:	e014      	b.n	800b91a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8f0:	f7fd fbbe 	bl	8009070 <HAL_RCC_GetPCLK2Freq>
 800b8f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8f6:	e010      	b.n	800b91a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8f8:	4b4e      	ldr	r3, [pc, #312]	; (800ba34 <UART_SetConfig+0x5c0>)
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8fc:	e00d      	b.n	800b91a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8fe:	f7fd fb33 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 800b902:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b904:	e009      	b.n	800b91a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b90a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b90c:	e005      	b.n	800b91a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b90e:	2300      	movs	r3, #0
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 8090 	beq.w	800ba42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	4a44      	ldr	r2, [pc, #272]	; (800ba38 <UART_SetConfig+0x5c4>)
 800b928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b92c:	461a      	mov	r2, r3
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	fbb3 f3f2 	udiv	r3, r3, r2
 800b934:	005a      	lsls	r2, r3, #1
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	085b      	lsrs	r3, r3, #1
 800b93c:	441a      	add	r2, r3
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	fbb2 f3f3 	udiv	r3, r2, r3
 800b946:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	2b0f      	cmp	r3, #15
 800b94c:	d916      	bls.n	800b97c <UART_SetConfig+0x508>
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b954:	d212      	bcs.n	800b97c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	f023 030f 	bic.w	r3, r3, #15
 800b95e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	085b      	lsrs	r3, r3, #1
 800b964:	b29b      	uxth	r3, r3
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	8bfb      	ldrh	r3, [r7, #30]
 800b96e:	4313      	orrs	r3, r2
 800b970:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	8bfa      	ldrh	r2, [r7, #30]
 800b978:	60da      	str	r2, [r3, #12]
 800b97a:	e062      	b.n	800ba42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b982:	e05e      	b.n	800ba42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d828      	bhi.n	800b9de <UART_SetConfig+0x56a>
 800b98c:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <UART_SetConfig+0x520>)
 800b98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b992:	bf00      	nop
 800b994:	0800b9b9 	.word	0x0800b9b9
 800b998:	0800b9c1 	.word	0x0800b9c1
 800b99c:	0800b9c9 	.word	0x0800b9c9
 800b9a0:	0800b9df 	.word	0x0800b9df
 800b9a4:	0800b9cf 	.word	0x0800b9cf
 800b9a8:	0800b9df 	.word	0x0800b9df
 800b9ac:	0800b9df 	.word	0x0800b9df
 800b9b0:	0800b9df 	.word	0x0800b9df
 800b9b4:	0800b9d7 	.word	0x0800b9d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9b8:	f7fd fb44 	bl	8009044 <HAL_RCC_GetPCLK1Freq>
 800b9bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9be:	e014      	b.n	800b9ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9c0:	f7fd fb56 	bl	8009070 <HAL_RCC_GetPCLK2Freq>
 800b9c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9c6:	e010      	b.n	800b9ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9c8:	4b1a      	ldr	r3, [pc, #104]	; (800ba34 <UART_SetConfig+0x5c0>)
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9cc:	e00d      	b.n	800b9ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9ce:	f7fd facb 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 800b9d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9d4:	e009      	b.n	800b9ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9dc:	e005      	b.n	800b9ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b9e8:	bf00      	nop
    }

    if (pclk != 0U)
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d028      	beq.n	800ba42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	4a10      	ldr	r2, [pc, #64]	; (800ba38 <UART_SetConfig+0x5c4>)
 800b9f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	085b      	lsrs	r3, r3, #1
 800ba08:	441a      	add	r2, r3
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	2b0f      	cmp	r3, #15
 800ba18:	d910      	bls.n	800ba3c <UART_SetConfig+0x5c8>
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba20:	d20c      	bcs.n	800ba3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60da      	str	r2, [r3, #12]
 800ba2c:	e009      	b.n	800ba42 <UART_SetConfig+0x5ce>
 800ba2e:	bf00      	nop
 800ba30:	40008000 	.word	0x40008000
 800ba34:	00f42400 	.word	0x00f42400
 800ba38:	08014860 	.word	0x08014860
      }
      else
      {
        ret = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2200      	movs	r2, #0
 800ba56:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ba5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3730      	adds	r7, #48	; 0x30
 800ba66:	46bd      	mov	sp, r7
 800ba68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ba6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00a      	beq.n	800ba96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9a:	f003 0302 	and.w	r3, r3, #2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00a      	beq.n	800bab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	430a      	orrs	r2, r1
 800bab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00a      	beq.n	800bada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	430a      	orrs	r2, r1
 800bad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00a      	beq.n	800bafc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	430a      	orrs	r2, r1
 800bafa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb00:	f003 0310 	and.w	r3, r3, #16
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00a      	beq.n	800bb1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	430a      	orrs	r2, r1
 800bb1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb22:	f003 0320 	and.w	r3, r3, #32
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01a      	beq.n	800bb82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb6a:	d10a      	bne.n	800bb82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	605a      	str	r2, [r3, #4]
  }
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af02      	add	r7, sp, #8
 800bbb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbc0:	f7f8 f98a 	bl	8003ed8 <HAL_GetTick>
 800bbc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0308 	and.w	r3, r3, #8
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d10e      	bne.n	800bbf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f82f 	bl	800bc46 <UART_WaitOnFlagUntilTimeout>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	e025      	b.n	800bc3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0304 	and.w	r3, r3, #4
 800bbfc:	2b04      	cmp	r3, #4
 800bbfe:	d10e      	bne.n	800bc1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f819 	bl	800bc46 <UART_WaitOnFlagUntilTimeout>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	e00f      	b.n	800bc3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2220      	movs	r2, #32
 800bc22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b09c      	sub	sp, #112	; 0x70
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	60f8      	str	r0, [r7, #12]
 800bc4e:	60b9      	str	r1, [r7, #8]
 800bc50:	603b      	str	r3, [r7, #0]
 800bc52:	4613      	mov	r3, r2
 800bc54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc56:	e0a9      	b.n	800bdac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc5e:	f000 80a5 	beq.w	800bdac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc62:	f7f8 f939 	bl	8003ed8 <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d302      	bcc.n	800bc78 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d140      	bne.n	800bcfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc80:	e853 3f00 	ldrex	r3, [r3]
 800bc84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc8c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1e6      	bne.n	800bc78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3308      	adds	r3, #8
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb4:	e853 3f00 	ldrex	r3, [r3]
 800bcb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	f023 0301 	bic.w	r3, r3, #1
 800bcc0:	663b      	str	r3, [r7, #96]	; 0x60
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcca:	64ba      	str	r2, [r7, #72]	; 0x48
 800bccc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcd2:	e841 2300 	strex	r3, r2, [r1]
 800bcd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bcd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1e5      	bne.n	800bcaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e069      	b.n	800bdce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0304 	and.w	r3, r3, #4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d051      	beq.n	800bdac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	69db      	ldr	r3, [r3, #28]
 800bd0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd16:	d149      	bne.n	800bdac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd40:	637b      	str	r3, [r7, #52]	; 0x34
 800bd42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd48:	e841 2300 	strex	r3, r2, [r1]
 800bd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e6      	bne.n	800bd22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3308      	adds	r3, #8
 800bd5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	613b      	str	r3, [r7, #16]
   return(result);
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	f023 0301 	bic.w	r3, r3, #1
 800bd6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3308      	adds	r3, #8
 800bd72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd74:	623a      	str	r2, [r7, #32]
 800bd76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd78:	69f9      	ldr	r1, [r7, #28]
 800bd7a:	6a3a      	ldr	r2, [r7, #32]
 800bd7c:	e841 2300 	strex	r3, r2, [r1]
 800bd80:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1e5      	bne.n	800bd54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2220      	movs	r2, #32
 800bd8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2220      	movs	r2, #32
 800bd94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e010      	b.n	800bdce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	69da      	ldr	r2, [r3, #28]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	bf0c      	ite	eq
 800bdbc:	2301      	moveq	r3, #1
 800bdbe:	2300      	movne	r3, #0
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	f43f af46 	beq.w	800bc58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3770      	adds	r7, #112	; 0x70
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b0a3      	sub	sp, #140	; 0x8c
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	88fa      	ldrh	r2, [r7, #6]
 800bdf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	88fa      	ldrh	r2, [r7, #6]
 800bdf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be0a:	d10e      	bne.n	800be2a <UART_Start_Receive_IT+0x52>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d105      	bne.n	800be20 <UART_Start_Receive_IT+0x48>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f240 12ff 	movw	r2, #511	; 0x1ff
 800be1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be1e:	e02d      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	22ff      	movs	r2, #255	; 0xff
 800be24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be28:	e028      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10d      	bne.n	800be4e <UART_Start_Receive_IT+0x76>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d104      	bne.n	800be44 <UART_Start_Receive_IT+0x6c>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	22ff      	movs	r2, #255	; 0xff
 800be3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be42:	e01b      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	227f      	movs	r2, #127	; 0x7f
 800be48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be4c:	e016      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be56:	d10d      	bne.n	800be74 <UART_Start_Receive_IT+0x9c>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d104      	bne.n	800be6a <UART_Start_Receive_IT+0x92>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	227f      	movs	r2, #127	; 0x7f
 800be64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be68:	e008      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	223f      	movs	r2, #63	; 0x3f
 800be6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be72:	e003      	b.n	800be7c <UART_Start_Receive_IT+0xa4>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2222      	movs	r2, #34	; 0x22
 800be88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3308      	adds	r3, #8
 800be92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be96:	e853 3f00 	ldrex	r3, [r3]
 800be9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800be9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be9e:	f043 0301 	orr.w	r3, r3, #1
 800bea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3308      	adds	r3, #8
 800beac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800beb0:	673a      	str	r2, [r7, #112]	; 0x70
 800beb2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800beb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e3      	bne.n	800be8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800becc:	d153      	bne.n	800bf76 <UART_Start_Receive_IT+0x19e>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bed4:	88fa      	ldrh	r2, [r7, #6]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d34d      	bcc.n	800bf76 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee2:	d107      	bne.n	800bef4 <UART_Start_Receive_IT+0x11c>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d103      	bne.n	800bef4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	4a4b      	ldr	r2, [pc, #300]	; (800c01c <UART_Start_Receive_IT+0x244>)
 800bef0:	671a      	str	r2, [r3, #112]	; 0x70
 800bef2:	e002      	b.n	800befa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4a4a      	ldr	r2, [pc, #296]	; (800c020 <UART_Start_Receive_IT+0x248>)
 800bef8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d01a      	beq.n	800bf40 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e4      	bne.n	800bf0a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	3308      	adds	r3, #8
 800bf46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4a:	e853 3f00 	ldrex	r3, [r3]
 800bf4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf56:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf60:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf68:	e841 2300 	strex	r3, r2, [r1]
 800bf6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1e5      	bne.n	800bf40 <UART_Start_Receive_IT+0x168>
 800bf74:	e04a      	b.n	800c00c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf7e:	d107      	bne.n	800bf90 <UART_Start_Receive_IT+0x1b8>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d103      	bne.n	800bf90 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4a26      	ldr	r2, [pc, #152]	; (800c024 <UART_Start_Receive_IT+0x24c>)
 800bf8c:	671a      	str	r2, [r3, #112]	; 0x70
 800bf8e:	e002      	b.n	800bf96 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4a25      	ldr	r2, [pc, #148]	; (800c028 <UART_Start_Receive_IT+0x250>)
 800bf94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d019      	beq.n	800bfda <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bfba:	677b      	str	r3, [r7, #116]	; 0x74
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfc4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e6      	bne.n	800bfa6 <UART_Start_Receive_IT+0x1ce>
 800bfd8:	e018      	b.n	800c00c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	e853 3f00 	ldrex	r3, [r3]
 800bfe6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	f043 0320 	orr.w	r3, r3, #32
 800bfee:	67bb      	str	r3, [r7, #120]	; 0x78
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	461a      	mov	r2, r3
 800bff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bff8:	623b      	str	r3, [r7, #32]
 800bffa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffc:	69f9      	ldr	r1, [r7, #28]
 800bffe:	6a3a      	ldr	r2, [r7, #32]
 800c000:	e841 2300 	strex	r3, r2, [r1]
 800c004:	61bb      	str	r3, [r7, #24]
   return(result);
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1e6      	bne.n	800bfda <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	378c      	adds	r7, #140	; 0x8c
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	0800c735 	.word	0x0800c735
 800c020:	0800c43d 	.word	0x0800c43d
 800c024:	0800c2db 	.word	0x0800c2db
 800c028:	0800c17b 	.word	0x0800c17b

0800c02c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b095      	sub	sp, #84	; 0x54
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03c:	e853 3f00 	ldrex	r3, [r3]
 800c040:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c052:	643b      	str	r3, [r7, #64]	; 0x40
 800c054:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c056:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c05a:	e841 2300 	strex	r3, r2, [r1]
 800c05e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1e6      	bne.n	800c034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3308      	adds	r3, #8
 800c06c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	e853 3f00 	ldrex	r3, [r3]
 800c074:	61fb      	str	r3, [r7, #28]
   return(result);
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c07c:	f023 0301 	bic.w	r3, r3, #1
 800c080:	64bb      	str	r3, [r7, #72]	; 0x48
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	3308      	adds	r3, #8
 800c088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c08a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c08c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c092:	e841 2300 	strex	r3, r2, [r1]
 800c096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1e3      	bne.n	800c066 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d118      	bne.n	800c0d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	e853 3f00 	ldrex	r3, [r3]
 800c0b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	f023 0310 	bic.w	r3, r3, #16
 800c0ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0c4:	61bb      	str	r3, [r7, #24]
 800c0c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c8:	6979      	ldr	r1, [r7, #20]
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	e841 2300 	strex	r3, r2, [r1]
 800c0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1e6      	bne.n	800c0a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2220      	movs	r2, #32
 800c0dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c0ec:	bf00      	nop
 800c0ee:	3754      	adds	r7, #84	; 0x54
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff f996 	bl	800b448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c11c:	bf00      	nop
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b088      	sub	sp, #32
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	e853 3f00 	ldrex	r3, [r3]
 800c138:	60bb      	str	r3, [r7, #8]
   return(result);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c140:	61fb      	str	r3, [r7, #28]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	61bb      	str	r3, [r7, #24]
 800c14c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	6979      	ldr	r1, [r7, #20]
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	613b      	str	r3, [r7, #16]
   return(result);
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e6      	bne.n	800c12c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2220      	movs	r2, #32
 800c162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff f957 	bl	800b420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c172:	bf00      	nop
 800c174:	3720      	adds	r7, #32
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b096      	sub	sp, #88	; 0x58
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c188:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c192:	2b22      	cmp	r3, #34	; 0x22
 800c194:	f040 8095 	bne.w	800c2c2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1a2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c1a6:	b2d9      	uxtb	r1, r3
 800c1a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b2:	400a      	ands	r2, r1
 800c1b4:	b2d2      	uxtb	r2, r2
 800c1b6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d178      	bne.n	800c2d2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	e853 3f00 	ldrex	r3, [r3]
 800c1ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1f4:	653b      	str	r3, [r7, #80]	; 0x50
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c200:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e6      	bne.n	800c1e0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3308      	adds	r3, #8
 800c218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	e853 3f00 	ldrex	r3, [r3]
 800c220:	623b      	str	r3, [r7, #32]
   return(result);
 800c222:	6a3b      	ldr	r3, [r7, #32]
 800c224:	f023 0301 	bic.w	r3, r3, #1
 800c228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3308      	adds	r3, #8
 800c230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c232:	633a      	str	r2, [r7, #48]	; 0x30
 800c234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c23a:	e841 2300 	strex	r3, r2, [r1]
 800c23e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1e5      	bne.n	800c212 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2220      	movs	r2, #32
 800c24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d12e      	bne.n	800c2ba <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f023 0310 	bic.w	r3, r3, #16
 800c276:	64bb      	str	r3, [r7, #72]	; 0x48
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c280:	61fb      	str	r3, [r7, #28]
 800c282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	69b9      	ldr	r1, [r7, #24]
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	617b      	str	r3, [r7, #20]
   return(result);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e6      	bne.n	800c262 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	69db      	ldr	r3, [r3, #28]
 800c29a:	f003 0310 	and.w	r3, r3, #16
 800c29e:	2b10      	cmp	r3, #16
 800c2a0:	d103      	bne.n	800c2aa <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2210      	movs	r2, #16
 800c2a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff f8d2 	bl	800b45c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2b8:	e00b      	b.n	800c2d2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff f8ba 	bl	800b434 <HAL_UART_RxCpltCallback>
}
 800c2c0:	e007      	b.n	800c2d2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	699a      	ldr	r2, [r3, #24]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f042 0208 	orr.w	r2, r2, #8
 800c2d0:	619a      	str	r2, [r3, #24]
}
 800c2d2:	bf00      	nop
 800c2d4:	3758      	adds	r7, #88	; 0x58
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b096      	sub	sp, #88	; 0x58
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f2:	2b22      	cmp	r3, #34	; 0x22
 800c2f4:	f040 8095 	bne.w	800c422 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c306:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c308:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c30c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c310:	4013      	ands	r3, r2
 800c312:	b29a      	uxth	r2, r3
 800c314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c316:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c31c:	1c9a      	adds	r2, r3, #2
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3b01      	subs	r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d178      	bne.n	800c432 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c348:	e853 3f00 	ldrex	r3, [r3]
 800c34c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c354:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c35e:	643b      	str	r3, [r7, #64]	; 0x40
 800c360:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c366:	e841 2300 	strex	r3, r2, [r1]
 800c36a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1e6      	bne.n	800c340 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3308      	adds	r3, #8
 800c378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	e853 3f00 	ldrex	r3, [r3]
 800c380:	61fb      	str	r3, [r7, #28]
   return(result);
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	f023 0301 	bic.w	r3, r3, #1
 800c388:	64bb      	str	r3, [r7, #72]	; 0x48
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3308      	adds	r3, #8
 800c390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c392:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e5      	bne.n	800c372 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2220      	movs	r2, #32
 800c3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d12e      	bne.n	800c41a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	e853 3f00 	ldrex	r3, [r3]
 800c3ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	f023 0310 	bic.w	r3, r3, #16
 800c3d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3e0:	61bb      	str	r3, [r7, #24]
 800c3e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e4:	6979      	ldr	r1, [r7, #20]
 800c3e6:	69ba      	ldr	r2, [r7, #24]
 800c3e8:	e841 2300 	strex	r3, r2, [r1]
 800c3ec:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1e6      	bne.n	800c3c2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	69db      	ldr	r3, [r3, #28]
 800c3fa:	f003 0310 	and.w	r3, r3, #16
 800c3fe:	2b10      	cmp	r3, #16
 800c400:	d103      	bne.n	800c40a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2210      	movs	r2, #16
 800c408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7ff f822 	bl	800b45c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c418:	e00b      	b.n	800c432 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7ff f80a 	bl	800b434 <HAL_UART_RxCpltCallback>
}
 800c420:	e007      	b.n	800c432 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	699a      	ldr	r2, [r3, #24]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f042 0208 	orr.w	r2, r2, #8
 800c430:	619a      	str	r2, [r3, #24]
}
 800c432:	bf00      	nop
 800c434:	3758      	adds	r7, #88	; 0x58
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
	...

0800c43c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b0a6      	sub	sp, #152	; 0x98
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c44a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c472:	2b22      	cmp	r3, #34	; 0x22
 800c474:	f040 814f 	bne.w	800c716 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c47e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c482:	e0f6      	b.n	800c672 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c48e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c492:	b2d9      	uxtb	r1, r3
 800c494:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c49e:	400a      	ands	r2, r1
 800c4a0:	b2d2      	uxtb	r2, r2
 800c4a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c4ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4ce:	f003 0307 	and.w	r3, r3, #7
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d053      	beq.n	800c57e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d011      	beq.n	800c506 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c4e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00b      	beq.n	800c506 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4fc:	f043 0201 	orr.w	r2, r3, #1
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c506:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c50a:	f003 0302 	and.w	r3, r3, #2
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d011      	beq.n	800c536 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00b      	beq.n	800c536 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2202      	movs	r2, #2
 800c524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c52c:	f043 0204 	orr.w	r2, r3, #4
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c53a:	f003 0304 	and.w	r3, r3, #4
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d011      	beq.n	800c566 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c546:	f003 0301 	and.w	r3, r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00b      	beq.n	800c566 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2204      	movs	r2, #4
 800c554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c55c:	f043 0202 	orr.w	r2, r3, #2
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7fe ff69 	bl	800b448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c584:	b29b      	uxth	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d173      	bne.n	800c672 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c592:	e853 3f00 	ldrex	r3, [r3]
 800c596:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c59a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c59e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c5ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5ae:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c5b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c5ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e4      	bne.n	800c58a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ca:	e853 3f00 	ldrex	r3, [r3]
 800c5ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c5d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5d6:	f023 0301 	bic.w	r3, r3, #1
 800c5da:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	3308      	adds	r3, #8
 800c5e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c5e4:	657a      	str	r2, [r7, #84]	; 0x54
 800c5e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5ec:	e841 2300 	strex	r3, r2, [r1]
 800c5f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c5f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1e3      	bne.n	800c5c0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d12e      	bne.n	800c66c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61c:	e853 3f00 	ldrex	r3, [r3]
 800c620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	f023 0310 	bic.w	r3, r3, #16
 800c628:	67bb      	str	r3, [r7, #120]	; 0x78
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c632:	643b      	str	r3, [r7, #64]	; 0x40
 800c634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c63a:	e841 2300 	strex	r3, r2, [r1]
 800c63e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1e6      	bne.n	800c614 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	69db      	ldr	r3, [r3, #28]
 800c64c:	f003 0310 	and.w	r3, r3, #16
 800c650:	2b10      	cmp	r3, #16
 800c652:	d103      	bne.n	800c65c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2210      	movs	r2, #16
 800c65a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f7fe fef9 	bl	800b45c <HAL_UARTEx_RxEventCallback>
 800c66a:	e002      	b.n	800c672 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7fe fee1 	bl	800b434 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c672:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c676:	2b00      	cmp	r3, #0
 800c678:	d006      	beq.n	800c688 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c67a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c67e:	f003 0320 	and.w	r3, r3, #32
 800c682:	2b00      	cmp	r3, #0
 800c684:	f47f aefe 	bne.w	800c484 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c68e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c692:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c696:	2b00      	cmp	r3, #0
 800c698:	d045      	beq.n	800c726 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d23e      	bcs.n	800c726 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b0:	6a3b      	ldr	r3, [r7, #32]
 800c6b2:	e853 3f00 	ldrex	r3, [r3]
 800c6b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6be:	673b      	str	r3, [r7, #112]	; 0x70
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3308      	adds	r3, #8
 800c6c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c6c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d0:	e841 2300 	strex	r3, r2, [r1]
 800c6d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e5      	bne.n	800c6a8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a14      	ldr	r2, [pc, #80]	; (800c730 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c6e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	e853 3f00 	ldrex	r3, [r3]
 800c6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f043 0320 	orr.w	r3, r3, #32
 800c6f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c700:	61bb      	str	r3, [r7, #24]
 800c702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	6979      	ldr	r1, [r7, #20]
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	613b      	str	r3, [r7, #16]
   return(result);
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e6      	bne.n	800c6e2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c714:	e007      	b.n	800c726 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	699a      	ldr	r2, [r3, #24]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f042 0208 	orr.w	r2, r2, #8
 800c724:	619a      	str	r2, [r3, #24]
}
 800c726:	bf00      	nop
 800c728:	3798      	adds	r7, #152	; 0x98
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	0800c17b 	.word	0x0800c17b

0800c734 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b0a8      	sub	sp, #160	; 0xa0
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c742:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	69db      	ldr	r3, [r3, #28]
 800c74c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c76a:	2b22      	cmp	r3, #34	; 0x22
 800c76c:	f040 8153 	bne.w	800ca16 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c776:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c77a:	e0fa      	b.n	800c972 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c782:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c78e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c792:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c796:	4013      	ands	r3, r2
 800c798:	b29a      	uxth	r2, r3
 800c79a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c79e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a4:	1c9a      	adds	r2, r3, #2
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	69db      	ldr	r3, [r3, #28]
 800c7c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c7c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d053      	beq.n	800c87a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d011      	beq.n	800c802 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c7de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00b      	beq.n	800c802 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7f8:	f043 0201 	orr.w	r2, r3, #1
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c806:	f003 0302 	and.w	r3, r3, #2
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d011      	beq.n	800c832 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c80e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00b      	beq.n	800c832 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2202      	movs	r2, #2
 800c820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c828:	f043 0204 	orr.w	r2, r3, #4
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c836:	f003 0304 	and.w	r3, r3, #4
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d011      	beq.n	800c862 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c83e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00b      	beq.n	800c862 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2204      	movs	r2, #4
 800c850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c858:	f043 0202 	orr.w	r2, r3, #2
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d006      	beq.n	800c87a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7fe fdeb 	bl	800b448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c880:	b29b      	uxth	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d175      	bne.n	800c972 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c88e:	e853 3f00 	ldrex	r3, [r3]
 800c892:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c89a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c8a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c8aa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8b0:	e841 2300 	strex	r3, r2, [r1]
 800c8b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1e4      	bne.n	800c886 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c6:	e853 3f00 	ldrex	r3, [r3]
 800c8ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8d2:	f023 0301 	bic.w	r3, r3, #1
 800c8d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3308      	adds	r3, #8
 800c8e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c8e4:	65ba      	str	r2, [r7, #88]	; 0x58
 800c8e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8ec:	e841 2300 	strex	r3, r2, [r1]
 800c8f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d1e1      	bne.n	800c8bc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2220      	movs	r2, #32
 800c8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d12e      	bne.n	800c96c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c924:	f023 0310 	bic.w	r3, r3, #16
 800c928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c932:	647b      	str	r3, [r7, #68]	; 0x44
 800c934:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c93a:	e841 2300 	strex	r3, r2, [r1]
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1e6      	bne.n	800c914 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	f003 0310 	and.w	r3, r3, #16
 800c950:	2b10      	cmp	r3, #16
 800c952:	d103      	bne.n	800c95c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2210      	movs	r2, #16
 800c95a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c962:	4619      	mov	r1, r3
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f7fe fd79 	bl	800b45c <HAL_UARTEx_RxEventCallback>
 800c96a:	e002      	b.n	800c972 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7fe fd61 	bl	800b434 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c972:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <UART_RxISR_16BIT_FIFOEN+0x254>
 800c97a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c97e:	f003 0320 	and.w	r3, r3, #32
 800c982:	2b00      	cmp	r3, #0
 800c984:	f47f aefa 	bne.w	800c77c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c98e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c992:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c996:	2b00      	cmp	r3, #0
 800c998:	d045      	beq.n	800ca26 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9a0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d23e      	bcs.n	800ca26 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3308      	adds	r3, #8
 800c9ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	e853 3f00 	ldrex	r3, [r3]
 800c9b6:	623b      	str	r3, [r7, #32]
   return(result);
 800c9b8:	6a3b      	ldr	r3, [r7, #32]
 800c9ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9be:	677b      	str	r3, [r7, #116]	; 0x74
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c9c8:	633a      	str	r2, [r7, #48]	; 0x30
 800c9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d0:	e841 2300 	strex	r3, r2, [r1]
 800c9d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e5      	bne.n	800c9a8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a14      	ldr	r2, [pc, #80]	; (800ca30 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c9e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	e853 3f00 	ldrex	r3, [r3]
 800c9ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f043 0320 	orr.w	r3, r3, #32
 800c9f6:	673b      	str	r3, [r7, #112]	; 0x70
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca00:	61fb      	str	r3, [r7, #28]
 800ca02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca04:	69b9      	ldr	r1, [r7, #24]
 800ca06:	69fa      	ldr	r2, [r7, #28]
 800ca08:	e841 2300 	strex	r3, r2, [r1]
 800ca0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e6      	bne.n	800c9e2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca14:	e007      	b.n	800ca26 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	699a      	ldr	r2, [r3, #24]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f042 0208 	orr.w	r2, r2, #8
 800ca24:	619a      	str	r2, [r3, #24]
}
 800ca26:	bf00      	nop
 800ca28:	37a0      	adds	r7, #160	; 0xa0
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	0800c2db 	.word	0x0800c2db

0800ca34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca82:	2302      	movs	r3, #2
 800ca84:	e027      	b.n	800cad6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2224      	movs	r2, #36	; 0x24
 800ca92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f022 0201 	bic.w	r2, r2, #1
 800caac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cab4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2220      	movs	r2, #32
 800cac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d101      	bne.n	800cafa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800caf6:	2302      	movs	r3, #2
 800caf8:	e02d      	b.n	800cb56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2201      	movs	r2, #1
 800cafe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2224      	movs	r2, #36	; 0x24
 800cb06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f022 0201 	bic.w	r2, r2, #1
 800cb20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	430a      	orrs	r2, r1
 800cb34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f850 	bl	800cbdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d101      	bne.n	800cb76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb72:	2302      	movs	r3, #2
 800cb74:	e02d      	b.n	800cbd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2224      	movs	r2, #36	; 0x24
 800cb82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f022 0201 	bic.w	r2, r2, #1
 800cb9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f812 	bl	800cbdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2220      	movs	r2, #32
 800cbc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d108      	bne.n	800cbfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cbfc:	e031      	b.n	800cc62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cbfe:	2308      	movs	r3, #8
 800cc00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc02:	2308      	movs	r3, #8
 800cc04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	0e5b      	lsrs	r3, r3, #25
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	f003 0307 	and.w	r3, r3, #7
 800cc14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	0f5b      	lsrs	r3, r3, #29
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 0307 	and.w	r3, r3, #7
 800cc24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	7b3a      	ldrb	r2, [r7, #12]
 800cc2a:	4911      	ldr	r1, [pc, #68]	; (800cc70 <UARTEx_SetNbDataToProcess+0x94>)
 800cc2c:	5c8a      	ldrb	r2, [r1, r2]
 800cc2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc32:	7b3a      	ldrb	r2, [r7, #12]
 800cc34:	490f      	ldr	r1, [pc, #60]	; (800cc74 <UARTEx_SetNbDataToProcess+0x98>)
 800cc36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc38:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	7b7a      	ldrb	r2, [r7, #13]
 800cc48:	4909      	ldr	r1, [pc, #36]	; (800cc70 <UARTEx_SetNbDataToProcess+0x94>)
 800cc4a:	5c8a      	ldrb	r2, [r1, r2]
 800cc4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc50:	7b7a      	ldrb	r2, [r7, #13]
 800cc52:	4908      	ldr	r1, [pc, #32]	; (800cc74 <UARTEx_SetNbDataToProcess+0x98>)
 800cc54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc56:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc62:	bf00      	nop
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	08014878 	.word	0x08014878
 800cc74:	08014880 	.word	0x08014880

0800cc78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cc88:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800cc8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ccae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ccb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	43db      	mvns	r3, r3
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ccdc:	b084      	sub	sp, #16
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	f107 0014 	add.w	r0, r7, #20
 800ccea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	b004      	add	sp, #16
 800cd1c:	4770      	bx	lr
	...

0800cd20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b09d      	sub	sp, #116	; 0x74
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4413      	add	r3, r2
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800cd42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	78db      	ldrb	r3, [r3, #3]
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d81f      	bhi.n	800cd92 <USB_ActivateEndpoint+0x72>
 800cd52:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <USB_ActivateEndpoint+0x38>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cd69 	.word	0x0800cd69
 800cd5c:	0800cd85 	.word	0x0800cd85
 800cd60:	0800cd9b 	.word	0x0800cd9b
 800cd64:	0800cd77 	.word	0x0800cd77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cd68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cd6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cd74:	e012      	b.n	800cd9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cd76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cd7a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800cd7e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cd82:	e00b      	b.n	800cd9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cd84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cd88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cd8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cd90:	e004      	b.n	800cd9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800cd98:	e000      	b.n	800cd9c <USB_ActivateEndpoint+0x7c>
      break;
 800cd9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	441a      	add	r2, r3
 800cda6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cdaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	881b      	ldrh	r3, [r3, #0]
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	b21b      	sxth	r3, r3
 800cdce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdd6:	b21a      	sxth	r2, r3
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	b21b      	sxth	r3, r3
 800cdde:	4313      	orrs	r3, r2
 800cde0:	b21b      	sxth	r3, r3
 800cde2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	441a      	add	r2, r3
 800cdf0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800cdf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	7b1b      	ldrb	r3, [r3, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f040 8149 	bne.w	800d0a4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 8084 	beq.w	800cf24 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	61bb      	str	r3, [r7, #24]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	461a      	mov	r2, r3
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	61bb      	str	r3, [r7, #24]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	00da      	lsls	r2, r3, #3
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce3e:	617b      	str	r3, [r7, #20]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	88db      	ldrh	r3, [r3, #6]
 800ce44:	085b      	lsrs	r3, r3, #1
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	827b      	strh	r3, [r7, #18]
 800ce5e:	8a7b      	ldrh	r3, [r7, #18]
 800ce60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01b      	beq.n	800cea0 <USB_ActivateEndpoint+0x180>
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce7e:	823b      	strh	r3, [r7, #16]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	441a      	add	r2, r3
 800ce8a:	8a3b      	ldrh	r3, [r7, #16]
 800ce8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	78db      	ldrb	r3, [r3, #3]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d020      	beq.n	800ceea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cebe:	81bb      	strh	r3, [r7, #12]
 800cec0:	89bb      	ldrh	r3, [r7, #12]
 800cec2:	f083 0320 	eor.w	r3, r3, #32
 800cec6:	81bb      	strh	r3, [r7, #12]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	441a      	add	r2, r3
 800ced2:	89bb      	ldrh	r3, [r7, #12]
 800ced4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ced8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cedc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	8013      	strh	r3, [r2, #0]
 800cee8:	e2a6      	b.n	800d438 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cefc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf00:	81fb      	strh	r3, [r7, #14]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	441a      	add	r2, r3
 800cf0c:	89fb      	ldrh	r3, [r7, #14]
 800cf0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	8013      	strh	r3, [r2, #0]
 800cf22:	e289      	b.n	800d438 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	633b      	str	r3, [r7, #48]	; 0x30
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	461a      	mov	r2, r3
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	4413      	add	r3, r2
 800cf36:	633b      	str	r3, [r7, #48]	; 0x30
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	00da      	lsls	r2, r3, #3
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	4413      	add	r3, r2
 800cf42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cf46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	88db      	ldrh	r3, [r3, #6]
 800cf4c:	085b      	lsrs	r3, r3, #1
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	461a      	mov	r2, r3
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	4413      	add	r3, r2
 800cf6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	00da      	lsls	r2, r3, #3
 800cf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf74:	4413      	add	r3, r2
 800cf76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf7a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	2b3e      	cmp	r3, #62	; 0x3e
 800cf82:	d918      	bls.n	800cfb6 <USB_ActivateEndpoint+0x296>
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	095b      	lsrs	r3, r3, #5
 800cf8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	f003 031f 	and.w	r3, r3, #31
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d102      	bne.n	800cf9e <USB_ActivateEndpoint+0x27e>
 800cf98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	029b      	lsls	r3, r3, #10
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	801a      	strh	r2, [r3, #0]
 800cfb4:	e029      	b.n	800d00a <USB_ActivateEndpoint+0x2ea>
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d112      	bne.n	800cfe4 <USB_ActivateEndpoint+0x2c4>
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	801a      	strh	r2, [r3, #0]
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd0:	881b      	ldrh	r3, [r3, #0]
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	801a      	strh	r2, [r3, #0]
 800cfe2:	e012      	b.n	800d00a <USB_ActivateEndpoint+0x2ea>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	085b      	lsrs	r3, r3, #1
 800cfea:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	691b      	ldr	r3, [r3, #16]
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <USB_ActivateEndpoint+0x2de>
 800cff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cffa:	3301      	adds	r3, #1
 800cffc:	66bb      	str	r3, [r7, #104]	; 0x68
 800cffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d000:	b29b      	uxth	r3, r3
 800d002:	029b      	lsls	r3, r3, #10
 800d004:	b29a      	uxth	r2, r3
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d008:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4413      	add	r3, r2
 800d014:	881b      	ldrh	r3, [r3, #0]
 800d016:	847b      	strh	r3, [r7, #34]	; 0x22
 800d018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d01a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d01b      	beq.n	800d05a <USB_ActivateEndpoint+0x33a>
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4413      	add	r3, r2
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d038:	843b      	strh	r3, [r7, #32]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	441a      	add	r2, r3
 800d044:	8c3b      	ldrh	r3, [r7, #32]
 800d046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d04a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d04e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d056:	b29b      	uxth	r3, r3
 800d058:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	b29b      	uxth	r3, r3
 800d068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d06c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d070:	83fb      	strh	r3, [r7, #30]
 800d072:	8bfb      	ldrh	r3, [r7, #30]
 800d074:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d078:	83fb      	strh	r3, [r7, #30]
 800d07a:	8bfb      	ldrh	r3, [r7, #30]
 800d07c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d080:	83fb      	strh	r3, [r7, #30]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	441a      	add	r2, r3
 800d08c:	8bfb      	ldrh	r3, [r7, #30]
 800d08e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	8013      	strh	r3, [r2, #0]
 800d0a2:	e1c9      	b.n	800d438 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	78db      	ldrb	r3, [r3, #3]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d11e      	bne.n	800d0ea <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	881b      	ldrh	r3, [r3, #0]
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	441a      	add	r2, r3
 800d0d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d0d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	8013      	strh	r3, [r2, #0]
 800d0e8:	e01d      	b.n	800d126 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4413      	add	r3, r2
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d0fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d100:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	441a      	add	r2, r3
 800d10e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d11a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d122:	b29b      	uxth	r3, r3
 800d124:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d130:	b29b      	uxth	r3, r3
 800d132:	461a      	mov	r2, r3
 800d134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d136:	4413      	add	r3, r2
 800d138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	00da      	lsls	r2, r3, #3
 800d140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d142:	4413      	add	r3, r2
 800d144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d148:	65bb      	str	r3, [r7, #88]	; 0x58
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	891b      	ldrh	r3, [r3, #8]
 800d14e:	085b      	lsrs	r3, r3, #1
 800d150:	b29b      	uxth	r3, r3
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	b29a      	uxth	r2, r3
 800d156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d158:	801a      	strh	r2, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	657b      	str	r3, [r7, #84]	; 0x54
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d164:	b29b      	uxth	r3, r3
 800d166:	461a      	mov	r2, r3
 800d168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d16a:	4413      	add	r3, r2
 800d16c:	657b      	str	r3, [r7, #84]	; 0x54
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	00da      	lsls	r2, r3, #3
 800d174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d176:	4413      	add	r3, r2
 800d178:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d17c:	653b      	str	r3, [r7, #80]	; 0x50
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	895b      	ldrh	r3, [r3, #10]
 800d182:	085b      	lsrs	r3, r3, #1
 800d184:	b29b      	uxth	r3, r3
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	b29a      	uxth	r2, r3
 800d18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d18c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	785b      	ldrb	r3, [r3, #1]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 8093 	bne.w	800d2be <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	881b      	ldrh	r3, [r3, #0]
 800d1a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d1a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d1ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d01b      	beq.n	800d1ec <USB_ActivateEndpoint+0x4cc>
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	441a      	add	r2, r3
 800d1d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d1d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d1fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d200:	2b00      	cmp	r3, #0
 800d202:	d01b      	beq.n	800d23c <USB_ActivateEndpoint+0x51c>
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	b29b      	uxth	r3, r3
 800d212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	441a      	add	r2, r3
 800d226:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d22c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d234:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d238:	b29b      	uxth	r3, r3
 800d23a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	881b      	ldrh	r3, [r3, #0]
 800d248:	b29b      	uxth	r3, r3
 800d24a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d252:	873b      	strh	r3, [r7, #56]	; 0x38
 800d254:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d256:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d25a:	873b      	strh	r3, [r7, #56]	; 0x38
 800d25c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d25e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d262:	873b      	strh	r3, [r7, #56]	; 0x38
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	441a      	add	r2, r3
 800d26e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d280:	b29b      	uxth	r3, r3
 800d282:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	b29b      	uxth	r3, r3
 800d292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d29a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	441a      	add	r2, r3
 800d2a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d2a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	8013      	strh	r3, [r2, #0]
 800d2bc:	e0bc      	b.n	800d438 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d2ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d01d      	beq.n	800d316 <USB_ActivateEndpoint+0x5f6>
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	881b      	ldrh	r3, [r3, #0]
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	441a      	add	r2, r3
 800d2fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d30a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d312:	b29b      	uxth	r3, r3
 800d314:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d326:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01d      	beq.n	800d36e <USB_ActivateEndpoint+0x64e>
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	881b      	ldrh	r3, [r3, #0]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d348:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	441a      	add	r2, r3
 800d356:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d35a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d35e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d366:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	78db      	ldrb	r3, [r3, #3]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d024      	beq.n	800d3c0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	b29b      	uxth	r3, r3
 800d384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d38c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d390:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d394:	f083 0320 	eor.w	r3, r3, #32
 800d398:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	441a      	add	r2, r3
 800d3a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d3aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	8013      	strh	r3, [r2, #0]
 800d3be:	e01d      	b.n	800d3fc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	441a      	add	r2, r3
 800d3e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	b29b      	uxth	r3, r3
 800d40a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d40e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	441a      	add	r2, r3
 800d420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d42c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d434:	b29b      	uxth	r3, r3
 800d436:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d438:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3774      	adds	r7, #116	; 0x74
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d448:	b480      	push	{r7}
 800d44a:	b08d      	sub	sp, #52	; 0x34
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	7b1b      	ldrb	r3, [r3, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	f040 808e 	bne.w	800d578 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	785b      	ldrb	r3, [r3, #1]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d044      	beq.n	800d4ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	81bb      	strh	r3, [r7, #12]
 800d472:	89bb      	ldrh	r3, [r7, #12]
 800d474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d01b      	beq.n	800d4b4 <USB_DeactivateEndpoint+0x6c>
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d48e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d492:	817b      	strh	r3, [r7, #10]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	441a      	add	r2, r3
 800d49e:	897b      	ldrh	r3, [r7, #10]
 800d4a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4413      	add	r3, r2
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4ca:	813b      	strh	r3, [r7, #8]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	441a      	add	r2, r3
 800d4d6:	893b      	ldrh	r3, [r7, #8]
 800d4d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	8013      	strh	r3, [r2, #0]
 800d4ec:	e192      	b.n	800d814 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4413      	add	r3, r2
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	827b      	strh	r3, [r7, #18]
 800d4fc:	8a7b      	ldrh	r3, [r7, #18]
 800d4fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d502:	2b00      	cmp	r3, #0
 800d504:	d01b      	beq.n	800d53e <USB_DeactivateEndpoint+0xf6>
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4413      	add	r3, r2
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	b29b      	uxth	r3, r3
 800d514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d51c:	823b      	strh	r3, [r7, #16]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	441a      	add	r2, r3
 800d528:	8a3b      	ldrh	r3, [r7, #16]
 800d52a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d52e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4413      	add	r3, r2
 800d548:	881b      	ldrh	r3, [r3, #0]
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d554:	81fb      	strh	r3, [r7, #14]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	441a      	add	r2, r3
 800d560:	89fb      	ldrh	r3, [r7, #14]
 800d562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d56a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d572:	b29b      	uxth	r3, r3
 800d574:	8013      	strh	r3, [r2, #0]
 800d576:	e14d      	b.n	800d814 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	785b      	ldrb	r3, [r3, #1]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f040 80a5 	bne.w	800d6cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	843b      	strh	r3, [r7, #32]
 800d590:	8c3b      	ldrh	r3, [r7, #32]
 800d592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d596:	2b00      	cmp	r3, #0
 800d598:	d01b      	beq.n	800d5d2 <USB_DeactivateEndpoint+0x18a>
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5b0:	83fb      	strh	r3, [r7, #30]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	441a      	add	r2, r3
 800d5bc:	8bfb      	ldrh	r3, [r7, #30]
 800d5be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	83bb      	strh	r3, [r7, #28]
 800d5e0:	8bbb      	ldrh	r3, [r7, #28]
 800d5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01b      	beq.n	800d622 <USB_DeactivateEndpoint+0x1da>
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4413      	add	r3, r2
 800d5f4:	881b      	ldrh	r3, [r3, #0]
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d600:	837b      	strh	r3, [r7, #26]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	441a      	add	r2, r3
 800d60c:	8b7b      	ldrh	r3, [r7, #26]
 800d60e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d61a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d61e:	b29b      	uxth	r3, r3
 800d620:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	b29b      	uxth	r3, r3
 800d630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d638:	833b      	strh	r3, [r7, #24]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	441a      	add	r2, r3
 800d644:	8b3b      	ldrh	r3, [r7, #24]
 800d646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d64a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d64e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d656:	b29b      	uxth	r3, r3
 800d658:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	b29b      	uxth	r3, r3
 800d668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d66c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d670:	82fb      	strh	r3, [r7, #22]
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	441a      	add	r2, r3
 800d67c:	8afb      	ldrh	r3, [r7, #22]
 800d67e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d68a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d68e:	b29b      	uxth	r3, r3
 800d690:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6a8:	82bb      	strh	r3, [r7, #20]
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	441a      	add	r2, r3
 800d6b4:	8abb      	ldrh	r3, [r7, #20]
 800d6b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	8013      	strh	r3, [r2, #0]
 800d6ca:	e0a3      	b.n	800d814 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4413      	add	r3, r2
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d6da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d01b      	beq.n	800d71c <USB_DeactivateEndpoint+0x2d4>
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	441a      	add	r2, r3
 800d706:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d70c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d718:	b29b      	uxth	r3, r3
 800d71a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d72a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d730:	2b00      	cmp	r3, #0
 800d732:	d01b      	beq.n	800d76c <USB_DeactivateEndpoint+0x324>
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	4413      	add	r3, r2
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	b29b      	uxth	r3, r3
 800d742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d74a:	853b      	strh	r3, [r7, #40]	; 0x28
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	441a      	add	r2, r3
 800d756:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d75c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d768:	b29b      	uxth	r3, r3
 800d76a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	4413      	add	r3, r2
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	b29b      	uxth	r3, r3
 800d77a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d77e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d782:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	441a      	add	r2, r3
 800d78e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4413      	add	r3, r2
 800d7ae:	881b      	ldrh	r3, [r3, #0]
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	441a      	add	r2, r3
 800d7c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7f2:	847b      	strh	r3, [r7, #34]	; 0x22
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	441a      	add	r2, r3
 800d7fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d810:	b29b      	uxth	r3, r3
 800d812:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3734      	adds	r7, #52	; 0x34
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b0c2      	sub	sp, #264	; 0x108
 800d826:	af00      	add	r7, sp, #0
 800d828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d82c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d830:	6018      	str	r0, [r3, #0]
 800d832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d83a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	785b      	ldrb	r3, [r3, #1]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	f040 867b 	bne.w	800e544 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	699a      	ldr	r2, [r3, #24]
 800d85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	429a      	cmp	r2, r3
 800d868:	d908      	bls.n	800d87c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d86e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d87a:	e007      	b.n	800d88c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d87c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	7b1b      	ldrb	r3, [r3, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d13a      	bne.n	800d912 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6959      	ldr	r1, [r3, #20]
 800d8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	88da      	ldrh	r2, [r3, #6]
 800d8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d8be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d8c2:	6800      	ldr	r0, [r0, #0]
 800d8c4:	f001 fc1d 	bl	800f102 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	613b      	str	r3, [r7, #16]
 800d8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	613b      	str	r3, [r7, #16]
 800d8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	00da      	lsls	r2, r3, #3
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d908:	b29a      	uxth	r2, r3
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	801a      	strh	r2, [r3, #0]
 800d90e:	f000 bde3 	b.w	800e4d8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	78db      	ldrb	r3, [r3, #3]
 800d91e:	2b02      	cmp	r3, #2
 800d920:	f040 843a 	bne.w	800e198 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6a1a      	ldr	r2, [r3, #32]
 800d930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	f240 83b7 	bls.w	800e0b0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	b29b      	uxth	r3, r3
 800d960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d968:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800d96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d97a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	441a      	add	r2, r3
 800d986:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d98a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d98e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d992:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6a1a      	ldr	r2, [r3, #32]
 800d9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ae:	1ad2      	subs	r2, r2, r3
 800d9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f000 81b3 	beq.w	800dd4a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	633b      	str	r3, [r7, #48]	; 0x30
 800d9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	785b      	ldrb	r3, [r3, #1]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d16d      	bne.n	800dadc <USB_EPStartXfer+0x2ba>
 800da00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800da0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	461a      	mov	r2, r3
 800da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da20:	4413      	add	r3, r2
 800da22:	62bb      	str	r3, [r7, #40]	; 0x28
 800da24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	00da      	lsls	r2, r3, #3
 800da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da34:	4413      	add	r3, r2
 800da36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800da3a:	627b      	str	r3, [r7, #36]	; 0x24
 800da3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da40:	2b3e      	cmp	r3, #62	; 0x3e
 800da42:	d91c      	bls.n	800da7e <USB_EPStartXfer+0x25c>
 800da44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da48:	095b      	lsrs	r3, r3, #5
 800da4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800da4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da52:	f003 031f 	and.w	r3, r3, #31
 800da56:	2b00      	cmp	r3, #0
 800da58:	d104      	bne.n	800da64 <USB_EPStartXfer+0x242>
 800da5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800da5e:	3b01      	subs	r3, #1
 800da60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800da64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800da68:	b29b      	uxth	r3, r3
 800da6a:	029b      	lsls	r3, r3, #10
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da76:	b29a      	uxth	r2, r3
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	801a      	strh	r2, [r3, #0]
 800da7c:	e053      	b.n	800db26 <USB_EPStartXfer+0x304>
 800da7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da82:	2b00      	cmp	r3, #0
 800da84:	d112      	bne.n	800daac <USB_EPStartXfer+0x28a>
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800da90:	b29a      	uxth	r2, r3
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	801a      	strh	r2, [r3, #0]
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	801a      	strh	r2, [r3, #0]
 800daaa:	e03c      	b.n	800db26 <USB_EPStartXfer+0x304>
 800daac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dab0:	085b      	lsrs	r3, r3, #1
 800dab2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d004      	beq.n	800dacc <USB_EPStartXfer+0x2aa>
 800dac2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dac6:	3301      	adds	r3, #1
 800dac8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dacc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	029b      	lsls	r3, r3, #10
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad8:	801a      	strh	r2, [r3, #0]
 800dada:	e024      	b.n	800db26 <USB_EPStartXfer+0x304>
 800dadc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	785b      	ldrb	r3, [r3, #1]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d11c      	bne.n	800db26 <USB_EPStartXfer+0x304>
 800daec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	461a      	mov	r2, r3
 800dafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db00:	4413      	add	r3, r2
 800db02:	633b      	str	r3, [r7, #48]	; 0x30
 800db04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	00da      	lsls	r2, r3, #3
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	4413      	add	r3, r2
 800db16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800db1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db20:	b29a      	uxth	r2, r3
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800db26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	895b      	ldrh	r3, [r3, #10]
 800db32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	6959      	ldr	r1, [r3, #20]
 800db42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db46:	b29b      	uxth	r3, r3
 800db48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800db4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800db50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800db54:	6800      	ldr	r0, [r0, #0]
 800db56:	f001 fad4 	bl	800f102 <USB_WritePMA>
            ep->xfer_buff += len;
 800db5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	695a      	ldr	r2, [r3, #20]
 800db66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db6a:	441a      	add	r2, r3
 800db6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800db78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	6a1a      	ldr	r2, [r3, #32]
 800db84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	429a      	cmp	r2, r3
 800db92:	d90f      	bls.n	800dbb4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800db94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	6a1a      	ldr	r2, [r3, #32]
 800dba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dba4:	1ad2      	subs	r2, r2, r3
 800dba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	621a      	str	r2, [r3, #32]
 800dbb2:	e00e      	b.n	800dbd2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800dbb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6a1b      	ldr	r3, [r3, #32]
 800dbc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800dbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dbd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	785b      	ldrb	r3, [r3, #1]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d16d      	bne.n	800dcbe <USB_EPStartXfer+0x49c>
 800dbe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	461a      	mov	r2, r3
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	4413      	add	r3, r2
 800dc04:	61bb      	str	r3, [r7, #24]
 800dc06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	00da      	lsls	r2, r3, #3
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	4413      	add	r3, r2
 800dc18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dc1c:	617b      	str	r3, [r7, #20]
 800dc1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc22:	2b3e      	cmp	r3, #62	; 0x3e
 800dc24:	d91c      	bls.n	800dc60 <USB_EPStartXfer+0x43e>
 800dc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc2a:	095b      	lsrs	r3, r3, #5
 800dc2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc34:	f003 031f 	and.w	r3, r3, #31
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d104      	bne.n	800dc46 <USB_EPStartXfer+0x424>
 800dc3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc40:	3b01      	subs	r3, #1
 800dc42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dc46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	029b      	lsls	r3, r3, #10
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	801a      	strh	r2, [r3, #0]
 800dc5e:	e059      	b.n	800dd14 <USB_EPStartXfer+0x4f2>
 800dc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d112      	bne.n	800dc8e <USB_EPStartXfer+0x46c>
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	881b      	ldrh	r3, [r3, #0]
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	801a      	strh	r2, [r3, #0]
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	801a      	strh	r2, [r3, #0]
 800dc8c:	e042      	b.n	800dd14 <USB_EPStartXfer+0x4f2>
 800dc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc92:	085b      	lsrs	r3, r3, #1
 800dc94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc9c:	f003 0301 	and.w	r3, r3, #1
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d004      	beq.n	800dcae <USB_EPStartXfer+0x48c>
 800dca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dca8:	3301      	adds	r3, #1
 800dcaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dcae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	029b      	lsls	r3, r3, #10
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	801a      	strh	r2, [r3, #0]
 800dcbc:	e02a      	b.n	800dd14 <USB_EPStartXfer+0x4f2>
 800dcbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	785b      	ldrb	r3, [r3, #1]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d122      	bne.n	800dd14 <USB_EPStartXfer+0x4f2>
 800dcce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	623b      	str	r3, [r7, #32]
 800dcda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	461a      	mov	r2, r3
 800dcec:	6a3b      	ldr	r3, [r7, #32]
 800dcee:	4413      	add	r3, r2
 800dcf0:	623b      	str	r3, [r7, #32]
 800dcf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	00da      	lsls	r2, r3, #3
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	4413      	add	r3, r2
 800dd04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dd08:	61fb      	str	r3, [r7, #28]
 800dd0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	891b      	ldrh	r3, [r3, #8]
 800dd20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6959      	ldr	r1, [r3, #20]
 800dd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dd3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dd3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dd42:	6800      	ldr	r0, [r0, #0]
 800dd44:	f001 f9dd 	bl	800f102 <USB_WritePMA>
 800dd48:	e3c6      	b.n	800e4d8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	785b      	ldrb	r3, [r3, #1]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d16d      	bne.n	800de36 <USB_EPStartXfer+0x614>
 800dd5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	461a      	mov	r2, r3
 800dd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd7a:	4413      	add	r3, r2
 800dd7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	00da      	lsls	r2, r3, #3
 800dd8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd8e:	4413      	add	r3, r2
 800dd90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dd94:	647b      	str	r3, [r7, #68]	; 0x44
 800dd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd9a:	2b3e      	cmp	r3, #62	; 0x3e
 800dd9c:	d91c      	bls.n	800ddd8 <USB_EPStartXfer+0x5b6>
 800dd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dda2:	095b      	lsrs	r3, r3, #5
 800dda4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddac:	f003 031f 	and.w	r3, r3, #31
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d104      	bne.n	800ddbe <USB_EPStartXfer+0x59c>
 800ddb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ddbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	029b      	lsls	r3, r3, #10
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddd4:	801a      	strh	r2, [r3, #0]
 800ddd6:	e059      	b.n	800de8c <USB_EPStartXfer+0x66a>
 800ddd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d112      	bne.n	800de06 <USB_EPStartXfer+0x5e4>
 800dde0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddee:	801a      	strh	r2, [r3, #0]
 800ddf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddf2:	881b      	ldrh	r3, [r3, #0]
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de02:	801a      	strh	r2, [r3, #0]
 800de04:	e042      	b.n	800de8c <USB_EPStartXfer+0x66a>
 800de06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de0a:	085b      	lsrs	r3, r3, #1
 800de0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800de10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <USB_EPStartXfer+0x604>
 800de1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800de20:	3301      	adds	r3, #1
 800de22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800de26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	029b      	lsls	r3, r3, #10
 800de2e:	b29a      	uxth	r2, r3
 800de30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de32:	801a      	strh	r2, [r3, #0]
 800de34:	e02a      	b.n	800de8c <USB_EPStartXfer+0x66a>
 800de36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	785b      	ldrb	r3, [r3, #1]
 800de42:	2b01      	cmp	r3, #1
 800de44:	d122      	bne.n	800de8c <USB_EPStartXfer+0x66a>
 800de46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	653b      	str	r3, [r7, #80]	; 0x50
 800de52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de60:	b29b      	uxth	r3, r3
 800de62:	461a      	mov	r2, r3
 800de64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de66:	4413      	add	r3, r2
 800de68:	653b      	str	r3, [r7, #80]	; 0x50
 800de6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	00da      	lsls	r2, r3, #3
 800de78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de7a:	4413      	add	r3, r2
 800de7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800de80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de86:	b29a      	uxth	r2, r3
 800de88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800de8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	891b      	ldrh	r3, [r3, #8]
 800de98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6959      	ldr	r1, [r3, #20]
 800dea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deac:	b29b      	uxth	r3, r3
 800deae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800deb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800deb6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800deba:	6800      	ldr	r0, [r0, #0]
 800debc:	f001 f921 	bl	800f102 <USB_WritePMA>
            ep->xfer_buff += len;
 800dec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	695a      	ldr	r2, [r3, #20]
 800decc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ded0:	441a      	add	r2, r3
 800ded2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ded6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6a1a      	ldr	r2, [r3, #32]
 800deea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	429a      	cmp	r2, r3
 800def8:	d90f      	bls.n	800df1a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800defa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800defe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6a1a      	ldr	r2, [r3, #32]
 800df06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df0a:	1ad2      	subs	r2, r2, r3
 800df0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	621a      	str	r2, [r3, #32]
 800df18:	e00e      	b.n	800df38 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800df1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800df2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2200      	movs	r2, #0
 800df36:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800df38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	643b      	str	r3, [r7, #64]	; 0x40
 800df44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	785b      	ldrb	r3, [r3, #1]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d16d      	bne.n	800e030 <USB_EPStartXfer+0x80e>
 800df54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800df60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df6e:	b29b      	uxth	r3, r3
 800df70:	461a      	mov	r2, r3
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	4413      	add	r3, r2
 800df76:	63bb      	str	r3, [r7, #56]	; 0x38
 800df78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	00da      	lsls	r2, r3, #3
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	4413      	add	r3, r2
 800df8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800df8e:	637b      	str	r3, [r7, #52]	; 0x34
 800df90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df94:	2b3e      	cmp	r3, #62	; 0x3e
 800df96:	d91c      	bls.n	800dfd2 <USB_EPStartXfer+0x7b0>
 800df98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df9c:	095b      	lsrs	r3, r3, #5
 800df9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dfa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfa6:	f003 031f 	and.w	r3, r3, #31
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d104      	bne.n	800dfb8 <USB_EPStartXfer+0x796>
 800dfae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dfb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	029b      	lsls	r3, r3, #10
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfce:	801a      	strh	r2, [r3, #0]
 800dfd0:	e053      	b.n	800e07a <USB_EPStartXfer+0x858>
 800dfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d112      	bne.n	800e000 <USB_EPStartXfer+0x7de>
 800dfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfe8:	801a      	strh	r2, [r3, #0]
 800dfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfec:	881b      	ldrh	r3, [r3, #0]
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dffc:	801a      	strh	r2, [r3, #0]
 800dffe:	e03c      	b.n	800e07a <USB_EPStartXfer+0x858>
 800e000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e004:	085b      	lsrs	r3, r3, #1
 800e006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e00e:	f003 0301 	and.w	r3, r3, #1
 800e012:	2b00      	cmp	r3, #0
 800e014:	d004      	beq.n	800e020 <USB_EPStartXfer+0x7fe>
 800e016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e01a:	3301      	adds	r3, #1
 800e01c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e024:	b29b      	uxth	r3, r3
 800e026:	029b      	lsls	r3, r3, #10
 800e028:	b29a      	uxth	r2, r3
 800e02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02c:	801a      	strh	r2, [r3, #0]
 800e02e:	e024      	b.n	800e07a <USB_EPStartXfer+0x858>
 800e030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	785b      	ldrb	r3, [r3, #1]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d11c      	bne.n	800e07a <USB_EPStartXfer+0x858>
 800e040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e04e:	b29b      	uxth	r3, r3
 800e050:	461a      	mov	r2, r3
 800e052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e054:	4413      	add	r3, r2
 800e056:	643b      	str	r3, [r7, #64]	; 0x40
 800e058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	00da      	lsls	r2, r3, #3
 800e066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e068:	4413      	add	r3, r2
 800e06a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e074:	b29a      	uxth	r2, r3
 800e076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e078:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e07e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	895b      	ldrh	r3, [r3, #10]
 800e086:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6959      	ldr	r1, [r3, #20]
 800e096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e0a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e0a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e0a8:	6800      	ldr	r0, [r0, #0]
 800e0aa:	f001 f82a 	bl	800f102 <USB_WritePMA>
 800e0ae:	e213      	b.n	800e4d8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6a1b      	ldr	r3, [r3, #32]
 800e0bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	881b      	ldrh	r3, [r3, #0]
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	441a      	add	r2, r3
 800e104:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e10c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e118:	b29b      	uxth	r3, r3
 800e11a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e12c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e136:	b29b      	uxth	r3, r3
 800e138:	461a      	mov	r2, r3
 800e13a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e13c:	4413      	add	r3, r2
 800e13e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	00da      	lsls	r2, r3, #3
 800e14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e150:	4413      	add	r3, r2
 800e152:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e156:	65bb      	str	r3, [r7, #88]	; 0x58
 800e158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e160:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	891b      	ldrh	r3, [r3, #8]
 800e16e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	6959      	ldr	r1, [r3, #20]
 800e17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e182:	b29b      	uxth	r3, r3
 800e184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e188:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e18c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e190:	6800      	ldr	r0, [r0, #0]
 800e192:	f000 ffb6 	bl	800f102 <USB_WritePMA>
 800e196:	e19f      	b.n	800e4d8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	6a1a      	ldr	r2, [r3, #32]
 800e1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1a8:	1ad2      	subs	r2, r2, r3
 800e1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4413      	add	r3, r2
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f000 80bc 	beq.w	800e356 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	673b      	str	r3, [r7, #112]	; 0x70
 800e1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	785b      	ldrb	r3, [r3, #1]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d16d      	bne.n	800e2d6 <USB_EPStartXfer+0xab4>
 800e1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	66bb      	str	r3, [r7, #104]	; 0x68
 800e206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e20a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e214:	b29b      	uxth	r3, r3
 800e216:	461a      	mov	r2, r3
 800e218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e21a:	4413      	add	r3, r2
 800e21c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	00da      	lsls	r2, r3, #3
 800e22c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e22e:	4413      	add	r3, r2
 800e230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e234:	667b      	str	r3, [r7, #100]	; 0x64
 800e236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e23a:	2b3e      	cmp	r3, #62	; 0x3e
 800e23c:	d91c      	bls.n	800e278 <USB_EPStartXfer+0xa56>
 800e23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e242:	095b      	lsrs	r3, r3, #5
 800e244:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e24c:	f003 031f 	and.w	r3, r3, #31
 800e250:	2b00      	cmp	r3, #0
 800e252:	d104      	bne.n	800e25e <USB_EPStartXfer+0xa3c>
 800e254:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e258:	3b01      	subs	r3, #1
 800e25a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e25e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e262:	b29b      	uxth	r3, r3
 800e264:	029b      	lsls	r3, r3, #10
 800e266:	b29b      	uxth	r3, r3
 800e268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e26c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e270:	b29a      	uxth	r2, r3
 800e272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e274:	801a      	strh	r2, [r3, #0]
 800e276:	e053      	b.n	800e320 <USB_EPStartXfer+0xafe>
 800e278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d112      	bne.n	800e2a6 <USB_EPStartXfer+0xa84>
 800e280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	b29b      	uxth	r3, r3
 800e286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e28e:	801a      	strh	r2, [r3, #0]
 800e290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	b29b      	uxth	r3, r3
 800e296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e29a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2a2:	801a      	strh	r2, [r3, #0]
 800e2a4:	e03c      	b.n	800e320 <USB_EPStartXfer+0xafe>
 800e2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2aa:	085b      	lsrs	r3, r3, #1
 800e2ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d004      	beq.n	800e2c6 <USB_EPStartXfer+0xaa4>
 800e2bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e2c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	029b      	lsls	r3, r3, #10
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2d2:	801a      	strh	r2, [r3, #0]
 800e2d4:	e024      	b.n	800e320 <USB_EPStartXfer+0xafe>
 800e2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	785b      	ldrb	r3, [r3, #1]
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d11c      	bne.n	800e320 <USB_EPStartXfer+0xafe>
 800e2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2fa:	4413      	add	r3, r2
 800e2fc:	673b      	str	r3, [r7, #112]	; 0x70
 800e2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	00da      	lsls	r2, r3, #3
 800e30c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e30e:	4413      	add	r3, r2
 800e310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e314:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e31e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	895b      	ldrh	r3, [r3, #10]
 800e32c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	6959      	ldr	r1, [r3, #20]
 800e33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e340:	b29b      	uxth	r3, r3
 800e342:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e346:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e34a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e34e:	6800      	ldr	r0, [r0, #0]
 800e350:	f000 fed7 	bl	800f102 <USB_WritePMA>
 800e354:	e0c0      	b.n	800e4d8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e35a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	785b      	ldrb	r3, [r3, #1]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d16d      	bne.n	800e442 <USB_EPStartXfer+0xc20>
 800e366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e36a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e380:	b29b      	uxth	r3, r3
 800e382:	461a      	mov	r2, r3
 800e384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e386:	4413      	add	r3, r2
 800e388:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e38e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	00da      	lsls	r2, r3, #3
 800e398:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e39a:	4413      	add	r3, r2
 800e39c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e3a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800e3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3a6:	2b3e      	cmp	r3, #62	; 0x3e
 800e3a8:	d91c      	bls.n	800e3e4 <USB_EPStartXfer+0xbc2>
 800e3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3ae:	095b      	lsrs	r3, r3, #5
 800e3b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3b8:	f003 031f 	and.w	r3, r3, #31
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d104      	bne.n	800e3ca <USB_EPStartXfer+0xba8>
 800e3c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e3ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	029b      	lsls	r3, r3, #10
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3e0:	801a      	strh	r2, [r3, #0]
 800e3e2:	e05f      	b.n	800e4a4 <USB_EPStartXfer+0xc82>
 800e3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d112      	bne.n	800e412 <USB_EPStartXfer+0xbf0>
 800e3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ee:	881b      	ldrh	r3, [r3, #0]
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3fa:	801a      	strh	r2, [r3, #0]
 800e3fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3fe:	881b      	ldrh	r3, [r3, #0]
 800e400:	b29b      	uxth	r3, r3
 800e402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e40e:	801a      	strh	r2, [r3, #0]
 800e410:	e048      	b.n	800e4a4 <USB_EPStartXfer+0xc82>
 800e412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e416:	085b      	lsrs	r3, r3, #1
 800e418:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e420:	f003 0301 	and.w	r3, r3, #1
 800e424:	2b00      	cmp	r3, #0
 800e426:	d004      	beq.n	800e432 <USB_EPStartXfer+0xc10>
 800e428:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e42c:	3301      	adds	r3, #1
 800e42e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e432:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e436:	b29b      	uxth	r3, r3
 800e438:	029b      	lsls	r3, r3, #10
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e43e:	801a      	strh	r2, [r3, #0]
 800e440:	e030      	b.n	800e4a4 <USB_EPStartXfer+0xc82>
 800e442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	785b      	ldrb	r3, [r3, #1]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d128      	bne.n	800e4a4 <USB_EPStartXfer+0xc82>
 800e452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e46e:	b29b      	uxth	r3, r3
 800e470:	461a      	mov	r2, r3
 800e472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e476:	4413      	add	r3, r2
 800e478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	00da      	lsls	r2, r3, #3
 800e48a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e48e:	4413      	add	r3, r2
 800e490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	891b      	ldrh	r3, [r3, #8]
 800e4b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6959      	ldr	r1, [r3, #20]
 800e4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e4ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e4ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e4d2:	6800      	ldr	r0, [r0, #0]
 800e4d4:	f000 fe15 	bl	800f102 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	881b      	ldrh	r3, [r3, #0]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4fe:	817b      	strh	r3, [r7, #10]
 800e500:	897b      	ldrh	r3, [r7, #10]
 800e502:	f083 0310 	eor.w	r3, r3, #16
 800e506:	817b      	strh	r3, [r7, #10]
 800e508:	897b      	ldrh	r3, [r7, #10]
 800e50a:	f083 0320 	eor.w	r3, r3, #32
 800e50e:	817b      	strh	r3, [r7, #10]
 800e510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	441a      	add	r2, r3
 800e52a:	897b      	ldrh	r3, [r7, #10]
 800e52c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	8013      	strh	r3, [r2, #0]
 800e540:	f000 bc9f 	b.w	800ee82 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	7b1b      	ldrb	r3, [r3, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	f040 80ae 	bne.w	800e6b2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e55a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	699a      	ldr	r2, [r3, #24]
 800e562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	691b      	ldr	r3, [r3, #16]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d917      	bls.n	800e5a2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800e572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800e582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	699a      	ldr	r2, [r3, #24]
 800e58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e592:	1ad2      	subs	r2, r2, r3
 800e594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	619a      	str	r2, [r3, #24]
 800e5a0:	e00e      	b.n	800e5c0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800e5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	699b      	ldr	r3, [r3, #24]
 800e5ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800e5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	461a      	mov	r2, r3
 800e5e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e5e4:	4413      	add	r3, r2
 800e5e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	00da      	lsls	r2, r3, #3
 800e5f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e60a:	2b3e      	cmp	r3, #62	; 0x3e
 800e60c:	d91d      	bls.n	800e64a <USB_EPStartXfer+0xe28>
 800e60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e612:	095b      	lsrs	r3, r3, #5
 800e614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e61c:	f003 031f 	and.w	r3, r3, #31
 800e620:	2b00      	cmp	r3, #0
 800e622:	d104      	bne.n	800e62e <USB_EPStartXfer+0xe0c>
 800e624:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e628:	3b01      	subs	r3, #1
 800e62a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e62e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e632:	b29b      	uxth	r3, r3
 800e634:	029b      	lsls	r3, r3, #10
 800e636:	b29b      	uxth	r3, r3
 800e638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e63c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e640:	b29a      	uxth	r2, r3
 800e642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e646:	801a      	strh	r2, [r3, #0]
 800e648:	e3e1      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
 800e64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d116      	bne.n	800e680 <USB_EPStartXfer+0xe5e>
 800e652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	b29b      	uxth	r3, r3
 800e65a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e65e:	b29a      	uxth	r2, r3
 800e660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e664:	801a      	strh	r2, [r3, #0]
 800e666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e676:	b29a      	uxth	r2, r3
 800e678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e67c:	801a      	strh	r2, [r3, #0]
 800e67e:	e3c6      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
 800e680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e684:	085b      	lsrs	r3, r3, #1
 800e686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e68e:	f003 0301 	and.w	r3, r3, #1
 800e692:	2b00      	cmp	r3, #0
 800e694:	d004      	beq.n	800e6a0 <USB_EPStartXfer+0xe7e>
 800e696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e69a:	3301      	adds	r3, #1
 800e69c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e6a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	029b      	lsls	r3, r3, #10
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6ae:	801a      	strh	r2, [r3, #0]
 800e6b0:	e3ad      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	78db      	ldrb	r3, [r3, #3]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	f040 8200 	bne.w	800eac4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	785b      	ldrb	r3, [r3, #1]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f040 8091 	bne.w	800e7f8 <USB_EPStartXfer+0xfd6>
 800e6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	00da      	lsls	r2, r3, #3
 800e70e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e712:	4413      	add	r3, r2
 800e714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	2b3e      	cmp	r3, #62	; 0x3e
 800e72a:	d925      	bls.n	800e778 <USB_EPStartXfer+0xf56>
 800e72c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	095b      	lsrs	r3, r3, #5
 800e73a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e73e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	691b      	ldr	r3, [r3, #16]
 800e74a:	f003 031f 	and.w	r3, r3, #31
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d104      	bne.n	800e75c <USB_EPStartXfer+0xf3a>
 800e752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e756:	3b01      	subs	r3, #1
 800e758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e760:	b29b      	uxth	r3, r3
 800e762:	029b      	lsls	r3, r3, #10
 800e764:	b29b      	uxth	r3, r3
 800e766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e76a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e76e:	b29a      	uxth	r2, r3
 800e770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e774:	801a      	strh	r2, [r3, #0]
 800e776:	e074      	b.n	800e862 <USB_EPStartXfer+0x1040>
 800e778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d116      	bne.n	800e7b6 <USB_EPStartXfer+0xf94>
 800e788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	b29b      	uxth	r3, r3
 800e790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e794:	b29a      	uxth	r2, r3
 800e796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e79a:	801a      	strh	r2, [r3, #0]
 800e79c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e7a0:	881b      	ldrh	r3, [r3, #0]
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e7b2:	801a      	strh	r2, [r3, #0]
 800e7b4:	e055      	b.n	800e862 <USB_EPStartXfer+0x1040>
 800e7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	085b      	lsrs	r3, r3, #1
 800e7c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	f003 0301 	and.w	r3, r3, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d004      	beq.n	800e7e6 <USB_EPStartXfer+0xfc4>
 800e7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	029b      	lsls	r3, r3, #10
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e7f4:	801a      	strh	r2, [r3, #0]
 800e7f6:	e034      	b.n	800e862 <USB_EPStartXfer+0x1040>
 800e7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	785b      	ldrb	r3, [r3, #1]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d12c      	bne.n	800e862 <USB_EPStartXfer+0x1040>
 800e808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e80c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e81a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e824:	b29b      	uxth	r3, r3
 800e826:	461a      	mov	r2, r3
 800e828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e82c:	4413      	add	r3, r2
 800e82e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	00da      	lsls	r2, r3, #3
 800e840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e844:	4413      	add	r3, r2
 800e846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e84a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	b29a      	uxth	r2, r3
 800e85c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e860:	801a      	strh	r2, [r3, #0]
 800e862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	785b      	ldrb	r3, [r3, #1]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f040 8091 	bne.w	800e9a4 <USB_EPStartXfer+0x1182>
 800e882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	00da      	lsls	r2, r3, #3
 800e8ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e8be:	4413      	add	r3, r2
 800e8c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e8c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	2b3e      	cmp	r3, #62	; 0x3e
 800e8d6:	d925      	bls.n	800e924 <USB_EPStartXfer+0x1102>
 800e8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	095b      	lsrs	r3, r3, #5
 800e8e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	691b      	ldr	r3, [r3, #16]
 800e8f6:	f003 031f 	and.w	r3, r3, #31
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d104      	bne.n	800e908 <USB_EPStartXfer+0x10e6>
 800e8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e902:	3b01      	subs	r3, #1
 800e904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	029b      	lsls	r3, r3, #10
 800e910:	b29b      	uxth	r3, r3
 800e912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e920:	801a      	strh	r2, [r3, #0]
 800e922:	e06d      	b.n	800ea00 <USB_EPStartXfer+0x11de>
 800e924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d116      	bne.n	800e962 <USB_EPStartXfer+0x1140>
 800e934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e940:	b29a      	uxth	r2, r3
 800e942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e946:	801a      	strh	r2, [r3, #0]
 800e948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	b29b      	uxth	r3, r3
 800e950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e958:	b29a      	uxth	r2, r3
 800e95a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e95e:	801a      	strh	r2, [r3, #0]
 800e960:	e04e      	b.n	800ea00 <USB_EPStartXfer+0x11de>
 800e962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	085b      	lsrs	r3, r3, #1
 800e970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	2b00      	cmp	r3, #0
 800e986:	d004      	beq.n	800e992 <USB_EPStartXfer+0x1170>
 800e988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e98c:	3301      	adds	r3, #1
 800e98e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e996:	b29b      	uxth	r3, r3
 800e998:	029b      	lsls	r3, r3, #10
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e9a0:	801a      	strh	r2, [r3, #0]
 800e9a2:	e02d      	b.n	800ea00 <USB_EPStartXfer+0x11de>
 800e9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	785b      	ldrb	r3, [r3, #1]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d125      	bne.n	800ea00 <USB_EPStartXfer+0x11de>
 800e9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	00da      	lsls	r2, r3, #3
 800e9de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e9e2:	4413      	add	r3, r2
 800e9e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e9e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e9fe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ea00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	69db      	ldr	r3, [r3, #28]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f000 81fe 	beq.w	800ee0e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ea12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	4413      	add	r3, r2
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ea32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ea36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d005      	beq.n	800ea4a <USB_EPStartXfer+0x1228>
 800ea3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ea42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d10d      	bne.n	800ea66 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ea4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ea4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f040 81db 	bne.w	800ee0e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ea58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ea5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f040 81d4 	bne.w	800ee0e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ea66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	4413      	add	r3, r2
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea8c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ea90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	441a      	add	r2, r3
 800eaaa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800eaae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eaba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	8013      	strh	r3, [r2, #0]
 800eac2:	e1a4      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800eac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	78db      	ldrb	r3, [r3, #3]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	f040 819a 	bne.w	800ee0a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ead6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	699a      	ldr	r2, [r3, #24]
 800eae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d917      	bls.n	800eb22 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800eaf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800eb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	699a      	ldr	r2, [r3, #24]
 800eb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb12:	1ad2      	subs	r2, r2, r3
 800eb14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	619a      	str	r2, [r3, #24]
 800eb20:	e00e      	b.n	800eb40 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800eb22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800eb32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800eb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	785b      	ldrb	r3, [r3, #1]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d178      	bne.n	800ec42 <USB_EPStartXfer+0x1420>
 800eb50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eb5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	461a      	mov	r2, r3
 800eb70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eb74:	4413      	add	r3, r2
 800eb76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eb7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	00da      	lsls	r2, r3, #3
 800eb88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eb8c:	4413      	add	r3, r2
 800eb8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eb92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb9a:	2b3e      	cmp	r3, #62	; 0x3e
 800eb9c:	d91d      	bls.n	800ebda <USB_EPStartXfer+0x13b8>
 800eb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eba2:	095b      	lsrs	r3, r3, #5
 800eba4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebac:	f003 031f 	and.w	r3, r3, #31
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d104      	bne.n	800ebbe <USB_EPStartXfer+0x139c>
 800ebb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebb8:	3b01      	subs	r3, #1
 800ebba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ebbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	029b      	lsls	r3, r3, #10
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebd6:	801a      	strh	r2, [r3, #0]
 800ebd8:	e064      	b.n	800eca4 <USB_EPStartXfer+0x1482>
 800ebda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d116      	bne.n	800ec10 <USB_EPStartXfer+0x13ee>
 800ebe2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebf4:	801a      	strh	r2, [r3, #0]
 800ebf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ec0c:	801a      	strh	r2, [r3, #0]
 800ec0e:	e049      	b.n	800eca4 <USB_EPStartXfer+0x1482>
 800ec10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec14:	085b      	lsrs	r3, r3, #1
 800ec16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ec1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d004      	beq.n	800ec30 <USB_EPStartXfer+0x140e>
 800ec26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ec30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	029b      	lsls	r3, r3, #10
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ec3e:	801a      	strh	r2, [r3, #0]
 800ec40:	e030      	b.n	800eca4 <USB_EPStartXfer+0x1482>
 800ec42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	785b      	ldrb	r3, [r3, #1]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d128      	bne.n	800eca4 <USB_EPStartXfer+0x1482>
 800ec52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ec60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	461a      	mov	r2, r3
 800ec72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec76:	4413      	add	r3, r2
 800ec78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ec7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	00da      	lsls	r2, r3, #3
 800ec8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec8e:	4413      	add	r3, r2
 800ec90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ec94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ec98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eca2:	801a      	strh	r2, [r3, #0]
 800eca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ecb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	785b      	ldrb	r3, [r3, #1]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d178      	bne.n	800edb4 <USB_EPStartXfer+0x1592>
 800ecc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ecd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	461a      	mov	r2, r3
 800ece2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ece6:	4413      	add	r3, r2
 800ece8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ecec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	00da      	lsls	r2, r3, #3
 800ecfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ecfe:	4413      	add	r3, r2
 800ed00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ed04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ed08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed0c:	2b3e      	cmp	r3, #62	; 0x3e
 800ed0e:	d91d      	bls.n	800ed4c <USB_EPStartXfer+0x152a>
 800ed10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed14:	095b      	lsrs	r3, r3, #5
 800ed16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ed1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed1e:	f003 031f 	and.w	r3, r3, #31
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d104      	bne.n	800ed30 <USB_EPStartXfer+0x150e>
 800ed26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ed30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	029b      	lsls	r3, r3, #10
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ed48:	801a      	strh	r2, [r3, #0]
 800ed4a:	e060      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
 800ed4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d116      	bne.n	800ed82 <USB_EPStartXfer+0x1560>
 800ed54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ed58:	881b      	ldrh	r3, [r3, #0]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ed66:	801a      	strh	r2, [r3, #0]
 800ed68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ed7e:	801a      	strh	r2, [r3, #0]
 800ed80:	e045      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
 800ed82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed86:	085b      	lsrs	r3, r3, #1
 800ed88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ed8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d004      	beq.n	800eda2 <USB_EPStartXfer+0x1580>
 800ed98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eda2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	029b      	lsls	r3, r3, #10
 800edaa:	b29a      	uxth	r2, r3
 800edac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800edb0:	801a      	strh	r2, [r3, #0]
 800edb2:	e02c      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
 800edb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	785b      	ldrb	r3, [r3, #1]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d124      	bne.n	800ee0e <USB_EPStartXfer+0x15ec>
 800edc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	461a      	mov	r2, r3
 800edd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800edda:	4413      	add	r3, r2
 800eddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ede0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ede4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	00da      	lsls	r2, r3, #3
 800edee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800edf2:	4413      	add	r3, r2
 800edf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800edf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800edfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ee06:	801a      	strh	r2, [r3, #0]
 800ee08:	e001      	b.n	800ee0e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e03a      	b.n	800ee84 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ee0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	4413      	add	r3, r2
 800ee28:	881b      	ldrh	r3, [r3, #0]
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ee38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ee3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ee40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ee44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ee48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ee4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ee50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	441a      	add	r2, r3
 800ee6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ee6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ee82:	2300      	movs	r3, #0
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ee8e:	b480      	push	{r7}
 800ee90:	b085      	sub	sp, #20
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	785b      	ldrb	r3, [r3, #1]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d020      	beq.n	800eee2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	4413      	add	r3, r2
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eeb6:	81bb      	strh	r3, [r7, #12]
 800eeb8:	89bb      	ldrh	r3, [r7, #12]
 800eeba:	f083 0310 	eor.w	r3, r3, #16
 800eebe:	81bb      	strh	r3, [r7, #12]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	441a      	add	r2, r3
 800eeca:	89bb      	ldrh	r3, [r7, #12]
 800eecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eedc:	b29b      	uxth	r3, r3
 800eede:	8013      	strh	r3, [r2, #0]
 800eee0:	e01f      	b.n	800ef22 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	881b      	ldrh	r3, [r3, #0]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eef8:	81fb      	strh	r3, [r7, #14]
 800eefa:	89fb      	ldrh	r3, [r7, #14]
 800eefc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ef00:	81fb      	strh	r3, [r7, #14]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	441a      	add	r2, r3
 800ef0c:	89fb      	ldrh	r3, [r7, #14]
 800ef0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	7b1b      	ldrb	r3, [r3, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f040 809d 	bne.w	800f07e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	785b      	ldrb	r3, [r3, #1]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d04c      	beq.n	800efe6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	4413      	add	r3, r2
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	823b      	strh	r3, [r7, #16]
 800ef5a:	8a3b      	ldrh	r3, [r7, #16]
 800ef5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d01b      	beq.n	800ef9c <USB_EPClearStall+0x6c>
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	4413      	add	r3, r2
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef7a:	81fb      	strh	r3, [r7, #14]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	441a      	add	r2, r3
 800ef86:	89fb      	ldrh	r3, [r7, #14]
 800ef88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	78db      	ldrb	r3, [r3, #3]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d06c      	beq.n	800f07e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	881b      	ldrh	r3, [r3, #0]
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efba:	81bb      	strh	r3, [r7, #12]
 800efbc:	89bb      	ldrh	r3, [r7, #12]
 800efbe:	f083 0320 	eor.w	r3, r3, #32
 800efc2:	81bb      	strh	r3, [r7, #12]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	441a      	add	r2, r3
 800efce:	89bb      	ldrh	r3, [r7, #12]
 800efd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	8013      	strh	r3, [r2, #0]
 800efe4:	e04b      	b.n	800f07e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4413      	add	r3, r2
 800eff0:	881b      	ldrh	r3, [r3, #0]
 800eff2:	82fb      	strh	r3, [r7, #22]
 800eff4:	8afb      	ldrh	r3, [r7, #22]
 800eff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800effa:	2b00      	cmp	r3, #0
 800effc:	d01b      	beq.n	800f036 <USB_EPClearStall+0x106>
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	4413      	add	r3, r2
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f014:	82bb      	strh	r3, [r7, #20]
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	441a      	add	r2, r3
 800f020:	8abb      	ldrh	r3, [r7, #20]
 800f022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f02a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f032:	b29b      	uxth	r3, r3
 800f034:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	4413      	add	r3, r2
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	b29b      	uxth	r3, r3
 800f044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f04c:	827b      	strh	r3, [r7, #18]
 800f04e:	8a7b      	ldrh	r3, [r7, #18]
 800f050:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f054:	827b      	strh	r3, [r7, #18]
 800f056:	8a7b      	ldrh	r3, [r7, #18]
 800f058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f05c:	827b      	strh	r3, [r7, #18]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	441a      	add	r2, r3
 800f068:	8a7b      	ldrh	r3, [r7, #18]
 800f06a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f06e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	371c      	adds	r7, #28
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	460b      	mov	r3, r1
 800f096:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f098:	78fb      	ldrb	r3, [r7, #3]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d103      	bne.n	800f0a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2280      	movs	r2, #128	; 0x80
 800f0a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800f0e2:	b480      	push	{r7}
 800f0e4:	b085      	sub	sp, #20
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr

0800f102 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f102:	b480      	push	{r7}
 800f104:	b08d      	sub	sp, #52	; 0x34
 800f106:	af00      	add	r7, sp, #0
 800f108:	60f8      	str	r0, [r7, #12]
 800f10a:	60b9      	str	r1, [r7, #8]
 800f10c:	4611      	mov	r1, r2
 800f10e:	461a      	mov	r2, r3
 800f110:	460b      	mov	r3, r1
 800f112:	80fb      	strh	r3, [r7, #6]
 800f114:	4613      	mov	r3, r2
 800f116:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f118:	88bb      	ldrh	r3, [r7, #4]
 800f11a:	3301      	adds	r3, #1
 800f11c:	085b      	lsrs	r3, r3, #1
 800f11e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f128:	88fa      	ldrh	r2, [r7, #6]
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	4413      	add	r3, r2
 800f12e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f132:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f138:	e01b      	b.n	800f172 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	3301      	adds	r3, #1
 800f144:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	b29b      	uxth	r3, r3
 800f150:	461a      	mov	r2, r3
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	4313      	orrs	r3, r2
 800f156:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f162:	3302      	adds	r3, #2
 800f164:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f168:	3301      	adds	r3, #1
 800f16a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	3b01      	subs	r3, #1
 800f170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1e0      	bne.n	800f13a <USB_WritePMA+0x38>
  }
}
 800f178:	bf00      	nop
 800f17a:	bf00      	nop
 800f17c:	3734      	adds	r7, #52	; 0x34
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f186:	b480      	push	{r7}
 800f188:	b08b      	sub	sp, #44	; 0x2c
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	60f8      	str	r0, [r7, #12]
 800f18e:	60b9      	str	r1, [r7, #8]
 800f190:	4611      	mov	r1, r2
 800f192:	461a      	mov	r2, r3
 800f194:	460b      	mov	r3, r1
 800f196:	80fb      	strh	r3, [r7, #6]
 800f198:	4613      	mov	r3, r2
 800f19a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f19c:	88bb      	ldrh	r3, [r7, #4]
 800f19e:	085b      	lsrs	r3, r3, #1
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f1ac:	88fa      	ldrh	r2, [r7, #6]
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1b6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f1bc:	e018      	b.n	800f1f0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800f1be:	6a3b      	ldr	r3, [r7, #32]
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	3302      	adds	r3, #2
 800f1ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	0a1b      	lsrs	r3, r3, #8
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	627b      	str	r3, [r7, #36]	; 0x24
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1e3      	bne.n	800f1be <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f1f6:	88bb      	ldrh	r3, [r7, #4]
 800f1f8:	f003 0301 	and.w	r3, r3, #1
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	b29b      	uxth	r3, r3
 800f208:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	b2da      	uxtb	r2, r3
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	701a      	strb	r2, [r3, #0]
  }
}
 800f212:	bf00      	nop
 800f214:	372c      	adds	r7, #44	; 0x2c
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr

0800f21e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b084      	sub	sp, #16
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
 800f226:	460b      	mov	r3, r1
 800f228:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f22a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f22e:	f004 f9c1 	bl	80135b4 <USBD_static_malloc>
 800f232:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d105      	bne.n	800f246 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f242:	2302      	movs	r3, #2
 800f244:	e066      	b.n	800f314 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	7c1b      	ldrb	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d119      	bne.n	800f28a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f25a:	2202      	movs	r2, #2
 800f25c:	2181      	movs	r1, #129	; 0x81
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f004 f84d 	bl	80132fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2201      	movs	r2, #1
 800f268:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f26a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f26e:	2202      	movs	r2, #2
 800f270:	2101      	movs	r1, #1
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f004 f843 	bl	80132fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2210      	movs	r2, #16
 800f284:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f288:	e016      	b.n	800f2b8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f28a:	2340      	movs	r3, #64	; 0x40
 800f28c:	2202      	movs	r2, #2
 800f28e:	2181      	movs	r1, #129	; 0x81
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f004 f834 	bl	80132fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2201      	movs	r2, #1
 800f29a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f29c:	2340      	movs	r3, #64	; 0x40
 800f29e:	2202      	movs	r2, #2
 800f2a0:	2101      	movs	r1, #1
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f004 f82b 	bl	80132fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2210      	movs	r2, #16
 800f2b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	2203      	movs	r2, #3
 800f2bc:	2182      	movs	r1, #130	; 0x82
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f004 f81d 	bl	80132fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	7c1b      	ldrb	r3, [r3, #16]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d109      	bne.n	800f302 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f2f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f004 f8ef 	bl	80134de <USBD_LL_PrepareReceive>
 800f300:	e007      	b.n	800f312 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f308:	2340      	movs	r3, #64	; 0x40
 800f30a:	2101      	movs	r1, #1
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f004 f8e6 	bl	80134de <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f328:	2181      	movs	r1, #129	; 0x81
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f004 f80d 	bl	801334a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f336:	2101      	movs	r1, #1
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f004 f806 	bl	801334a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f346:	2182      	movs	r1, #130	; 0x82
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f003 fffe 	bl	801334a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00e      	beq.n	800f386 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f378:	4618      	mov	r0, r3
 800f37a:	f004 f929 	bl	80135d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f386:	2300      	movs	r3, #0
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	e0af      	b.n	800f518 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d03f      	beq.n	800f444 <USBD_CDC_Setup+0xb4>
 800f3c4:	2b20      	cmp	r3, #32
 800f3c6:	f040 809f 	bne.w	800f508 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	88db      	ldrh	r3, [r3, #6]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d02e      	beq.n	800f430 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	b25b      	sxtb	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	da16      	bge.n	800f40a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f3e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f3ea:	683a      	ldr	r2, [r7, #0]
 800f3ec:	88d2      	ldrh	r2, [r2, #6]
 800f3ee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	88db      	ldrh	r3, [r3, #6]
 800f3f4:	2b07      	cmp	r3, #7
 800f3f6:	bf28      	it	cs
 800f3f8:	2307      	movcs	r3, #7
 800f3fa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	89fa      	ldrh	r2, [r7, #14]
 800f400:	4619      	mov	r1, r3
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f001 fa9f 	bl	8010946 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f408:	e085      	b.n	800f516 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	785a      	ldrb	r2, [r3, #1]
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	88db      	ldrh	r3, [r3, #6]
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f420:	6939      	ldr	r1, [r7, #16]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	88db      	ldrh	r3, [r3, #6]
 800f426:	461a      	mov	r2, r3
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f001 fab8 	bl	801099e <USBD_CtlPrepareRx>
      break;
 800f42e:	e072      	b.n	800f516 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	7850      	ldrb	r0, [r2, #1]
 800f43c:	2200      	movs	r2, #0
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	4798      	blx	r3
      break;
 800f442:	e068      	b.n	800f516 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	785b      	ldrb	r3, [r3, #1]
 800f448:	2b0b      	cmp	r3, #11
 800f44a:	d852      	bhi.n	800f4f2 <USBD_CDC_Setup+0x162>
 800f44c:	a201      	add	r2, pc, #4	; (adr r2, 800f454 <USBD_CDC_Setup+0xc4>)
 800f44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f452:	bf00      	nop
 800f454:	0800f485 	.word	0x0800f485
 800f458:	0800f501 	.word	0x0800f501
 800f45c:	0800f4f3 	.word	0x0800f4f3
 800f460:	0800f4f3 	.word	0x0800f4f3
 800f464:	0800f4f3 	.word	0x0800f4f3
 800f468:	0800f4f3 	.word	0x0800f4f3
 800f46c:	0800f4f3 	.word	0x0800f4f3
 800f470:	0800f4f3 	.word	0x0800f4f3
 800f474:	0800f4f3 	.word	0x0800f4f3
 800f478:	0800f4f3 	.word	0x0800f4f3
 800f47c:	0800f4af 	.word	0x0800f4af
 800f480:	0800f4d9 	.word	0x0800f4d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	d107      	bne.n	800f4a0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f490:	f107 030a 	add.w	r3, r7, #10
 800f494:	2202      	movs	r2, #2
 800f496:	4619      	mov	r1, r3
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f001 fa54 	bl	8010946 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f49e:	e032      	b.n	800f506 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f4a0:	6839      	ldr	r1, [r7, #0]
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f001 f9de 	bl	8010864 <USBD_CtlError>
            ret = USBD_FAIL;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	75fb      	strb	r3, [r7, #23]
          break;
 800f4ac:	e02b      	b.n	800f506 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	2b03      	cmp	r3, #3
 800f4b8:	d107      	bne.n	800f4ca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f4ba:	f107 030d 	add.w	r3, r7, #13
 800f4be:	2201      	movs	r2, #1
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f001 fa3f 	bl	8010946 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f4c8:	e01d      	b.n	800f506 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f001 f9c9 	bl	8010864 <USBD_CtlError>
            ret = USBD_FAIL;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	75fb      	strb	r3, [r7, #23]
          break;
 800f4d6:	e016      	b.n	800f506 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b03      	cmp	r3, #3
 800f4e2:	d00f      	beq.n	800f504 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f4e4:	6839      	ldr	r1, [r7, #0]
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f001 f9bc 	bl	8010864 <USBD_CtlError>
            ret = USBD_FAIL;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f4f0:	e008      	b.n	800f504 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f4f2:	6839      	ldr	r1, [r7, #0]
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f001 f9b5 	bl	8010864 <USBD_CtlError>
          ret = USBD_FAIL;
 800f4fa:	2303      	movs	r3, #3
 800f4fc:	75fb      	strb	r3, [r7, #23]
          break;
 800f4fe:	e002      	b.n	800f506 <USBD_CDC_Setup+0x176>
          break;
 800f500:	bf00      	nop
 800f502:	e008      	b.n	800f516 <USBD_CDC_Setup+0x186>
          break;
 800f504:	bf00      	nop
      }
      break;
 800f506:	e006      	b.n	800f516 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f001 f9aa 	bl	8010864 <USBD_CtlError>
      ret = USBD_FAIL;
 800f510:	2303      	movs	r3, #3
 800f512:	75fb      	strb	r3, [r7, #23]
      break;
 800f514:	bf00      	nop
  }

  return (uint8_t)ret;
 800f516:	7dfb      	ldrb	r3, [r7, #23]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3718      	adds	r7, #24
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	460b      	mov	r3, r1
 800f52a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d101      	bne.n	800f542 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f53e:	2303      	movs	r3, #3
 800f540:	e04f      	b.n	800f5e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f548:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f54a:	78fa      	ldrb	r2, [r7, #3]
 800f54c:	6879      	ldr	r1, [r7, #4]
 800f54e:	4613      	mov	r3, r2
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	4413      	add	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	440b      	add	r3, r1
 800f558:	3318      	adds	r3, #24
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d029      	beq.n	800f5b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f560:	78fa      	ldrb	r2, [r7, #3]
 800f562:	6879      	ldr	r1, [r7, #4]
 800f564:	4613      	mov	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	440b      	add	r3, r1
 800f56e:	3318      	adds	r3, #24
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	78f9      	ldrb	r1, [r7, #3]
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	460b      	mov	r3, r1
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	440b      	add	r3, r1
 800f57c:	00db      	lsls	r3, r3, #3
 800f57e:	4403      	add	r3, r0
 800f580:	3338      	adds	r3, #56	; 0x38
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	fbb2 f1f3 	udiv	r1, r2, r3
 800f588:	fb01 f303 	mul.w	r3, r1, r3
 800f58c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d110      	bne.n	800f5b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f592:	78fa      	ldrb	r2, [r7, #3]
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	4613      	mov	r3, r2
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	4413      	add	r3, r2
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	440b      	add	r3, r1
 800f5a0:	3318      	adds	r3, #24
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f5a6:	78f9      	ldrb	r1, [r7, #3]
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f003 ff75 	bl	801349c <USBD_LL_Transmit>
 800f5b2:	e015      	b.n	800f5e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f5c2:	691b      	ldr	r3, [r3, #16]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00b      	beq.n	800f5e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f5ce:	691b      	ldr	r3, [r3, #16]
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f5dc:	78fa      	ldrb	r2, [r7, #3]
 800f5de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b084      	sub	sp, #16
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f608:	2303      	movs	r3, #3
 800f60a:	e015      	b.n	800f638 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f60c:	78fb      	ldrb	r3, [r7, #3]
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f003 ff85 	bl	8013520 <USBD_LL_GetRxDataSize>
 800f616:	4602      	mov	r2, r0
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f632:	4611      	mov	r1, r2
 800f634:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f64e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d101      	bne.n	800f65a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f656:	2303      	movs	r3, #3
 800f658:	e01b      	b.n	800f692 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d015      	beq.n	800f690 <USBD_CDC_EP0_RxReady+0x50>
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f66a:	2bff      	cmp	r3, #255	; 0xff
 800f66c:	d010      	beq.n	800f690 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f67c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f684:	b292      	uxth	r2, r2
 800f686:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	22ff      	movs	r2, #255	; 0xff
 800f68c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2243      	movs	r2, #67	; 0x43
 800f6a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f6aa:	4b03      	ldr	r3, [pc, #12]	; (800f6b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	20000098 	.word	0x20000098

0800f6bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2243      	movs	r2, #67	; 0x43
 800f6c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f6ca:	4b03      	ldr	r3, [pc, #12]	; (800f6d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	20000054 	.word	0x20000054

0800f6dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2243      	movs	r2, #67	; 0x43
 800f6e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f6ea:	4b03      	ldr	r3, [pc, #12]	; (800f6f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	200000dc 	.word	0x200000dc

0800f6fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	220a      	movs	r2, #10
 800f708:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f70a:	4b03      	ldr	r3, [pc, #12]	; (800f718 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr
 800f718:	20000010 	.word	0x20000010

0800f71c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d101      	bne.n	800f730 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f72c:	2303      	movs	r3, #3
 800f72e:	e004      	b.n	800f73a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	683a      	ldr	r2, [r7, #0]
 800f734:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr

0800f746 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f746:	b480      	push	{r7}
 800f748:	b087      	sub	sp, #28
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	60f8      	str	r0, [r7, #12]
 800f74e:	60b9      	str	r1, [r7, #8]
 800f750:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f758:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d101      	bne.n	800f764 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f760:	2303      	movs	r3, #3
 800f762:	e008      	b.n	800f776 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f782:	b480      	push	{r7}
 800f784:	b085      	sub	sp, #20
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
 800f78a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f792:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d101      	bne.n	800f79e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f79a:	2303      	movs	r3, #3
 800f79c:	e004      	b.n	800f7a8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	683a      	ldr	r2, [r7, #0]
 800f7a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3714      	adds	r7, #20
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d101      	bne.n	800f7d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f7ce:	2303      	movs	r3, #3
 800f7d0:	e016      	b.n	800f800 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	7c1b      	ldrb	r3, [r3, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d109      	bne.n	800f7ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f7e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f003 fe79 	bl	80134de <USBD_LL_PrepareReceive>
 800f7ec:	e007      	b.n	800f7fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f7f4:	2340      	movs	r3, #64	; 0x40
 800f7f6:	2101      	movs	r1, #1
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f003 fe70 	bl	80134de <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	4613      	mov	r3, r2
 800f814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d101      	bne.n	800f820 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f81c:	2303      	movs	r3, #3
 800f81e:	e01f      	b.n	800f860 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2200      	movs	r2, #0
 800f824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d003      	beq.n	800f846 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	79fa      	ldrb	r2, [r7, #7]
 800f852:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f003 fcd7 	bl	8013208 <USBD_LL_Init>
 800f85a:	4603      	mov	r3, r0
 800f85c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f85e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f860:	4618      	mov	r0, r3
 800f862:	3718      	adds	r7, #24
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f872:	2300      	movs	r3, #0
 800f874:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d101      	bne.n	800f880 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f87c:	2303      	movs	r3, #3
 800f87e:	e016      	b.n	800f8ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	683a      	ldr	r2, [r7, #0]
 800f884:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00b      	beq.n	800f8ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89c:	f107 020e 	add.w	r2, r7, #14
 800f8a0:	4610      	mov	r0, r2
 800f8a2:	4798      	blx	r3
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f003 fd02 	bl	80132c8 <USBD_LL_Start>
 800f8c4:	4603      	mov	r3, r0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f8ce:	b480      	push	{r7}
 800f8d0:	b083      	sub	sp, #12
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	370c      	adds	r7, #12
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr

0800f8e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f8f0:	2303      	movs	r3, #3
 800f8f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d009      	beq.n	800f912 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	78fa      	ldrb	r2, [r7, #3]
 800f908:	4611      	mov	r1, r2
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	4798      	blx	r3
 800f90e:	4603      	mov	r3, r0
 800f910:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f912:	7bfb      	ldrb	r3, [r7, #15]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3710      	adds	r7, #16
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	460b      	mov	r3, r1
 800f926:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d007      	beq.n	800f942 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	78fa      	ldrb	r2, [r7, #3]
 800f93c:	4611      	mov	r1, r2
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	4798      	blx	r3
  }

  return USBD_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f95c:	6839      	ldr	r1, [r7, #0]
 800f95e:	4618      	mov	r0, r3
 800f960:	f000 ff46 	bl	80107f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f972:	461a      	mov	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f980:	f003 031f 	and.w	r3, r3, #31
 800f984:	2b02      	cmp	r3, #2
 800f986:	d01a      	beq.n	800f9be <USBD_LL_SetupStage+0x72>
 800f988:	2b02      	cmp	r3, #2
 800f98a:	d822      	bhi.n	800f9d2 <USBD_LL_SetupStage+0x86>
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <USBD_LL_SetupStage+0x4a>
 800f990:	2b01      	cmp	r3, #1
 800f992:	d00a      	beq.n	800f9aa <USBD_LL_SetupStage+0x5e>
 800f994:	e01d      	b.n	800f9d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f99c:	4619      	mov	r1, r3
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 f9ee 	bl	800fd80 <USBD_StdDevReq>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f9a8:	e020      	b.n	800f9ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f000 fa52 	bl	800fe5c <USBD_StdItfReq>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800f9bc:	e016      	b.n	800f9ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 fa91 	bl	800feee <USBD_StdEPReq>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800f9d0:	e00c      	b.n	800f9ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f9d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	4619      	mov	r1, r3
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f003 fcd1 	bl	8013388 <USBD_LL_StallEP>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	73fb      	strb	r3, [r7, #15]
      break;
 800f9ea:	bf00      	nop
  }

  return ret;
 800f9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3710      	adds	r7, #16
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b086      	sub	sp, #24
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	460b      	mov	r3, r1
 800fa00:	607a      	str	r2, [r7, #4]
 800fa02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fa04:	7afb      	ldrb	r3, [r7, #11]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d138      	bne.n	800fa7c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fa10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fa18:	2b03      	cmp	r3, #3
 800fa1a:	d14a      	bne.n	800fab2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	689a      	ldr	r2, [r3, #8]
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d913      	bls.n	800fa50 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	689a      	ldr	r2, [r3, #8]
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	1ad2      	subs	r2, r2, r3
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	68da      	ldr	r2, [r3, #12]
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	bf28      	it	cs
 800fa42:	4613      	movcs	r3, r2
 800fa44:	461a      	mov	r2, r3
 800fa46:	6879      	ldr	r1, [r7, #4]
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 ffc5 	bl	80109d8 <USBD_CtlContinueRx>
 800fa4e:	e030      	b.n	800fab2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	d10b      	bne.n	800fa74 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d005      	beq.n	800fa74 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa6e:	691b      	ldr	r3, [r3, #16]
 800fa70:	68f8      	ldr	r0, [r7, #12]
 800fa72:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f000 ffc0 	bl	80109fa <USBD_CtlSendStatus>
 800fa7a:	e01a      	b.n	800fab2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	2b03      	cmp	r3, #3
 800fa86:	d114      	bne.n	800fab2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa8e:	699b      	ldr	r3, [r3, #24]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00e      	beq.n	800fab2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa9a:	699b      	ldr	r3, [r3, #24]
 800fa9c:	7afa      	ldrb	r2, [r7, #11]
 800fa9e:	4611      	mov	r1, r2
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	4798      	blx	r3
 800faa4:	4603      	mov	r3, r0
 800faa6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800faa8:	7dfb      	ldrb	r3, [r7, #23]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d001      	beq.n	800fab2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800faae:	7dfb      	ldrb	r3, [r7, #23]
 800fab0:	e000      	b.n	800fab4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800fab2:	2300      	movs	r3, #0
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3718      	adds	r7, #24
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	460b      	mov	r3, r1
 800fac6:	607a      	str	r2, [r7, #4]
 800fac8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800faca:	7afb      	ldrb	r3, [r7, #11]
 800facc:	2b00      	cmp	r3, #0
 800face:	d16b      	bne.n	800fba8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	3314      	adds	r3, #20
 800fad4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d156      	bne.n	800fb8e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	689a      	ldr	r2, [r3, #8]
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d914      	bls.n	800fb16 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	689a      	ldr	r2, [r3, #8]
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	1ad2      	subs	r2, r2, r3
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	461a      	mov	r2, r3
 800fb00:	6879      	ldr	r1, [r7, #4]
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f000 ff3a 	bl	801097c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb08:	2300      	movs	r3, #0
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f003 fce5 	bl	80134de <USBD_LL_PrepareReceive>
 800fb14:	e03b      	b.n	800fb8e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	68da      	ldr	r2, [r3, #12]
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d11c      	bne.n	800fb5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	685a      	ldr	r2, [r3, #4]
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d316      	bcc.n	800fb5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	685a      	ldr	r2, [r3, #4]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d20f      	bcs.n	800fb5c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	2100      	movs	r1, #0
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 ff1b 	bl	801097c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb4e:	2300      	movs	r3, #0
 800fb50:	2200      	movs	r2, #0
 800fb52:	2100      	movs	r1, #0
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f003 fcc2 	bl	80134de <USBD_LL_PrepareReceive>
 800fb5a:	e018      	b.n	800fb8e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	2b03      	cmp	r3, #3
 800fb66:	d10b      	bne.n	800fb80 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d005      	beq.n	800fb80 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb80:	2180      	movs	r1, #128	; 0x80
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f003 fc00 	bl	8013388 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f000 ff49 	bl	8010a20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d122      	bne.n	800fbde <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f7ff fe98 	bl	800f8ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fba6:	e01a      	b.n	800fbde <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d114      	bne.n	800fbde <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbba:	695b      	ldr	r3, [r3, #20]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00e      	beq.n	800fbde <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbc6:	695b      	ldr	r3, [r3, #20]
 800fbc8:	7afa      	ldrb	r2, [r7, #11]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	4798      	blx	r3
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fbd4:	7dfb      	ldrb	r3, [r7, #23]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fbda:	7dfb      	ldrb	r3, [r7, #23]
 800fbdc:	e000      	b.n	800fbe0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3718      	adds	r7, #24
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d101      	bne.n	800fc1c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fc18:	2303      	movs	r3, #3
 800fc1a:	e02f      	b.n	800fc7c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00f      	beq.n	800fc46 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d009      	beq.n	800fc46 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	6852      	ldr	r2, [r2, #4]
 800fc3e:	b2d2      	uxtb	r2, r2
 800fc40:	4611      	mov	r1, r2
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc46:	2340      	movs	r3, #64	; 0x40
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f003 fb56 	bl	80132fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2240      	movs	r2, #64	; 0x40
 800fc5e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc62:	2340      	movs	r3, #64	; 0x40
 800fc64:	2200      	movs	r2, #0
 800fc66:	2180      	movs	r1, #128	; 0x80
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f003 fb48 	bl	80132fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2201      	movs	r2, #1
 800fc72:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2240      	movs	r2, #64	; 0x40
 800fc78:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	78fa      	ldrb	r2, [r7, #3]
 800fc94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2204      	movs	r2, #4
 800fcbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fcc2:	2300      	movs	r3, #0
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	370c      	adds	r7, #12
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	2b04      	cmp	r3, #4
 800fce2:	d106      	bne.n	800fcf2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fcf2:	2300      	movs	r3, #0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	370c      	adds	r7, #12
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr

0800fd00 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d101      	bne.n	800fd16 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fd12:	2303      	movs	r3, #3
 800fd14:	e012      	b.n	800fd3c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	2b03      	cmp	r3, #3
 800fd20:	d10b      	bne.n	800fd3a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd28:	69db      	ldr	r3, [r3, #28]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d005      	beq.n	800fd3a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd34:	69db      	ldr	r3, [r3, #28]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b087      	sub	sp, #28
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fd62:	8a3b      	ldrh	r3, [r7, #16]
 800fd64:	021b      	lsls	r3, r3, #8
 800fd66:	b21a      	sxth	r2, r3
 800fd68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	b21b      	sxth	r3, r3
 800fd70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fd72:	89fb      	ldrh	r3, [r7, #14]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	371c      	adds	r7, #28
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd96:	2b40      	cmp	r3, #64	; 0x40
 800fd98:	d005      	beq.n	800fda6 <USBD_StdDevReq+0x26>
 800fd9a:	2b40      	cmp	r3, #64	; 0x40
 800fd9c:	d853      	bhi.n	800fe46 <USBD_StdDevReq+0xc6>
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00b      	beq.n	800fdba <USBD_StdDevReq+0x3a>
 800fda2:	2b20      	cmp	r3, #32
 800fda4:	d14f      	bne.n	800fe46 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdac:	689b      	ldr	r3, [r3, #8]
 800fdae:	6839      	ldr	r1, [r7, #0]
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	4798      	blx	r3
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	73fb      	strb	r3, [r7, #15]
      break;
 800fdb8:	e04a      	b.n	800fe50 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	785b      	ldrb	r3, [r3, #1]
 800fdbe:	2b09      	cmp	r3, #9
 800fdc0:	d83b      	bhi.n	800fe3a <USBD_StdDevReq+0xba>
 800fdc2:	a201      	add	r2, pc, #4	; (adr r2, 800fdc8 <USBD_StdDevReq+0x48>)
 800fdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc8:	0800fe1d 	.word	0x0800fe1d
 800fdcc:	0800fe31 	.word	0x0800fe31
 800fdd0:	0800fe3b 	.word	0x0800fe3b
 800fdd4:	0800fe27 	.word	0x0800fe27
 800fdd8:	0800fe3b 	.word	0x0800fe3b
 800fddc:	0800fdfb 	.word	0x0800fdfb
 800fde0:	0800fdf1 	.word	0x0800fdf1
 800fde4:	0800fe3b 	.word	0x0800fe3b
 800fde8:	0800fe13 	.word	0x0800fe13
 800fdec:	0800fe05 	.word	0x0800fe05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fdf0:	6839      	ldr	r1, [r7, #0]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f9de 	bl	80101b4 <USBD_GetDescriptor>
          break;
 800fdf8:	e024      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 fb6d 	bl	80104dc <USBD_SetAddress>
          break;
 800fe02:	e01f      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fe04:	6839      	ldr	r1, [r7, #0]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fbac 	bl	8010564 <USBD_SetConfig>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	73fb      	strb	r3, [r7, #15]
          break;
 800fe10:	e018      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fe12:	6839      	ldr	r1, [r7, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fc4b 	bl	80106b0 <USBD_GetConfig>
          break;
 800fe1a:	e013      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fe1c:	6839      	ldr	r1, [r7, #0]
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 fc7c 	bl	801071c <USBD_GetStatus>
          break;
 800fe24:	e00e      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fcab 	bl	8010784 <USBD_SetFeature>
          break;
 800fe2e:	e009      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fe30:	6839      	ldr	r1, [r7, #0]
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fcba 	bl	80107ac <USBD_ClrFeature>
          break;
 800fe38:	e004      	b.n	800fe44 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fe3a:	6839      	ldr	r1, [r7, #0]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fd11 	bl	8010864 <USBD_CtlError>
          break;
 800fe42:	bf00      	nop
      }
      break;
 800fe44:	e004      	b.n	800fe50 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fe46:	6839      	ldr	r1, [r7, #0]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 fd0b 	bl	8010864 <USBD_CtlError>
      break;
 800fe4e:	bf00      	nop
  }

  return ret;
 800fe50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop

0800fe5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe72:	2b40      	cmp	r3, #64	; 0x40
 800fe74:	d005      	beq.n	800fe82 <USBD_StdItfReq+0x26>
 800fe76:	2b40      	cmp	r3, #64	; 0x40
 800fe78:	d82f      	bhi.n	800feda <USBD_StdItfReq+0x7e>
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d001      	beq.n	800fe82 <USBD_StdItfReq+0x26>
 800fe7e:	2b20      	cmp	r3, #32
 800fe80:	d12b      	bne.n	800feda <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	3b01      	subs	r3, #1
 800fe8c:	2b02      	cmp	r3, #2
 800fe8e:	d81d      	bhi.n	800fecc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	889b      	ldrh	r3, [r3, #4]
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d813      	bhi.n	800fec2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	6839      	ldr	r1, [r7, #0]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	4798      	blx	r3
 800fea8:	4603      	mov	r3, r0
 800feaa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	88db      	ldrh	r3, [r3, #6]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d110      	bne.n	800fed6 <USBD_StdItfReq+0x7a>
 800feb4:	7bfb      	ldrb	r3, [r7, #15]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10d      	bne.n	800fed6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 fd9d 	bl	80109fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fec0:	e009      	b.n	800fed6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 fccd 	bl	8010864 <USBD_CtlError>
          break;
 800feca:	e004      	b.n	800fed6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fecc:	6839      	ldr	r1, [r7, #0]
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 fcc8 	bl	8010864 <USBD_CtlError>
          break;
 800fed4:	e000      	b.n	800fed8 <USBD_StdItfReq+0x7c>
          break;
 800fed6:	bf00      	nop
      }
      break;
 800fed8:	e004      	b.n	800fee4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800feda:	6839      	ldr	r1, [r7, #0]
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fcc1 	bl	8010864 <USBD_CtlError>
      break;
 800fee2:	bf00      	nop
  }

  return ret;
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b084      	sub	sp, #16
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fef8:	2300      	movs	r3, #0
 800fefa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	889b      	ldrh	r3, [r3, #4]
 800ff00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff0a:	2b40      	cmp	r3, #64	; 0x40
 800ff0c:	d007      	beq.n	800ff1e <USBD_StdEPReq+0x30>
 800ff0e:	2b40      	cmp	r3, #64	; 0x40
 800ff10:	f200 8145 	bhi.w	801019e <USBD_StdEPReq+0x2b0>
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00c      	beq.n	800ff32 <USBD_StdEPReq+0x44>
 800ff18:	2b20      	cmp	r3, #32
 800ff1a:	f040 8140 	bne.w	801019e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff24:	689b      	ldr	r3, [r3, #8]
 800ff26:	6839      	ldr	r1, [r7, #0]
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	4798      	blx	r3
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff30:	e13a      	b.n	80101a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	785b      	ldrb	r3, [r3, #1]
 800ff36:	2b03      	cmp	r3, #3
 800ff38:	d007      	beq.n	800ff4a <USBD_StdEPReq+0x5c>
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	f300 8129 	bgt.w	8010192 <USBD_StdEPReq+0x2a4>
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d07f      	beq.n	8010044 <USBD_StdEPReq+0x156>
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d03c      	beq.n	800ffc2 <USBD_StdEPReq+0xd4>
 800ff48:	e123      	b.n	8010192 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d002      	beq.n	800ff5c <USBD_StdEPReq+0x6e>
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d016      	beq.n	800ff88 <USBD_StdEPReq+0x9a>
 800ff5a:	e02c      	b.n	800ffb6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff5c:	7bbb      	ldrb	r3, [r7, #14]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00d      	beq.n	800ff7e <USBD_StdEPReq+0x90>
 800ff62:	7bbb      	ldrb	r3, [r7, #14]
 800ff64:	2b80      	cmp	r3, #128	; 0x80
 800ff66:	d00a      	beq.n	800ff7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff68:	7bbb      	ldrb	r3, [r7, #14]
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f003 fa0b 	bl	8013388 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff72:	2180      	movs	r1, #128	; 0x80
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f003 fa07 	bl	8013388 <USBD_LL_StallEP>
 800ff7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ff7c:	e020      	b.n	800ffc0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fc6f 	bl	8010864 <USBD_CtlError>
              break;
 800ff86:	e01b      	b.n	800ffc0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	885b      	ldrh	r3, [r3, #2]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10e      	bne.n	800ffae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ff90:	7bbb      	ldrb	r3, [r7, #14]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00b      	beq.n	800ffae <USBD_StdEPReq+0xc0>
 800ff96:	7bbb      	ldrb	r3, [r7, #14]
 800ff98:	2b80      	cmp	r3, #128	; 0x80
 800ff9a:	d008      	beq.n	800ffae <USBD_StdEPReq+0xc0>
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	88db      	ldrh	r3, [r3, #6]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d104      	bne.n	800ffae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffa4:	7bbb      	ldrb	r3, [r7, #14]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f003 f9ed 	bl	8013388 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fd23 	bl	80109fa <USBD_CtlSendStatus>

              break;
 800ffb4:	e004      	b.n	800ffc0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ffb6:	6839      	ldr	r1, [r7, #0]
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fc53 	bl	8010864 <USBD_CtlError>
              break;
 800ffbe:	bf00      	nop
          }
          break;
 800ffc0:	e0ec      	b.n	801019c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	d002      	beq.n	800ffd4 <USBD_StdEPReq+0xe6>
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d016      	beq.n	8010000 <USBD_StdEPReq+0x112>
 800ffd2:	e030      	b.n	8010036 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ffd4:	7bbb      	ldrb	r3, [r7, #14]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00d      	beq.n	800fff6 <USBD_StdEPReq+0x108>
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
 800ffdc:	2b80      	cmp	r3, #128	; 0x80
 800ffde:	d00a      	beq.n	800fff6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffe0:	7bbb      	ldrb	r3, [r7, #14]
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f003 f9cf 	bl	8013388 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffea:	2180      	movs	r1, #128	; 0x80
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f003 f9cb 	bl	8013388 <USBD_LL_StallEP>
 800fff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fff4:	e025      	b.n	8010042 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 fc33 	bl	8010864 <USBD_CtlError>
              break;
 800fffe:	e020      	b.n	8010042 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	885b      	ldrh	r3, [r3, #2]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d11b      	bne.n	8010040 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010008:	7bbb      	ldrb	r3, [r7, #14]
 801000a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801000e:	2b00      	cmp	r3, #0
 8010010:	d004      	beq.n	801001c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010012:	7bbb      	ldrb	r3, [r7, #14]
 8010014:	4619      	mov	r1, r3
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f003 f9d5 	bl	80133c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fcec 	bl	80109fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	6839      	ldr	r1, [r7, #0]
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	4798      	blx	r3
 8010030:	4603      	mov	r3, r0
 8010032:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010034:	e004      	b.n	8010040 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010036:	6839      	ldr	r1, [r7, #0]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fc13 	bl	8010864 <USBD_CtlError>
              break;
 801003e:	e000      	b.n	8010042 <USBD_StdEPReq+0x154>
              break;
 8010040:	bf00      	nop
          }
          break;
 8010042:	e0ab      	b.n	801019c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801004a:	b2db      	uxtb	r3, r3
 801004c:	2b02      	cmp	r3, #2
 801004e:	d002      	beq.n	8010056 <USBD_StdEPReq+0x168>
 8010050:	2b03      	cmp	r3, #3
 8010052:	d032      	beq.n	80100ba <USBD_StdEPReq+0x1cc>
 8010054:	e097      	b.n	8010186 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010056:	7bbb      	ldrb	r3, [r7, #14]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d007      	beq.n	801006c <USBD_StdEPReq+0x17e>
 801005c:	7bbb      	ldrb	r3, [r7, #14]
 801005e:	2b80      	cmp	r3, #128	; 0x80
 8010060:	d004      	beq.n	801006c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010062:	6839      	ldr	r1, [r7, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 fbfd 	bl	8010864 <USBD_CtlError>
                break;
 801006a:	e091      	b.n	8010190 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801006c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010070:	2b00      	cmp	r3, #0
 8010072:	da0b      	bge.n	801008c <USBD_StdEPReq+0x19e>
 8010074:	7bbb      	ldrb	r3, [r7, #14]
 8010076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801007a:	4613      	mov	r3, r2
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	4413      	add	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	3310      	adds	r3, #16
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	4413      	add	r3, r2
 8010088:	3304      	adds	r3, #4
 801008a:	e00b      	b.n	80100a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801008c:	7bbb      	ldrb	r3, [r7, #14]
 801008e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010092:	4613      	mov	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	4413      	add	r3, r2
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	4413      	add	r3, r2
 80100a2:	3304      	adds	r3, #4
 80100a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2202      	movs	r2, #2
 80100b0:	4619      	mov	r1, r3
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 fc47 	bl	8010946 <USBD_CtlSendData>
              break;
 80100b8:	e06a      	b.n	8010190 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80100ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	da11      	bge.n	80100e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80100c2:	7bbb      	ldrb	r3, [r7, #14]
 80100c4:	f003 020f 	and.w	r2, r3, #15
 80100c8:	6879      	ldr	r1, [r7, #4]
 80100ca:	4613      	mov	r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	4413      	add	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	440b      	add	r3, r1
 80100d4:	3324      	adds	r3, #36	; 0x24
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d117      	bne.n	801010c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80100dc:	6839      	ldr	r1, [r7, #0]
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 fbc0 	bl	8010864 <USBD_CtlError>
                  break;
 80100e4:	e054      	b.n	8010190 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80100e6:	7bbb      	ldrb	r3, [r7, #14]
 80100e8:	f003 020f 	and.w	r2, r3, #15
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	4613      	mov	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	4413      	add	r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	440b      	add	r3, r1
 80100f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d104      	bne.n	801010c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010102:	6839      	ldr	r1, [r7, #0]
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 fbad 	bl	8010864 <USBD_CtlError>
                  break;
 801010a:	e041      	b.n	8010190 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801010c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010110:	2b00      	cmp	r3, #0
 8010112:	da0b      	bge.n	801012c <USBD_StdEPReq+0x23e>
 8010114:	7bbb      	ldrb	r3, [r7, #14]
 8010116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801011a:	4613      	mov	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	4413      	add	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	3310      	adds	r3, #16
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	4413      	add	r3, r2
 8010128:	3304      	adds	r3, #4
 801012a:	e00b      	b.n	8010144 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801012c:	7bbb      	ldrb	r3, [r7, #14]
 801012e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010132:	4613      	mov	r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4413      	add	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	4413      	add	r3, r2
 8010142:	3304      	adds	r3, #4
 8010144:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010146:	7bbb      	ldrb	r3, [r7, #14]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d002      	beq.n	8010152 <USBD_StdEPReq+0x264>
 801014c:	7bbb      	ldrb	r3, [r7, #14]
 801014e:	2b80      	cmp	r3, #128	; 0x80
 8010150:	d103      	bne.n	801015a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2200      	movs	r2, #0
 8010156:	601a      	str	r2, [r3, #0]
 8010158:	e00e      	b.n	8010178 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801015a:	7bbb      	ldrb	r3, [r7, #14]
 801015c:	4619      	mov	r1, r3
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f003 f950 	bl	8013404 <USBD_LL_IsStallEP>
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d003      	beq.n	8010172 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2201      	movs	r2, #1
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	e002      	b.n	8010178 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	2200      	movs	r2, #0
 8010176:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	2202      	movs	r2, #2
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 fbe1 	bl	8010946 <USBD_CtlSendData>
              break;
 8010184:	e004      	b.n	8010190 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 fb6b 	bl	8010864 <USBD_CtlError>
              break;
 801018e:	bf00      	nop
          }
          break;
 8010190:	e004      	b.n	801019c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010192:	6839      	ldr	r1, [r7, #0]
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fb65 	bl	8010864 <USBD_CtlError>
          break;
 801019a:	bf00      	nop
      }
      break;
 801019c:	e004      	b.n	80101a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801019e:	6839      	ldr	r1, [r7, #0]
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 fb5f 	bl	8010864 <USBD_CtlError>
      break;
 80101a6:	bf00      	nop
  }

  return ret;
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
	...

080101b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80101be:	2300      	movs	r3, #0
 80101c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80101c6:	2300      	movs	r3, #0
 80101c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	885b      	ldrh	r3, [r3, #2]
 80101ce:	0a1b      	lsrs	r3, r3, #8
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	3b01      	subs	r3, #1
 80101d4:	2b0e      	cmp	r3, #14
 80101d6:	f200 8152 	bhi.w	801047e <USBD_GetDescriptor+0x2ca>
 80101da:	a201      	add	r2, pc, #4	; (adr r2, 80101e0 <USBD_GetDescriptor+0x2c>)
 80101dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e0:	08010251 	.word	0x08010251
 80101e4:	08010269 	.word	0x08010269
 80101e8:	080102a9 	.word	0x080102a9
 80101ec:	0801047f 	.word	0x0801047f
 80101f0:	0801047f 	.word	0x0801047f
 80101f4:	0801041f 	.word	0x0801041f
 80101f8:	0801044b 	.word	0x0801044b
 80101fc:	0801047f 	.word	0x0801047f
 8010200:	0801047f 	.word	0x0801047f
 8010204:	0801047f 	.word	0x0801047f
 8010208:	0801047f 	.word	0x0801047f
 801020c:	0801047f 	.word	0x0801047f
 8010210:	0801047f 	.word	0x0801047f
 8010214:	0801047f 	.word	0x0801047f
 8010218:	0801021d 	.word	0x0801021d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010222:	69db      	ldr	r3, [r3, #28]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d00b      	beq.n	8010240 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	7c12      	ldrb	r2, [r2, #16]
 8010234:	f107 0108 	add.w	r1, r7, #8
 8010238:	4610      	mov	r0, r2
 801023a:	4798      	blx	r3
 801023c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801023e:	e126      	b.n	801048e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010240:	6839      	ldr	r1, [r7, #0]
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 fb0e 	bl	8010864 <USBD_CtlError>
        err++;
 8010248:	7afb      	ldrb	r3, [r7, #11]
 801024a:	3301      	adds	r3, #1
 801024c:	72fb      	strb	r3, [r7, #11]
      break;
 801024e:	e11e      	b.n	801048e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	7c12      	ldrb	r2, [r2, #16]
 801025c:	f107 0108 	add.w	r1, r7, #8
 8010260:	4610      	mov	r0, r2
 8010262:	4798      	blx	r3
 8010264:	60f8      	str	r0, [r7, #12]
      break;
 8010266:	e112      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	7c1b      	ldrb	r3, [r3, #16]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10d      	bne.n	801028c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010278:	f107 0208 	add.w	r2, r7, #8
 801027c:	4610      	mov	r0, r2
 801027e:	4798      	blx	r3
 8010280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	3301      	adds	r3, #1
 8010286:	2202      	movs	r2, #2
 8010288:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801028a:	e100      	b.n	801048e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010294:	f107 0208 	add.w	r2, r7, #8
 8010298:	4610      	mov	r0, r2
 801029a:	4798      	blx	r3
 801029c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	3301      	adds	r3, #1
 80102a2:	2202      	movs	r2, #2
 80102a4:	701a      	strb	r2, [r3, #0]
      break;
 80102a6:	e0f2      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	885b      	ldrh	r3, [r3, #2]
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b05      	cmp	r3, #5
 80102b0:	f200 80ac 	bhi.w	801040c <USBD_GetDescriptor+0x258>
 80102b4:	a201      	add	r2, pc, #4	; (adr r2, 80102bc <USBD_GetDescriptor+0x108>)
 80102b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ba:	bf00      	nop
 80102bc:	080102d5 	.word	0x080102d5
 80102c0:	08010309 	.word	0x08010309
 80102c4:	0801033d 	.word	0x0801033d
 80102c8:	08010371 	.word	0x08010371
 80102cc:	080103a5 	.word	0x080103a5
 80102d0:	080103d9 	.word	0x080103d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00b      	beq.n	80102f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	7c12      	ldrb	r2, [r2, #16]
 80102ec:	f107 0108 	add.w	r1, r7, #8
 80102f0:	4610      	mov	r0, r2
 80102f2:	4798      	blx	r3
 80102f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102f6:	e091      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 fab2 	bl	8010864 <USBD_CtlError>
            err++;
 8010300:	7afb      	ldrb	r3, [r7, #11]
 8010302:	3301      	adds	r3, #1
 8010304:	72fb      	strb	r3, [r7, #11]
          break;
 8010306:	e089      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00b      	beq.n	801032c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	7c12      	ldrb	r2, [r2, #16]
 8010320:	f107 0108 	add.w	r1, r7, #8
 8010324:	4610      	mov	r0, r2
 8010326:	4798      	blx	r3
 8010328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801032a:	e077      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 fa98 	bl	8010864 <USBD_CtlError>
            err++;
 8010334:	7afb      	ldrb	r3, [r7, #11]
 8010336:	3301      	adds	r3, #1
 8010338:	72fb      	strb	r3, [r7, #11]
          break;
 801033a:	e06f      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00b      	beq.n	8010360 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	7c12      	ldrb	r2, [r2, #16]
 8010354:	f107 0108 	add.w	r1, r7, #8
 8010358:	4610      	mov	r0, r2
 801035a:	4798      	blx	r3
 801035c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801035e:	e05d      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010360:	6839      	ldr	r1, [r7, #0]
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 fa7e 	bl	8010864 <USBD_CtlError>
            err++;
 8010368:	7afb      	ldrb	r3, [r7, #11]
 801036a:	3301      	adds	r3, #1
 801036c:	72fb      	strb	r3, [r7, #11]
          break;
 801036e:	e055      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00b      	beq.n	8010394 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010382:	691b      	ldr	r3, [r3, #16]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	7c12      	ldrb	r2, [r2, #16]
 8010388:	f107 0108 	add.w	r1, r7, #8
 801038c:	4610      	mov	r0, r2
 801038e:	4798      	blx	r3
 8010390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010392:	e043      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010394:	6839      	ldr	r1, [r7, #0]
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 fa64 	bl	8010864 <USBD_CtlError>
            err++;
 801039c:	7afb      	ldrb	r3, [r7, #11]
 801039e:	3301      	adds	r3, #1
 80103a0:	72fb      	strb	r3, [r7, #11]
          break;
 80103a2:	e03b      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103aa:	695b      	ldr	r3, [r3, #20]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00b      	beq.n	80103c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	7c12      	ldrb	r2, [r2, #16]
 80103bc:	f107 0108 	add.w	r1, r7, #8
 80103c0:	4610      	mov	r0, r2
 80103c2:	4798      	blx	r3
 80103c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103c6:	e029      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103c8:	6839      	ldr	r1, [r7, #0]
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 fa4a 	bl	8010864 <USBD_CtlError>
            err++;
 80103d0:	7afb      	ldrb	r3, [r7, #11]
 80103d2:	3301      	adds	r3, #1
 80103d4:	72fb      	strb	r3, [r7, #11]
          break;
 80103d6:	e021      	b.n	801041c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103de:	699b      	ldr	r3, [r3, #24]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00b      	beq.n	80103fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ea:	699b      	ldr	r3, [r3, #24]
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	7c12      	ldrb	r2, [r2, #16]
 80103f0:	f107 0108 	add.w	r1, r7, #8
 80103f4:	4610      	mov	r0, r2
 80103f6:	4798      	blx	r3
 80103f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103fa:	e00f      	b.n	801041c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103fc:	6839      	ldr	r1, [r7, #0]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 fa30 	bl	8010864 <USBD_CtlError>
            err++;
 8010404:	7afb      	ldrb	r3, [r7, #11]
 8010406:	3301      	adds	r3, #1
 8010408:	72fb      	strb	r3, [r7, #11]
          break;
 801040a:	e007      	b.n	801041c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801040c:	6839      	ldr	r1, [r7, #0]
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fa28 	bl	8010864 <USBD_CtlError>
          err++;
 8010414:	7afb      	ldrb	r3, [r7, #11]
 8010416:	3301      	adds	r3, #1
 8010418:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801041a:	bf00      	nop
      }
      break;
 801041c:	e037      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	7c1b      	ldrb	r3, [r3, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d109      	bne.n	801043a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801042e:	f107 0208 	add.w	r2, r7, #8
 8010432:	4610      	mov	r0, r2
 8010434:	4798      	blx	r3
 8010436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010438:	e029      	b.n	801048e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801043a:	6839      	ldr	r1, [r7, #0]
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f000 fa11 	bl	8010864 <USBD_CtlError>
        err++;
 8010442:	7afb      	ldrb	r3, [r7, #11]
 8010444:	3301      	adds	r3, #1
 8010446:	72fb      	strb	r3, [r7, #11]
      break;
 8010448:	e021      	b.n	801048e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	7c1b      	ldrb	r3, [r3, #16]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d10d      	bne.n	801046e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801045a:	f107 0208 	add.w	r2, r7, #8
 801045e:	4610      	mov	r0, r2
 8010460:	4798      	blx	r3
 8010462:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	3301      	adds	r3, #1
 8010468:	2207      	movs	r2, #7
 801046a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801046c:	e00f      	b.n	801048e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 f9f7 	bl	8010864 <USBD_CtlError>
        err++;
 8010476:	7afb      	ldrb	r3, [r7, #11]
 8010478:	3301      	adds	r3, #1
 801047a:	72fb      	strb	r3, [r7, #11]
      break;
 801047c:	e007      	b.n	801048e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801047e:	6839      	ldr	r1, [r7, #0]
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 f9ef 	bl	8010864 <USBD_CtlError>
      err++;
 8010486:	7afb      	ldrb	r3, [r7, #11]
 8010488:	3301      	adds	r3, #1
 801048a:	72fb      	strb	r3, [r7, #11]
      break;
 801048c:	bf00      	nop
  }

  if (err != 0U)
 801048e:	7afb      	ldrb	r3, [r7, #11]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d11e      	bne.n	80104d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	88db      	ldrh	r3, [r3, #6]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d016      	beq.n	80104ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801049c:	893b      	ldrh	r3, [r7, #8]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00e      	beq.n	80104c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	88da      	ldrh	r2, [r3, #6]
 80104a6:	893b      	ldrh	r3, [r7, #8]
 80104a8:	4293      	cmp	r3, r2
 80104aa:	bf28      	it	cs
 80104ac:	4613      	movcs	r3, r2
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80104b2:	893b      	ldrh	r3, [r7, #8]
 80104b4:	461a      	mov	r2, r3
 80104b6:	68f9      	ldr	r1, [r7, #12]
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 fa44 	bl	8010946 <USBD_CtlSendData>
 80104be:	e009      	b.n	80104d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80104c0:	6839      	ldr	r1, [r7, #0]
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 f9ce 	bl	8010864 <USBD_CtlError>
 80104c8:	e004      	b.n	80104d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fa95 	bl	80109fa <USBD_CtlSendStatus>
 80104d0:	e000      	b.n	80104d4 <USBD_GetDescriptor+0x320>
    return;
 80104d2:	bf00      	nop
  }
}
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop

080104dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	889b      	ldrh	r3, [r3, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d131      	bne.n	8010552 <USBD_SetAddress+0x76>
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	88db      	ldrh	r3, [r3, #6]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d12d      	bne.n	8010552 <USBD_SetAddress+0x76>
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	885b      	ldrh	r3, [r3, #2]
 80104fa:	2b7f      	cmp	r3, #127	; 0x7f
 80104fc:	d829      	bhi.n	8010552 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	885b      	ldrh	r3, [r3, #2]
 8010502:	b2db      	uxtb	r3, r3
 8010504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010510:	b2db      	uxtb	r3, r3
 8010512:	2b03      	cmp	r3, #3
 8010514:	d104      	bne.n	8010520 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010516:	6839      	ldr	r1, [r7, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 f9a3 	bl	8010864 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801051e:	e01d      	b.n	801055c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	7bfa      	ldrb	r2, [r7, #15]
 8010524:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010528:	7bfb      	ldrb	r3, [r7, #15]
 801052a:	4619      	mov	r1, r3
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f002 ff96 	bl	801345e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fa61 	bl	80109fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d004      	beq.n	8010548 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2202      	movs	r2, #2
 8010542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010546:	e009      	b.n	801055c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010550:	e004      	b.n	801055c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010552:	6839      	ldr	r1, [r7, #0]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 f985 	bl	8010864 <USBD_CtlError>
  }
}
 801055a:	bf00      	nop
 801055c:	bf00      	nop
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	885b      	ldrh	r3, [r3, #2]
 8010576:	b2da      	uxtb	r2, r3
 8010578:	4b4c      	ldr	r3, [pc, #304]	; (80106ac <USBD_SetConfig+0x148>)
 801057a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801057c:	4b4b      	ldr	r3, [pc, #300]	; (80106ac <USBD_SetConfig+0x148>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b01      	cmp	r3, #1
 8010582:	d905      	bls.n	8010590 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f96c 	bl	8010864 <USBD_CtlError>
    return USBD_FAIL;
 801058c:	2303      	movs	r3, #3
 801058e:	e088      	b.n	80106a2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010596:	b2db      	uxtb	r3, r3
 8010598:	2b02      	cmp	r3, #2
 801059a:	d002      	beq.n	80105a2 <USBD_SetConfig+0x3e>
 801059c:	2b03      	cmp	r3, #3
 801059e:	d025      	beq.n	80105ec <USBD_SetConfig+0x88>
 80105a0:	e071      	b.n	8010686 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80105a2:	4b42      	ldr	r3, [pc, #264]	; (80106ac <USBD_SetConfig+0x148>)
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d01c      	beq.n	80105e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80105aa:	4b40      	ldr	r3, [pc, #256]	; (80106ac <USBD_SetConfig+0x148>)
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	461a      	mov	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80105b4:	4b3d      	ldr	r3, [pc, #244]	; (80106ac <USBD_SetConfig+0x148>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7ff f992 	bl	800f8e4 <USBD_SetClassConfig>
 80105c0:	4603      	mov	r3, r0
 80105c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d004      	beq.n	80105d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80105ca:	6839      	ldr	r1, [r7, #0]
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 f949 	bl	8010864 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80105d2:	e065      	b.n	80106a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fa10 	bl	80109fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2203      	movs	r2, #3
 80105de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80105e2:	e05d      	b.n	80106a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 fa08 	bl	80109fa <USBD_CtlSendStatus>
      break;
 80105ea:	e059      	b.n	80106a0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80105ec:	4b2f      	ldr	r3, [pc, #188]	; (80106ac <USBD_SetConfig+0x148>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d112      	bne.n	801061a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2202      	movs	r2, #2
 80105f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80105fc:	4b2b      	ldr	r3, [pc, #172]	; (80106ac <USBD_SetConfig+0x148>)
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	461a      	mov	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010606:	4b29      	ldr	r3, [pc, #164]	; (80106ac <USBD_SetConfig+0x148>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	4619      	mov	r1, r3
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff f985 	bl	800f91c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 f9f1 	bl	80109fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010618:	e042      	b.n	80106a0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801061a:	4b24      	ldr	r3, [pc, #144]	; (80106ac <USBD_SetConfig+0x148>)
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	461a      	mov	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	429a      	cmp	r2, r3
 8010626:	d02a      	beq.n	801067e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	b2db      	uxtb	r3, r3
 801062e:	4619      	mov	r1, r3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff f973 	bl	800f91c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010636:	4b1d      	ldr	r3, [pc, #116]	; (80106ac <USBD_SetConfig+0x148>)
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010640:	4b1a      	ldr	r3, [pc, #104]	; (80106ac <USBD_SetConfig+0x148>)
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	4619      	mov	r1, r3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff f94c 	bl	800f8e4 <USBD_SetClassConfig>
 801064c:	4603      	mov	r3, r0
 801064e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00f      	beq.n	8010676 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010656:	6839      	ldr	r1, [r7, #0]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 f903 	bl	8010864 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	685b      	ldr	r3, [r3, #4]
 8010662:	b2db      	uxtb	r3, r3
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff f958 	bl	800f91c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2202      	movs	r2, #2
 8010670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010674:	e014      	b.n	80106a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f9bf 	bl	80109fa <USBD_CtlSendStatus>
      break;
 801067c:	e010      	b.n	80106a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 f9bb 	bl	80109fa <USBD_CtlSendStatus>
      break;
 8010684:	e00c      	b.n	80106a0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010686:	6839      	ldr	r1, [r7, #0]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 f8eb 	bl	8010864 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801068e:	4b07      	ldr	r3, [pc, #28]	; (80106ac <USBD_SetConfig+0x148>)
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	4619      	mov	r1, r3
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7ff f941 	bl	800f91c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801069a:	2303      	movs	r3, #3
 801069c:	73fb      	strb	r3, [r7, #15]
      break;
 801069e:	bf00      	nop
  }

  return ret;
 80106a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	20000b30 	.word	0x20000b30

080106b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	88db      	ldrh	r3, [r3, #6]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d004      	beq.n	80106cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80106c2:	6839      	ldr	r1, [r7, #0]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 f8cd 	bl	8010864 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80106ca:	e023      	b.n	8010714 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	dc02      	bgt.n	80106de <USBD_GetConfig+0x2e>
 80106d8:	2b00      	cmp	r3, #0
 80106da:	dc03      	bgt.n	80106e4 <USBD_GetConfig+0x34>
 80106dc:	e015      	b.n	801070a <USBD_GetConfig+0x5a>
 80106de:	2b03      	cmp	r3, #3
 80106e0:	d00b      	beq.n	80106fa <USBD_GetConfig+0x4a>
 80106e2:	e012      	b.n	801070a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	3308      	adds	r3, #8
 80106ee:	2201      	movs	r2, #1
 80106f0:	4619      	mov	r1, r3
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 f927 	bl	8010946 <USBD_CtlSendData>
        break;
 80106f8:	e00c      	b.n	8010714 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	3304      	adds	r3, #4
 80106fe:	2201      	movs	r2, #1
 8010700:	4619      	mov	r1, r3
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f91f 	bl	8010946 <USBD_CtlSendData>
        break;
 8010708:	e004      	b.n	8010714 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801070a:	6839      	ldr	r1, [r7, #0]
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 f8a9 	bl	8010864 <USBD_CtlError>
        break;
 8010712:	bf00      	nop
}
 8010714:	bf00      	nop
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801072c:	b2db      	uxtb	r3, r3
 801072e:	3b01      	subs	r3, #1
 8010730:	2b02      	cmp	r3, #2
 8010732:	d81e      	bhi.n	8010772 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	88db      	ldrh	r3, [r3, #6]
 8010738:	2b02      	cmp	r3, #2
 801073a:	d004      	beq.n	8010746 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801073c:	6839      	ldr	r1, [r7, #0]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f890 	bl	8010864 <USBD_CtlError>
        break;
 8010744:	e01a      	b.n	801077c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2201      	movs	r2, #1
 801074a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010752:	2b00      	cmp	r3, #0
 8010754:	d005      	beq.n	8010762 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	f043 0202 	orr.w	r2, r3, #2
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	330c      	adds	r3, #12
 8010766:	2202      	movs	r2, #2
 8010768:	4619      	mov	r1, r3
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 f8eb 	bl	8010946 <USBD_CtlSendData>
      break;
 8010770:	e004      	b.n	801077c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010772:	6839      	ldr	r1, [r7, #0]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f875 	bl	8010864 <USBD_CtlError>
      break;
 801077a:	bf00      	nop
  }
}
 801077c:	bf00      	nop
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	885b      	ldrh	r3, [r3, #2]
 8010792:	2b01      	cmp	r3, #1
 8010794:	d106      	bne.n	80107a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2201      	movs	r2, #1
 801079a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f92b 	bl	80109fa <USBD_CtlSendStatus>
  }
}
 80107a4:	bf00      	nop
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	3b01      	subs	r3, #1
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d80b      	bhi.n	80107dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	885b      	ldrh	r3, [r3, #2]
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	d10c      	bne.n	80107e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f910 	bl	80109fa <USBD_CtlSendStatus>
      }
      break;
 80107da:	e004      	b.n	80107e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f840 	bl	8010864 <USBD_CtlError>
      break;
 80107e4:	e000      	b.n	80107e8 <USBD_ClrFeature+0x3c>
      break;
 80107e6:	bf00      	nop
  }
}
 80107e8:	bf00      	nop
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	781a      	ldrb	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	3301      	adds	r3, #1
 801080a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	781a      	ldrb	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	3301      	adds	r3, #1
 8010818:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	f7ff fa92 	bl	800fd44 <SWAPBYTE>
 8010820:	4603      	mov	r3, r0
 8010822:	461a      	mov	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	3301      	adds	r3, #1
 801082c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3301      	adds	r3, #1
 8010832:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f7ff fa85 	bl	800fd44 <SWAPBYTE>
 801083a:	4603      	mov	r3, r0
 801083c:	461a      	mov	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3301      	adds	r3, #1
 8010846:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	3301      	adds	r3, #1
 801084c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f7ff fa78 	bl	800fd44 <SWAPBYTE>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	80da      	strh	r2, [r3, #6]
}
 801085c:	bf00      	nop
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801086e:	2180      	movs	r1, #128	; 0x80
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f002 fd89 	bl	8013388 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010876:	2100      	movs	r1, #0
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f002 fd85 	bl	8013388 <USBD_LL_StallEP>
}
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b086      	sub	sp, #24
 801088a:	af00      	add	r7, sp, #0
 801088c:	60f8      	str	r0, [r7, #12]
 801088e:	60b9      	str	r1, [r7, #8]
 8010890:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010892:	2300      	movs	r3, #0
 8010894:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d036      	beq.n	801090a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80108a0:	6938      	ldr	r0, [r7, #16]
 80108a2:	f000 f836 	bl	8010912 <USBD_GetLen>
 80108a6:	4603      	mov	r3, r0
 80108a8:	3301      	adds	r3, #1
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80108b4:	7dfb      	ldrb	r3, [r7, #23]
 80108b6:	68ba      	ldr	r2, [r7, #8]
 80108b8:	4413      	add	r3, r2
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	7812      	ldrb	r2, [r2, #0]
 80108be:	701a      	strb	r2, [r3, #0]
  idx++;
 80108c0:	7dfb      	ldrb	r3, [r7, #23]
 80108c2:	3301      	adds	r3, #1
 80108c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	4413      	add	r3, r2
 80108cc:	2203      	movs	r2, #3
 80108ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80108d0:	7dfb      	ldrb	r3, [r7, #23]
 80108d2:	3301      	adds	r3, #1
 80108d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80108d6:	e013      	b.n	8010900 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	4413      	add	r3, r2
 80108de:	693a      	ldr	r2, [r7, #16]
 80108e0:	7812      	ldrb	r2, [r2, #0]
 80108e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	3301      	adds	r3, #1
 80108e8:	613b      	str	r3, [r7, #16]
    idx++;
 80108ea:	7dfb      	ldrb	r3, [r7, #23]
 80108ec:	3301      	adds	r3, #1
 80108ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80108f0:	7dfb      	ldrb	r3, [r7, #23]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	4413      	add	r3, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	701a      	strb	r2, [r3, #0]
    idx++;
 80108fa:	7dfb      	ldrb	r3, [r7, #23]
 80108fc:	3301      	adds	r3, #1
 80108fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d1e7      	bne.n	80108d8 <USBD_GetString+0x52>
 8010908:	e000      	b.n	801090c <USBD_GetString+0x86>
    return;
 801090a:	bf00      	nop
  }
}
 801090c:	3718      	adds	r7, #24
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010912:	b480      	push	{r7}
 8010914:	b085      	sub	sp, #20
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801091a:	2300      	movs	r3, #0
 801091c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010922:	e005      	b.n	8010930 <USBD_GetLen+0x1e>
  {
    len++;
 8010924:	7bfb      	ldrb	r3, [r7, #15]
 8010926:	3301      	adds	r3, #1
 8010928:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	3301      	adds	r3, #1
 801092e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1f5      	bne.n	8010924 <USBD_GetLen+0x12>
  }

  return len;
 8010938:	7bfb      	ldrb	r3, [r7, #15]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3714      	adds	r7, #20
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b084      	sub	sp, #16
 801094a:	af00      	add	r7, sp, #0
 801094c:	60f8      	str	r0, [r7, #12]
 801094e:	60b9      	str	r1, [r7, #8]
 8010950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2202      	movs	r2, #2
 8010956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	2100      	movs	r1, #0
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f002 fd95 	bl	801349c <USBD_LL_Transmit>

  return USBD_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	2100      	movs	r1, #0
 801098e:	68f8      	ldr	r0, [r7, #12]
 8010990:	f002 fd84 	bl	801349c <USBD_LL_Transmit>

  return USBD_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b084      	sub	sp, #16
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	60f8      	str	r0, [r7, #12]
 80109a6:	60b9      	str	r1, [r7, #8]
 80109a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2203      	movs	r2, #3
 80109ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	2100      	movs	r1, #0
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	f002 fd88 	bl	80134de <USBD_LL_PrepareReceive>

  return USBD_OK;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	2100      	movs	r1, #0
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f002 fd77 	bl	80134de <USBD_LL_PrepareReceive>

  return USBD_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b082      	sub	sp, #8
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2204      	movs	r2, #4
 8010a06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	2100      	movs	r1, #0
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f002 fd43 	bl	801349c <USBD_LL_Transmit>

  return USBD_OK;
 8010a16:	2300      	movs	r3, #0
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2205      	movs	r2, #5
 8010a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a30:	2300      	movs	r3, #0
 8010a32:	2200      	movs	r2, #0
 8010a34:	2100      	movs	r1, #0
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f002 fd51 	bl	80134de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3708      	adds	r7, #8
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010a46:	b480      	push	{r7}
 8010a48:	b085      	sub	sp, #20
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010a50:	2300      	movs	r3, #0
 8010a52:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a58:	2b84      	cmp	r3, #132	; 0x84
 8010a5a:	d005      	beq.n	8010a68 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010a5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	4413      	add	r3, r2
 8010a64:	3303      	adds	r3, #3
 8010a66:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010a68:	68fb      	ldr	r3, [r7, #12]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr

08010a76 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010a7a:	f000 fee9 	bl	8011850 <vTaskStartScheduler>
  
  return osOK;
 8010a7e:	2300      	movs	r3, #0
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a86:	b087      	sub	sp, #28
 8010a88:	af02      	add	r7, sp, #8
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	685c      	ldr	r4, [r3, #4]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010a9a:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7ff ffcf 	bl	8010a46 <makeFreeRtosPriority>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	f107 030c 	add.w	r3, r7, #12
 8010aae:	9301      	str	r3, [sp, #4]
 8010ab0:	9200      	str	r2, [sp, #0]
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f000 fd55 	bl	8011568 <xTaskCreate>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d001      	beq.n	8010ac8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	e000      	b.n	8010aca <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3714      	adds	r7, #20
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ad2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b084      	sub	sp, #16
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d001      	beq.n	8010ae8 <osDelay+0x16>
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	e000      	b.n	8010aea <osDelay+0x18>
 8010ae8:	2301      	movs	r3, #1
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 fe7c 	bl	80117e8 <vTaskDelay>
  
  return osOK;
 8010af0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b082      	sub	sp, #8
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8010b02:	2001      	movs	r0, #1
 8010b04:	f000 f9a1 	bl	8010e4a <xQueueCreateMutex>
 8010b08:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3708      	adds	r7, #8
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}

08010b12 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010b12:	b580      	push	{r7, lr}
 8010b14:	b084      	sub	sp, #16
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
 8010b1a:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d110      	bne.n	8010b44 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8010b22:	2203      	movs	r2, #3
 8010b24:	2100      	movs	r1, #0
 8010b26:	2001      	movs	r0, #1
 8010b28:	f000 f920 	bl	8010d6c <xQueueGenericCreate>
 8010b2c:	60f8      	str	r0, [r7, #12]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d005      	beq.n	8010b40 <osSemaphoreCreate+0x2e>
 8010b34:	2300      	movs	r3, #0
 8010b36:	2200      	movs	r2, #0
 8010b38:	2100      	movs	r1, #0
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f000 f99e 	bl	8010e7c <xQueueGenericSend>
    return sema;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	e000      	b.n	8010b46 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8010b44:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3710      	adds	r7, #16
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010b4e:	b480      	push	{r7}
 8010b50:	b083      	sub	sp, #12
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f103 0208 	add.w	r2, r3, #8
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f04f 32ff 	mov.w	r2, #4294967295
 8010b66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f103 0208 	add.w	r2, r3, #8
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f103 0208 	add.w	r2, r3, #8
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010b82:	bf00      	nop
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010b8e:	b480      	push	{r7}
 8010b90:	b083      	sub	sp, #12
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010b9c:	bf00      	nop
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	68fa      	ldr	r2, [r7, #12]
 8010bbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	689a      	ldr	r2, [r3, #8]
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	689b      	ldr	r3, [r3, #8]
 8010bca:	683a      	ldr	r2, [r7, #0]
 8010bcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	683a      	ldr	r2, [r7, #0]
 8010bd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	1c5a      	adds	r2, r3, #1
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	601a      	str	r2, [r3, #0]
}
 8010be4:	bf00      	nop
 8010be6:	3714      	adds	r7, #20
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c06:	d103      	bne.n	8010c10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	e00c      	b.n	8010c2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	3308      	adds	r3, #8
 8010c14:	60fb      	str	r3, [r7, #12]
 8010c16:	e002      	b.n	8010c1e <vListInsert+0x2e>
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	60fb      	str	r3, [r7, #12]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d2f6      	bcs.n	8010c18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	683a      	ldr	r2, [r7, #0]
 8010c44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	1c5a      	adds	r2, r3, #1
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	601a      	str	r2, [r3, #0]
}
 8010c56:	bf00      	nop
 8010c58:	3714      	adds	r7, #20
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010c62:	b480      	push	{r7}
 8010c64:	b085      	sub	sp, #20
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	691b      	ldr	r3, [r3, #16]
 8010c6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	6892      	ldr	r2, [r2, #8]
 8010c78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	689b      	ldr	r3, [r3, #8]
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	6852      	ldr	r2, [r2, #4]
 8010c82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d103      	bne.n	8010c96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	689a      	ldr	r2, [r3, #8]
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	1e5a      	subs	r2, r3, #1
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3714      	adds	r7, #20
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr

08010cb6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b084      	sub	sp, #16
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
 8010cbe:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10a      	bne.n	8010ce0 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cce:	f383 8811 	msr	BASEPRI, r3
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	f3bf 8f4f 	dsb	sy
 8010cda:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010cdc:	bf00      	nop
 8010cde:	e7fe      	b.n	8010cde <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010ce0:	f001 fcc0 	bl	8012664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cec:	68f9      	ldr	r1, [r7, #12]
 8010cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010cf0:	fb01 f303 	mul.w	r3, r1, r3
 8010cf4:	441a      	add	r2, r3
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d10:	3b01      	subs	r3, #1
 8010d12:	68f9      	ldr	r1, [r7, #12]
 8010d14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d16:	fb01 f303 	mul.w	r3, r1, r3
 8010d1a:	441a      	add	r2, r3
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	22ff      	movs	r2, #255	; 0xff
 8010d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	22ff      	movs	r2, #255	; 0xff
 8010d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d109      	bne.n	8010d4a <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	691b      	ldr	r3, [r3, #16]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00f      	beq.n	8010d5e <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	3310      	adds	r3, #16
 8010d42:	4618      	mov	r0, r3
 8010d44:	f000 ff8c 	bl	8011c60 <xTaskRemoveFromEventList>
 8010d48:	e009      	b.n	8010d5e <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	3310      	adds	r3, #16
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ff fefd 	bl	8010b4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	3324      	adds	r3, #36	; 0x24
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff fef8 	bl	8010b4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010d5e:	f001 fcb1 	bl	80126c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010d62:	2301      	movs	r3, #1
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b08a      	sub	sp, #40	; 0x28
 8010d70:	af02      	add	r7, sp, #8
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	4613      	mov	r3, r2
 8010d78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d10a      	bne.n	8010d96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d84:	f383 8811 	msr	BASEPRI, r3
 8010d88:	f3bf 8f6f 	isb	sy
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	613b      	str	r3, [r7, #16]
}
 8010d92:	bf00      	nop
 8010d94:	e7fe      	b.n	8010d94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	fb02 f303 	mul.w	r3, r2, r3
 8010d9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	3348      	adds	r3, #72	; 0x48
 8010da4:	4618      	mov	r0, r3
 8010da6:	f001 fd7f 	bl	80128a8 <pvPortMalloc>
 8010daa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00d      	beq.n	8010dce <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	3348      	adds	r3, #72	; 0x48
 8010dba:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dbc:	79fa      	ldrb	r2, [r7, #7]
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	697a      	ldr	r2, [r7, #20]
 8010dc6:	68b9      	ldr	r1, [r7, #8]
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f000 f805 	bl	8010dd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010dce:	69bb      	ldr	r3, [r7, #24]
	}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3720      	adds	r7, #32
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
 8010de4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d103      	bne.n	8010df4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	69ba      	ldr	r2, [r7, #24]
 8010df0:	601a      	str	r2, [r3, #0]
 8010df2:	e002      	b.n	8010dfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e00:	69bb      	ldr	r3, [r7, #24]
 8010e02:	68ba      	ldr	r2, [r7, #8]
 8010e04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e06:	2101      	movs	r1, #1
 8010e08:	69b8      	ldr	r0, [r7, #24]
 8010e0a:	f7ff ff54 	bl	8010cb6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010e0e:	bf00      	nop
 8010e10:	3710      	adds	r7, #16
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b082      	sub	sp, #8
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d00e      	beq.n	8010e42 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2200      	movs	r2, #0
 8010e28:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010e36:	2300      	movs	r3, #0
 8010e38:	2200      	movs	r2, #0
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f81d 	bl	8010e7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010e42:	bf00      	nop
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b086      	sub	sp, #24
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	4603      	mov	r3, r0
 8010e52:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010e54:	2301      	movs	r3, #1
 8010e56:	617b      	str	r3, [r7, #20]
 8010e58:	2300      	movs	r3, #0
 8010e5a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010e5c:	79fb      	ldrb	r3, [r7, #7]
 8010e5e:	461a      	mov	r2, r3
 8010e60:	6939      	ldr	r1, [r7, #16]
 8010e62:	6978      	ldr	r0, [r7, #20]
 8010e64:	f7ff ff82 	bl	8010d6c <xQueueGenericCreate>
 8010e68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7ff ffd3 	bl	8010e16 <prvInitialiseMutex>

		return xNewQueue;
 8010e70:	68fb      	ldr	r3, [r7, #12]
	}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3718      	adds	r7, #24
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
	...

08010e7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b08e      	sub	sp, #56	; 0x38
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d10a      	bne.n	8010eae <xQueueGenericSend+0x32>
	__asm volatile
 8010e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9c:	f383 8811 	msr	BASEPRI, r3
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010eaa:	bf00      	nop
 8010eac:	e7fe      	b.n	8010eac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d103      	bne.n	8010ebc <xQueueGenericSend+0x40>
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d101      	bne.n	8010ec0 <xQueueGenericSend+0x44>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	e000      	b.n	8010ec2 <xQueueGenericSend+0x46>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10a      	bne.n	8010edc <xQueueGenericSend+0x60>
	__asm volatile
 8010ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eca:	f383 8811 	msr	BASEPRI, r3
 8010ece:	f3bf 8f6f 	isb	sy
 8010ed2:	f3bf 8f4f 	dsb	sy
 8010ed6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ed8:	bf00      	nop
 8010eda:	e7fe      	b.n	8010eda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d103      	bne.n	8010eea <xQueueGenericSend+0x6e>
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d101      	bne.n	8010eee <xQueueGenericSend+0x72>
 8010eea:	2301      	movs	r3, #1
 8010eec:	e000      	b.n	8010ef0 <xQueueGenericSend+0x74>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d10a      	bne.n	8010f0a <xQueueGenericSend+0x8e>
	__asm volatile
 8010ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef8:	f383 8811 	msr	BASEPRI, r3
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f3bf 8f4f 	dsb	sy
 8010f04:	623b      	str	r3, [r7, #32]
}
 8010f06:	bf00      	nop
 8010f08:	e7fe      	b.n	8010f08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f0a:	f001 f855 	bl	8011fb8 <xTaskGetSchedulerState>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d102      	bne.n	8010f1a <xQueueGenericSend+0x9e>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d101      	bne.n	8010f1e <xQueueGenericSend+0xa2>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e000      	b.n	8010f20 <xQueueGenericSend+0xa4>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d10a      	bne.n	8010f3a <xQueueGenericSend+0xbe>
	__asm volatile
 8010f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f28:	f383 8811 	msr	BASEPRI, r3
 8010f2c:	f3bf 8f6f 	isb	sy
 8010f30:	f3bf 8f4f 	dsb	sy
 8010f34:	61fb      	str	r3, [r7, #28]
}
 8010f36:	bf00      	nop
 8010f38:	e7fe      	b.n	8010f38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f3a:	f001 fb93 	bl	8012664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d302      	bcc.n	8010f50 <xQueueGenericSend+0xd4>
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	2b02      	cmp	r3, #2
 8010f4e:	d112      	bne.n	8010f76 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	68b9      	ldr	r1, [r7, #8]
 8010f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f56:	f000 fa1d 	bl	8011394 <prvCopyDataToQueue>
 8010f5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d004      	beq.n	8010f6e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f66:	3324      	adds	r3, #36	; 0x24
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f000 fe79 	bl	8011c60 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010f6e:	f001 fba9 	bl	80126c4 <vPortExitCritical>
				return pdPASS;
 8010f72:	2301      	movs	r3, #1
 8010f74:	e062      	b.n	801103c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d103      	bne.n	8010f84 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f7c:	f001 fba2 	bl	80126c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010f80:	2300      	movs	r3, #0
 8010f82:	e05b      	b.n	801103c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d106      	bne.n	8010f98 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f8a:	f107 0314 	add.w	r3, r7, #20
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f000 fec8 	bl	8011d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f94:	2301      	movs	r3, #1
 8010f96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f98:	f001 fb94 	bl	80126c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f9c:	f000 fca8 	bl	80118f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fa0:	f001 fb60 	bl	8012664 <vPortEnterCritical>
 8010fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010faa:	b25b      	sxtb	r3, r3
 8010fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb0:	d103      	bne.n	8010fba <xQueueGenericSend+0x13e>
 8010fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fc0:	b25b      	sxtb	r3, r3
 8010fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc6:	d103      	bne.n	8010fd0 <xQueueGenericSend+0x154>
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fd0:	f001 fb78 	bl	80126c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fd4:	1d3a      	adds	r2, r7, #4
 8010fd6:	f107 0314 	add.w	r3, r7, #20
 8010fda:	4611      	mov	r1, r2
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f000 feb7 	bl	8011d50 <xTaskCheckForTimeOut>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d123      	bne.n	8011030 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fea:	f000 faa5 	bl	8011538 <prvIsQueueFull>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d017      	beq.n	8011024 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff6:	3310      	adds	r3, #16
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	4611      	mov	r1, r2
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f000 fe0b 	bl	8011c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011004:	f000 fa30 	bl	8011468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011008:	f000 fc80 	bl	801190c <xTaskResumeAll>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d193      	bne.n	8010f3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011012:	4b0c      	ldr	r3, [pc, #48]	; (8011044 <xQueueGenericSend+0x1c8>)
 8011014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011018:	601a      	str	r2, [r3, #0]
 801101a:	f3bf 8f4f 	dsb	sy
 801101e:	f3bf 8f6f 	isb	sy
 8011022:	e78a      	b.n	8010f3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011026:	f000 fa1f 	bl	8011468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801102a:	f000 fc6f 	bl	801190c <xTaskResumeAll>
 801102e:	e784      	b.n	8010f3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011032:	f000 fa19 	bl	8011468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011036:	f000 fc69 	bl	801190c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801103a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801103c:	4618      	mov	r0, r3
 801103e:	3738      	adds	r7, #56	; 0x38
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	e000ed04 	.word	0xe000ed04

08011048 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b08e      	sub	sp, #56	; 0x38
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011058:	2b00      	cmp	r3, #0
 801105a:	d10a      	bne.n	8011072 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011060:	f383 8811 	msr	BASEPRI, r3
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	623b      	str	r3, [r7, #32]
}
 801106e:	bf00      	nop
 8011070:	e7fe      	b.n	8011070 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011076:	2b00      	cmp	r3, #0
 8011078:	d00a      	beq.n	8011090 <xQueueGiveFromISR+0x48>
	__asm volatile
 801107a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107e:	f383 8811 	msr	BASEPRI, r3
 8011082:	f3bf 8f6f 	isb	sy
 8011086:	f3bf 8f4f 	dsb	sy
 801108a:	61fb      	str	r3, [r7, #28]
}
 801108c:	bf00      	nop
 801108e:	e7fe      	b.n	801108e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d103      	bne.n	80110a0 <xQueueGiveFromISR+0x58>
 8011098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d101      	bne.n	80110a4 <xQueueGiveFromISR+0x5c>
 80110a0:	2301      	movs	r3, #1
 80110a2:	e000      	b.n	80110a6 <xQueueGiveFromISR+0x5e>
 80110a4:	2300      	movs	r3, #0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10a      	bne.n	80110c0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80110aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ae:	f383 8811 	msr	BASEPRI, r3
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	f3bf 8f4f 	dsb	sy
 80110ba:	61bb      	str	r3, [r7, #24]
}
 80110bc:	bf00      	nop
 80110be:	e7fe      	b.n	80110be <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80110c0:	f001 fbb2 	bl	8012828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80110c4:	f3ef 8211 	mrs	r2, BASEPRI
 80110c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	617a      	str	r2, [r7, #20]
 80110da:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80110dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80110de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80110e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80110e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d22b      	bcs.n	8011148 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80110f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011102:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801110a:	d112      	bne.n	8011132 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011110:	2b00      	cmp	r3, #0
 8011112:	d016      	beq.n	8011142 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011116:	3324      	adds	r3, #36	; 0x24
 8011118:	4618      	mov	r0, r3
 801111a:	f000 fda1 	bl	8011c60 <xTaskRemoveFromEventList>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00e      	beq.n	8011142 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00b      	beq.n	8011142 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2201      	movs	r2, #1
 801112e:	601a      	str	r2, [r3, #0]
 8011130:	e007      	b.n	8011142 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011136:	3301      	adds	r3, #1
 8011138:	b2db      	uxtb	r3, r3
 801113a:	b25a      	sxtb	r2, r3
 801113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011142:	2301      	movs	r3, #1
 8011144:	637b      	str	r3, [r7, #52]	; 0x34
 8011146:	e001      	b.n	801114c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011148:	2300      	movs	r3, #0
 801114a:	637b      	str	r3, [r7, #52]	; 0x34
 801114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011156:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801115a:	4618      	mov	r0, r3
 801115c:	3738      	adds	r7, #56	; 0x38
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
	...

08011164 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08e      	sub	sp, #56	; 0x38
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801116e:	2300      	movs	r3, #0
 8011170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011176:	2300      	movs	r3, #0
 8011178:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d10a      	bne.n	8011196 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011184:	f383 8811 	msr	BASEPRI, r3
 8011188:	f3bf 8f6f 	isb	sy
 801118c:	f3bf 8f4f 	dsb	sy
 8011190:	623b      	str	r3, [r7, #32]
}
 8011192:	bf00      	nop
 8011194:	e7fe      	b.n	8011194 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801119a:	2b00      	cmp	r3, #0
 801119c:	d00a      	beq.n	80111b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801119e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a2:	f383 8811 	msr	BASEPRI, r3
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	61fb      	str	r3, [r7, #28]
}
 80111b0:	bf00      	nop
 80111b2:	e7fe      	b.n	80111b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80111b4:	f000 ff00 	bl	8011fb8 <xTaskGetSchedulerState>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d102      	bne.n	80111c4 <xQueueSemaphoreTake+0x60>
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d101      	bne.n	80111c8 <xQueueSemaphoreTake+0x64>
 80111c4:	2301      	movs	r3, #1
 80111c6:	e000      	b.n	80111ca <xQueueSemaphoreTake+0x66>
 80111c8:	2300      	movs	r3, #0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d10a      	bne.n	80111e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80111ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d2:	f383 8811 	msr	BASEPRI, r3
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	61bb      	str	r3, [r7, #24]
}
 80111e0:	bf00      	nop
 80111e2:	e7fe      	b.n	80111e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111e4:	f001 fa3e 	bl	8012664 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80111e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80111ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d019      	beq.n	8011228 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80111f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f6:	1e5a      	subs	r2, r3, #1
 80111f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d104      	bne.n	801120e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011204:	f001 f880 	bl	8012308 <pvTaskIncrementMutexHeldCount>
 8011208:	4602      	mov	r2, r0
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d004      	beq.n	8011220 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011218:	3310      	adds	r3, #16
 801121a:	4618      	mov	r0, r3
 801121c:	f000 fd20 	bl	8011c60 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011220:	f001 fa50 	bl	80126c4 <vPortExitCritical>
				return pdPASS;
 8011224:	2301      	movs	r3, #1
 8011226:	e097      	b.n	8011358 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d111      	bne.n	8011252 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00a      	beq.n	801124a <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8011234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011238:	f383 8811 	msr	BASEPRI, r3
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f3bf 8f4f 	dsb	sy
 8011244:	617b      	str	r3, [r7, #20]
}
 8011246:	bf00      	nop
 8011248:	e7fe      	b.n	8011248 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801124a:	f001 fa3b 	bl	80126c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801124e:	2300      	movs	r3, #0
 8011250:	e082      	b.n	8011358 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011254:	2b00      	cmp	r3, #0
 8011256:	d106      	bne.n	8011266 <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011258:	f107 030c 	add.w	r3, r7, #12
 801125c:	4618      	mov	r0, r3
 801125e:	f000 fd61 	bl	8011d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011262:	2301      	movs	r3, #1
 8011264:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011266:	f001 fa2d 	bl	80126c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801126a:	f000 fb41 	bl	80118f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801126e:	f001 f9f9 	bl	8012664 <vPortEnterCritical>
 8011272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011278:	b25b      	sxtb	r3, r3
 801127a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801127e:	d103      	bne.n	8011288 <xQueueSemaphoreTake+0x124>
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	2200      	movs	r2, #0
 8011284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801128e:	b25b      	sxtb	r3, r3
 8011290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011294:	d103      	bne.n	801129e <xQueueSemaphoreTake+0x13a>
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801129e:	f001 fa11 	bl	80126c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80112a2:	463a      	mov	r2, r7
 80112a4:	f107 030c 	add.w	r3, r7, #12
 80112a8:	4611      	mov	r1, r2
 80112aa:	4618      	mov	r0, r3
 80112ac:	f000 fd50 	bl	8011d50 <xTaskCheckForTimeOut>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d132      	bne.n	801131c <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112b8:	f000 f928 	bl	801150c <prvIsQueueEmpty>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d026      	beq.n	8011310 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d109      	bne.n	80112de <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80112ca:	f001 f9cb 	bl	8012664 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f000 fe8e 	bl	8011ff4 <xTaskPriorityInherit>
 80112d8:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80112da:	f001 f9f3 	bl	80126c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80112de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e0:	3324      	adds	r3, #36	; 0x24
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	4611      	mov	r1, r2
 80112e6:	4618      	mov	r0, r3
 80112e8:	f000 fc96 	bl	8011c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80112ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ee:	f000 f8bb 	bl	8011468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80112f2:	f000 fb0b 	bl	801190c <xTaskResumeAll>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f47f af73 	bne.w	80111e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80112fe:	4b18      	ldr	r3, [pc, #96]	; (8011360 <xQueueSemaphoreTake+0x1fc>)
 8011300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011304:	601a      	str	r2, [r3, #0]
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	f3bf 8f6f 	isb	sy
 801130e:	e769      	b.n	80111e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011312:	f000 f8a9 	bl	8011468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011316:	f000 faf9 	bl	801190c <xTaskResumeAll>
 801131a:	e763      	b.n	80111e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801131c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801131e:	f000 f8a3 	bl	8011468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011322:	f000 faf3 	bl	801190c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011328:	f000 f8f0 	bl	801150c <prvIsQueueEmpty>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	f43f af58 	beq.w	80111e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00d      	beq.n	8011356 <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 801133a:	f001 f993 	bl	8012664 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801133e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011340:	f000 f810 	bl	8011364 <prvGetDisinheritPriorityAfterTimeout>
 8011344:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801134c:	4618      	mov	r0, r3
 801134e:	f000 ff4d 	bl	80121ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011352:	f001 f9b7 	bl	80126c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011356:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011358:	4618      	mov	r0, r3
 801135a:	3738      	adds	r7, #56	; 0x38
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	e000ed04 	.word	0xe000ed04

08011364 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011364:	b480      	push	{r7}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011370:	2b00      	cmp	r3, #0
 8011372:	d006      	beq.n	8011382 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f1c3 0307 	rsb	r3, r3, #7
 801137e:	60fb      	str	r3, [r7, #12]
 8011380:	e001      	b.n	8011386 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011382:	2300      	movs	r3, #0
 8011384:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011386:	68fb      	ldr	r3, [r7, #12]
	}
 8011388:	4618      	mov	r0, r3
 801138a:	3714      	adds	r7, #20
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr

08011394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b086      	sub	sp, #24
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80113a0:	2300      	movs	r3, #0
 80113a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d10d      	bne.n	80113ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d14d      	bne.n	8011456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	4618      	mov	r0, r3
 80113c0:	f000 fe8e 	bl	80120e0 <xTaskPriorityDisinherit>
 80113c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2200      	movs	r2, #0
 80113ca:	609a      	str	r2, [r3, #8]
 80113cc:	e043      	b.n	8011456 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d119      	bne.n	8011408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	6858      	ldr	r0, [r3, #4]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113dc:	461a      	mov	r2, r3
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	f002 f9da 	bl	8013798 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	685a      	ldr	r2, [r3, #4]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ec:	441a      	add	r2, r3
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	685a      	ldr	r2, [r3, #4]
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	689b      	ldr	r3, [r3, #8]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d32b      	bcc.n	8011456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	605a      	str	r2, [r3, #4]
 8011406:	e026      	b.n	8011456 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	68d8      	ldr	r0, [r3, #12]
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011410:	461a      	mov	r2, r3
 8011412:	68b9      	ldr	r1, [r7, #8]
 8011414:	f002 f9c0 	bl	8013798 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	68da      	ldr	r2, [r3, #12]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011420:	425b      	negs	r3, r3
 8011422:	441a      	add	r2, r3
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	68da      	ldr	r2, [r3, #12]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	429a      	cmp	r2, r3
 8011432:	d207      	bcs.n	8011444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	689a      	ldr	r2, [r3, #8]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143c:	425b      	negs	r3, r3
 801143e:	441a      	add	r2, r3
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b02      	cmp	r3, #2
 8011448:	d105      	bne.n	8011456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d002      	beq.n	8011456 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	3b01      	subs	r3, #1
 8011454:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	1c5a      	adds	r2, r3, #1
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801145e:	697b      	ldr	r3, [r7, #20]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3718      	adds	r7, #24
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011470:	f001 f8f8 	bl	8012664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801147a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801147c:	e011      	b.n	80114a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011482:	2b00      	cmp	r3, #0
 8011484:	d012      	beq.n	80114ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	3324      	adds	r3, #36	; 0x24
 801148a:	4618      	mov	r0, r3
 801148c:	f000 fbe8 	bl	8011c60 <xTaskRemoveFromEventList>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d001      	beq.n	801149a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011496:	f000 fccd 	bl	8011e34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801149a:	7bfb      	ldrb	r3, [r7, #15]
 801149c:	3b01      	subs	r3, #1
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	dce9      	bgt.n	801147e <prvUnlockQueue+0x16>
 80114aa:	e000      	b.n	80114ae <prvUnlockQueue+0x46>
					break;
 80114ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	22ff      	movs	r2, #255	; 0xff
 80114b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80114b6:	f001 f905 	bl	80126c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80114ba:	f001 f8d3 	bl	8012664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114c6:	e011      	b.n	80114ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d012      	beq.n	80114f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	3310      	adds	r3, #16
 80114d4:	4618      	mov	r0, r3
 80114d6:	f000 fbc3 	bl	8011c60 <xTaskRemoveFromEventList>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80114e0:	f000 fca8 	bl	8011e34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80114e4:	7bbb      	ldrb	r3, [r7, #14]
 80114e6:	3b01      	subs	r3, #1
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	dce9      	bgt.n	80114c8 <prvUnlockQueue+0x60>
 80114f4:	e000      	b.n	80114f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80114f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	22ff      	movs	r2, #255	; 0xff
 80114fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011500:	f001 f8e0 	bl	80126c4 <vPortExitCritical>
}
 8011504:	bf00      	nop
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011514:	f001 f8a6 	bl	8012664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801151c:	2b00      	cmp	r3, #0
 801151e:	d102      	bne.n	8011526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011520:	2301      	movs	r3, #1
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	e001      	b.n	801152a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011526:	2300      	movs	r3, #0
 8011528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801152a:	f001 f8cb 	bl	80126c4 <vPortExitCritical>

	return xReturn;
 801152e:	68fb      	ldr	r3, [r7, #12]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011540:	f001 f890 	bl	8012664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801154c:	429a      	cmp	r2, r3
 801154e:	d102      	bne.n	8011556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011550:	2301      	movs	r3, #1
 8011552:	60fb      	str	r3, [r7, #12]
 8011554:	e001      	b.n	801155a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011556:	2300      	movs	r3, #0
 8011558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801155a:	f001 f8b3 	bl	80126c4 <vPortExitCritical>

	return xReturn;
 801155e:	68fb      	ldr	r3, [r7, #12]
}
 8011560:	4618      	mov	r0, r3
 8011562:	3710      	adds	r7, #16
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011568:	b580      	push	{r7, lr}
 801156a:	b08c      	sub	sp, #48	; 0x30
 801156c:	af04      	add	r7, sp, #16
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	603b      	str	r3, [r7, #0]
 8011574:	4613      	mov	r3, r2
 8011576:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011578:	88fb      	ldrh	r3, [r7, #6]
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	4618      	mov	r0, r3
 801157e:	f001 f993 	bl	80128a8 <pvPortMalloc>
 8011582:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00e      	beq.n	80115a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801158a:	20a0      	movs	r0, #160	; 0xa0
 801158c:	f001 f98c 	bl	80128a8 <pvPortMalloc>
 8011590:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d003      	beq.n	80115a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	631a      	str	r2, [r3, #48]	; 0x30
 801159e:	e005      	b.n	80115ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80115a0:	6978      	ldr	r0, [r7, #20]
 80115a2:	f001 fa4d 	bl	8012a40 <vPortFree>
 80115a6:	e001      	b.n	80115ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80115a8:	2300      	movs	r3, #0
 80115aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d013      	beq.n	80115da <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80115b2:	88fa      	ldrh	r2, [r7, #6]
 80115b4:	2300      	movs	r3, #0
 80115b6:	9303      	str	r3, [sp, #12]
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	9302      	str	r3, [sp, #8]
 80115bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115be:	9301      	str	r3, [sp, #4]
 80115c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c2:	9300      	str	r3, [sp, #0]
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	68b9      	ldr	r1, [r7, #8]
 80115c8:	68f8      	ldr	r0, [r7, #12]
 80115ca:	f000 f80f 	bl	80115ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80115ce:	69f8      	ldr	r0, [r7, #28]
 80115d0:	f000 f8ae 	bl	8011730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80115d4:	2301      	movs	r3, #1
 80115d6:	61bb      	str	r3, [r7, #24]
 80115d8:	e002      	b.n	80115e0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80115da:	f04f 33ff 	mov.w	r3, #4294967295
 80115de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80115e0:	69bb      	ldr	r3, [r7, #24]
	}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3720      	adds	r7, #32
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
	...

080115ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b088      	sub	sp, #32
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	607a      	str	r2, [r7, #4]
 80115f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80115fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011604:	3b01      	subs	r3, #1
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	4413      	add	r3, r2
 801160a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801160c:	69bb      	ldr	r3, [r7, #24]
 801160e:	f023 0307 	bic.w	r3, r3, #7
 8011612:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	f003 0307 	and.w	r3, r3, #7
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00a      	beq.n	8011634 <prvInitialiseNewTask+0x48>
	__asm volatile
 801161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011622:	f383 8811 	msr	BASEPRI, r3
 8011626:	f3bf 8f6f 	isb	sy
 801162a:	f3bf 8f4f 	dsb	sy
 801162e:	617b      	str	r3, [r7, #20]
}
 8011630:	bf00      	nop
 8011632:	e7fe      	b.n	8011632 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d01f      	beq.n	801167a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801163a:	2300      	movs	r3, #0
 801163c:	61fb      	str	r3, [r7, #28]
 801163e:	e012      	b.n	8011666 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011640:	68ba      	ldr	r2, [r7, #8]
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	4413      	add	r3, r2
 8011646:	7819      	ldrb	r1, [r3, #0]
 8011648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	4413      	add	r3, r2
 801164e:	3334      	adds	r3, #52	; 0x34
 8011650:	460a      	mov	r2, r1
 8011652:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011654:	68ba      	ldr	r2, [r7, #8]
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	4413      	add	r3, r2
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d006      	beq.n	801166e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	3301      	adds	r3, #1
 8011664:	61fb      	str	r3, [r7, #28]
 8011666:	69fb      	ldr	r3, [r7, #28]
 8011668:	2b0f      	cmp	r3, #15
 801166a:	d9e9      	bls.n	8011640 <prvInitialiseNewTask+0x54>
 801166c:	e000      	b.n	8011670 <prvInitialiseNewTask+0x84>
			{
				break;
 801166e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011672:	2200      	movs	r2, #0
 8011674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011678:	e003      	b.n	8011682 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801167c:	2200      	movs	r2, #0
 801167e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011684:	2b06      	cmp	r3, #6
 8011686:	d901      	bls.n	801168c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011688:	2306      	movs	r3, #6
 801168a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011690:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011696:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169a:	2200      	movs	r2, #0
 801169c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a0:	3304      	adds	r3, #4
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7ff fa73 	bl	8010b8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80116a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116aa:	3318      	adds	r3, #24
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7ff fa6e 	bl	8010b8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80116b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ba:	f1c3 0207 	rsb	r2, r3, #7
 80116be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80116c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80116c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ca:	2200      	movs	r2, #0
 80116cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80116d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d2:	2200      	movs	r2, #0
 80116d4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80116d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116da:	334c      	adds	r3, #76	; 0x4c
 80116dc:	224c      	movs	r2, #76	; 0x4c
 80116de:	2100      	movs	r1, #0
 80116e0:	4618      	mov	r0, r3
 80116e2:	f001 ffcf 	bl	8013684 <memset>
 80116e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e8:	4a0e      	ldr	r2, [pc, #56]	; (8011724 <prvInitialiseNewTask+0x138>)
 80116ea:	651a      	str	r2, [r3, #80]	; 0x50
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	4a0e      	ldr	r2, [pc, #56]	; (8011728 <prvInitialiseNewTask+0x13c>)
 80116f0:	655a      	str	r2, [r3, #84]	; 0x54
 80116f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f4:	4a0d      	ldr	r2, [pc, #52]	; (801172c <prvInitialiseNewTask+0x140>)
 80116f6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80116f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fa:	2200      	movs	r2, #0
 80116fc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011700:	683a      	ldr	r2, [r7, #0]
 8011702:	68f9      	ldr	r1, [r7, #12]
 8011704:	69b8      	ldr	r0, [r7, #24]
 8011706:	f000 fe7d 	bl	8012404 <pxPortInitialiseStack>
 801170a:	4602      	mov	r2, r0
 801170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011712:	2b00      	cmp	r3, #0
 8011714:	d002      	beq.n	801171c <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801171a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801171c:	bf00      	nop
 801171e:	3720      	adds	r7, #32
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	2000566c 	.word	0x2000566c
 8011728:	200056d4 	.word	0x200056d4
 801172c:	2000573c 	.word	0x2000573c

08011730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011738:	f000 ff94 	bl	8012664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801173c:	4b24      	ldr	r3, [pc, #144]	; (80117d0 <prvAddNewTaskToReadyList+0xa0>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	3301      	adds	r3, #1
 8011742:	4a23      	ldr	r2, [pc, #140]	; (80117d0 <prvAddNewTaskToReadyList+0xa0>)
 8011744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011746:	4b23      	ldr	r3, [pc, #140]	; (80117d4 <prvAddNewTaskToReadyList+0xa4>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d109      	bne.n	8011762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801174e:	4a21      	ldr	r2, [pc, #132]	; (80117d4 <prvAddNewTaskToReadyList+0xa4>)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011754:	4b1e      	ldr	r3, [pc, #120]	; (80117d0 <prvAddNewTaskToReadyList+0xa0>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d110      	bne.n	801177e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801175c:	f000 fb88 	bl	8011e70 <prvInitialiseTaskLists>
 8011760:	e00d      	b.n	801177e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011762:	4b1d      	ldr	r3, [pc, #116]	; (80117d8 <prvAddNewTaskToReadyList+0xa8>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d109      	bne.n	801177e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801176a:	4b1a      	ldr	r3, [pc, #104]	; (80117d4 <prvAddNewTaskToReadyList+0xa4>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011774:	429a      	cmp	r2, r3
 8011776:	d802      	bhi.n	801177e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011778:	4a16      	ldr	r2, [pc, #88]	; (80117d4 <prvAddNewTaskToReadyList+0xa4>)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801177e:	4b17      	ldr	r3, [pc, #92]	; (80117dc <prvAddNewTaskToReadyList+0xac>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	3301      	adds	r3, #1
 8011784:	4a15      	ldr	r2, [pc, #84]	; (80117dc <prvAddNewTaskToReadyList+0xac>)
 8011786:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178c:	2201      	movs	r2, #1
 801178e:	409a      	lsls	r2, r3
 8011790:	4b13      	ldr	r3, [pc, #76]	; (80117e0 <prvAddNewTaskToReadyList+0xb0>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	4313      	orrs	r3, r2
 8011796:	4a12      	ldr	r2, [pc, #72]	; (80117e0 <prvAddNewTaskToReadyList+0xb0>)
 8011798:	6013      	str	r3, [r2, #0]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801179e:	4613      	mov	r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4413      	add	r3, r2
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	4a0f      	ldr	r2, [pc, #60]	; (80117e4 <prvAddNewTaskToReadyList+0xb4>)
 80117a8:	441a      	add	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	3304      	adds	r3, #4
 80117ae:	4619      	mov	r1, r3
 80117b0:	4610      	mov	r0, r2
 80117b2:	f7ff f9f9 	bl	8010ba8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80117b6:	f000 ff85 	bl	80126c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80117ba:	4b07      	ldr	r3, [pc, #28]	; (80117d8 <prvAddNewTaskToReadyList+0xa8>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d001      	beq.n	80117c6 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80117c2:	4b04      	ldr	r3, [pc, #16]	; (80117d4 <prvAddNewTaskToReadyList+0xa4>)
 80117c4:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117c6:	bf00      	nop
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20000c34 	.word	0x20000c34
 80117d4:	20000b34 	.word	0x20000b34
 80117d8:	20000c40 	.word	0x20000c40
 80117dc:	20000c50 	.word	0x20000c50
 80117e0:	20000c3c 	.word	0x20000c3c
 80117e4:	20000b38 	.word	0x20000b38

080117e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80117f0:	2300      	movs	r3, #0
 80117f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d017      	beq.n	801182a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80117fa:	4b13      	ldr	r3, [pc, #76]	; (8011848 <vTaskDelay+0x60>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d00a      	beq.n	8011818 <vTaskDelay+0x30>
	__asm volatile
 8011802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011806:	f383 8811 	msr	BASEPRI, r3
 801180a:	f3bf 8f6f 	isb	sy
 801180e:	f3bf 8f4f 	dsb	sy
 8011812:	60bb      	str	r3, [r7, #8]
}
 8011814:	bf00      	nop
 8011816:	e7fe      	b.n	8011816 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011818:	f000 f86a 	bl	80118f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801181c:	2100      	movs	r1, #0
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 fd86 	bl	8012330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011824:	f000 f872 	bl	801190c <xTaskResumeAll>
 8011828:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d107      	bne.n	8011840 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011830:	4b06      	ldr	r3, [pc, #24]	; (801184c <vTaskDelay+0x64>)
 8011832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011836:	601a      	str	r2, [r3, #0]
 8011838:	f3bf 8f4f 	dsb	sy
 801183c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011840:	bf00      	nop
 8011842:	3710      	adds	r7, #16
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	20000c5c 	.word	0x20000c5c
 801184c:	e000ed04 	.word	0xe000ed04

08011850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b086      	sub	sp, #24
 8011854:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8011856:	4b1e      	ldr	r3, [pc, #120]	; (80118d0 <vTaskStartScheduler+0x80>)
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	2300      	movs	r3, #0
 801185c:	9300      	str	r3, [sp, #0]
 801185e:	2300      	movs	r3, #0
 8011860:	2280      	movs	r2, #128	; 0x80
 8011862:	491c      	ldr	r1, [pc, #112]	; (80118d4 <vTaskStartScheduler+0x84>)
 8011864:	481c      	ldr	r0, [pc, #112]	; (80118d8 <vTaskStartScheduler+0x88>)
 8011866:	f7ff fe7f 	bl	8011568 <xTaskCreate>
 801186a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2b01      	cmp	r3, #1
 8011870:	d11b      	bne.n	80118aa <vTaskStartScheduler+0x5a>
	__asm volatile
 8011872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011876:	f383 8811 	msr	BASEPRI, r3
 801187a:	f3bf 8f6f 	isb	sy
 801187e:	f3bf 8f4f 	dsb	sy
 8011882:	60bb      	str	r3, [r7, #8]
}
 8011884:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011886:	4b15      	ldr	r3, [pc, #84]	; (80118dc <vTaskStartScheduler+0x8c>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	334c      	adds	r3, #76	; 0x4c
 801188c:	4a14      	ldr	r2, [pc, #80]	; (80118e0 <vTaskStartScheduler+0x90>)
 801188e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011890:	4b14      	ldr	r3, [pc, #80]	; (80118e4 <vTaskStartScheduler+0x94>)
 8011892:	f04f 32ff 	mov.w	r2, #4294967295
 8011896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011898:	4b13      	ldr	r3, [pc, #76]	; (80118e8 <vTaskStartScheduler+0x98>)
 801189a:	2201      	movs	r2, #1
 801189c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801189e:	4b13      	ldr	r3, [pc, #76]	; (80118ec <vTaskStartScheduler+0x9c>)
 80118a0:	2200      	movs	r2, #0
 80118a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80118a4:	f000 fe3c 	bl	8012520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80118a8:	e00e      	b.n	80118c8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118b0:	d10a      	bne.n	80118c8 <vTaskStartScheduler+0x78>
	__asm volatile
 80118b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b6:	f383 8811 	msr	BASEPRI, r3
 80118ba:	f3bf 8f6f 	isb	sy
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	607b      	str	r3, [r7, #4]
}
 80118c4:	bf00      	nop
 80118c6:	e7fe      	b.n	80118c6 <vTaskStartScheduler+0x76>
}
 80118c8:	bf00      	nop
 80118ca:	3710      	adds	r7, #16
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	20000c58 	.word	0x20000c58
 80118d4:	080147f8 	.word	0x080147f8
 80118d8:	08011e4d 	.word	0x08011e4d
 80118dc:	20000b34 	.word	0x20000b34
 80118e0:	200001d8 	.word	0x200001d8
 80118e4:	20000c54 	.word	0x20000c54
 80118e8:	20000c40 	.word	0x20000c40
 80118ec:	20000c38 	.word	0x20000c38

080118f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80118f0:	b480      	push	{r7}
 80118f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80118f4:	4b04      	ldr	r3, [pc, #16]	; (8011908 <vTaskSuspendAll+0x18>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3301      	adds	r3, #1
 80118fa:	4a03      	ldr	r2, [pc, #12]	; (8011908 <vTaskSuspendAll+0x18>)
 80118fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80118fe:	bf00      	nop
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr
 8011908:	20000c5c 	.word	0x20000c5c

0801190c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011912:	2300      	movs	r3, #0
 8011914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011916:	2300      	movs	r3, #0
 8011918:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801191a:	4b3b      	ldr	r3, [pc, #236]	; (8011a08 <xTaskResumeAll+0xfc>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d10a      	bne.n	8011938 <xTaskResumeAll+0x2c>
	__asm volatile
 8011922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011926:	f383 8811 	msr	BASEPRI, r3
 801192a:	f3bf 8f6f 	isb	sy
 801192e:	f3bf 8f4f 	dsb	sy
 8011932:	603b      	str	r3, [r7, #0]
}
 8011934:	bf00      	nop
 8011936:	e7fe      	b.n	8011936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011938:	f000 fe94 	bl	8012664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801193c:	4b32      	ldr	r3, [pc, #200]	; (8011a08 <xTaskResumeAll+0xfc>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	3b01      	subs	r3, #1
 8011942:	4a31      	ldr	r2, [pc, #196]	; (8011a08 <xTaskResumeAll+0xfc>)
 8011944:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011946:	4b30      	ldr	r3, [pc, #192]	; (8011a08 <xTaskResumeAll+0xfc>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d155      	bne.n	80119fa <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801194e:	4b2f      	ldr	r3, [pc, #188]	; (8011a0c <xTaskResumeAll+0x100>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d051      	beq.n	80119fa <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011956:	e02e      	b.n	80119b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011958:	4b2d      	ldr	r3, [pc, #180]	; (8011a10 <xTaskResumeAll+0x104>)
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	3318      	adds	r3, #24
 8011964:	4618      	mov	r0, r3
 8011966:	f7ff f97c 	bl	8010c62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	3304      	adds	r3, #4
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff f977 	bl	8010c62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011978:	2201      	movs	r2, #1
 801197a:	409a      	lsls	r2, r3
 801197c:	4b25      	ldr	r3, [pc, #148]	; (8011a14 <xTaskResumeAll+0x108>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	4313      	orrs	r3, r2
 8011982:	4a24      	ldr	r2, [pc, #144]	; (8011a14 <xTaskResumeAll+0x108>)
 8011984:	6013      	str	r3, [r2, #0]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801198a:	4613      	mov	r3, r2
 801198c:	009b      	lsls	r3, r3, #2
 801198e:	4413      	add	r3, r2
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4a21      	ldr	r2, [pc, #132]	; (8011a18 <xTaskResumeAll+0x10c>)
 8011994:	441a      	add	r2, r3
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	3304      	adds	r3, #4
 801199a:	4619      	mov	r1, r3
 801199c:	4610      	mov	r0, r2
 801199e:	f7ff f903 	bl	8010ba8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a6:	4b1d      	ldr	r3, [pc, #116]	; (8011a1c <xTaskResumeAll+0x110>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d302      	bcc.n	80119b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80119b0:	4b1b      	ldr	r3, [pc, #108]	; (8011a20 <xTaskResumeAll+0x114>)
 80119b2:	2201      	movs	r2, #1
 80119b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80119b6:	4b16      	ldr	r3, [pc, #88]	; (8011a10 <xTaskResumeAll+0x104>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d1cc      	bne.n	8011958 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d001      	beq.n	80119c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80119c4:	f000 fad8 	bl	8011f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80119c8:	4b16      	ldr	r3, [pc, #88]	; (8011a24 <xTaskResumeAll+0x118>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d010      	beq.n	80119f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80119d4:	f000 f828 	bl	8011a28 <xTaskIncrementTick>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d002      	beq.n	80119e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80119de:	4b10      	ldr	r3, [pc, #64]	; (8011a20 <xTaskResumeAll+0x114>)
 80119e0:	2201      	movs	r2, #1
 80119e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	3b01      	subs	r3, #1
 80119e8:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1f1      	bne.n	80119d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80119f0:	4b0c      	ldr	r3, [pc, #48]	; (8011a24 <xTaskResumeAll+0x118>)
 80119f2:	2200      	movs	r2, #0
 80119f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80119f6:	4b0a      	ldr	r3, [pc, #40]	; (8011a20 <xTaskResumeAll+0x114>)
 80119f8:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80119fa:	f000 fe63 	bl	80126c4 <vPortExitCritical>

	return xAlreadyYielded;
 80119fe:	687b      	ldr	r3, [r7, #4]
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3710      	adds	r7, #16
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	20000c5c 	.word	0x20000c5c
 8011a0c:	20000c34 	.word	0x20000c34
 8011a10:	20000bf4 	.word	0x20000bf4
 8011a14:	20000c3c 	.word	0x20000c3c
 8011a18:	20000b38 	.word	0x20000b38
 8011a1c:	20000b34 	.word	0x20000b34
 8011a20:	20000c48 	.word	0x20000c48
 8011a24:	20000c44 	.word	0x20000c44

08011a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b086      	sub	sp, #24
 8011a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a32:	4b3f      	ldr	r3, [pc, #252]	; (8011b30 <xTaskIncrementTick+0x108>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d16f      	bne.n	8011b1a <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011a3a:	4b3e      	ldr	r3, [pc, #248]	; (8011b34 <xTaskIncrementTick+0x10c>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011a42:	4a3c      	ldr	r2, [pc, #240]	; (8011b34 <xTaskIncrementTick+0x10c>)
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d120      	bne.n	8011a90 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011a4e:	4b3a      	ldr	r3, [pc, #232]	; (8011b38 <xTaskIncrementTick+0x110>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00a      	beq.n	8011a6e <xTaskIncrementTick+0x46>
	__asm volatile
 8011a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5c:	f383 8811 	msr	BASEPRI, r3
 8011a60:	f3bf 8f6f 	isb	sy
 8011a64:	f3bf 8f4f 	dsb	sy
 8011a68:	603b      	str	r3, [r7, #0]
}
 8011a6a:	bf00      	nop
 8011a6c:	e7fe      	b.n	8011a6c <xTaskIncrementTick+0x44>
 8011a6e:	4b32      	ldr	r3, [pc, #200]	; (8011b38 <xTaskIncrementTick+0x110>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	60fb      	str	r3, [r7, #12]
 8011a74:	4b31      	ldr	r3, [pc, #196]	; (8011b3c <xTaskIncrementTick+0x114>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4a2f      	ldr	r2, [pc, #188]	; (8011b38 <xTaskIncrementTick+0x110>)
 8011a7a:	6013      	str	r3, [r2, #0]
 8011a7c:	4a2f      	ldr	r2, [pc, #188]	; (8011b3c <xTaskIncrementTick+0x114>)
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6013      	str	r3, [r2, #0]
 8011a82:	4b2f      	ldr	r3, [pc, #188]	; (8011b40 <xTaskIncrementTick+0x118>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	3301      	adds	r3, #1
 8011a88:	4a2d      	ldr	r2, [pc, #180]	; (8011b40 <xTaskIncrementTick+0x118>)
 8011a8a:	6013      	str	r3, [r2, #0]
 8011a8c:	f000 fa74 	bl	8011f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a90:	4b2c      	ldr	r3, [pc, #176]	; (8011b44 <xTaskIncrementTick+0x11c>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	693a      	ldr	r2, [r7, #16]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d344      	bcc.n	8011b24 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a9a:	4b27      	ldr	r3, [pc, #156]	; (8011b38 <xTaskIncrementTick+0x110>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d104      	bne.n	8011aae <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011aa4:	4b27      	ldr	r3, [pc, #156]	; (8011b44 <xTaskIncrementTick+0x11c>)
 8011aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8011aaa:	601a      	str	r2, [r3, #0]
					break;
 8011aac:	e03a      	b.n	8011b24 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011aae:	4b22      	ldr	r3, [pc, #136]	; (8011b38 <xTaskIncrementTick+0x110>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	68db      	ldr	r3, [r3, #12]
 8011ab4:	68db      	ldr	r3, [r3, #12]
 8011ab6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	685b      	ldr	r3, [r3, #4]
 8011abc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011abe:	693a      	ldr	r2, [r7, #16]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d203      	bcs.n	8011ace <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011ac6:	4a1f      	ldr	r2, [pc, #124]	; (8011b44 <xTaskIncrementTick+0x11c>)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011acc:	e02a      	b.n	8011b24 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7ff f8c5 	bl	8010c62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d004      	beq.n	8011aea <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	3318      	adds	r3, #24
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff f8bc 	bl	8010c62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aee:	2201      	movs	r2, #1
 8011af0:	409a      	lsls	r2, r3
 8011af2:	4b15      	ldr	r3, [pc, #84]	; (8011b48 <xTaskIncrementTick+0x120>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	4a13      	ldr	r2, [pc, #76]	; (8011b48 <xTaskIncrementTick+0x120>)
 8011afa:	6013      	str	r3, [r2, #0]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b00:	4613      	mov	r3, r2
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	4413      	add	r3, r2
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	4a10      	ldr	r2, [pc, #64]	; (8011b4c <xTaskIncrementTick+0x124>)
 8011b0a:	441a      	add	r2, r3
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	3304      	adds	r3, #4
 8011b10:	4619      	mov	r1, r3
 8011b12:	4610      	mov	r0, r2
 8011b14:	f7ff f848 	bl	8010ba8 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b18:	e7bf      	b.n	8011a9a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011b1a:	4b0d      	ldr	r3, [pc, #52]	; (8011b50 <xTaskIncrementTick+0x128>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	4a0b      	ldr	r2, [pc, #44]	; (8011b50 <xTaskIncrementTick+0x128>)
 8011b22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011b24:	697b      	ldr	r3, [r7, #20]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3718      	adds	r7, #24
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	20000c5c 	.word	0x20000c5c
 8011b34:	20000c38 	.word	0x20000c38
 8011b38:	20000bec 	.word	0x20000bec
 8011b3c:	20000bf0 	.word	0x20000bf0
 8011b40:	20000c4c 	.word	0x20000c4c
 8011b44:	20000c54 	.word	0x20000c54
 8011b48:	20000c3c 	.word	0x20000c3c
 8011b4c:	20000b38 	.word	0x20000b38
 8011b50:	20000c44 	.word	0x20000c44

08011b54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b54:	b480      	push	{r7}
 8011b56:	b087      	sub	sp, #28
 8011b58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b5a:	4b29      	ldr	r3, [pc, #164]	; (8011c00 <vTaskSwitchContext+0xac>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d003      	beq.n	8011b6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b62:	4b28      	ldr	r3, [pc, #160]	; (8011c04 <vTaskSwitchContext+0xb0>)
 8011b64:	2201      	movs	r2, #1
 8011b66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b68:	e044      	b.n	8011bf4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8011b6a:	4b26      	ldr	r3, [pc, #152]	; (8011c04 <vTaskSwitchContext+0xb0>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b70:	4b25      	ldr	r3, [pc, #148]	; (8011c08 <vTaskSwitchContext+0xb4>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	fab3 f383 	clz	r3, r3
 8011b7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011b7e:	7afb      	ldrb	r3, [r7, #11]
 8011b80:	f1c3 031f 	rsb	r3, r3, #31
 8011b84:	617b      	str	r3, [r7, #20]
 8011b86:	4921      	ldr	r1, [pc, #132]	; (8011c0c <vTaskSwitchContext+0xb8>)
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	4613      	mov	r3, r2
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4413      	add	r3, r2
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	440b      	add	r3, r1
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d10a      	bne.n	8011bb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9e:	f383 8811 	msr	BASEPRI, r3
 8011ba2:	f3bf 8f6f 	isb	sy
 8011ba6:	f3bf 8f4f 	dsb	sy
 8011baa:	607b      	str	r3, [r7, #4]
}
 8011bac:	bf00      	nop
 8011bae:	e7fe      	b.n	8011bae <vTaskSwitchContext+0x5a>
 8011bb0:	697a      	ldr	r2, [r7, #20]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4a14      	ldr	r2, [pc, #80]	; (8011c0c <vTaskSwitchContext+0xb8>)
 8011bbc:	4413      	add	r3, r2
 8011bbe:	613b      	str	r3, [r7, #16]
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	685a      	ldr	r2, [r3, #4]
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	605a      	str	r2, [r3, #4]
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	685a      	ldr	r2, [r3, #4]
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d104      	bne.n	8011be0 <vTaskSwitchContext+0x8c>
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	685a      	ldr	r2, [r3, #4]
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	605a      	str	r2, [r3, #4]
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	4a0a      	ldr	r2, [pc, #40]	; (8011c10 <vTaskSwitchContext+0xbc>)
 8011be8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011bea:	4b09      	ldr	r3, [pc, #36]	; (8011c10 <vTaskSwitchContext+0xbc>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	334c      	adds	r3, #76	; 0x4c
 8011bf0:	4a08      	ldr	r2, [pc, #32]	; (8011c14 <vTaskSwitchContext+0xc0>)
 8011bf2:	6013      	str	r3, [r2, #0]
}
 8011bf4:	bf00      	nop
 8011bf6:	371c      	adds	r7, #28
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	20000c5c 	.word	0x20000c5c
 8011c04:	20000c48 	.word	0x20000c48
 8011c08:	20000c3c 	.word	0x20000c3c
 8011c0c:	20000b38 	.word	0x20000b38
 8011c10:	20000b34 	.word	0x20000b34
 8011c14:	200001d8 	.word	0x200001d8

08011c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d10a      	bne.n	8011c3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2c:	f383 8811 	msr	BASEPRI, r3
 8011c30:	f3bf 8f6f 	isb	sy
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	60fb      	str	r3, [r7, #12]
}
 8011c3a:	bf00      	nop
 8011c3c:	e7fe      	b.n	8011c3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c3e:	4b07      	ldr	r3, [pc, #28]	; (8011c5c <vTaskPlaceOnEventList+0x44>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	3318      	adds	r3, #24
 8011c44:	4619      	mov	r1, r3
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7fe ffd2 	bl	8010bf0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c4c:	2101      	movs	r1, #1
 8011c4e:	6838      	ldr	r0, [r7, #0]
 8011c50:	f000 fb6e 	bl	8012330 <prvAddCurrentTaskToDelayedList>
}
 8011c54:	bf00      	nop
 8011c56:	3710      	adds	r7, #16
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	20000b34 	.word	0x20000b34

08011c60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b086      	sub	sp, #24
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d10a      	bne.n	8011c8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7a:	f383 8811 	msr	BASEPRI, r3
 8011c7e:	f3bf 8f6f 	isb	sy
 8011c82:	f3bf 8f4f 	dsb	sy
 8011c86:	60fb      	str	r3, [r7, #12]
}
 8011c88:	bf00      	nop
 8011c8a:	e7fe      	b.n	8011c8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	3318      	adds	r3, #24
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7fe ffe6 	bl	8010c62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c96:	4b1d      	ldr	r3, [pc, #116]	; (8011d0c <xTaskRemoveFromEventList+0xac>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d11c      	bne.n	8011cd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	3304      	adds	r3, #4
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fe ffdd 	bl	8010c62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cac:	2201      	movs	r2, #1
 8011cae:	409a      	lsls	r2, r3
 8011cb0:	4b17      	ldr	r3, [pc, #92]	; (8011d10 <xTaskRemoveFromEventList+0xb0>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4313      	orrs	r3, r2
 8011cb6:	4a16      	ldr	r2, [pc, #88]	; (8011d10 <xTaskRemoveFromEventList+0xb0>)
 8011cb8:	6013      	str	r3, [r2, #0]
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	4a13      	ldr	r2, [pc, #76]	; (8011d14 <xTaskRemoveFromEventList+0xb4>)
 8011cc8:	441a      	add	r2, r3
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	3304      	adds	r3, #4
 8011cce:	4619      	mov	r1, r3
 8011cd0:	4610      	mov	r0, r2
 8011cd2:	f7fe ff69 	bl	8010ba8 <vListInsertEnd>
 8011cd6:	e005      	b.n	8011ce4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	3318      	adds	r3, #24
 8011cdc:	4619      	mov	r1, r3
 8011cde:	480e      	ldr	r0, [pc, #56]	; (8011d18 <xTaskRemoveFromEventList+0xb8>)
 8011ce0:	f7fe ff62 	bl	8010ba8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ce8:	4b0c      	ldr	r3, [pc, #48]	; (8011d1c <xTaskRemoveFromEventList+0xbc>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d905      	bls.n	8011cfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011cf6:	4b0a      	ldr	r3, [pc, #40]	; (8011d20 <xTaskRemoveFromEventList+0xc0>)
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	601a      	str	r2, [r3, #0]
 8011cfc:	e001      	b.n	8011d02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011d02:	697b      	ldr	r3, [r7, #20]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3718      	adds	r7, #24
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	20000c5c 	.word	0x20000c5c
 8011d10:	20000c3c 	.word	0x20000c3c
 8011d14:	20000b38 	.word	0x20000b38
 8011d18:	20000bf4 	.word	0x20000bf4
 8011d1c:	20000b34 	.word	0x20000b34
 8011d20:	20000c48 	.word	0x20000c48

08011d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d24:	b480      	push	{r7}
 8011d26:	b083      	sub	sp, #12
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d2c:	4b06      	ldr	r3, [pc, #24]	; (8011d48 <vTaskInternalSetTimeOutState+0x24>)
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d34:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <vTaskInternalSetTimeOutState+0x28>)
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	605a      	str	r2, [r3, #4]
}
 8011d3c:	bf00      	nop
 8011d3e:	370c      	adds	r7, #12
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr
 8011d48:	20000c4c 	.word	0x20000c4c
 8011d4c:	20000c38 	.word	0x20000c38

08011d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b088      	sub	sp, #32
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d10a      	bne.n	8011d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	613b      	str	r3, [r7, #16]
}
 8011d72:	bf00      	nop
 8011d74:	e7fe      	b.n	8011d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d10a      	bne.n	8011d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d80:	f383 8811 	msr	BASEPRI, r3
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	f3bf 8f4f 	dsb	sy
 8011d8c:	60fb      	str	r3, [r7, #12]
}
 8011d8e:	bf00      	nop
 8011d90:	e7fe      	b.n	8011d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011d92:	f000 fc67 	bl	8012664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d96:	4b24      	ldr	r3, [pc, #144]	; (8011e28 <xTaskCheckForTimeOut+0xd8>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	69ba      	ldr	r2, [r7, #24]
 8011da2:	1ad3      	subs	r3, r2, r3
 8011da4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8011da6:	4b21      	ldr	r3, [pc, #132]	; (8011e2c <xTaskCheckForTimeOut+0xdc>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d007      	beq.n	8011dc2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011db2:	4b1e      	ldr	r3, [pc, #120]	; (8011e2c <xTaskCheckForTimeOut+0xdc>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2200      	movs	r2, #0
 8011db8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	61fb      	str	r3, [r7, #28]
 8011dc0:	e02b      	b.n	8011e1a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dca:	d102      	bne.n	8011dd2 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	61fb      	str	r3, [r7, #28]
 8011dd0:	e023      	b.n	8011e1a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	4b16      	ldr	r3, [pc, #88]	; (8011e30 <xTaskCheckForTimeOut+0xe0>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d007      	beq.n	8011dee <xTaskCheckForTimeOut+0x9e>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	69ba      	ldr	r2, [r7, #24]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d302      	bcc.n	8011dee <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011de8:	2301      	movs	r3, #1
 8011dea:	61fb      	str	r3, [r7, #28]
 8011dec:	e015      	b.n	8011e1a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	697a      	ldr	r2, [r7, #20]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d20b      	bcs.n	8011e10 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	1ad2      	subs	r2, r2, r3
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff ff8d 	bl	8011d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	61fb      	str	r3, [r7, #28]
 8011e0e:	e004      	b.n	8011e1a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	2200      	movs	r2, #0
 8011e14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011e16:	2301      	movs	r3, #1
 8011e18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011e1a:	f000 fc53 	bl	80126c4 <vPortExitCritical>

	return xReturn;
 8011e1e:	69fb      	ldr	r3, [r7, #28]
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3720      	adds	r7, #32
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	20000c38 	.word	0x20000c38
 8011e2c:	20000b34 	.word	0x20000b34
 8011e30:	20000c4c 	.word	0x20000c4c

08011e34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e34:	b480      	push	{r7}
 8011e36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e38:	4b03      	ldr	r3, [pc, #12]	; (8011e48 <vTaskMissedYield+0x14>)
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	601a      	str	r2, [r3, #0]
}
 8011e3e:	bf00      	nop
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr
 8011e48:	20000c48 	.word	0x20000c48

08011e4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e54:	f000 f84c 	bl	8011ef0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8011e58:	4b04      	ldr	r3, [pc, #16]	; (8011e6c <prvIdleTask+0x20>)
 8011e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e5e:	601a      	str	r2, [r3, #0]
 8011e60:	f3bf 8f4f 	dsb	sy
 8011e64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011e68:	e7f4      	b.n	8011e54 <prvIdleTask+0x8>
 8011e6a:	bf00      	nop
 8011e6c:	e000ed04 	.word	0xe000ed04

08011e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e76:	2300      	movs	r3, #0
 8011e78:	607b      	str	r3, [r7, #4]
 8011e7a:	e00c      	b.n	8011e96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	4413      	add	r3, r2
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4a12      	ldr	r2, [pc, #72]	; (8011ed0 <prvInitialiseTaskLists+0x60>)
 8011e88:	4413      	add	r3, r2
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fe fe5f 	bl	8010b4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	3301      	adds	r3, #1
 8011e94:	607b      	str	r3, [r7, #4]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2b06      	cmp	r3, #6
 8011e9a:	d9ef      	bls.n	8011e7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e9c:	480d      	ldr	r0, [pc, #52]	; (8011ed4 <prvInitialiseTaskLists+0x64>)
 8011e9e:	f7fe fe56 	bl	8010b4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011ea2:	480d      	ldr	r0, [pc, #52]	; (8011ed8 <prvInitialiseTaskLists+0x68>)
 8011ea4:	f7fe fe53 	bl	8010b4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011ea8:	480c      	ldr	r0, [pc, #48]	; (8011edc <prvInitialiseTaskLists+0x6c>)
 8011eaa:	f7fe fe50 	bl	8010b4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011eae:	480c      	ldr	r0, [pc, #48]	; (8011ee0 <prvInitialiseTaskLists+0x70>)
 8011eb0:	f7fe fe4d 	bl	8010b4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011eb4:	480b      	ldr	r0, [pc, #44]	; (8011ee4 <prvInitialiseTaskLists+0x74>)
 8011eb6:	f7fe fe4a 	bl	8010b4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011eba:	4b0b      	ldr	r3, [pc, #44]	; (8011ee8 <prvInitialiseTaskLists+0x78>)
 8011ebc:	4a05      	ldr	r2, [pc, #20]	; (8011ed4 <prvInitialiseTaskLists+0x64>)
 8011ebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011ec0:	4b0a      	ldr	r3, [pc, #40]	; (8011eec <prvInitialiseTaskLists+0x7c>)
 8011ec2:	4a05      	ldr	r2, [pc, #20]	; (8011ed8 <prvInitialiseTaskLists+0x68>)
 8011ec4:	601a      	str	r2, [r3, #0]
}
 8011ec6:	bf00      	nop
 8011ec8:	3708      	adds	r7, #8
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	20000b38 	.word	0x20000b38
 8011ed4:	20000bc4 	.word	0x20000bc4
 8011ed8:	20000bd8 	.word	0x20000bd8
 8011edc:	20000bf4 	.word	0x20000bf4
 8011ee0:	20000c08 	.word	0x20000c08
 8011ee4:	20000c20 	.word	0x20000c20
 8011ee8:	20000bec 	.word	0x20000bec
 8011eec:	20000bf0 	.word	0x20000bf0

08011ef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b082      	sub	sp, #8
 8011ef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ef6:	e019      	b.n	8011f2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011ef8:	f000 fbb4 	bl	8012664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011efc:	4b10      	ldr	r3, [pc, #64]	; (8011f40 <prvCheckTasksWaitingTermination+0x50>)
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	3304      	adds	r3, #4
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fe feaa 	bl	8010c62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011f0e:	4b0d      	ldr	r3, [pc, #52]	; (8011f44 <prvCheckTasksWaitingTermination+0x54>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	3b01      	subs	r3, #1
 8011f14:	4a0b      	ldr	r2, [pc, #44]	; (8011f44 <prvCheckTasksWaitingTermination+0x54>)
 8011f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f18:	4b0b      	ldr	r3, [pc, #44]	; (8011f48 <prvCheckTasksWaitingTermination+0x58>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	3b01      	subs	r3, #1
 8011f1e:	4a0a      	ldr	r2, [pc, #40]	; (8011f48 <prvCheckTasksWaitingTermination+0x58>)
 8011f20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f22:	f000 fbcf 	bl	80126c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 f810 	bl	8011f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f2c:	4b06      	ldr	r3, [pc, #24]	; (8011f48 <prvCheckTasksWaitingTermination+0x58>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d1e1      	bne.n	8011ef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f34:	bf00      	nop
 8011f36:	bf00      	nop
 8011f38:	3708      	adds	r7, #8
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	20000c08 	.word	0x20000c08
 8011f44:	20000c34 	.word	0x20000c34
 8011f48:	20000c1c 	.word	0x20000c1c

08011f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	334c      	adds	r3, #76	; 0x4c
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f001 fb9b 	bl	8013694 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f62:	4618      	mov	r0, r3
 8011f64:	f000 fd6c 	bl	8012a40 <vPortFree>
			vPortFree( pxTCB );
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 fd69 	bl	8012a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011f6e:	bf00      	nop
 8011f70:	3708      	adds	r7, #8
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
	...

08011f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f7e:	4b0c      	ldr	r3, [pc, #48]	; (8011fb0 <prvResetNextTaskUnblockTime+0x38>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d104      	bne.n	8011f92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011f88:	4b0a      	ldr	r3, [pc, #40]	; (8011fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8011f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011f90:	e008      	b.n	8011fa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f92:	4b07      	ldr	r3, [pc, #28]	; (8011fb0 <prvResetNextTaskUnblockTime+0x38>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	4a04      	ldr	r2, [pc, #16]	; (8011fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8011fa2:	6013      	str	r3, [r2, #0]
}
 8011fa4:	bf00      	nop
 8011fa6:	370c      	adds	r7, #12
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr
 8011fb0:	20000bec 	.word	0x20000bec
 8011fb4:	20000c54 	.word	0x20000c54

08011fb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011fbe:	4b0b      	ldr	r3, [pc, #44]	; (8011fec <xTaskGetSchedulerState+0x34>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d102      	bne.n	8011fcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	607b      	str	r3, [r7, #4]
 8011fca:	e008      	b.n	8011fde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011fcc:	4b08      	ldr	r3, [pc, #32]	; (8011ff0 <xTaskGetSchedulerState+0x38>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d102      	bne.n	8011fda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011fd4:	2302      	movs	r3, #2
 8011fd6:	607b      	str	r3, [r7, #4]
 8011fd8:	e001      	b.n	8011fde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011fde:	687b      	ldr	r3, [r7, #4]
	}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	20000c40 	.word	0x20000c40
 8011ff0:	20000c5c 	.word	0x20000c5c

08011ff4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012000:	2300      	movs	r3, #0
 8012002:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d05e      	beq.n	80120c8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801200e:	4b31      	ldr	r3, [pc, #196]	; (80120d4 <xTaskPriorityInherit+0xe0>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012014:	429a      	cmp	r2, r3
 8012016:	d24e      	bcs.n	80120b6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	699b      	ldr	r3, [r3, #24]
 801201c:	2b00      	cmp	r3, #0
 801201e:	db06      	blt.n	801202e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012020:	4b2c      	ldr	r3, [pc, #176]	; (80120d4 <xTaskPriorityInherit+0xe0>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012026:	f1c3 0207 	rsb	r2, r3, #7
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	6959      	ldr	r1, [r3, #20]
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012036:	4613      	mov	r3, r2
 8012038:	009b      	lsls	r3, r3, #2
 801203a:	4413      	add	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	4a26      	ldr	r2, [pc, #152]	; (80120d8 <xTaskPriorityInherit+0xe4>)
 8012040:	4413      	add	r3, r2
 8012042:	4299      	cmp	r1, r3
 8012044:	d12f      	bne.n	80120a6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	3304      	adds	r3, #4
 801204a:	4618      	mov	r0, r3
 801204c:	f7fe fe09 	bl	8010c62 <uxListRemove>
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d10a      	bne.n	801206c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205a:	2201      	movs	r2, #1
 801205c:	fa02 f303 	lsl.w	r3, r2, r3
 8012060:	43da      	mvns	r2, r3
 8012062:	4b1e      	ldr	r3, [pc, #120]	; (80120dc <xTaskPriorityInherit+0xe8>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4013      	ands	r3, r2
 8012068:	4a1c      	ldr	r2, [pc, #112]	; (80120dc <xTaskPriorityInherit+0xe8>)
 801206a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801206c:	4b19      	ldr	r3, [pc, #100]	; (80120d4 <xTaskPriorityInherit+0xe0>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801207a:	2201      	movs	r2, #1
 801207c:	409a      	lsls	r2, r3
 801207e:	4b17      	ldr	r3, [pc, #92]	; (80120dc <xTaskPriorityInherit+0xe8>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	4313      	orrs	r3, r2
 8012084:	4a15      	ldr	r2, [pc, #84]	; (80120dc <xTaskPriorityInherit+0xe8>)
 8012086:	6013      	str	r3, [r2, #0]
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801208c:	4613      	mov	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	4413      	add	r3, r2
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	4a10      	ldr	r2, [pc, #64]	; (80120d8 <xTaskPriorityInherit+0xe4>)
 8012096:	441a      	add	r2, r3
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	3304      	adds	r3, #4
 801209c:	4619      	mov	r1, r3
 801209e:	4610      	mov	r0, r2
 80120a0:	f7fe fd82 	bl	8010ba8 <vListInsertEnd>
 80120a4:	e004      	b.n	80120b0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120a6:	4b0b      	ldr	r3, [pc, #44]	; (80120d4 <xTaskPriorityInherit+0xe0>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80120b0:	2301      	movs	r3, #1
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	e008      	b.n	80120c8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120ba:	4b06      	ldr	r3, [pc, #24]	; (80120d4 <xTaskPriorityInherit+0xe0>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d201      	bcs.n	80120c8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80120c4:	2301      	movs	r3, #1
 80120c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120c8:	68fb      	ldr	r3, [r7, #12]
	}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	20000b34 	.word	0x20000b34
 80120d8:	20000b38 	.word	0x20000b38
 80120dc:	20000c3c 	.word	0x20000c3c

080120e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b086      	sub	sp, #24
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80120ec:	2300      	movs	r3, #0
 80120ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d06e      	beq.n	80121d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80120f6:	4b3a      	ldr	r3, [pc, #232]	; (80121e0 <xTaskPriorityDisinherit+0x100>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	693a      	ldr	r2, [r7, #16]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d00a      	beq.n	8012116 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	60fb      	str	r3, [r7, #12]
}
 8012112:	bf00      	nop
 8012114:	e7fe      	b.n	8012114 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10a      	bne.n	8012134 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	60bb      	str	r3, [r7, #8]
}
 8012130:	bf00      	nop
 8012132:	e7fe      	b.n	8012132 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012138:	1e5a      	subs	r2, r3, #1
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012146:	429a      	cmp	r2, r3
 8012148:	d044      	beq.n	80121d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801214e:	2b00      	cmp	r3, #0
 8012150:	d140      	bne.n	80121d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	3304      	adds	r3, #4
 8012156:	4618      	mov	r0, r3
 8012158:	f7fe fd83 	bl	8010c62 <uxListRemove>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d115      	bne.n	801218e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012166:	491f      	ldr	r1, [pc, #124]	; (80121e4 <xTaskPriorityDisinherit+0x104>)
 8012168:	4613      	mov	r3, r2
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	4413      	add	r3, r2
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	440b      	add	r3, r1
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d10a      	bne.n	801218e <xTaskPriorityDisinherit+0xae>
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801217c:	2201      	movs	r2, #1
 801217e:	fa02 f303 	lsl.w	r3, r2, r3
 8012182:	43da      	mvns	r2, r3
 8012184:	4b18      	ldr	r3, [pc, #96]	; (80121e8 <xTaskPriorityDisinherit+0x108>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	4013      	ands	r3, r2
 801218a:	4a17      	ldr	r2, [pc, #92]	; (80121e8 <xTaskPriorityDisinherit+0x108>)
 801218c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219a:	f1c3 0207 	rsb	r2, r3, #7
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a6:	2201      	movs	r2, #1
 80121a8:	409a      	lsls	r2, r3
 80121aa:	4b0f      	ldr	r3, [pc, #60]	; (80121e8 <xTaskPriorityDisinherit+0x108>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	4313      	orrs	r3, r2
 80121b0:	4a0d      	ldr	r2, [pc, #52]	; (80121e8 <xTaskPriorityDisinherit+0x108>)
 80121b2:	6013      	str	r3, [r2, #0]
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b8:	4613      	mov	r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	4413      	add	r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	4a08      	ldr	r2, [pc, #32]	; (80121e4 <xTaskPriorityDisinherit+0x104>)
 80121c2:	441a      	add	r2, r3
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	3304      	adds	r3, #4
 80121c8:	4619      	mov	r1, r3
 80121ca:	4610      	mov	r0, r2
 80121cc:	f7fe fcec 	bl	8010ba8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80121d0:	2301      	movs	r3, #1
 80121d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121d4:	697b      	ldr	r3, [r7, #20]
	}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3718      	adds	r7, #24
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	20000b34 	.word	0x20000b34
 80121e4:	20000b38 	.word	0x20000b38
 80121e8:	20000c3c 	.word	0x20000c3c

080121ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b088      	sub	sp, #32
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80121fa:	2301      	movs	r3, #1
 80121fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d077      	beq.n	80122f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012204:	69bb      	ldr	r3, [r7, #24]
 8012206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012210:	f383 8811 	msr	BASEPRI, r3
 8012214:	f3bf 8f6f 	isb	sy
 8012218:	f3bf 8f4f 	dsb	sy
 801221c:	60fb      	str	r3, [r7, #12]
}
 801221e:	bf00      	nop
 8012220:	e7fe      	b.n	8012220 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012226:	683a      	ldr	r2, [r7, #0]
 8012228:	429a      	cmp	r2, r3
 801222a:	d902      	bls.n	8012232 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	61fb      	str	r3, [r7, #28]
 8012230:	e002      	b.n	8012238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012236:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801223c:	69fa      	ldr	r2, [r7, #28]
 801223e:	429a      	cmp	r2, r3
 8012240:	d058      	beq.n	80122f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012246:	697a      	ldr	r2, [r7, #20]
 8012248:	429a      	cmp	r2, r3
 801224a:	d153      	bne.n	80122f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801224c:	4b2b      	ldr	r3, [pc, #172]	; (80122fc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	69ba      	ldr	r2, [r7, #24]
 8012252:	429a      	cmp	r2, r3
 8012254:	d10a      	bne.n	801226c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225a:	f383 8811 	msr	BASEPRI, r3
 801225e:	f3bf 8f6f 	isb	sy
 8012262:	f3bf 8f4f 	dsb	sy
 8012266:	60bb      	str	r3, [r7, #8]
}
 8012268:	bf00      	nop
 801226a:	e7fe      	b.n	801226a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012270:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	69fa      	ldr	r2, [r7, #28]
 8012276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	699b      	ldr	r3, [r3, #24]
 801227c:	2b00      	cmp	r3, #0
 801227e:	db04      	blt.n	801228a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012280:	69fb      	ldr	r3, [r7, #28]
 8012282:	f1c3 0207 	rsb	r2, r3, #7
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	6959      	ldr	r1, [r3, #20]
 801228e:	693a      	ldr	r2, [r7, #16]
 8012290:	4613      	mov	r3, r2
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	4413      	add	r3, r2
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	4a19      	ldr	r2, [pc, #100]	; (8012300 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801229a:	4413      	add	r3, r2
 801229c:	4299      	cmp	r1, r3
 801229e:	d129      	bne.n	80122f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	3304      	adds	r3, #4
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7fe fcdc 	bl	8010c62 <uxListRemove>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d10a      	bne.n	80122c6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b4:	2201      	movs	r2, #1
 80122b6:	fa02 f303 	lsl.w	r3, r2, r3
 80122ba:	43da      	mvns	r2, r3
 80122bc:	4b11      	ldr	r3, [pc, #68]	; (8012304 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4013      	ands	r3, r2
 80122c2:	4a10      	ldr	r2, [pc, #64]	; (8012304 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ca:	2201      	movs	r2, #1
 80122cc:	409a      	lsls	r2, r3
 80122ce:	4b0d      	ldr	r3, [pc, #52]	; (8012304 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	4313      	orrs	r3, r2
 80122d4:	4a0b      	ldr	r2, [pc, #44]	; (8012304 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122d6:	6013      	str	r3, [r2, #0]
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122dc:	4613      	mov	r3, r2
 80122de:	009b      	lsls	r3, r3, #2
 80122e0:	4413      	add	r3, r2
 80122e2:	009b      	lsls	r3, r3, #2
 80122e4:	4a06      	ldr	r2, [pc, #24]	; (8012300 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80122e6:	441a      	add	r2, r3
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	3304      	adds	r3, #4
 80122ec:	4619      	mov	r1, r3
 80122ee:	4610      	mov	r0, r2
 80122f0:	f7fe fc5a 	bl	8010ba8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80122f4:	bf00      	nop
 80122f6:	3720      	adds	r7, #32
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	20000b34 	.word	0x20000b34
 8012300:	20000b38 	.word	0x20000b38
 8012304:	20000c3c 	.word	0x20000c3c

08012308 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012308:	b480      	push	{r7}
 801230a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801230c:	4b07      	ldr	r3, [pc, #28]	; (801232c <pvTaskIncrementMutexHeldCount+0x24>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d004      	beq.n	801231e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012314:	4b05      	ldr	r3, [pc, #20]	; (801232c <pvTaskIncrementMutexHeldCount+0x24>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801231a:	3201      	adds	r2, #1
 801231c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801231e:	4b03      	ldr	r3, [pc, #12]	; (801232c <pvTaskIncrementMutexHeldCount+0x24>)
 8012320:	681b      	ldr	r3, [r3, #0]
	}
 8012322:	4618      	mov	r0, r3
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr
 801232c:	20000b34 	.word	0x20000b34

08012330 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801233a:	4b2b      	ldr	r3, [pc, #172]	; (80123e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8012340:	4b2a      	ldr	r3, [pc, #168]	; (80123ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2200      	movs	r2, #0
 8012346:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801234a:	4b28      	ldr	r3, [pc, #160]	; (80123ec <prvAddCurrentTaskToDelayedList+0xbc>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	3304      	adds	r3, #4
 8012350:	4618      	mov	r0, r3
 8012352:	f7fe fc86 	bl	8010c62 <uxListRemove>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d10b      	bne.n	8012374 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801235c:	4b23      	ldr	r3, [pc, #140]	; (80123ec <prvAddCurrentTaskToDelayedList+0xbc>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012362:	2201      	movs	r2, #1
 8012364:	fa02 f303 	lsl.w	r3, r2, r3
 8012368:	43da      	mvns	r2, r3
 801236a:	4b21      	ldr	r3, [pc, #132]	; (80123f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4013      	ands	r3, r2
 8012370:	4a1f      	ldr	r2, [pc, #124]	; (80123f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012372:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801237a:	d10a      	bne.n	8012392 <prvAddCurrentTaskToDelayedList+0x62>
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d007      	beq.n	8012392 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012382:	4b1a      	ldr	r3, [pc, #104]	; (80123ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	3304      	adds	r3, #4
 8012388:	4619      	mov	r1, r3
 801238a:	481a      	ldr	r0, [pc, #104]	; (80123f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 801238c:	f7fe fc0c 	bl	8010ba8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012390:	e026      	b.n	80123e0 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012392:	68fa      	ldr	r2, [r7, #12]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	4413      	add	r3, r2
 8012398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801239a:	4b14      	ldr	r3, [pc, #80]	; (80123ec <prvAddCurrentTaskToDelayedList+0xbc>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	68ba      	ldr	r2, [r7, #8]
 80123a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80123a2:	68ba      	ldr	r2, [r7, #8]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d209      	bcs.n	80123be <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123aa:	4b13      	ldr	r3, [pc, #76]	; (80123f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	4b0f      	ldr	r3, [pc, #60]	; (80123ec <prvAddCurrentTaskToDelayedList+0xbc>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	3304      	adds	r3, #4
 80123b4:	4619      	mov	r1, r3
 80123b6:	4610      	mov	r0, r2
 80123b8:	f7fe fc1a 	bl	8010bf0 <vListInsert>
}
 80123bc:	e010      	b.n	80123e0 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123be:	4b0f      	ldr	r3, [pc, #60]	; (80123fc <prvAddCurrentTaskToDelayedList+0xcc>)
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	4b0a      	ldr	r3, [pc, #40]	; (80123ec <prvAddCurrentTaskToDelayedList+0xbc>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	3304      	adds	r3, #4
 80123c8:	4619      	mov	r1, r3
 80123ca:	4610      	mov	r0, r2
 80123cc:	f7fe fc10 	bl	8010bf0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80123d0:	4b0b      	ldr	r3, [pc, #44]	; (8012400 <prvAddCurrentTaskToDelayedList+0xd0>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	68ba      	ldr	r2, [r7, #8]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d202      	bcs.n	80123e0 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 80123da:	4a09      	ldr	r2, [pc, #36]	; (8012400 <prvAddCurrentTaskToDelayedList+0xd0>)
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	6013      	str	r3, [r2, #0]
}
 80123e0:	bf00      	nop
 80123e2:	3710      	adds	r7, #16
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	20000c38 	.word	0x20000c38
 80123ec:	20000b34 	.word	0x20000b34
 80123f0:	20000c3c 	.word	0x20000c3c
 80123f4:	20000c20 	.word	0x20000c20
 80123f8:	20000bf0 	.word	0x20000bf0
 80123fc:	20000bec 	.word	0x20000bec
 8012400:	20000c54 	.word	0x20000c54

08012404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012404:	b480      	push	{r7}
 8012406:	b085      	sub	sp, #20
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	3b04      	subs	r3, #4
 8012414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801241c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	3b04      	subs	r3, #4
 8012422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	f023 0201 	bic.w	r2, r3, #1
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	3b04      	subs	r3, #4
 8012432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012434:	4a0c      	ldr	r2, [pc, #48]	; (8012468 <pxPortInitialiseStack+0x64>)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	3b14      	subs	r3, #20
 801243e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	3b04      	subs	r3, #4
 801244a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	f06f 0202 	mvn.w	r2, #2
 8012452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	3b20      	subs	r3, #32
 8012458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801245a:	68fb      	ldr	r3, [r7, #12]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3714      	adds	r7, #20
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr
 8012468:	0801246d 	.word	0x0801246d

0801246c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801246c:	b480      	push	{r7}
 801246e:	b085      	sub	sp, #20
 8012470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012472:	2300      	movs	r3, #0
 8012474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012476:	4b12      	ldr	r3, [pc, #72]	; (80124c0 <prvTaskExitError+0x54>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801247e:	d00a      	beq.n	8012496 <prvTaskExitError+0x2a>
	__asm volatile
 8012480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	60fb      	str	r3, [r7, #12]
}
 8012492:	bf00      	nop
 8012494:	e7fe      	b.n	8012494 <prvTaskExitError+0x28>
	__asm volatile
 8012496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801249a:	f383 8811 	msr	BASEPRI, r3
 801249e:	f3bf 8f6f 	isb	sy
 80124a2:	f3bf 8f4f 	dsb	sy
 80124a6:	60bb      	str	r3, [r7, #8]
}
 80124a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80124aa:	bf00      	nop
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d0fc      	beq.n	80124ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80124b2:	bf00      	nop
 80124b4:	bf00      	nop
 80124b6:	3714      	adds	r7, #20
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr
 80124c0:	20000120 	.word	0x20000120
	...

080124d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80124d0:	4b07      	ldr	r3, [pc, #28]	; (80124f0 <pxCurrentTCBConst2>)
 80124d2:	6819      	ldr	r1, [r3, #0]
 80124d4:	6808      	ldr	r0, [r1, #0]
 80124d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124da:	f380 8809 	msr	PSP, r0
 80124de:	f3bf 8f6f 	isb	sy
 80124e2:	f04f 0000 	mov.w	r0, #0
 80124e6:	f380 8811 	msr	BASEPRI, r0
 80124ea:	4770      	bx	lr
 80124ec:	f3af 8000 	nop.w

080124f0 <pxCurrentTCBConst2>:
 80124f0:	20000b34 	.word	0x20000b34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80124f4:	bf00      	nop
 80124f6:	bf00      	nop

080124f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80124f8:	4808      	ldr	r0, [pc, #32]	; (801251c <prvPortStartFirstTask+0x24>)
 80124fa:	6800      	ldr	r0, [r0, #0]
 80124fc:	6800      	ldr	r0, [r0, #0]
 80124fe:	f380 8808 	msr	MSP, r0
 8012502:	f04f 0000 	mov.w	r0, #0
 8012506:	f380 8814 	msr	CONTROL, r0
 801250a:	b662      	cpsie	i
 801250c:	b661      	cpsie	f
 801250e:	f3bf 8f4f 	dsb	sy
 8012512:	f3bf 8f6f 	isb	sy
 8012516:	df00      	svc	0
 8012518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801251a:	bf00      	nop
 801251c:	e000ed08 	.word	0xe000ed08

08012520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b086      	sub	sp, #24
 8012524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012526:	4b46      	ldr	r3, [pc, #280]	; (8012640 <xPortStartScheduler+0x120>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4a46      	ldr	r2, [pc, #280]	; (8012644 <xPortStartScheduler+0x124>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d10a      	bne.n	8012546 <xPortStartScheduler+0x26>
	__asm volatile
 8012530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	613b      	str	r3, [r7, #16]
}
 8012542:	bf00      	nop
 8012544:	e7fe      	b.n	8012544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012546:	4b3e      	ldr	r3, [pc, #248]	; (8012640 <xPortStartScheduler+0x120>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4a3f      	ldr	r2, [pc, #252]	; (8012648 <xPortStartScheduler+0x128>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d10a      	bne.n	8012566 <xPortStartScheduler+0x46>
	__asm volatile
 8012550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012554:	f383 8811 	msr	BASEPRI, r3
 8012558:	f3bf 8f6f 	isb	sy
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	60fb      	str	r3, [r7, #12]
}
 8012562:	bf00      	nop
 8012564:	e7fe      	b.n	8012564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012566:	4b39      	ldr	r3, [pc, #228]	; (801264c <xPortStartScheduler+0x12c>)
 8012568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	b2db      	uxtb	r3, r3
 8012570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	22ff      	movs	r2, #255	; 0xff
 8012576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	b2db      	uxtb	r3, r3
 801257e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012580:	78fb      	ldrb	r3, [r7, #3]
 8012582:	b2db      	uxtb	r3, r3
 8012584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012588:	b2da      	uxtb	r2, r3
 801258a:	4b31      	ldr	r3, [pc, #196]	; (8012650 <xPortStartScheduler+0x130>)
 801258c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801258e:	4b31      	ldr	r3, [pc, #196]	; (8012654 <xPortStartScheduler+0x134>)
 8012590:	2207      	movs	r2, #7
 8012592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012594:	e009      	b.n	80125aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012596:	4b2f      	ldr	r3, [pc, #188]	; (8012654 <xPortStartScheduler+0x134>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3b01      	subs	r3, #1
 801259c:	4a2d      	ldr	r2, [pc, #180]	; (8012654 <xPortStartScheduler+0x134>)
 801259e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80125a0:	78fb      	ldrb	r3, [r7, #3]
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	005b      	lsls	r3, r3, #1
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125aa:	78fb      	ldrb	r3, [r7, #3]
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125b2:	2b80      	cmp	r3, #128	; 0x80
 80125b4:	d0ef      	beq.n	8012596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80125b6:	4b27      	ldr	r3, [pc, #156]	; (8012654 <xPortStartScheduler+0x134>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	f1c3 0307 	rsb	r3, r3, #7
 80125be:	2b04      	cmp	r3, #4
 80125c0:	d00a      	beq.n	80125d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80125c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c6:	f383 8811 	msr	BASEPRI, r3
 80125ca:	f3bf 8f6f 	isb	sy
 80125ce:	f3bf 8f4f 	dsb	sy
 80125d2:	60bb      	str	r3, [r7, #8]
}
 80125d4:	bf00      	nop
 80125d6:	e7fe      	b.n	80125d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80125d8:	4b1e      	ldr	r3, [pc, #120]	; (8012654 <xPortStartScheduler+0x134>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	021b      	lsls	r3, r3, #8
 80125de:	4a1d      	ldr	r2, [pc, #116]	; (8012654 <xPortStartScheduler+0x134>)
 80125e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80125e2:	4b1c      	ldr	r3, [pc, #112]	; (8012654 <xPortStartScheduler+0x134>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80125ea:	4a1a      	ldr	r2, [pc, #104]	; (8012654 <xPortStartScheduler+0x134>)
 80125ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80125f6:	4b18      	ldr	r3, [pc, #96]	; (8012658 <xPortStartScheduler+0x138>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	4a17      	ldr	r2, [pc, #92]	; (8012658 <xPortStartScheduler+0x138>)
 80125fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012602:	4b15      	ldr	r3, [pc, #84]	; (8012658 <xPortStartScheduler+0x138>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	4a14      	ldr	r2, [pc, #80]	; (8012658 <xPortStartScheduler+0x138>)
 8012608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801260c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801260e:	f000 f8dd 	bl	80127cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012612:	4b12      	ldr	r3, [pc, #72]	; (801265c <xPortStartScheduler+0x13c>)
 8012614:	2200      	movs	r2, #0
 8012616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012618:	f000 f8fc 	bl	8012814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801261c:	4b10      	ldr	r3, [pc, #64]	; (8012660 <xPortStartScheduler+0x140>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a0f      	ldr	r2, [pc, #60]	; (8012660 <xPortStartScheduler+0x140>)
 8012622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012628:	f7ff ff66 	bl	80124f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801262c:	f7ff fa92 	bl	8011b54 <vTaskSwitchContext>
	prvTaskExitError();
 8012630:	f7ff ff1c 	bl	801246c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012634:	2300      	movs	r3, #0
}
 8012636:	4618      	mov	r0, r3
 8012638:	3718      	adds	r7, #24
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	e000ed00 	.word	0xe000ed00
 8012644:	410fc271 	.word	0x410fc271
 8012648:	410fc270 	.word	0x410fc270
 801264c:	e000e400 	.word	0xe000e400
 8012650:	20000c60 	.word	0x20000c60
 8012654:	20000c64 	.word	0x20000c64
 8012658:	e000ed20 	.word	0xe000ed20
 801265c:	20000120 	.word	0x20000120
 8012660:	e000ef34 	.word	0xe000ef34

08012664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
	__asm volatile
 801266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266e:	f383 8811 	msr	BASEPRI, r3
 8012672:	f3bf 8f6f 	isb	sy
 8012676:	f3bf 8f4f 	dsb	sy
 801267a:	607b      	str	r3, [r7, #4]
}
 801267c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801267e:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <vPortEnterCritical+0x58>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	3301      	adds	r3, #1
 8012684:	4a0d      	ldr	r2, [pc, #52]	; (80126bc <vPortEnterCritical+0x58>)
 8012686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012688:	4b0c      	ldr	r3, [pc, #48]	; (80126bc <vPortEnterCritical+0x58>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2b01      	cmp	r3, #1
 801268e:	d10f      	bne.n	80126b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012690:	4b0b      	ldr	r3, [pc, #44]	; (80126c0 <vPortEnterCritical+0x5c>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	b2db      	uxtb	r3, r3
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00a      	beq.n	80126b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
 80126aa:	603b      	str	r3, [r7, #0]
}
 80126ac:	bf00      	nop
 80126ae:	e7fe      	b.n	80126ae <vPortEnterCritical+0x4a>
	}
}
 80126b0:	bf00      	nop
 80126b2:	370c      	adds	r7, #12
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr
 80126bc:	20000120 	.word	0x20000120
 80126c0:	e000ed04 	.word	0xe000ed04

080126c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80126ca:	4b12      	ldr	r3, [pc, #72]	; (8012714 <vPortExitCritical+0x50>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d10a      	bne.n	80126e8 <vPortExitCritical+0x24>
	__asm volatile
 80126d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d6:	f383 8811 	msr	BASEPRI, r3
 80126da:	f3bf 8f6f 	isb	sy
 80126de:	f3bf 8f4f 	dsb	sy
 80126e2:	607b      	str	r3, [r7, #4]
}
 80126e4:	bf00      	nop
 80126e6:	e7fe      	b.n	80126e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80126e8:	4b0a      	ldr	r3, [pc, #40]	; (8012714 <vPortExitCritical+0x50>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	3b01      	subs	r3, #1
 80126ee:	4a09      	ldr	r2, [pc, #36]	; (8012714 <vPortExitCritical+0x50>)
 80126f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80126f2:	4b08      	ldr	r3, [pc, #32]	; (8012714 <vPortExitCritical+0x50>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d105      	bne.n	8012706 <vPortExitCritical+0x42>
 80126fa:	2300      	movs	r3, #0
 80126fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	f383 8811 	msr	BASEPRI, r3
}
 8012704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012706:	bf00      	nop
 8012708:	370c      	adds	r7, #12
 801270a:	46bd      	mov	sp, r7
 801270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop
 8012714:	20000120 	.word	0x20000120
	...

08012720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012720:	f3ef 8009 	mrs	r0, PSP
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	4b15      	ldr	r3, [pc, #84]	; (8012780 <pxCurrentTCBConst>)
 801272a:	681a      	ldr	r2, [r3, #0]
 801272c:	f01e 0f10 	tst.w	lr, #16
 8012730:	bf08      	it	eq
 8012732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273a:	6010      	str	r0, [r2, #0]
 801273c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012744:	f380 8811 	msr	BASEPRI, r0
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	f7ff fa00 	bl	8011b54 <vTaskSwitchContext>
 8012754:	f04f 0000 	mov.w	r0, #0
 8012758:	f380 8811 	msr	BASEPRI, r0
 801275c:	bc09      	pop	{r0, r3}
 801275e:	6819      	ldr	r1, [r3, #0]
 8012760:	6808      	ldr	r0, [r1, #0]
 8012762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012766:	f01e 0f10 	tst.w	lr, #16
 801276a:	bf08      	it	eq
 801276c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012770:	f380 8809 	msr	PSP, r0
 8012774:	f3bf 8f6f 	isb	sy
 8012778:	4770      	bx	lr
 801277a:	bf00      	nop
 801277c:	f3af 8000 	nop.w

08012780 <pxCurrentTCBConst>:
 8012780:	20000b34 	.word	0x20000b34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012784:	bf00      	nop
 8012786:	bf00      	nop

08012788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
	__asm volatile
 801278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012792:	f383 8811 	msr	BASEPRI, r3
 8012796:	f3bf 8f6f 	isb	sy
 801279a:	f3bf 8f4f 	dsb	sy
 801279e:	607b      	str	r3, [r7, #4]
}
 80127a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80127a2:	f7ff f941 	bl	8011a28 <xTaskIncrementTick>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d003      	beq.n	80127b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80127ac:	4b06      	ldr	r3, [pc, #24]	; (80127c8 <SysTick_Handler+0x40>)
 80127ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	2300      	movs	r3, #0
 80127b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	f383 8811 	msr	BASEPRI, r3
}
 80127be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80127c0:	bf00      	nop
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	e000ed04 	.word	0xe000ed04

080127cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80127cc:	b480      	push	{r7}
 80127ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80127d0:	4b0b      	ldr	r3, [pc, #44]	; (8012800 <vPortSetupTimerInterrupt+0x34>)
 80127d2:	2200      	movs	r2, #0
 80127d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80127d6:	4b0b      	ldr	r3, [pc, #44]	; (8012804 <vPortSetupTimerInterrupt+0x38>)
 80127d8:	2200      	movs	r2, #0
 80127da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80127dc:	4b0a      	ldr	r3, [pc, #40]	; (8012808 <vPortSetupTimerInterrupt+0x3c>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4a0a      	ldr	r2, [pc, #40]	; (801280c <vPortSetupTimerInterrupt+0x40>)
 80127e2:	fba2 2303 	umull	r2, r3, r2, r3
 80127e6:	099b      	lsrs	r3, r3, #6
 80127e8:	4a09      	ldr	r2, [pc, #36]	; (8012810 <vPortSetupTimerInterrupt+0x44>)
 80127ea:	3b01      	subs	r3, #1
 80127ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80127ee:	4b04      	ldr	r3, [pc, #16]	; (8012800 <vPortSetupTimerInterrupt+0x34>)
 80127f0:	2207      	movs	r2, #7
 80127f2:	601a      	str	r2, [r3, #0]
}
 80127f4:	bf00      	nop
 80127f6:	46bd      	mov	sp, r7
 80127f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop
 8012800:	e000e010 	.word	0xe000e010
 8012804:	e000e018 	.word	0xe000e018
 8012808:	20000004 	.word	0x20000004
 801280c:	10624dd3 	.word	0x10624dd3
 8012810:	e000e014 	.word	0xe000e014

08012814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012824 <vPortEnableVFP+0x10>
 8012818:	6801      	ldr	r1, [r0, #0]
 801281a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801281e:	6001      	str	r1, [r0, #0]
 8012820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012822:	bf00      	nop
 8012824:	e000ed88 	.word	0xe000ed88

08012828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012828:	b480      	push	{r7}
 801282a:	b085      	sub	sp, #20
 801282c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801282e:	f3ef 8305 	mrs	r3, IPSR
 8012832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b0f      	cmp	r3, #15
 8012838:	d914      	bls.n	8012864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801283a:	4a17      	ldr	r2, [pc, #92]	; (8012898 <vPortValidateInterruptPriority+0x70>)
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	4413      	add	r3, r2
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012844:	4b15      	ldr	r3, [pc, #84]	; (801289c <vPortValidateInterruptPriority+0x74>)
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	7afa      	ldrb	r2, [r7, #11]
 801284a:	429a      	cmp	r2, r3
 801284c:	d20a      	bcs.n	8012864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012852:	f383 8811 	msr	BASEPRI, r3
 8012856:	f3bf 8f6f 	isb	sy
 801285a:	f3bf 8f4f 	dsb	sy
 801285e:	607b      	str	r3, [r7, #4]
}
 8012860:	bf00      	nop
 8012862:	e7fe      	b.n	8012862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012864:	4b0e      	ldr	r3, [pc, #56]	; (80128a0 <vPortValidateInterruptPriority+0x78>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801286c:	4b0d      	ldr	r3, [pc, #52]	; (80128a4 <vPortValidateInterruptPriority+0x7c>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	429a      	cmp	r2, r3
 8012872:	d90a      	bls.n	801288a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012878:	f383 8811 	msr	BASEPRI, r3
 801287c:	f3bf 8f6f 	isb	sy
 8012880:	f3bf 8f4f 	dsb	sy
 8012884:	603b      	str	r3, [r7, #0]
}
 8012886:	bf00      	nop
 8012888:	e7fe      	b.n	8012888 <vPortValidateInterruptPriority+0x60>
	}
 801288a:	bf00      	nop
 801288c:	3714      	adds	r7, #20
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop
 8012898:	e000e3f0 	.word	0xe000e3f0
 801289c:	20000c60 	.word	0x20000c60
 80128a0:	e000ed0c 	.word	0xe000ed0c
 80128a4:	20000c64 	.word	0x20000c64

080128a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b08a      	sub	sp, #40	; 0x28
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80128b0:	2300      	movs	r3, #0
 80128b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80128b4:	f7ff f81c 	bl	80118f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80128b8:	4b5b      	ldr	r3, [pc, #364]	; (8012a28 <pvPortMalloc+0x180>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d101      	bne.n	80128c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80128c0:	f000 f920 	bl	8012b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80128c4:	4b59      	ldr	r3, [pc, #356]	; (8012a2c <pvPortMalloc+0x184>)
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4013      	ands	r3, r2
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	f040 8093 	bne.w	80129f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d01d      	beq.n	8012914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80128d8:	2208      	movs	r2, #8
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4413      	add	r3, r2
 80128de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f003 0307 	and.w	r3, r3, #7
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d014      	beq.n	8012914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f023 0307 	bic.w	r3, r3, #7
 80128f0:	3308      	adds	r3, #8
 80128f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f003 0307 	and.w	r3, r3, #7
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d00a      	beq.n	8012914 <pvPortMalloc+0x6c>
	__asm volatile
 80128fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012902:	f383 8811 	msr	BASEPRI, r3
 8012906:	f3bf 8f6f 	isb	sy
 801290a:	f3bf 8f4f 	dsb	sy
 801290e:	617b      	str	r3, [r7, #20]
}
 8012910:	bf00      	nop
 8012912:	e7fe      	b.n	8012912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d06e      	beq.n	80129f8 <pvPortMalloc+0x150>
 801291a:	4b45      	ldr	r3, [pc, #276]	; (8012a30 <pvPortMalloc+0x188>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	429a      	cmp	r2, r3
 8012922:	d869      	bhi.n	80129f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012924:	4b43      	ldr	r3, [pc, #268]	; (8012a34 <pvPortMalloc+0x18c>)
 8012926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012928:	4b42      	ldr	r3, [pc, #264]	; (8012a34 <pvPortMalloc+0x18c>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801292e:	e004      	b.n	801293a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	429a      	cmp	r2, r3
 8012942:	d903      	bls.n	801294c <pvPortMalloc+0xa4>
 8012944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d1f1      	bne.n	8012930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801294c:	4b36      	ldr	r3, [pc, #216]	; (8012a28 <pvPortMalloc+0x180>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012952:	429a      	cmp	r2, r3
 8012954:	d050      	beq.n	80129f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012956:	6a3b      	ldr	r3, [r7, #32]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	2208      	movs	r2, #8
 801295c:	4413      	add	r3, r2
 801295e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	6a3b      	ldr	r3, [r7, #32]
 8012966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	1ad2      	subs	r2, r2, r3
 8012970:	2308      	movs	r3, #8
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	429a      	cmp	r2, r3
 8012976:	d91f      	bls.n	80129b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4413      	add	r3, r2
 801297e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	f003 0307 	and.w	r3, r3, #7
 8012986:	2b00      	cmp	r3, #0
 8012988:	d00a      	beq.n	80129a0 <pvPortMalloc+0xf8>
	__asm volatile
 801298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298e:	f383 8811 	msr	BASEPRI, r3
 8012992:	f3bf 8f6f 	isb	sy
 8012996:	f3bf 8f4f 	dsb	sy
 801299a:	613b      	str	r3, [r7, #16]
}
 801299c:	bf00      	nop
 801299e:	e7fe      	b.n	801299e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80129a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a2:	685a      	ldr	r2, [r3, #4]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	1ad2      	subs	r2, r2, r3
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80129ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80129b2:	69b8      	ldr	r0, [r7, #24]
 80129b4:	f000 f908 	bl	8012bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80129b8:	4b1d      	ldr	r3, [pc, #116]	; (8012a30 <pvPortMalloc+0x188>)
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	1ad3      	subs	r3, r2, r3
 80129c2:	4a1b      	ldr	r2, [pc, #108]	; (8012a30 <pvPortMalloc+0x188>)
 80129c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80129c6:	4b1a      	ldr	r3, [pc, #104]	; (8012a30 <pvPortMalloc+0x188>)
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	4b1b      	ldr	r3, [pc, #108]	; (8012a38 <pvPortMalloc+0x190>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d203      	bcs.n	80129da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80129d2:	4b17      	ldr	r3, [pc, #92]	; (8012a30 <pvPortMalloc+0x188>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4a18      	ldr	r2, [pc, #96]	; (8012a38 <pvPortMalloc+0x190>)
 80129d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80129da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129dc:	685a      	ldr	r2, [r3, #4]
 80129de:	4b13      	ldr	r3, [pc, #76]	; (8012a2c <pvPortMalloc+0x184>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	431a      	orrs	r2, r3
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80129e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ea:	2200      	movs	r2, #0
 80129ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80129ee:	4b13      	ldr	r3, [pc, #76]	; (8012a3c <pvPortMalloc+0x194>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	3301      	adds	r3, #1
 80129f4:	4a11      	ldr	r2, [pc, #68]	; (8012a3c <pvPortMalloc+0x194>)
 80129f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80129f8:	f7fe ff88 	bl	801190c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	f003 0307 	and.w	r3, r3, #7
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d00a      	beq.n	8012a1c <pvPortMalloc+0x174>
	__asm volatile
 8012a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0a:	f383 8811 	msr	BASEPRI, r3
 8012a0e:	f3bf 8f6f 	isb	sy
 8012a12:	f3bf 8f4f 	dsb	sy
 8012a16:	60fb      	str	r3, [r7, #12]
}
 8012a18:	bf00      	nop
 8012a1a:	e7fe      	b.n	8012a1a <pvPortMalloc+0x172>
	return pvReturn;
 8012a1c:	69fb      	ldr	r3, [r7, #28]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3728      	adds	r7, #40	; 0x28
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	20003c70 	.word	0x20003c70
 8012a2c:	20003c84 	.word	0x20003c84
 8012a30:	20003c74 	.word	0x20003c74
 8012a34:	20003c68 	.word	0x20003c68
 8012a38:	20003c78 	.word	0x20003c78
 8012a3c:	20003c7c 	.word	0x20003c7c

08012a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b086      	sub	sp, #24
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d04d      	beq.n	8012aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012a52:	2308      	movs	r3, #8
 8012a54:	425b      	negs	r3, r3
 8012a56:	697a      	ldr	r2, [r7, #20]
 8012a58:	4413      	add	r3, r2
 8012a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	685a      	ldr	r2, [r3, #4]
 8012a64:	4b24      	ldr	r3, [pc, #144]	; (8012af8 <vPortFree+0xb8>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4013      	ands	r3, r2
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d10a      	bne.n	8012a84 <vPortFree+0x44>
	__asm volatile
 8012a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a72:	f383 8811 	msr	BASEPRI, r3
 8012a76:	f3bf 8f6f 	isb	sy
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	60fb      	str	r3, [r7, #12]
}
 8012a80:	bf00      	nop
 8012a82:	e7fe      	b.n	8012a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00a      	beq.n	8012aa2 <vPortFree+0x62>
	__asm volatile
 8012a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a90:	f383 8811 	msr	BASEPRI, r3
 8012a94:	f3bf 8f6f 	isb	sy
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	60bb      	str	r3, [r7, #8]
}
 8012a9e:	bf00      	nop
 8012aa0:	e7fe      	b.n	8012aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	685a      	ldr	r2, [r3, #4]
 8012aa6:	4b14      	ldr	r3, [pc, #80]	; (8012af8 <vPortFree+0xb8>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	4013      	ands	r3, r2
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d01e      	beq.n	8012aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d11a      	bne.n	8012aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	685a      	ldr	r2, [r3, #4]
 8012abc:	4b0e      	ldr	r3, [pc, #56]	; (8012af8 <vPortFree+0xb8>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	43db      	mvns	r3, r3
 8012ac2:	401a      	ands	r2, r3
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012ac8:	f7fe ff12 	bl	80118f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	685a      	ldr	r2, [r3, #4]
 8012ad0:	4b0a      	ldr	r3, [pc, #40]	; (8012afc <vPortFree+0xbc>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	4a09      	ldr	r2, [pc, #36]	; (8012afc <vPortFree+0xbc>)
 8012ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012ada:	6938      	ldr	r0, [r7, #16]
 8012adc:	f000 f874 	bl	8012bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012ae0:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <vPortFree+0xc0>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	4a06      	ldr	r2, [pc, #24]	; (8012b00 <vPortFree+0xc0>)
 8012ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012aea:	f7fe ff0f 	bl	801190c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012aee:	bf00      	nop
 8012af0:	3718      	adds	r7, #24
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	20003c84 	.word	0x20003c84
 8012afc:	20003c74 	.word	0x20003c74
 8012b00:	20003c80 	.word	0x20003c80

08012b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012b04:	b480      	push	{r7}
 8012b06:	b085      	sub	sp, #20
 8012b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012b0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8012b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012b10:	4b27      	ldr	r3, [pc, #156]	; (8012bb0 <prvHeapInit+0xac>)
 8012b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f003 0307 	and.w	r3, r3, #7
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00c      	beq.n	8012b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	3307      	adds	r3, #7
 8012b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f023 0307 	bic.w	r3, r3, #7
 8012b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012b2c:	68ba      	ldr	r2, [r7, #8]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	4a1f      	ldr	r2, [pc, #124]	; (8012bb0 <prvHeapInit+0xac>)
 8012b34:	4413      	add	r3, r2
 8012b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012b3c:	4a1d      	ldr	r2, [pc, #116]	; (8012bb4 <prvHeapInit+0xb0>)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012b42:	4b1c      	ldr	r3, [pc, #112]	; (8012bb4 <prvHeapInit+0xb0>)
 8012b44:	2200      	movs	r2, #0
 8012b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	68ba      	ldr	r2, [r7, #8]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012b50:	2208      	movs	r2, #8
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	1a9b      	subs	r3, r3, r2
 8012b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f023 0307 	bic.w	r3, r3, #7
 8012b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	4a15      	ldr	r2, [pc, #84]	; (8012bb8 <prvHeapInit+0xb4>)
 8012b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012b66:	4b14      	ldr	r3, [pc, #80]	; (8012bb8 <prvHeapInit+0xb4>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012b6e:	4b12      	ldr	r3, [pc, #72]	; (8012bb8 <prvHeapInit+0xb4>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2200      	movs	r2, #0
 8012b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	68fa      	ldr	r2, [r7, #12]
 8012b7e:	1ad2      	subs	r2, r2, r3
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012b84:	4b0c      	ldr	r3, [pc, #48]	; (8012bb8 <prvHeapInit+0xb4>)
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	4a0a      	ldr	r2, [pc, #40]	; (8012bbc <prvHeapInit+0xb8>)
 8012b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	4a09      	ldr	r2, [pc, #36]	; (8012bc0 <prvHeapInit+0xbc>)
 8012b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012b9c:	4b09      	ldr	r3, [pc, #36]	; (8012bc4 <prvHeapInit+0xc0>)
 8012b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012ba2:	601a      	str	r2, [r3, #0]
}
 8012ba4:	bf00      	nop
 8012ba6:	3714      	adds	r7, #20
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr
 8012bb0:	20000c68 	.word	0x20000c68
 8012bb4:	20003c68 	.word	0x20003c68
 8012bb8:	20003c70 	.word	0x20003c70
 8012bbc:	20003c78 	.word	0x20003c78
 8012bc0:	20003c74 	.word	0x20003c74
 8012bc4:	20003c84 	.word	0x20003c84

08012bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b085      	sub	sp, #20
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012bd0:	4b28      	ldr	r3, [pc, #160]	; (8012c74 <prvInsertBlockIntoFreeList+0xac>)
 8012bd2:	60fb      	str	r3, [r7, #12]
 8012bd4:	e002      	b.n	8012bdc <prvInsertBlockIntoFreeList+0x14>
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	60fb      	str	r3, [r7, #12]
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d8f7      	bhi.n	8012bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	68ba      	ldr	r2, [r7, #8]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d108      	bne.n	8012c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	685a      	ldr	r2, [r3, #4]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	441a      	add	r2, r3
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	68ba      	ldr	r2, [r7, #8]
 8012c14:	441a      	add	r2, r3
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d118      	bne.n	8012c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	4b15      	ldr	r3, [pc, #84]	; (8012c78 <prvInsertBlockIntoFreeList+0xb0>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d00d      	beq.n	8012c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	685a      	ldr	r2, [r3, #4]
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	441a      	add	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	601a      	str	r2, [r3, #0]
 8012c44:	e008      	b.n	8012c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012c46:	4b0c      	ldr	r3, [pc, #48]	; (8012c78 <prvInsertBlockIntoFreeList+0xb0>)
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	601a      	str	r2, [r3, #0]
 8012c4e:	e003      	b.n	8012c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012c58:	68fa      	ldr	r2, [r7, #12]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d002      	beq.n	8012c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c66:	bf00      	nop
 8012c68:	3714      	adds	r7, #20
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	20003c68 	.word	0x20003c68
 8012c78:	20003c70 	.word	0x20003c70

08012c7c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012c80:	2200      	movs	r2, #0
 8012c82:	4912      	ldr	r1, [pc, #72]	; (8012ccc <MX_USB_Device_Init+0x50>)
 8012c84:	4812      	ldr	r0, [pc, #72]	; (8012cd0 <MX_USB_Device_Init+0x54>)
 8012c86:	f7fc fdbf 	bl	800f808 <USBD_Init>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d001      	beq.n	8012c94 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012c90:	f7f0 f9b8 	bl	8003004 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012c94:	490f      	ldr	r1, [pc, #60]	; (8012cd4 <MX_USB_Device_Init+0x58>)
 8012c96:	480e      	ldr	r0, [pc, #56]	; (8012cd0 <MX_USB_Device_Init+0x54>)
 8012c98:	f7fc fde6 	bl	800f868 <USBD_RegisterClass>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d001      	beq.n	8012ca6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012ca2:	f7f0 f9af 	bl	8003004 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012ca6:	490c      	ldr	r1, [pc, #48]	; (8012cd8 <MX_USB_Device_Init+0x5c>)
 8012ca8:	4809      	ldr	r0, [pc, #36]	; (8012cd0 <MX_USB_Device_Init+0x54>)
 8012caa:	f7fc fd37 	bl	800f71c <USBD_CDC_RegisterInterface>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012cb4:	f7f0 f9a6 	bl	8003004 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012cb8:	4805      	ldr	r0, [pc, #20]	; (8012cd0 <MX_USB_Device_Init+0x54>)
 8012cba:	f7fc fdfc 	bl	800f8b6 <USBD_Start>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012cc4:	f7f0 f99e 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012cc8:	bf00      	nop
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	20000138 	.word	0x20000138
 8012cd0:	20003c88 	.word	0x20003c88
 8012cd4:	2000001c 	.word	0x2000001c
 8012cd8:	20000124 	.word	0x20000124

08012cdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	4905      	ldr	r1, [pc, #20]	; (8012cf8 <CDC_Init_FS+0x1c>)
 8012ce4:	4805      	ldr	r0, [pc, #20]	; (8012cfc <CDC_Init_FS+0x20>)
 8012ce6:	f7fc fd2e 	bl	800f746 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012cea:	4905      	ldr	r1, [pc, #20]	; (8012d00 <CDC_Init_FS+0x24>)
 8012cec:	4803      	ldr	r0, [pc, #12]	; (8012cfc <CDC_Init_FS+0x20>)
 8012cee:	f7fc fd48 	bl	800f782 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012cf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	20004758 	.word	0x20004758
 8012cfc:	20003c88 	.word	0x20003c88
 8012d00:	20003f58 	.word	0x20003f58

08012d04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012d04:	b480      	push	{r7}
 8012d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012d08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b083      	sub	sp, #12
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	6039      	str	r1, [r7, #0]
 8012d1e:	71fb      	strb	r3, [r7, #7]
 8012d20:	4613      	mov	r3, r2
 8012d22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012d24:	79fb      	ldrb	r3, [r7, #7]
 8012d26:	2b23      	cmp	r3, #35	; 0x23
 8012d28:	d84a      	bhi.n	8012dc0 <CDC_Control_FS+0xac>
 8012d2a:	a201      	add	r2, pc, #4	; (adr r2, 8012d30 <CDC_Control_FS+0x1c>)
 8012d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d30:	08012dc1 	.word	0x08012dc1
 8012d34:	08012dc1 	.word	0x08012dc1
 8012d38:	08012dc1 	.word	0x08012dc1
 8012d3c:	08012dc1 	.word	0x08012dc1
 8012d40:	08012dc1 	.word	0x08012dc1
 8012d44:	08012dc1 	.word	0x08012dc1
 8012d48:	08012dc1 	.word	0x08012dc1
 8012d4c:	08012dc1 	.word	0x08012dc1
 8012d50:	08012dc1 	.word	0x08012dc1
 8012d54:	08012dc1 	.word	0x08012dc1
 8012d58:	08012dc1 	.word	0x08012dc1
 8012d5c:	08012dc1 	.word	0x08012dc1
 8012d60:	08012dc1 	.word	0x08012dc1
 8012d64:	08012dc1 	.word	0x08012dc1
 8012d68:	08012dc1 	.word	0x08012dc1
 8012d6c:	08012dc1 	.word	0x08012dc1
 8012d70:	08012dc1 	.word	0x08012dc1
 8012d74:	08012dc1 	.word	0x08012dc1
 8012d78:	08012dc1 	.word	0x08012dc1
 8012d7c:	08012dc1 	.word	0x08012dc1
 8012d80:	08012dc1 	.word	0x08012dc1
 8012d84:	08012dc1 	.word	0x08012dc1
 8012d88:	08012dc1 	.word	0x08012dc1
 8012d8c:	08012dc1 	.word	0x08012dc1
 8012d90:	08012dc1 	.word	0x08012dc1
 8012d94:	08012dc1 	.word	0x08012dc1
 8012d98:	08012dc1 	.word	0x08012dc1
 8012d9c:	08012dc1 	.word	0x08012dc1
 8012da0:	08012dc1 	.word	0x08012dc1
 8012da4:	08012dc1 	.word	0x08012dc1
 8012da8:	08012dc1 	.word	0x08012dc1
 8012dac:	08012dc1 	.word	0x08012dc1
 8012db0:	08012dc1 	.word	0x08012dc1
 8012db4:	08012dc1 	.word	0x08012dc1
 8012db8:	08012dc1 	.word	0x08012dc1
 8012dbc:	08012dc1 	.word	0x08012dc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012dc0:	bf00      	nop
  }

  return (USBD_OK);
 8012dc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012dda:	6879      	ldr	r1, [r7, #4]
 8012ddc:	4805      	ldr	r0, [pc, #20]	; (8012df4 <CDC_Receive_FS+0x24>)
 8012dde:	f7fc fcd0 	bl	800f782 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012de2:	4804      	ldr	r0, [pc, #16]	; (8012df4 <CDC_Receive_FS+0x24>)
 8012de4:	f7fc fce6 	bl	800f7b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012de8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3708      	adds	r7, #8
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	20003c88 	.word	0x20003c88

08012df8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b087      	sub	sp, #28
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	60f8      	str	r0, [r7, #12]
 8012e00:	60b9      	str	r1, [r7, #8]
 8012e02:	4613      	mov	r3, r2
 8012e04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012e06:	2300      	movs	r3, #0
 8012e08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	371c      	adds	r7, #28
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr
	...

08012e1c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	4603      	mov	r3, r0
 8012e24:	6039      	str	r1, [r7, #0]
 8012e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	2212      	movs	r2, #18
 8012e2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012e2e:	4b03      	ldr	r3, [pc, #12]	; (8012e3c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr
 8012e3c:	20000158 	.word	0x20000158

08012e40 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	4603      	mov	r3, r0
 8012e48:	6039      	str	r1, [r7, #0]
 8012e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	2204      	movs	r2, #4
 8012e50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012e52:	4b03      	ldr	r3, [pc, #12]	; (8012e60 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	370c      	adds	r7, #12
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	2000016c 	.word	0x2000016c

08012e64 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	6039      	str	r1, [r7, #0]
 8012e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e70:	79fb      	ldrb	r3, [r7, #7]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d105      	bne.n	8012e82 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012e76:	683a      	ldr	r2, [r7, #0]
 8012e78:	4907      	ldr	r1, [pc, #28]	; (8012e98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012e7a:	4808      	ldr	r0, [pc, #32]	; (8012e9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8012e7c:	f7fd fd03 	bl	8010886 <USBD_GetString>
 8012e80:	e004      	b.n	8012e8c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012e82:	683a      	ldr	r2, [r7, #0]
 8012e84:	4904      	ldr	r1, [pc, #16]	; (8012e98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012e86:	4805      	ldr	r0, [pc, #20]	; (8012e9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8012e88:	f7fd fcfd 	bl	8010886 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e8c:	4b02      	ldr	r3, [pc, #8]	; (8012e98 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3708      	adds	r7, #8
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	20004f58 	.word	0x20004f58
 8012e9c:	08014800 	.word	0x08014800

08012ea0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	6039      	str	r1, [r7, #0]
 8012eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012eac:	683a      	ldr	r2, [r7, #0]
 8012eae:	4904      	ldr	r1, [pc, #16]	; (8012ec0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012eb0:	4804      	ldr	r0, [pc, #16]	; (8012ec4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012eb2:	f7fd fce8 	bl	8010886 <USBD_GetString>
  return USBD_StrDesc;
 8012eb6:	4b02      	ldr	r3, [pc, #8]	; (8012ec0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3708      	adds	r7, #8
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	20004f58 	.word	0x20004f58
 8012ec4:	08014818 	.word	0x08014818

08012ec8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	4603      	mov	r3, r0
 8012ed0:	6039      	str	r1, [r7, #0]
 8012ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	221a      	movs	r2, #26
 8012ed8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012eda:	f000 f843 	bl	8012f64 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012ede:	4b02      	ldr	r3, [pc, #8]	; (8012ee8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3708      	adds	r7, #8
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	20000170 	.word	0x20000170

08012eec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	6039      	str	r1, [r7, #0]
 8012ef6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012ef8:	79fb      	ldrb	r3, [r7, #7]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d105      	bne.n	8012f0a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012efe:	683a      	ldr	r2, [r7, #0]
 8012f00:	4907      	ldr	r1, [pc, #28]	; (8012f20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012f02:	4808      	ldr	r0, [pc, #32]	; (8012f24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012f04:	f7fd fcbf 	bl	8010886 <USBD_GetString>
 8012f08:	e004      	b.n	8012f14 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012f0a:	683a      	ldr	r2, [r7, #0]
 8012f0c:	4904      	ldr	r1, [pc, #16]	; (8012f20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012f0e:	4805      	ldr	r0, [pc, #20]	; (8012f24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012f10:	f7fd fcb9 	bl	8010886 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f14:	4b02      	ldr	r3, [pc, #8]	; (8012f20 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3708      	adds	r7, #8
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	20004f58 	.word	0x20004f58
 8012f24:	0801482c 	.word	0x0801482c

08012f28 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4603      	mov	r3, r0
 8012f30:	6039      	str	r1, [r7, #0]
 8012f32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012f34:	79fb      	ldrb	r3, [r7, #7]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d105      	bne.n	8012f46 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012f3a:	683a      	ldr	r2, [r7, #0]
 8012f3c:	4907      	ldr	r1, [pc, #28]	; (8012f5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012f3e:	4808      	ldr	r0, [pc, #32]	; (8012f60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012f40:	f7fd fca1 	bl	8010886 <USBD_GetString>
 8012f44:	e004      	b.n	8012f50 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012f46:	683a      	ldr	r2, [r7, #0]
 8012f48:	4904      	ldr	r1, [pc, #16]	; (8012f5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012f4a:	4805      	ldr	r0, [pc, #20]	; (8012f60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012f4c:	f7fd fc9b 	bl	8010886 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f50:	4b02      	ldr	r3, [pc, #8]	; (8012f5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20004f58 	.word	0x20004f58
 8012f60:	08014838 	.word	0x08014838

08012f64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b084      	sub	sp, #16
 8012f68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012f6a:	4b0f      	ldr	r3, [pc, #60]	; (8012fa8 <Get_SerialNum+0x44>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012f70:	4b0e      	ldr	r3, [pc, #56]	; (8012fac <Get_SerialNum+0x48>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012f76:	4b0e      	ldr	r3, [pc, #56]	; (8012fb0 <Get_SerialNum+0x4c>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012f7c:	68fa      	ldr	r2, [r7, #12]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4413      	add	r3, r2
 8012f82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d009      	beq.n	8012f9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012f8a:	2208      	movs	r2, #8
 8012f8c:	4909      	ldr	r1, [pc, #36]	; (8012fb4 <Get_SerialNum+0x50>)
 8012f8e:	68f8      	ldr	r0, [r7, #12]
 8012f90:	f000 f814 	bl	8012fbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012f94:	2204      	movs	r2, #4
 8012f96:	4908      	ldr	r1, [pc, #32]	; (8012fb8 <Get_SerialNum+0x54>)
 8012f98:	68b8      	ldr	r0, [r7, #8]
 8012f9a:	f000 f80f 	bl	8012fbc <IntToUnicode>
  }
}
 8012f9e:	bf00      	nop
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	1fff7590 	.word	0x1fff7590
 8012fac:	1fff7594 	.word	0x1fff7594
 8012fb0:	1fff7598 	.word	0x1fff7598
 8012fb4:	20000172 	.word	0x20000172
 8012fb8:	20000182 	.word	0x20000182

08012fbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b087      	sub	sp, #28
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	60b9      	str	r1, [r7, #8]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012fce:	2300      	movs	r3, #0
 8012fd0:	75fb      	strb	r3, [r7, #23]
 8012fd2:	e027      	b.n	8013024 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	0f1b      	lsrs	r3, r3, #28
 8012fd8:	2b09      	cmp	r3, #9
 8012fda:	d80b      	bhi.n	8012ff4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	0f1b      	lsrs	r3, r3, #28
 8012fe0:	b2da      	uxtb	r2, r3
 8012fe2:	7dfb      	ldrb	r3, [r7, #23]
 8012fe4:	005b      	lsls	r3, r3, #1
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	440b      	add	r3, r1
 8012fec:	3230      	adds	r2, #48	; 0x30
 8012fee:	b2d2      	uxtb	r2, r2
 8012ff0:	701a      	strb	r2, [r3, #0]
 8012ff2:	e00a      	b.n	801300a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	0f1b      	lsrs	r3, r3, #28
 8012ff8:	b2da      	uxtb	r2, r3
 8012ffa:	7dfb      	ldrb	r3, [r7, #23]
 8012ffc:	005b      	lsls	r3, r3, #1
 8012ffe:	4619      	mov	r1, r3
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	440b      	add	r3, r1
 8013004:	3237      	adds	r2, #55	; 0x37
 8013006:	b2d2      	uxtb	r2, r2
 8013008:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	011b      	lsls	r3, r3, #4
 801300e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013010:	7dfb      	ldrb	r3, [r7, #23]
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	3301      	adds	r3, #1
 8013016:	68ba      	ldr	r2, [r7, #8]
 8013018:	4413      	add	r3, r2
 801301a:	2200      	movs	r2, #0
 801301c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801301e:	7dfb      	ldrb	r3, [r7, #23]
 8013020:	3301      	adds	r3, #1
 8013022:	75fb      	strb	r3, [r7, #23]
 8013024:	7dfa      	ldrb	r2, [r7, #23]
 8013026:	79fb      	ldrb	r3, [r7, #7]
 8013028:	429a      	cmp	r2, r3
 801302a:	d3d3      	bcc.n	8012fd4 <IntToUnicode+0x18>
  }
}
 801302c:	bf00      	nop
 801302e:	bf00      	nop
 8013030:	371c      	adds	r7, #28
 8013032:	46bd      	mov	sp, r7
 8013034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013038:	4770      	bx	lr
	...

0801303c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b098      	sub	sp, #96	; 0x60
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013044:	f107 030c 	add.w	r3, r7, #12
 8013048:	2254      	movs	r2, #84	; 0x54
 801304a:	2100      	movs	r1, #0
 801304c:	4618      	mov	r0, r3
 801304e:	f000 fb19 	bl	8013684 <memset>
  if(pcdHandle->Instance==USB)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	4a15      	ldr	r2, [pc, #84]	; (80130ac <HAL_PCD_MspInit+0x70>)
 8013058:	4293      	cmp	r3, r2
 801305a:	d122      	bne.n	80130a2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801305c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013060:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013062:	2300      	movs	r3, #0
 8013064:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013066:	f107 030c 	add.w	r3, r7, #12
 801306a:	4618      	mov	r0, r3
 801306c:	f7f6 f88e 	bl	800918c <HAL_RCCEx_PeriphCLKConfig>
 8013070:	4603      	mov	r3, r0
 8013072:	2b00      	cmp	r3, #0
 8013074:	d001      	beq.n	801307a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8013076:	f7ef ffc5 	bl	8003004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801307a:	4b0d      	ldr	r3, [pc, #52]	; (80130b0 <HAL_PCD_MspInit+0x74>)
 801307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801307e:	4a0c      	ldr	r2, [pc, #48]	; (80130b0 <HAL_PCD_MspInit+0x74>)
 8013080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013084:	6593      	str	r3, [r2, #88]	; 0x58
 8013086:	4b0a      	ldr	r3, [pc, #40]	; (80130b0 <HAL_PCD_MspInit+0x74>)
 8013088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801308a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801308e:	60bb      	str	r3, [r7, #8]
 8013090:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8013092:	2200      	movs	r2, #0
 8013094:	2105      	movs	r1, #5
 8013096:	2014      	movs	r0, #20
 8013098:	f7f2 fa10 	bl	80054bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801309c:	2014      	movs	r0, #20
 801309e:	f7f2 fa27 	bl	80054f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80130a2:	bf00      	nop
 80130a4:	3760      	adds	r7, #96	; 0x60
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	40005c00 	.word	0x40005c00
 80130b0:	40021000 	.word	0x40021000

080130b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80130c8:	4619      	mov	r1, r3
 80130ca:	4610      	mov	r0, r2
 80130cc:	f7fc fc3e 	bl	800f94c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80130d0:	bf00      	nop
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	460b      	mov	r3, r1
 80130e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80130ea:	78fa      	ldrb	r2, [r7, #3]
 80130ec:	6879      	ldr	r1, [r7, #4]
 80130ee:	4613      	mov	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	4413      	add	r3, r2
 80130f4:	00db      	lsls	r3, r3, #3
 80130f6:	440b      	add	r3, r1
 80130f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	78fb      	ldrb	r3, [r7, #3]
 8013100:	4619      	mov	r1, r3
 8013102:	f7fc fc78 	bl	800f9f6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8013106:	bf00      	nop
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}

0801310e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801310e:	b580      	push	{r7, lr}
 8013110:	b082      	sub	sp, #8
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
 8013116:	460b      	mov	r3, r1
 8013118:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8013120:	78fa      	ldrb	r2, [r7, #3]
 8013122:	6879      	ldr	r1, [r7, #4]
 8013124:	4613      	mov	r3, r2
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	4413      	add	r3, r2
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	440b      	add	r3, r1
 801312e:	333c      	adds	r3, #60	; 0x3c
 8013130:	681a      	ldr	r2, [r3, #0]
 8013132:	78fb      	ldrb	r3, [r7, #3]
 8013134:	4619      	mov	r1, r3
 8013136:	f7fc fcc1 	bl	800fabc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801313a:	bf00      	nop
 801313c:	3708      	adds	r7, #8
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}

08013142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013142:	b580      	push	{r7, lr}
 8013144:	b082      	sub	sp, #8
 8013146:	af00      	add	r7, sp, #0
 8013148:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013150:	4618      	mov	r0, r3
 8013152:	f7fc fdd5 	bl	800fd00 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8013156:	bf00      	nop
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801315e:	b580      	push	{r7, lr}
 8013160:	b084      	sub	sp, #16
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013166:	2301      	movs	r3, #1
 8013168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	2b02      	cmp	r3, #2
 8013170:	d001      	beq.n	8013176 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013172:	f7ef ff47 	bl	8003004 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801317c:	7bfa      	ldrb	r2, [r7, #15]
 801317e:	4611      	mov	r1, r2
 8013180:	4618      	mov	r0, r3
 8013182:	f7fc fd7f 	bl	800fc84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801318c:	4618      	mov	r0, r3
 801318e:	f7fc fd2b 	bl	800fbe8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013192:	bf00      	nop
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
	...

0801319c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fc fd7a 	bl	800fca4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	699b      	ldr	r3, [r3, #24]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d005      	beq.n	80131c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131b8:	4b04      	ldr	r3, [pc, #16]	; (80131cc <HAL_PCD_SuspendCallback+0x30>)
 80131ba:	691b      	ldr	r3, [r3, #16]
 80131bc:	4a03      	ldr	r2, [pc, #12]	; (80131cc <HAL_PCD_SuspendCallback+0x30>)
 80131be:	f043 0306 	orr.w	r3, r3, #6
 80131c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80131c4:	bf00      	nop
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	e000ed00 	.word	0xe000ed00

080131d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	699b      	ldr	r3, [r3, #24]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d007      	beq.n	80131f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131e0:	4b08      	ldr	r3, [pc, #32]	; (8013204 <HAL_PCD_ResumeCallback+0x34>)
 80131e2:	691b      	ldr	r3, [r3, #16]
 80131e4:	4a07      	ldr	r2, [pc, #28]	; (8013204 <HAL_PCD_ResumeCallback+0x34>)
 80131e6:	f023 0306 	bic.w	r3, r3, #6
 80131ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80131ec:	f000 f9fa 	bl	80135e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7fc fd6a 	bl	800fcd0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80131fc:	bf00      	nop
 80131fe:	3708      	adds	r7, #8
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}
 8013204:	e000ed00 	.word	0xe000ed00

08013208 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013210:	4a2b      	ldr	r2, [pc, #172]	; (80132c0 <USBD_LL_Init+0xb8>)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	4a29      	ldr	r2, [pc, #164]	; (80132c0 <USBD_LL_Init+0xb8>)
 801321c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013220:	4b27      	ldr	r3, [pc, #156]	; (80132c0 <USBD_LL_Init+0xb8>)
 8013222:	4a28      	ldr	r2, [pc, #160]	; (80132c4 <USBD_LL_Init+0xbc>)
 8013224:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013226:	4b26      	ldr	r3, [pc, #152]	; (80132c0 <USBD_LL_Init+0xb8>)
 8013228:	2208      	movs	r2, #8
 801322a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801322c:	4b24      	ldr	r3, [pc, #144]	; (80132c0 <USBD_LL_Init+0xb8>)
 801322e:	2202      	movs	r2, #2
 8013230:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013232:	4b23      	ldr	r3, [pc, #140]	; (80132c0 <USBD_LL_Init+0xb8>)
 8013234:	2202      	movs	r2, #2
 8013236:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013238:	4b21      	ldr	r3, [pc, #132]	; (80132c0 <USBD_LL_Init+0xb8>)
 801323a:	2200      	movs	r2, #0
 801323c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801323e:	4b20      	ldr	r3, [pc, #128]	; (80132c0 <USBD_LL_Init+0xb8>)
 8013240:	2200      	movs	r2, #0
 8013242:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013244:	4b1e      	ldr	r3, [pc, #120]	; (80132c0 <USBD_LL_Init+0xb8>)
 8013246:	2200      	movs	r2, #0
 8013248:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801324a:	4b1d      	ldr	r3, [pc, #116]	; (80132c0 <USBD_LL_Init+0xb8>)
 801324c:	2200      	movs	r2, #0
 801324e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013250:	481b      	ldr	r0, [pc, #108]	; (80132c0 <USBD_LL_Init+0xb8>)
 8013252:	f7f3 fc5e 	bl	8006b12 <HAL_PCD_Init>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801325c:	f7ef fed2 	bl	8003004 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013266:	2318      	movs	r3, #24
 8013268:	2200      	movs	r2, #0
 801326a:	2100      	movs	r1, #0
 801326c:	f7f5 f917 	bl	800849e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013276:	2358      	movs	r3, #88	; 0x58
 8013278:	2200      	movs	r2, #0
 801327a:	2180      	movs	r1, #128	; 0x80
 801327c:	f7f5 f90f 	bl	800849e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013286:	23c0      	movs	r3, #192	; 0xc0
 8013288:	2200      	movs	r2, #0
 801328a:	2181      	movs	r1, #129	; 0x81
 801328c:	f7f5 f907 	bl	800849e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013296:	f44f 7388 	mov.w	r3, #272	; 0x110
 801329a:	2200      	movs	r2, #0
 801329c:	2101      	movs	r1, #1
 801329e:	f7f5 f8fe 	bl	800849e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80132a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132ac:	2200      	movs	r2, #0
 80132ae:	2182      	movs	r1, #130	; 0x82
 80132b0:	f7f5 f8f5 	bl	800849e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80132b4:	2300      	movs	r3, #0
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3708      	adds	r7, #8
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	20005158 	.word	0x20005158
 80132c4:	40005c00 	.word	0x40005c00

080132c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132d0:	2300      	movs	r3, #0
 80132d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132d4:	2300      	movs	r3, #0
 80132d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f3 fcfc 	bl	8006cdc <HAL_PCD_Start>
 80132e4:	4603      	mov	r3, r0
 80132e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132e8:	7bfb      	ldrb	r3, [r7, #15]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f000 f980 	bl	80135f0 <USBD_Get_USB_Status>
 80132f0:	4603      	mov	r3, r0
 80132f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80132fe:	b580      	push	{r7, lr}
 8013300:	b084      	sub	sp, #16
 8013302:	af00      	add	r7, sp, #0
 8013304:	6078      	str	r0, [r7, #4]
 8013306:	4608      	mov	r0, r1
 8013308:	4611      	mov	r1, r2
 801330a:	461a      	mov	r2, r3
 801330c:	4603      	mov	r3, r0
 801330e:	70fb      	strb	r3, [r7, #3]
 8013310:	460b      	mov	r3, r1
 8013312:	70bb      	strb	r3, [r7, #2]
 8013314:	4613      	mov	r3, r2
 8013316:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013318:	2300      	movs	r3, #0
 801331a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801331c:	2300      	movs	r3, #0
 801331e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013326:	78bb      	ldrb	r3, [r7, #2]
 8013328:	883a      	ldrh	r2, [r7, #0]
 801332a:	78f9      	ldrb	r1, [r7, #3]
 801332c:	f7f3 fe44 	bl	8006fb8 <HAL_PCD_EP_Open>
 8013330:	4603      	mov	r3, r0
 8013332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013334:	7bfb      	ldrb	r3, [r7, #15]
 8013336:	4618      	mov	r0, r3
 8013338:	f000 f95a 	bl	80135f0 <USBD_Get_USB_Status>
 801333c:	4603      	mov	r3, r0
 801333e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013340:	7bbb      	ldrb	r3, [r7, #14]
}
 8013342:	4618      	mov	r0, r3
 8013344:	3710      	adds	r7, #16
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}

0801334a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801334a:	b580      	push	{r7, lr}
 801334c:	b084      	sub	sp, #16
 801334e:	af00      	add	r7, sp, #0
 8013350:	6078      	str	r0, [r7, #4]
 8013352:	460b      	mov	r3, r1
 8013354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013356:	2300      	movs	r3, #0
 8013358:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801335a:	2300      	movs	r3, #0
 801335c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013364:	78fa      	ldrb	r2, [r7, #3]
 8013366:	4611      	mov	r1, r2
 8013368:	4618      	mov	r0, r3
 801336a:	f7f3 fe8b 	bl	8007084 <HAL_PCD_EP_Close>
 801336e:	4603      	mov	r3, r0
 8013370:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013372:	7bfb      	ldrb	r3, [r7, #15]
 8013374:	4618      	mov	r0, r3
 8013376:	f000 f93b 	bl	80135f0 <USBD_Get_USB_Status>
 801337a:	4603      	mov	r3, r0
 801337c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801337e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013380:	4618      	mov	r0, r3
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	460b      	mov	r3, r1
 8013392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013394:	2300      	movs	r3, #0
 8013396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013398:	2300      	movs	r3, #0
 801339a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133a2:	78fa      	ldrb	r2, [r7, #3]
 80133a4:	4611      	mov	r1, r2
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7f3 ff4c 	bl	8007244 <HAL_PCD_EP_SetStall>
 80133ac:	4603      	mov	r3, r0
 80133ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133b0:	7bfb      	ldrb	r3, [r7, #15]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f000 f91c 	bl	80135f0 <USBD_Get_USB_Status>
 80133b8:	4603      	mov	r3, r0
 80133ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3710      	adds	r7, #16
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}

080133c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133c6:	b580      	push	{r7, lr}
 80133c8:	b084      	sub	sp, #16
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	6078      	str	r0, [r7, #4]
 80133ce:	460b      	mov	r3, r1
 80133d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133d2:	2300      	movs	r3, #0
 80133d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133d6:	2300      	movs	r3, #0
 80133d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133e0:	78fa      	ldrb	r2, [r7, #3]
 80133e2:	4611      	mov	r1, r2
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f3 ff7f 	bl	80072e8 <HAL_PCD_EP_ClrStall>
 80133ea:	4603      	mov	r3, r0
 80133ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133ee:	7bfb      	ldrb	r3, [r7, #15]
 80133f0:	4618      	mov	r0, r3
 80133f2:	f000 f8fd 	bl	80135f0 <USBD_Get_USB_Status>
 80133f6:	4603      	mov	r3, r0
 80133f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3710      	adds	r7, #16
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}

08013404 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013404:	b480      	push	{r7}
 8013406:	b085      	sub	sp, #20
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	460b      	mov	r3, r1
 801340e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013416:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801341c:	2b00      	cmp	r3, #0
 801341e:	da0c      	bge.n	801343a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013420:	78fb      	ldrb	r3, [r7, #3]
 8013422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013426:	68f9      	ldr	r1, [r7, #12]
 8013428:	1c5a      	adds	r2, r3, #1
 801342a:	4613      	mov	r3, r2
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	4413      	add	r3, r2
 8013430:	00db      	lsls	r3, r3, #3
 8013432:	440b      	add	r3, r1
 8013434:	3302      	adds	r3, #2
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	e00b      	b.n	8013452 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801343a:	78fb      	ldrb	r3, [r7, #3]
 801343c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013440:	68f9      	ldr	r1, [r7, #12]
 8013442:	4613      	mov	r3, r2
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	4413      	add	r3, r2
 8013448:	00db      	lsls	r3, r3, #3
 801344a:	440b      	add	r3, r1
 801344c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013450:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013452:	4618      	mov	r0, r3
 8013454:	3714      	adds	r7, #20
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801345e:	b580      	push	{r7, lr}
 8013460:	b084      	sub	sp, #16
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
 8013466:	460b      	mov	r3, r1
 8013468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801346a:	2300      	movs	r3, #0
 801346c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801346e:	2300      	movs	r3, #0
 8013470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013478:	78fa      	ldrb	r2, [r7, #3]
 801347a:	4611      	mov	r1, r2
 801347c:	4618      	mov	r0, r3
 801347e:	f7f3 fd76 	bl	8006f6e <HAL_PCD_SetAddress>
 8013482:	4603      	mov	r3, r0
 8013484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013486:	7bfb      	ldrb	r3, [r7, #15]
 8013488:	4618      	mov	r0, r3
 801348a:	f000 f8b1 	bl	80135f0 <USBD_Get_USB_Status>
 801348e:	4603      	mov	r3, r0
 8013490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013492:	7bbb      	ldrb	r3, [r7, #14]
}
 8013494:	4618      	mov	r0, r3
 8013496:	3710      	adds	r7, #16
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	607a      	str	r2, [r7, #4]
 80134a6:	603b      	str	r3, [r7, #0]
 80134a8:	460b      	mov	r3, r1
 80134aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ac:	2300      	movs	r3, #0
 80134ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b0:	2300      	movs	r3, #0
 80134b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134ba:	7af9      	ldrb	r1, [r7, #11]
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	f7f3 fe7d 	bl	80071be <HAL_PCD_EP_Transmit>
 80134c4:	4603      	mov	r3, r0
 80134c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134c8:	7dfb      	ldrb	r3, [r7, #23]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f000 f890 	bl	80135f0 <USBD_Get_USB_Status>
 80134d0:	4603      	mov	r3, r0
 80134d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80134d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3718      	adds	r7, #24
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134de:	b580      	push	{r7, lr}
 80134e0:	b086      	sub	sp, #24
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	60f8      	str	r0, [r7, #12]
 80134e6:	607a      	str	r2, [r7, #4]
 80134e8:	603b      	str	r3, [r7, #0]
 80134ea:	460b      	mov	r3, r1
 80134ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ee:	2300      	movs	r3, #0
 80134f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134f2:	2300      	movs	r3, #0
 80134f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134fc:	7af9      	ldrb	r1, [r7, #11]
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	f7f3 fe07 	bl	8007114 <HAL_PCD_EP_Receive>
 8013506:	4603      	mov	r3, r0
 8013508:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801350a:	7dfb      	ldrb	r3, [r7, #23]
 801350c:	4618      	mov	r0, r3
 801350e:	f000 f86f 	bl	80135f0 <USBD_Get_USB_Status>
 8013512:	4603      	mov	r3, r0
 8013514:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013516:	7dbb      	ldrb	r3, [r7, #22]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	460b      	mov	r3, r1
 801352a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013532:	78fa      	ldrb	r2, [r7, #3]
 8013534:	4611      	mov	r1, r2
 8013536:	4618      	mov	r0, r3
 8013538:	f7f3 fe29 	bl	800718e <HAL_PCD_EP_GetRxCount>
 801353c:	4603      	mov	r3, r0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
	...

08013548 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	460b      	mov	r3, r1
 8013552:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013554:	78fb      	ldrb	r3, [r7, #3]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d002      	beq.n	8013560 <HAL_PCDEx_LPM_Callback+0x18>
 801355a:	2b01      	cmp	r3, #1
 801355c:	d013      	beq.n	8013586 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801355e:	e023      	b.n	80135a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	699b      	ldr	r3, [r3, #24]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d007      	beq.n	8013578 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013568:	f000 f83c 	bl	80135e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801356c:	4b10      	ldr	r3, [pc, #64]	; (80135b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801356e:	691b      	ldr	r3, [r3, #16]
 8013570:	4a0f      	ldr	r2, [pc, #60]	; (80135b0 <HAL_PCDEx_LPM_Callback+0x68>)
 8013572:	f023 0306 	bic.w	r3, r3, #6
 8013576:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801357e:	4618      	mov	r0, r3
 8013580:	f7fc fba6 	bl	800fcd0 <USBD_LL_Resume>
    break;
 8013584:	e010      	b.n	80135a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801358c:	4618      	mov	r0, r3
 801358e:	f7fc fb89 	bl	800fca4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	699b      	ldr	r3, [r3, #24]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d005      	beq.n	80135a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801359a:	4b05      	ldr	r3, [pc, #20]	; (80135b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801359c:	691b      	ldr	r3, [r3, #16]
 801359e:	4a04      	ldr	r2, [pc, #16]	; (80135b0 <HAL_PCDEx_LPM_Callback+0x68>)
 80135a0:	f043 0306 	orr.w	r3, r3, #6
 80135a4:	6113      	str	r3, [r2, #16]
    break;
 80135a6:	bf00      	nop
}
 80135a8:	bf00      	nop
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	e000ed00 	.word	0xe000ed00

080135b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b083      	sub	sp, #12
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80135bc:	4b03      	ldr	r3, [pc, #12]	; (80135cc <USBD_static_malloc+0x18>)
}
 80135be:	4618      	mov	r0, r3
 80135c0:	370c      	adds	r7, #12
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop
 80135cc:	2000544c 	.word	0x2000544c

080135d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]

}
 80135d8:	bf00      	nop
 80135da:	370c      	adds	r7, #12
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80135e8:	f7ef fcac 	bl	8002f44 <SystemClock_Config>
}
 80135ec:	bf00      	nop
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80135f0:	b480      	push	{r7}
 80135f2:	b085      	sub	sp, #20
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	4603      	mov	r3, r0
 80135f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135fa:	2300      	movs	r3, #0
 80135fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	2b03      	cmp	r3, #3
 8013602:	d817      	bhi.n	8013634 <USBD_Get_USB_Status+0x44>
 8013604:	a201      	add	r2, pc, #4	; (adr r2, 801360c <USBD_Get_USB_Status+0x1c>)
 8013606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801360a:	bf00      	nop
 801360c:	0801361d 	.word	0x0801361d
 8013610:	08013623 	.word	0x08013623
 8013614:	08013629 	.word	0x08013629
 8013618:	0801362f 	.word	0x0801362f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801361c:	2300      	movs	r3, #0
 801361e:	73fb      	strb	r3, [r7, #15]
    break;
 8013620:	e00b      	b.n	801363a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013622:	2303      	movs	r3, #3
 8013624:	73fb      	strb	r3, [r7, #15]
    break;
 8013626:	e008      	b.n	801363a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013628:	2301      	movs	r3, #1
 801362a:	73fb      	strb	r3, [r7, #15]
    break;
 801362c:	e005      	b.n	801363a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801362e:	2303      	movs	r3, #3
 8013630:	73fb      	strb	r3, [r7, #15]
    break;
 8013632:	e002      	b.n	801363a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013634:	2303      	movs	r3, #3
 8013636:	73fb      	strb	r3, [r7, #15]
    break;
 8013638:	bf00      	nop
  }
  return usb_status;
 801363a:	7bfb      	ldrb	r3, [r7, #15]
}
 801363c:	4618      	mov	r0, r3
 801363e:	3714      	adds	r7, #20
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr

08013648 <arm_pid_init_f32>:
 8013648:	edd0 6a08 	vldr	s13, [r0, #32]
 801364c:	edd0 7a06 	vldr	s15, [r0, #24]
 8013650:	ed90 7a07 	vldr	s14, [r0, #28]
 8013654:	edc0 6a02 	vstr	s13, [r0, #8]
 8013658:	ee37 7a87 	vadd.f32	s14, s15, s14
 801365c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8013660:	eef1 7a67 	vneg.f32	s15, s15
 8013664:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013668:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801366c:	ed80 7a00 	vstr	s14, [r0]
 8013670:	edc0 7a01 	vstr	s15, [r0, #4]
 8013674:	b901      	cbnz	r1, 8013678 <arm_pid_init_f32+0x30>
 8013676:	4770      	bx	lr
 8013678:	2300      	movs	r3, #0
 801367a:	60c3      	str	r3, [r0, #12]
 801367c:	6103      	str	r3, [r0, #16]
 801367e:	6143      	str	r3, [r0, #20]
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop

08013684 <memset>:
 8013684:	4402      	add	r2, r0
 8013686:	4603      	mov	r3, r0
 8013688:	4293      	cmp	r3, r2
 801368a:	d100      	bne.n	801368e <memset+0xa>
 801368c:	4770      	bx	lr
 801368e:	f803 1b01 	strb.w	r1, [r3], #1
 8013692:	e7f9      	b.n	8013688 <memset+0x4>

08013694 <_reclaim_reent>:
 8013694:	4b29      	ldr	r3, [pc, #164]	; (801373c <_reclaim_reent+0xa8>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	4283      	cmp	r3, r0
 801369a:	b570      	push	{r4, r5, r6, lr}
 801369c:	4604      	mov	r4, r0
 801369e:	d04b      	beq.n	8013738 <_reclaim_reent+0xa4>
 80136a0:	69c3      	ldr	r3, [r0, #28]
 80136a2:	b143      	cbz	r3, 80136b6 <_reclaim_reent+0x22>
 80136a4:	68db      	ldr	r3, [r3, #12]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d144      	bne.n	8013734 <_reclaim_reent+0xa0>
 80136aa:	69e3      	ldr	r3, [r4, #28]
 80136ac:	6819      	ldr	r1, [r3, #0]
 80136ae:	b111      	cbz	r1, 80136b6 <_reclaim_reent+0x22>
 80136b0:	4620      	mov	r0, r4
 80136b2:	f000 f87f 	bl	80137b4 <_free_r>
 80136b6:	6961      	ldr	r1, [r4, #20]
 80136b8:	b111      	cbz	r1, 80136c0 <_reclaim_reent+0x2c>
 80136ba:	4620      	mov	r0, r4
 80136bc:	f000 f87a 	bl	80137b4 <_free_r>
 80136c0:	69e1      	ldr	r1, [r4, #28]
 80136c2:	b111      	cbz	r1, 80136ca <_reclaim_reent+0x36>
 80136c4:	4620      	mov	r0, r4
 80136c6:	f000 f875 	bl	80137b4 <_free_r>
 80136ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80136cc:	b111      	cbz	r1, 80136d4 <_reclaim_reent+0x40>
 80136ce:	4620      	mov	r0, r4
 80136d0:	f000 f870 	bl	80137b4 <_free_r>
 80136d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136d6:	b111      	cbz	r1, 80136de <_reclaim_reent+0x4a>
 80136d8:	4620      	mov	r0, r4
 80136da:	f000 f86b 	bl	80137b4 <_free_r>
 80136de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80136e0:	b111      	cbz	r1, 80136e8 <_reclaim_reent+0x54>
 80136e2:	4620      	mov	r0, r4
 80136e4:	f000 f866 	bl	80137b4 <_free_r>
 80136e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80136ea:	b111      	cbz	r1, 80136f2 <_reclaim_reent+0x5e>
 80136ec:	4620      	mov	r0, r4
 80136ee:	f000 f861 	bl	80137b4 <_free_r>
 80136f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80136f4:	b111      	cbz	r1, 80136fc <_reclaim_reent+0x68>
 80136f6:	4620      	mov	r0, r4
 80136f8:	f000 f85c 	bl	80137b4 <_free_r>
 80136fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80136fe:	b111      	cbz	r1, 8013706 <_reclaim_reent+0x72>
 8013700:	4620      	mov	r0, r4
 8013702:	f000 f857 	bl	80137b4 <_free_r>
 8013706:	6a23      	ldr	r3, [r4, #32]
 8013708:	b1b3      	cbz	r3, 8013738 <_reclaim_reent+0xa4>
 801370a:	4620      	mov	r0, r4
 801370c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013710:	4718      	bx	r3
 8013712:	5949      	ldr	r1, [r1, r5]
 8013714:	b941      	cbnz	r1, 8013728 <_reclaim_reent+0x94>
 8013716:	3504      	adds	r5, #4
 8013718:	69e3      	ldr	r3, [r4, #28]
 801371a:	2d80      	cmp	r5, #128	; 0x80
 801371c:	68d9      	ldr	r1, [r3, #12]
 801371e:	d1f8      	bne.n	8013712 <_reclaim_reent+0x7e>
 8013720:	4620      	mov	r0, r4
 8013722:	f000 f847 	bl	80137b4 <_free_r>
 8013726:	e7c0      	b.n	80136aa <_reclaim_reent+0x16>
 8013728:	680e      	ldr	r6, [r1, #0]
 801372a:	4620      	mov	r0, r4
 801372c:	f000 f842 	bl	80137b4 <_free_r>
 8013730:	4631      	mov	r1, r6
 8013732:	e7ef      	b.n	8013714 <_reclaim_reent+0x80>
 8013734:	2500      	movs	r5, #0
 8013736:	e7ef      	b.n	8013718 <_reclaim_reent+0x84>
 8013738:	bd70      	pop	{r4, r5, r6, pc}
 801373a:	bf00      	nop
 801373c:	200001d8 	.word	0x200001d8

08013740 <__errno>:
 8013740:	4b01      	ldr	r3, [pc, #4]	; (8013748 <__errno+0x8>)
 8013742:	6818      	ldr	r0, [r3, #0]
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop
 8013748:	200001d8 	.word	0x200001d8

0801374c <__libc_init_array>:
 801374c:	b570      	push	{r4, r5, r6, lr}
 801374e:	4d0d      	ldr	r5, [pc, #52]	; (8013784 <__libc_init_array+0x38>)
 8013750:	4c0d      	ldr	r4, [pc, #52]	; (8013788 <__libc_init_array+0x3c>)
 8013752:	1b64      	subs	r4, r4, r5
 8013754:	10a4      	asrs	r4, r4, #2
 8013756:	2600      	movs	r6, #0
 8013758:	42a6      	cmp	r6, r4
 801375a:	d109      	bne.n	8013770 <__libc_init_array+0x24>
 801375c:	4d0b      	ldr	r5, [pc, #44]	; (801378c <__libc_init_array+0x40>)
 801375e:	4c0c      	ldr	r4, [pc, #48]	; (8013790 <__libc_init_array+0x44>)
 8013760:	f000 ffba 	bl	80146d8 <_init>
 8013764:	1b64      	subs	r4, r4, r5
 8013766:	10a4      	asrs	r4, r4, #2
 8013768:	2600      	movs	r6, #0
 801376a:	42a6      	cmp	r6, r4
 801376c:	d105      	bne.n	801377a <__libc_init_array+0x2e>
 801376e:	bd70      	pop	{r4, r5, r6, pc}
 8013770:	f855 3b04 	ldr.w	r3, [r5], #4
 8013774:	4798      	blx	r3
 8013776:	3601      	adds	r6, #1
 8013778:	e7ee      	b.n	8013758 <__libc_init_array+0xc>
 801377a:	f855 3b04 	ldr.w	r3, [r5], #4
 801377e:	4798      	blx	r3
 8013780:	3601      	adds	r6, #1
 8013782:	e7f2      	b.n	801376a <__libc_init_array+0x1e>
 8013784:	080148c0 	.word	0x080148c0
 8013788:	080148c0 	.word	0x080148c0
 801378c:	080148c0 	.word	0x080148c0
 8013790:	080148c4 	.word	0x080148c4

08013794 <__retarget_lock_acquire_recursive>:
 8013794:	4770      	bx	lr

08013796 <__retarget_lock_release_recursive>:
 8013796:	4770      	bx	lr

08013798 <memcpy>:
 8013798:	440a      	add	r2, r1
 801379a:	4291      	cmp	r1, r2
 801379c:	f100 33ff 	add.w	r3, r0, #4294967295
 80137a0:	d100      	bne.n	80137a4 <memcpy+0xc>
 80137a2:	4770      	bx	lr
 80137a4:	b510      	push	{r4, lr}
 80137a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137ae:	4291      	cmp	r1, r2
 80137b0:	d1f9      	bne.n	80137a6 <memcpy+0xe>
 80137b2:	bd10      	pop	{r4, pc}

080137b4 <_free_r>:
 80137b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137b6:	2900      	cmp	r1, #0
 80137b8:	d044      	beq.n	8013844 <_free_r+0x90>
 80137ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137be:	9001      	str	r0, [sp, #4]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f1a1 0404 	sub.w	r4, r1, #4
 80137c6:	bfb8      	it	lt
 80137c8:	18e4      	addlt	r4, r4, r3
 80137ca:	f000 f83f 	bl	801384c <__malloc_lock>
 80137ce:	4a1e      	ldr	r2, [pc, #120]	; (8013848 <_free_r+0x94>)
 80137d0:	9801      	ldr	r0, [sp, #4]
 80137d2:	6813      	ldr	r3, [r2, #0]
 80137d4:	b933      	cbnz	r3, 80137e4 <_free_r+0x30>
 80137d6:	6063      	str	r3, [r4, #4]
 80137d8:	6014      	str	r4, [r2, #0]
 80137da:	b003      	add	sp, #12
 80137dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137e0:	f000 b83a 	b.w	8013858 <__malloc_unlock>
 80137e4:	42a3      	cmp	r3, r4
 80137e6:	d908      	bls.n	80137fa <_free_r+0x46>
 80137e8:	6825      	ldr	r5, [r4, #0]
 80137ea:	1961      	adds	r1, r4, r5
 80137ec:	428b      	cmp	r3, r1
 80137ee:	bf01      	itttt	eq
 80137f0:	6819      	ldreq	r1, [r3, #0]
 80137f2:	685b      	ldreq	r3, [r3, #4]
 80137f4:	1949      	addeq	r1, r1, r5
 80137f6:	6021      	streq	r1, [r4, #0]
 80137f8:	e7ed      	b.n	80137d6 <_free_r+0x22>
 80137fa:	461a      	mov	r2, r3
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	b10b      	cbz	r3, 8013804 <_free_r+0x50>
 8013800:	42a3      	cmp	r3, r4
 8013802:	d9fa      	bls.n	80137fa <_free_r+0x46>
 8013804:	6811      	ldr	r1, [r2, #0]
 8013806:	1855      	adds	r5, r2, r1
 8013808:	42a5      	cmp	r5, r4
 801380a:	d10b      	bne.n	8013824 <_free_r+0x70>
 801380c:	6824      	ldr	r4, [r4, #0]
 801380e:	4421      	add	r1, r4
 8013810:	1854      	adds	r4, r2, r1
 8013812:	42a3      	cmp	r3, r4
 8013814:	6011      	str	r1, [r2, #0]
 8013816:	d1e0      	bne.n	80137da <_free_r+0x26>
 8013818:	681c      	ldr	r4, [r3, #0]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	6053      	str	r3, [r2, #4]
 801381e:	440c      	add	r4, r1
 8013820:	6014      	str	r4, [r2, #0]
 8013822:	e7da      	b.n	80137da <_free_r+0x26>
 8013824:	d902      	bls.n	801382c <_free_r+0x78>
 8013826:	230c      	movs	r3, #12
 8013828:	6003      	str	r3, [r0, #0]
 801382a:	e7d6      	b.n	80137da <_free_r+0x26>
 801382c:	6825      	ldr	r5, [r4, #0]
 801382e:	1961      	adds	r1, r4, r5
 8013830:	428b      	cmp	r3, r1
 8013832:	bf04      	itt	eq
 8013834:	6819      	ldreq	r1, [r3, #0]
 8013836:	685b      	ldreq	r3, [r3, #4]
 8013838:	6063      	str	r3, [r4, #4]
 801383a:	bf04      	itt	eq
 801383c:	1949      	addeq	r1, r1, r5
 801383e:	6021      	streq	r1, [r4, #0]
 8013840:	6054      	str	r4, [r2, #4]
 8013842:	e7ca      	b.n	80137da <_free_r+0x26>
 8013844:	b003      	add	sp, #12
 8013846:	bd30      	pop	{r4, r5, pc}
 8013848:	200057a8 	.word	0x200057a8

0801384c <__malloc_lock>:
 801384c:	4801      	ldr	r0, [pc, #4]	; (8013854 <__malloc_lock+0x8>)
 801384e:	f7ff bfa1 	b.w	8013794 <__retarget_lock_acquire_recursive>
 8013852:	bf00      	nop
 8013854:	200057a4 	.word	0x200057a4

08013858 <__malloc_unlock>:
 8013858:	4801      	ldr	r0, [pc, #4]	; (8013860 <__malloc_unlock+0x8>)
 801385a:	f7ff bf9c 	b.w	8013796 <__retarget_lock_release_recursive>
 801385e:	bf00      	nop
 8013860:	200057a4 	.word	0x200057a4

08013864 <pow>:
 8013864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013866:	ed2d 8b02 	vpush	{d8}
 801386a:	eeb0 8a40 	vmov.f32	s16, s0
 801386e:	eef0 8a60 	vmov.f32	s17, s1
 8013872:	ec55 4b11 	vmov	r4, r5, d1
 8013876:	f000 f873 	bl	8013960 <__ieee754_pow>
 801387a:	4622      	mov	r2, r4
 801387c:	462b      	mov	r3, r5
 801387e:	4620      	mov	r0, r4
 8013880:	4629      	mov	r1, r5
 8013882:	ec57 6b10 	vmov	r6, r7, d0
 8013886:	f7ed f92b 	bl	8000ae0 <__aeabi_dcmpun>
 801388a:	2800      	cmp	r0, #0
 801388c:	d13b      	bne.n	8013906 <pow+0xa2>
 801388e:	ec51 0b18 	vmov	r0, r1, d8
 8013892:	2200      	movs	r2, #0
 8013894:	2300      	movs	r3, #0
 8013896:	f7ed f8f1 	bl	8000a7c <__aeabi_dcmpeq>
 801389a:	b1b8      	cbz	r0, 80138cc <pow+0x68>
 801389c:	2200      	movs	r2, #0
 801389e:	2300      	movs	r3, #0
 80138a0:	4620      	mov	r0, r4
 80138a2:	4629      	mov	r1, r5
 80138a4:	f7ed f8ea 	bl	8000a7c <__aeabi_dcmpeq>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	d146      	bne.n	801393a <pow+0xd6>
 80138ac:	ec45 4b10 	vmov	d0, r4, r5
 80138b0:	f000 f848 	bl	8013944 <finite>
 80138b4:	b338      	cbz	r0, 8013906 <pow+0xa2>
 80138b6:	2200      	movs	r2, #0
 80138b8:	2300      	movs	r3, #0
 80138ba:	4620      	mov	r0, r4
 80138bc:	4629      	mov	r1, r5
 80138be:	f7ed f8e7 	bl	8000a90 <__aeabi_dcmplt>
 80138c2:	b300      	cbz	r0, 8013906 <pow+0xa2>
 80138c4:	f7ff ff3c 	bl	8013740 <__errno>
 80138c8:	2322      	movs	r3, #34	; 0x22
 80138ca:	e01b      	b.n	8013904 <pow+0xa0>
 80138cc:	ec47 6b10 	vmov	d0, r6, r7
 80138d0:	f000 f838 	bl	8013944 <finite>
 80138d4:	b9e0      	cbnz	r0, 8013910 <pow+0xac>
 80138d6:	eeb0 0a48 	vmov.f32	s0, s16
 80138da:	eef0 0a68 	vmov.f32	s1, s17
 80138de:	f000 f831 	bl	8013944 <finite>
 80138e2:	b1a8      	cbz	r0, 8013910 <pow+0xac>
 80138e4:	ec45 4b10 	vmov	d0, r4, r5
 80138e8:	f000 f82c 	bl	8013944 <finite>
 80138ec:	b180      	cbz	r0, 8013910 <pow+0xac>
 80138ee:	4632      	mov	r2, r6
 80138f0:	463b      	mov	r3, r7
 80138f2:	4630      	mov	r0, r6
 80138f4:	4639      	mov	r1, r7
 80138f6:	f7ed f8f3 	bl	8000ae0 <__aeabi_dcmpun>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d0e2      	beq.n	80138c4 <pow+0x60>
 80138fe:	f7ff ff1f 	bl	8013740 <__errno>
 8013902:	2321      	movs	r3, #33	; 0x21
 8013904:	6003      	str	r3, [r0, #0]
 8013906:	ecbd 8b02 	vpop	{d8}
 801390a:	ec47 6b10 	vmov	d0, r6, r7
 801390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013910:	2200      	movs	r2, #0
 8013912:	2300      	movs	r3, #0
 8013914:	4630      	mov	r0, r6
 8013916:	4639      	mov	r1, r7
 8013918:	f7ed f8b0 	bl	8000a7c <__aeabi_dcmpeq>
 801391c:	2800      	cmp	r0, #0
 801391e:	d0f2      	beq.n	8013906 <pow+0xa2>
 8013920:	eeb0 0a48 	vmov.f32	s0, s16
 8013924:	eef0 0a68 	vmov.f32	s1, s17
 8013928:	f000 f80c 	bl	8013944 <finite>
 801392c:	2800      	cmp	r0, #0
 801392e:	d0ea      	beq.n	8013906 <pow+0xa2>
 8013930:	ec45 4b10 	vmov	d0, r4, r5
 8013934:	f000 f806 	bl	8013944 <finite>
 8013938:	e7c3      	b.n	80138c2 <pow+0x5e>
 801393a:	4f01      	ldr	r7, [pc, #4]	; (8013940 <pow+0xdc>)
 801393c:	2600      	movs	r6, #0
 801393e:	e7e2      	b.n	8013906 <pow+0xa2>
 8013940:	3ff00000 	.word	0x3ff00000

08013944 <finite>:
 8013944:	b082      	sub	sp, #8
 8013946:	ed8d 0b00 	vstr	d0, [sp]
 801394a:	9801      	ldr	r0, [sp, #4]
 801394c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013950:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013954:	0fc0      	lsrs	r0, r0, #31
 8013956:	b002      	add	sp, #8
 8013958:	4770      	bx	lr
 801395a:	0000      	movs	r0, r0
 801395c:	0000      	movs	r0, r0
	...

08013960 <__ieee754_pow>:
 8013960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013964:	ed2d 8b06 	vpush	{d8-d10}
 8013968:	b089      	sub	sp, #36	; 0x24
 801396a:	ed8d 1b00 	vstr	d1, [sp]
 801396e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013972:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013976:	ea58 0102 	orrs.w	r1, r8, r2
 801397a:	ec57 6b10 	vmov	r6, r7, d0
 801397e:	d115      	bne.n	80139ac <__ieee754_pow+0x4c>
 8013980:	19b3      	adds	r3, r6, r6
 8013982:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013986:	4152      	adcs	r2, r2
 8013988:	4299      	cmp	r1, r3
 801398a:	4b89      	ldr	r3, [pc, #548]	; (8013bb0 <__ieee754_pow+0x250>)
 801398c:	4193      	sbcs	r3, r2
 801398e:	f080 84d1 	bcs.w	8014334 <__ieee754_pow+0x9d4>
 8013992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013996:	4630      	mov	r0, r6
 8013998:	4639      	mov	r1, r7
 801399a:	f7ec fc51 	bl	8000240 <__adddf3>
 801399e:	ec41 0b10 	vmov	d0, r0, r1
 80139a2:	b009      	add	sp, #36	; 0x24
 80139a4:	ecbd 8b06 	vpop	{d8-d10}
 80139a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ac:	4b81      	ldr	r3, [pc, #516]	; (8013bb4 <__ieee754_pow+0x254>)
 80139ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80139b2:	429c      	cmp	r4, r3
 80139b4:	ee10 aa10 	vmov	sl, s0
 80139b8:	463d      	mov	r5, r7
 80139ba:	dc06      	bgt.n	80139ca <__ieee754_pow+0x6a>
 80139bc:	d101      	bne.n	80139c2 <__ieee754_pow+0x62>
 80139be:	2e00      	cmp	r6, #0
 80139c0:	d1e7      	bne.n	8013992 <__ieee754_pow+0x32>
 80139c2:	4598      	cmp	r8, r3
 80139c4:	dc01      	bgt.n	80139ca <__ieee754_pow+0x6a>
 80139c6:	d10f      	bne.n	80139e8 <__ieee754_pow+0x88>
 80139c8:	b172      	cbz	r2, 80139e8 <__ieee754_pow+0x88>
 80139ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80139ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80139d2:	ea55 050a 	orrs.w	r5, r5, sl
 80139d6:	d1dc      	bne.n	8013992 <__ieee754_pow+0x32>
 80139d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80139dc:	18db      	adds	r3, r3, r3
 80139de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80139e2:	4152      	adcs	r2, r2
 80139e4:	429d      	cmp	r5, r3
 80139e6:	e7d0      	b.n	801398a <__ieee754_pow+0x2a>
 80139e8:	2d00      	cmp	r5, #0
 80139ea:	da3b      	bge.n	8013a64 <__ieee754_pow+0x104>
 80139ec:	4b72      	ldr	r3, [pc, #456]	; (8013bb8 <__ieee754_pow+0x258>)
 80139ee:	4598      	cmp	r8, r3
 80139f0:	dc51      	bgt.n	8013a96 <__ieee754_pow+0x136>
 80139f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80139f6:	4598      	cmp	r8, r3
 80139f8:	f340 84ab 	ble.w	8014352 <__ieee754_pow+0x9f2>
 80139fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013a00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013a04:	2b14      	cmp	r3, #20
 8013a06:	dd0f      	ble.n	8013a28 <__ieee754_pow+0xc8>
 8013a08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013a0c:	fa22 f103 	lsr.w	r1, r2, r3
 8013a10:	fa01 f303 	lsl.w	r3, r1, r3
 8013a14:	4293      	cmp	r3, r2
 8013a16:	f040 849c 	bne.w	8014352 <__ieee754_pow+0x9f2>
 8013a1a:	f001 0101 	and.w	r1, r1, #1
 8013a1e:	f1c1 0302 	rsb	r3, r1, #2
 8013a22:	9304      	str	r3, [sp, #16]
 8013a24:	b182      	cbz	r2, 8013a48 <__ieee754_pow+0xe8>
 8013a26:	e05f      	b.n	8013ae8 <__ieee754_pow+0x188>
 8013a28:	2a00      	cmp	r2, #0
 8013a2a:	d15b      	bne.n	8013ae4 <__ieee754_pow+0x184>
 8013a2c:	f1c3 0314 	rsb	r3, r3, #20
 8013a30:	fa48 f103 	asr.w	r1, r8, r3
 8013a34:	fa01 f303 	lsl.w	r3, r1, r3
 8013a38:	4543      	cmp	r3, r8
 8013a3a:	f040 8487 	bne.w	801434c <__ieee754_pow+0x9ec>
 8013a3e:	f001 0101 	and.w	r1, r1, #1
 8013a42:	f1c1 0302 	rsb	r3, r1, #2
 8013a46:	9304      	str	r3, [sp, #16]
 8013a48:	4b5c      	ldr	r3, [pc, #368]	; (8013bbc <__ieee754_pow+0x25c>)
 8013a4a:	4598      	cmp	r8, r3
 8013a4c:	d132      	bne.n	8013ab4 <__ieee754_pow+0x154>
 8013a4e:	f1b9 0f00 	cmp.w	r9, #0
 8013a52:	f280 8477 	bge.w	8014344 <__ieee754_pow+0x9e4>
 8013a56:	4959      	ldr	r1, [pc, #356]	; (8013bbc <__ieee754_pow+0x25c>)
 8013a58:	4632      	mov	r2, r6
 8013a5a:	463b      	mov	r3, r7
 8013a5c:	2000      	movs	r0, #0
 8013a5e:	f7ec fecf 	bl	8000800 <__aeabi_ddiv>
 8013a62:	e79c      	b.n	801399e <__ieee754_pow+0x3e>
 8013a64:	2300      	movs	r3, #0
 8013a66:	9304      	str	r3, [sp, #16]
 8013a68:	2a00      	cmp	r2, #0
 8013a6a:	d13d      	bne.n	8013ae8 <__ieee754_pow+0x188>
 8013a6c:	4b51      	ldr	r3, [pc, #324]	; (8013bb4 <__ieee754_pow+0x254>)
 8013a6e:	4598      	cmp	r8, r3
 8013a70:	d1ea      	bne.n	8013a48 <__ieee754_pow+0xe8>
 8013a72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013a76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8013a7e:	f000 8459 	beq.w	8014334 <__ieee754_pow+0x9d4>
 8013a82:	4b4f      	ldr	r3, [pc, #316]	; (8013bc0 <__ieee754_pow+0x260>)
 8013a84:	429c      	cmp	r4, r3
 8013a86:	dd08      	ble.n	8013a9a <__ieee754_pow+0x13a>
 8013a88:	f1b9 0f00 	cmp.w	r9, #0
 8013a8c:	f2c0 8456 	blt.w	801433c <__ieee754_pow+0x9dc>
 8013a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a94:	e783      	b.n	801399e <__ieee754_pow+0x3e>
 8013a96:	2302      	movs	r3, #2
 8013a98:	e7e5      	b.n	8013a66 <__ieee754_pow+0x106>
 8013a9a:	f1b9 0f00 	cmp.w	r9, #0
 8013a9e:	f04f 0000 	mov.w	r0, #0
 8013aa2:	f04f 0100 	mov.w	r1, #0
 8013aa6:	f6bf af7a 	bge.w	801399e <__ieee754_pow+0x3e>
 8013aaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013aae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013ab2:	e774      	b.n	801399e <__ieee754_pow+0x3e>
 8013ab4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013ab8:	d106      	bne.n	8013ac8 <__ieee754_pow+0x168>
 8013aba:	4632      	mov	r2, r6
 8013abc:	463b      	mov	r3, r7
 8013abe:	4630      	mov	r0, r6
 8013ac0:	4639      	mov	r1, r7
 8013ac2:	f7ec fd73 	bl	80005ac <__aeabi_dmul>
 8013ac6:	e76a      	b.n	801399e <__ieee754_pow+0x3e>
 8013ac8:	4b3e      	ldr	r3, [pc, #248]	; (8013bc4 <__ieee754_pow+0x264>)
 8013aca:	4599      	cmp	r9, r3
 8013acc:	d10c      	bne.n	8013ae8 <__ieee754_pow+0x188>
 8013ace:	2d00      	cmp	r5, #0
 8013ad0:	db0a      	blt.n	8013ae8 <__ieee754_pow+0x188>
 8013ad2:	ec47 6b10 	vmov	d0, r6, r7
 8013ad6:	b009      	add	sp, #36	; 0x24
 8013ad8:	ecbd 8b06 	vpop	{d8-d10}
 8013adc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae0:	f000 bd20 	b.w	8014524 <__ieee754_sqrt>
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	9304      	str	r3, [sp, #16]
 8013ae8:	ec47 6b10 	vmov	d0, r6, r7
 8013aec:	f000 fc62 	bl	80143b4 <fabs>
 8013af0:	ec51 0b10 	vmov	r0, r1, d0
 8013af4:	f1ba 0f00 	cmp.w	sl, #0
 8013af8:	d129      	bne.n	8013b4e <__ieee754_pow+0x1ee>
 8013afa:	b124      	cbz	r4, 8013b06 <__ieee754_pow+0x1a6>
 8013afc:	4b2f      	ldr	r3, [pc, #188]	; (8013bbc <__ieee754_pow+0x25c>)
 8013afe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d123      	bne.n	8013b4e <__ieee754_pow+0x1ee>
 8013b06:	f1b9 0f00 	cmp.w	r9, #0
 8013b0a:	da05      	bge.n	8013b18 <__ieee754_pow+0x1b8>
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	460b      	mov	r3, r1
 8013b10:	2000      	movs	r0, #0
 8013b12:	492a      	ldr	r1, [pc, #168]	; (8013bbc <__ieee754_pow+0x25c>)
 8013b14:	f7ec fe74 	bl	8000800 <__aeabi_ddiv>
 8013b18:	2d00      	cmp	r5, #0
 8013b1a:	f6bf af40 	bge.w	801399e <__ieee754_pow+0x3e>
 8013b1e:	9b04      	ldr	r3, [sp, #16]
 8013b20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013b24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013b28:	431c      	orrs	r4, r3
 8013b2a:	d108      	bne.n	8013b3e <__ieee754_pow+0x1de>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4610      	mov	r0, r2
 8013b32:	4619      	mov	r1, r3
 8013b34:	f7ec fb82 	bl	800023c <__aeabi_dsub>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	e78f      	b.n	8013a5e <__ieee754_pow+0xfe>
 8013b3e:	9b04      	ldr	r3, [sp, #16]
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	f47f af2c 	bne.w	801399e <__ieee754_pow+0x3e>
 8013b46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	e727      	b.n	801399e <__ieee754_pow+0x3e>
 8013b4e:	0feb      	lsrs	r3, r5, #31
 8013b50:	3b01      	subs	r3, #1
 8013b52:	9306      	str	r3, [sp, #24]
 8013b54:	9a06      	ldr	r2, [sp, #24]
 8013b56:	9b04      	ldr	r3, [sp, #16]
 8013b58:	4313      	orrs	r3, r2
 8013b5a:	d102      	bne.n	8013b62 <__ieee754_pow+0x202>
 8013b5c:	4632      	mov	r2, r6
 8013b5e:	463b      	mov	r3, r7
 8013b60:	e7e6      	b.n	8013b30 <__ieee754_pow+0x1d0>
 8013b62:	4b19      	ldr	r3, [pc, #100]	; (8013bc8 <__ieee754_pow+0x268>)
 8013b64:	4598      	cmp	r8, r3
 8013b66:	f340 80fb 	ble.w	8013d60 <__ieee754_pow+0x400>
 8013b6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013b6e:	4598      	cmp	r8, r3
 8013b70:	4b13      	ldr	r3, [pc, #76]	; (8013bc0 <__ieee754_pow+0x260>)
 8013b72:	dd0c      	ble.n	8013b8e <__ieee754_pow+0x22e>
 8013b74:	429c      	cmp	r4, r3
 8013b76:	dc0f      	bgt.n	8013b98 <__ieee754_pow+0x238>
 8013b78:	f1b9 0f00 	cmp.w	r9, #0
 8013b7c:	da0f      	bge.n	8013b9e <__ieee754_pow+0x23e>
 8013b7e:	2000      	movs	r0, #0
 8013b80:	b009      	add	sp, #36	; 0x24
 8013b82:	ecbd 8b06 	vpop	{d8-d10}
 8013b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b8a:	f000 bcc2 	b.w	8014512 <__math_oflow>
 8013b8e:	429c      	cmp	r4, r3
 8013b90:	dbf2      	blt.n	8013b78 <__ieee754_pow+0x218>
 8013b92:	4b0a      	ldr	r3, [pc, #40]	; (8013bbc <__ieee754_pow+0x25c>)
 8013b94:	429c      	cmp	r4, r3
 8013b96:	dd19      	ble.n	8013bcc <__ieee754_pow+0x26c>
 8013b98:	f1b9 0f00 	cmp.w	r9, #0
 8013b9c:	dcef      	bgt.n	8013b7e <__ieee754_pow+0x21e>
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	b009      	add	sp, #36	; 0x24
 8013ba2:	ecbd 8b06 	vpop	{d8-d10}
 8013ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013baa:	f000 bca9 	b.w	8014500 <__math_uflow>
 8013bae:	bf00      	nop
 8013bb0:	fff00000 	.word	0xfff00000
 8013bb4:	7ff00000 	.word	0x7ff00000
 8013bb8:	433fffff 	.word	0x433fffff
 8013bbc:	3ff00000 	.word	0x3ff00000
 8013bc0:	3fefffff 	.word	0x3fefffff
 8013bc4:	3fe00000 	.word	0x3fe00000
 8013bc8:	41e00000 	.word	0x41e00000
 8013bcc:	4b60      	ldr	r3, [pc, #384]	; (8013d50 <__ieee754_pow+0x3f0>)
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f7ec fb34 	bl	800023c <__aeabi_dsub>
 8013bd4:	a354      	add	r3, pc, #336	; (adr r3, 8013d28 <__ieee754_pow+0x3c8>)
 8013bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bda:	4604      	mov	r4, r0
 8013bdc:	460d      	mov	r5, r1
 8013bde:	f7ec fce5 	bl	80005ac <__aeabi_dmul>
 8013be2:	a353      	add	r3, pc, #332	; (adr r3, 8013d30 <__ieee754_pow+0x3d0>)
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	4606      	mov	r6, r0
 8013bea:	460f      	mov	r7, r1
 8013bec:	4620      	mov	r0, r4
 8013bee:	4629      	mov	r1, r5
 8013bf0:	f7ec fcdc 	bl	80005ac <__aeabi_dmul>
 8013bf4:	4b57      	ldr	r3, [pc, #348]	; (8013d54 <__ieee754_pow+0x3f4>)
 8013bf6:	4682      	mov	sl, r0
 8013bf8:	468b      	mov	fp, r1
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	4629      	mov	r1, r5
 8013c00:	f7ec fcd4 	bl	80005ac <__aeabi_dmul>
 8013c04:	4602      	mov	r2, r0
 8013c06:	460b      	mov	r3, r1
 8013c08:	a14b      	add	r1, pc, #300	; (adr r1, 8013d38 <__ieee754_pow+0x3d8>)
 8013c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c0e:	f7ec fb15 	bl	800023c <__aeabi_dsub>
 8013c12:	4622      	mov	r2, r4
 8013c14:	462b      	mov	r3, r5
 8013c16:	f7ec fcc9 	bl	80005ac <__aeabi_dmul>
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	2000      	movs	r0, #0
 8013c20:	494d      	ldr	r1, [pc, #308]	; (8013d58 <__ieee754_pow+0x3f8>)
 8013c22:	f7ec fb0b 	bl	800023c <__aeabi_dsub>
 8013c26:	4622      	mov	r2, r4
 8013c28:	4680      	mov	r8, r0
 8013c2a:	4689      	mov	r9, r1
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	4620      	mov	r0, r4
 8013c30:	4629      	mov	r1, r5
 8013c32:	f7ec fcbb 	bl	80005ac <__aeabi_dmul>
 8013c36:	4602      	mov	r2, r0
 8013c38:	460b      	mov	r3, r1
 8013c3a:	4640      	mov	r0, r8
 8013c3c:	4649      	mov	r1, r9
 8013c3e:	f7ec fcb5 	bl	80005ac <__aeabi_dmul>
 8013c42:	a33f      	add	r3, pc, #252	; (adr r3, 8013d40 <__ieee754_pow+0x3e0>)
 8013c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c48:	f7ec fcb0 	bl	80005ac <__aeabi_dmul>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	460b      	mov	r3, r1
 8013c50:	4650      	mov	r0, sl
 8013c52:	4659      	mov	r1, fp
 8013c54:	f7ec faf2 	bl	800023c <__aeabi_dsub>
 8013c58:	4602      	mov	r2, r0
 8013c5a:	460b      	mov	r3, r1
 8013c5c:	4680      	mov	r8, r0
 8013c5e:	4689      	mov	r9, r1
 8013c60:	4630      	mov	r0, r6
 8013c62:	4639      	mov	r1, r7
 8013c64:	f7ec faec 	bl	8000240 <__adddf3>
 8013c68:	2000      	movs	r0, #0
 8013c6a:	4632      	mov	r2, r6
 8013c6c:	463b      	mov	r3, r7
 8013c6e:	4604      	mov	r4, r0
 8013c70:	460d      	mov	r5, r1
 8013c72:	f7ec fae3 	bl	800023c <__aeabi_dsub>
 8013c76:	4602      	mov	r2, r0
 8013c78:	460b      	mov	r3, r1
 8013c7a:	4640      	mov	r0, r8
 8013c7c:	4649      	mov	r1, r9
 8013c7e:	f7ec fadd 	bl	800023c <__aeabi_dsub>
 8013c82:	9b04      	ldr	r3, [sp, #16]
 8013c84:	9a06      	ldr	r2, [sp, #24]
 8013c86:	3b01      	subs	r3, #1
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	4682      	mov	sl, r0
 8013c8c:	468b      	mov	fp, r1
 8013c8e:	f040 81e7 	bne.w	8014060 <__ieee754_pow+0x700>
 8013c92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013d48 <__ieee754_pow+0x3e8>
 8013c96:	eeb0 8a47 	vmov.f32	s16, s14
 8013c9a:	eef0 8a67 	vmov.f32	s17, s15
 8013c9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013ca2:	2600      	movs	r6, #0
 8013ca4:	4632      	mov	r2, r6
 8013ca6:	463b      	mov	r3, r7
 8013ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cac:	f7ec fac6 	bl	800023c <__aeabi_dsub>
 8013cb0:	4622      	mov	r2, r4
 8013cb2:	462b      	mov	r3, r5
 8013cb4:	f7ec fc7a 	bl	80005ac <__aeabi_dmul>
 8013cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cbc:	4680      	mov	r8, r0
 8013cbe:	4689      	mov	r9, r1
 8013cc0:	4650      	mov	r0, sl
 8013cc2:	4659      	mov	r1, fp
 8013cc4:	f7ec fc72 	bl	80005ac <__aeabi_dmul>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	460b      	mov	r3, r1
 8013ccc:	4640      	mov	r0, r8
 8013cce:	4649      	mov	r1, r9
 8013cd0:	f7ec fab6 	bl	8000240 <__adddf3>
 8013cd4:	4632      	mov	r2, r6
 8013cd6:	463b      	mov	r3, r7
 8013cd8:	4680      	mov	r8, r0
 8013cda:	4689      	mov	r9, r1
 8013cdc:	4620      	mov	r0, r4
 8013cde:	4629      	mov	r1, r5
 8013ce0:	f7ec fc64 	bl	80005ac <__aeabi_dmul>
 8013ce4:	460b      	mov	r3, r1
 8013ce6:	4604      	mov	r4, r0
 8013ce8:	460d      	mov	r5, r1
 8013cea:	4602      	mov	r2, r0
 8013cec:	4649      	mov	r1, r9
 8013cee:	4640      	mov	r0, r8
 8013cf0:	f7ec faa6 	bl	8000240 <__adddf3>
 8013cf4:	4b19      	ldr	r3, [pc, #100]	; (8013d5c <__ieee754_pow+0x3fc>)
 8013cf6:	4299      	cmp	r1, r3
 8013cf8:	ec45 4b19 	vmov	d9, r4, r5
 8013cfc:	4606      	mov	r6, r0
 8013cfe:	460f      	mov	r7, r1
 8013d00:	468b      	mov	fp, r1
 8013d02:	f340 82f0 	ble.w	80142e6 <__ieee754_pow+0x986>
 8013d06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013d0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013d0e:	4303      	orrs	r3, r0
 8013d10:	f000 81e4 	beq.w	80140dc <__ieee754_pow+0x77c>
 8013d14:	ec51 0b18 	vmov	r0, r1, d8
 8013d18:	2200      	movs	r2, #0
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	f7ec feb8 	bl	8000a90 <__aeabi_dcmplt>
 8013d20:	3800      	subs	r0, #0
 8013d22:	bf18      	it	ne
 8013d24:	2001      	movne	r0, #1
 8013d26:	e72b      	b.n	8013b80 <__ieee754_pow+0x220>
 8013d28:	60000000 	.word	0x60000000
 8013d2c:	3ff71547 	.word	0x3ff71547
 8013d30:	f85ddf44 	.word	0xf85ddf44
 8013d34:	3e54ae0b 	.word	0x3e54ae0b
 8013d38:	55555555 	.word	0x55555555
 8013d3c:	3fd55555 	.word	0x3fd55555
 8013d40:	652b82fe 	.word	0x652b82fe
 8013d44:	3ff71547 	.word	0x3ff71547
 8013d48:	00000000 	.word	0x00000000
 8013d4c:	bff00000 	.word	0xbff00000
 8013d50:	3ff00000 	.word	0x3ff00000
 8013d54:	3fd00000 	.word	0x3fd00000
 8013d58:	3fe00000 	.word	0x3fe00000
 8013d5c:	408fffff 	.word	0x408fffff
 8013d60:	4bd5      	ldr	r3, [pc, #852]	; (80140b8 <__ieee754_pow+0x758>)
 8013d62:	402b      	ands	r3, r5
 8013d64:	2200      	movs	r2, #0
 8013d66:	b92b      	cbnz	r3, 8013d74 <__ieee754_pow+0x414>
 8013d68:	4bd4      	ldr	r3, [pc, #848]	; (80140bc <__ieee754_pow+0x75c>)
 8013d6a:	f7ec fc1f 	bl	80005ac <__aeabi_dmul>
 8013d6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013d72:	460c      	mov	r4, r1
 8013d74:	1523      	asrs	r3, r4, #20
 8013d76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013d7a:	4413      	add	r3, r2
 8013d7c:	9305      	str	r3, [sp, #20]
 8013d7e:	4bd0      	ldr	r3, [pc, #832]	; (80140c0 <__ieee754_pow+0x760>)
 8013d80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013d84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013d88:	429c      	cmp	r4, r3
 8013d8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013d8e:	dd08      	ble.n	8013da2 <__ieee754_pow+0x442>
 8013d90:	4bcc      	ldr	r3, [pc, #816]	; (80140c4 <__ieee754_pow+0x764>)
 8013d92:	429c      	cmp	r4, r3
 8013d94:	f340 8162 	ble.w	801405c <__ieee754_pow+0x6fc>
 8013d98:	9b05      	ldr	r3, [sp, #20]
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	9305      	str	r3, [sp, #20]
 8013d9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013da2:	2400      	movs	r4, #0
 8013da4:	00e3      	lsls	r3, r4, #3
 8013da6:	9307      	str	r3, [sp, #28]
 8013da8:	4bc7      	ldr	r3, [pc, #796]	; (80140c8 <__ieee754_pow+0x768>)
 8013daa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013dae:	ed93 7b00 	vldr	d7, [r3]
 8013db2:	4629      	mov	r1, r5
 8013db4:	ec53 2b17 	vmov	r2, r3, d7
 8013db8:	eeb0 9a47 	vmov.f32	s18, s14
 8013dbc:	eef0 9a67 	vmov.f32	s19, s15
 8013dc0:	4682      	mov	sl, r0
 8013dc2:	f7ec fa3b 	bl	800023c <__aeabi_dsub>
 8013dc6:	4652      	mov	r2, sl
 8013dc8:	4606      	mov	r6, r0
 8013dca:	460f      	mov	r7, r1
 8013dcc:	462b      	mov	r3, r5
 8013dce:	ec51 0b19 	vmov	r0, r1, d9
 8013dd2:	f7ec fa35 	bl	8000240 <__adddf3>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	460b      	mov	r3, r1
 8013dda:	2000      	movs	r0, #0
 8013ddc:	49bb      	ldr	r1, [pc, #748]	; (80140cc <__ieee754_pow+0x76c>)
 8013dde:	f7ec fd0f 	bl	8000800 <__aeabi_ddiv>
 8013de2:	ec41 0b1a 	vmov	d10, r0, r1
 8013de6:	4602      	mov	r2, r0
 8013de8:	460b      	mov	r3, r1
 8013dea:	4630      	mov	r0, r6
 8013dec:	4639      	mov	r1, r7
 8013dee:	f7ec fbdd 	bl	80005ac <__aeabi_dmul>
 8013df2:	2300      	movs	r3, #0
 8013df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013df8:	9302      	str	r3, [sp, #8]
 8013dfa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013dfe:	46ab      	mov	fp, r5
 8013e00:	106d      	asrs	r5, r5, #1
 8013e02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013e06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013e0a:	ec41 0b18 	vmov	d8, r0, r1
 8013e0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013e12:	2200      	movs	r2, #0
 8013e14:	4640      	mov	r0, r8
 8013e16:	4649      	mov	r1, r9
 8013e18:	4614      	mov	r4, r2
 8013e1a:	461d      	mov	r5, r3
 8013e1c:	f7ec fbc6 	bl	80005ac <__aeabi_dmul>
 8013e20:	4602      	mov	r2, r0
 8013e22:	460b      	mov	r3, r1
 8013e24:	4630      	mov	r0, r6
 8013e26:	4639      	mov	r1, r7
 8013e28:	f7ec fa08 	bl	800023c <__aeabi_dsub>
 8013e2c:	ec53 2b19 	vmov	r2, r3, d9
 8013e30:	4606      	mov	r6, r0
 8013e32:	460f      	mov	r7, r1
 8013e34:	4620      	mov	r0, r4
 8013e36:	4629      	mov	r1, r5
 8013e38:	f7ec fa00 	bl	800023c <__aeabi_dsub>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	4650      	mov	r0, sl
 8013e42:	4659      	mov	r1, fp
 8013e44:	f7ec f9fa 	bl	800023c <__aeabi_dsub>
 8013e48:	4642      	mov	r2, r8
 8013e4a:	464b      	mov	r3, r9
 8013e4c:	f7ec fbae 	bl	80005ac <__aeabi_dmul>
 8013e50:	4602      	mov	r2, r0
 8013e52:	460b      	mov	r3, r1
 8013e54:	4630      	mov	r0, r6
 8013e56:	4639      	mov	r1, r7
 8013e58:	f7ec f9f0 	bl	800023c <__aeabi_dsub>
 8013e5c:	ec53 2b1a 	vmov	r2, r3, d10
 8013e60:	f7ec fba4 	bl	80005ac <__aeabi_dmul>
 8013e64:	ec53 2b18 	vmov	r2, r3, d8
 8013e68:	ec41 0b19 	vmov	d9, r0, r1
 8013e6c:	ec51 0b18 	vmov	r0, r1, d8
 8013e70:	f7ec fb9c 	bl	80005ac <__aeabi_dmul>
 8013e74:	a37c      	add	r3, pc, #496	; (adr r3, 8014068 <__ieee754_pow+0x708>)
 8013e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	460d      	mov	r5, r1
 8013e7e:	f7ec fb95 	bl	80005ac <__aeabi_dmul>
 8013e82:	a37b      	add	r3, pc, #492	; (adr r3, 8014070 <__ieee754_pow+0x710>)
 8013e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e88:	f7ec f9da 	bl	8000240 <__adddf3>
 8013e8c:	4622      	mov	r2, r4
 8013e8e:	462b      	mov	r3, r5
 8013e90:	f7ec fb8c 	bl	80005ac <__aeabi_dmul>
 8013e94:	a378      	add	r3, pc, #480	; (adr r3, 8014078 <__ieee754_pow+0x718>)
 8013e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9a:	f7ec f9d1 	bl	8000240 <__adddf3>
 8013e9e:	4622      	mov	r2, r4
 8013ea0:	462b      	mov	r3, r5
 8013ea2:	f7ec fb83 	bl	80005ac <__aeabi_dmul>
 8013ea6:	a376      	add	r3, pc, #472	; (adr r3, 8014080 <__ieee754_pow+0x720>)
 8013ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eac:	f7ec f9c8 	bl	8000240 <__adddf3>
 8013eb0:	4622      	mov	r2, r4
 8013eb2:	462b      	mov	r3, r5
 8013eb4:	f7ec fb7a 	bl	80005ac <__aeabi_dmul>
 8013eb8:	a373      	add	r3, pc, #460	; (adr r3, 8014088 <__ieee754_pow+0x728>)
 8013eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ebe:	f7ec f9bf 	bl	8000240 <__adddf3>
 8013ec2:	4622      	mov	r2, r4
 8013ec4:	462b      	mov	r3, r5
 8013ec6:	f7ec fb71 	bl	80005ac <__aeabi_dmul>
 8013eca:	a371      	add	r3, pc, #452	; (adr r3, 8014090 <__ieee754_pow+0x730>)
 8013ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed0:	f7ec f9b6 	bl	8000240 <__adddf3>
 8013ed4:	4622      	mov	r2, r4
 8013ed6:	4606      	mov	r6, r0
 8013ed8:	460f      	mov	r7, r1
 8013eda:	462b      	mov	r3, r5
 8013edc:	4620      	mov	r0, r4
 8013ede:	4629      	mov	r1, r5
 8013ee0:	f7ec fb64 	bl	80005ac <__aeabi_dmul>
 8013ee4:	4602      	mov	r2, r0
 8013ee6:	460b      	mov	r3, r1
 8013ee8:	4630      	mov	r0, r6
 8013eea:	4639      	mov	r1, r7
 8013eec:	f7ec fb5e 	bl	80005ac <__aeabi_dmul>
 8013ef0:	4642      	mov	r2, r8
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	460d      	mov	r5, r1
 8013ef6:	464b      	mov	r3, r9
 8013ef8:	ec51 0b18 	vmov	r0, r1, d8
 8013efc:	f7ec f9a0 	bl	8000240 <__adddf3>
 8013f00:	ec53 2b19 	vmov	r2, r3, d9
 8013f04:	f7ec fb52 	bl	80005ac <__aeabi_dmul>
 8013f08:	4622      	mov	r2, r4
 8013f0a:	462b      	mov	r3, r5
 8013f0c:	f7ec f998 	bl	8000240 <__adddf3>
 8013f10:	4642      	mov	r2, r8
 8013f12:	4682      	mov	sl, r0
 8013f14:	468b      	mov	fp, r1
 8013f16:	464b      	mov	r3, r9
 8013f18:	4640      	mov	r0, r8
 8013f1a:	4649      	mov	r1, r9
 8013f1c:	f7ec fb46 	bl	80005ac <__aeabi_dmul>
 8013f20:	4b6b      	ldr	r3, [pc, #428]	; (80140d0 <__ieee754_pow+0x770>)
 8013f22:	2200      	movs	r2, #0
 8013f24:	4606      	mov	r6, r0
 8013f26:	460f      	mov	r7, r1
 8013f28:	f7ec f98a 	bl	8000240 <__adddf3>
 8013f2c:	4652      	mov	r2, sl
 8013f2e:	465b      	mov	r3, fp
 8013f30:	f7ec f986 	bl	8000240 <__adddf3>
 8013f34:	2000      	movs	r0, #0
 8013f36:	4604      	mov	r4, r0
 8013f38:	460d      	mov	r5, r1
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	4640      	mov	r0, r8
 8013f40:	4649      	mov	r1, r9
 8013f42:	f7ec fb33 	bl	80005ac <__aeabi_dmul>
 8013f46:	4b62      	ldr	r3, [pc, #392]	; (80140d0 <__ieee754_pow+0x770>)
 8013f48:	4680      	mov	r8, r0
 8013f4a:	4689      	mov	r9, r1
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	4620      	mov	r0, r4
 8013f50:	4629      	mov	r1, r5
 8013f52:	f7ec f973 	bl	800023c <__aeabi_dsub>
 8013f56:	4632      	mov	r2, r6
 8013f58:	463b      	mov	r3, r7
 8013f5a:	f7ec f96f 	bl	800023c <__aeabi_dsub>
 8013f5e:	4602      	mov	r2, r0
 8013f60:	460b      	mov	r3, r1
 8013f62:	4650      	mov	r0, sl
 8013f64:	4659      	mov	r1, fp
 8013f66:	f7ec f969 	bl	800023c <__aeabi_dsub>
 8013f6a:	ec53 2b18 	vmov	r2, r3, d8
 8013f6e:	f7ec fb1d 	bl	80005ac <__aeabi_dmul>
 8013f72:	4622      	mov	r2, r4
 8013f74:	4606      	mov	r6, r0
 8013f76:	460f      	mov	r7, r1
 8013f78:	462b      	mov	r3, r5
 8013f7a:	ec51 0b19 	vmov	r0, r1, d9
 8013f7e:	f7ec fb15 	bl	80005ac <__aeabi_dmul>
 8013f82:	4602      	mov	r2, r0
 8013f84:	460b      	mov	r3, r1
 8013f86:	4630      	mov	r0, r6
 8013f88:	4639      	mov	r1, r7
 8013f8a:	f7ec f959 	bl	8000240 <__adddf3>
 8013f8e:	4606      	mov	r6, r0
 8013f90:	460f      	mov	r7, r1
 8013f92:	4602      	mov	r2, r0
 8013f94:	460b      	mov	r3, r1
 8013f96:	4640      	mov	r0, r8
 8013f98:	4649      	mov	r1, r9
 8013f9a:	f7ec f951 	bl	8000240 <__adddf3>
 8013f9e:	a33e      	add	r3, pc, #248	; (adr r3, 8014098 <__ieee754_pow+0x738>)
 8013fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa4:	2000      	movs	r0, #0
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	460d      	mov	r5, r1
 8013faa:	f7ec faff 	bl	80005ac <__aeabi_dmul>
 8013fae:	4642      	mov	r2, r8
 8013fb0:	ec41 0b18 	vmov	d8, r0, r1
 8013fb4:	464b      	mov	r3, r9
 8013fb6:	4620      	mov	r0, r4
 8013fb8:	4629      	mov	r1, r5
 8013fba:	f7ec f93f 	bl	800023c <__aeabi_dsub>
 8013fbe:	4602      	mov	r2, r0
 8013fc0:	460b      	mov	r3, r1
 8013fc2:	4630      	mov	r0, r6
 8013fc4:	4639      	mov	r1, r7
 8013fc6:	f7ec f939 	bl	800023c <__aeabi_dsub>
 8013fca:	a335      	add	r3, pc, #212	; (adr r3, 80140a0 <__ieee754_pow+0x740>)
 8013fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd0:	f7ec faec 	bl	80005ac <__aeabi_dmul>
 8013fd4:	a334      	add	r3, pc, #208	; (adr r3, 80140a8 <__ieee754_pow+0x748>)
 8013fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fda:	4606      	mov	r6, r0
 8013fdc:	460f      	mov	r7, r1
 8013fde:	4620      	mov	r0, r4
 8013fe0:	4629      	mov	r1, r5
 8013fe2:	f7ec fae3 	bl	80005ac <__aeabi_dmul>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	460b      	mov	r3, r1
 8013fea:	4630      	mov	r0, r6
 8013fec:	4639      	mov	r1, r7
 8013fee:	f7ec f927 	bl	8000240 <__adddf3>
 8013ff2:	9a07      	ldr	r2, [sp, #28]
 8013ff4:	4b37      	ldr	r3, [pc, #220]	; (80140d4 <__ieee754_pow+0x774>)
 8013ff6:	4413      	add	r3, r2
 8013ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ffc:	f7ec f920 	bl	8000240 <__adddf3>
 8014000:	4682      	mov	sl, r0
 8014002:	9805      	ldr	r0, [sp, #20]
 8014004:	468b      	mov	fp, r1
 8014006:	f7ec fa67 	bl	80004d8 <__aeabi_i2d>
 801400a:	9a07      	ldr	r2, [sp, #28]
 801400c:	4b32      	ldr	r3, [pc, #200]	; (80140d8 <__ieee754_pow+0x778>)
 801400e:	4413      	add	r3, r2
 8014010:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014014:	4606      	mov	r6, r0
 8014016:	460f      	mov	r7, r1
 8014018:	4652      	mov	r2, sl
 801401a:	465b      	mov	r3, fp
 801401c:	ec51 0b18 	vmov	r0, r1, d8
 8014020:	f7ec f90e 	bl	8000240 <__adddf3>
 8014024:	4642      	mov	r2, r8
 8014026:	464b      	mov	r3, r9
 8014028:	f7ec f90a 	bl	8000240 <__adddf3>
 801402c:	4632      	mov	r2, r6
 801402e:	463b      	mov	r3, r7
 8014030:	f7ec f906 	bl	8000240 <__adddf3>
 8014034:	2000      	movs	r0, #0
 8014036:	4632      	mov	r2, r6
 8014038:	463b      	mov	r3, r7
 801403a:	4604      	mov	r4, r0
 801403c:	460d      	mov	r5, r1
 801403e:	f7ec f8fd 	bl	800023c <__aeabi_dsub>
 8014042:	4642      	mov	r2, r8
 8014044:	464b      	mov	r3, r9
 8014046:	f7ec f8f9 	bl	800023c <__aeabi_dsub>
 801404a:	ec53 2b18 	vmov	r2, r3, d8
 801404e:	f7ec f8f5 	bl	800023c <__aeabi_dsub>
 8014052:	4602      	mov	r2, r0
 8014054:	460b      	mov	r3, r1
 8014056:	4650      	mov	r0, sl
 8014058:	4659      	mov	r1, fp
 801405a:	e610      	b.n	8013c7e <__ieee754_pow+0x31e>
 801405c:	2401      	movs	r4, #1
 801405e:	e6a1      	b.n	8013da4 <__ieee754_pow+0x444>
 8014060:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80140b0 <__ieee754_pow+0x750>
 8014064:	e617      	b.n	8013c96 <__ieee754_pow+0x336>
 8014066:	bf00      	nop
 8014068:	4a454eef 	.word	0x4a454eef
 801406c:	3fca7e28 	.word	0x3fca7e28
 8014070:	93c9db65 	.word	0x93c9db65
 8014074:	3fcd864a 	.word	0x3fcd864a
 8014078:	a91d4101 	.word	0xa91d4101
 801407c:	3fd17460 	.word	0x3fd17460
 8014080:	518f264d 	.word	0x518f264d
 8014084:	3fd55555 	.word	0x3fd55555
 8014088:	db6fabff 	.word	0xdb6fabff
 801408c:	3fdb6db6 	.word	0x3fdb6db6
 8014090:	33333303 	.word	0x33333303
 8014094:	3fe33333 	.word	0x3fe33333
 8014098:	e0000000 	.word	0xe0000000
 801409c:	3feec709 	.word	0x3feec709
 80140a0:	dc3a03fd 	.word	0xdc3a03fd
 80140a4:	3feec709 	.word	0x3feec709
 80140a8:	145b01f5 	.word	0x145b01f5
 80140ac:	be3e2fe0 	.word	0xbe3e2fe0
 80140b0:	00000000 	.word	0x00000000
 80140b4:	3ff00000 	.word	0x3ff00000
 80140b8:	7ff00000 	.word	0x7ff00000
 80140bc:	43400000 	.word	0x43400000
 80140c0:	0003988e 	.word	0x0003988e
 80140c4:	000bb679 	.word	0x000bb679
 80140c8:	08014888 	.word	0x08014888
 80140cc:	3ff00000 	.word	0x3ff00000
 80140d0:	40080000 	.word	0x40080000
 80140d4:	080148a8 	.word	0x080148a8
 80140d8:	08014898 	.word	0x08014898
 80140dc:	a3b3      	add	r3, pc, #716	; (adr r3, 80143ac <__ieee754_pow+0xa4c>)
 80140de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e2:	4640      	mov	r0, r8
 80140e4:	4649      	mov	r1, r9
 80140e6:	f7ec f8ab 	bl	8000240 <__adddf3>
 80140ea:	4622      	mov	r2, r4
 80140ec:	ec41 0b1a 	vmov	d10, r0, r1
 80140f0:	462b      	mov	r3, r5
 80140f2:	4630      	mov	r0, r6
 80140f4:	4639      	mov	r1, r7
 80140f6:	f7ec f8a1 	bl	800023c <__aeabi_dsub>
 80140fa:	4602      	mov	r2, r0
 80140fc:	460b      	mov	r3, r1
 80140fe:	ec51 0b1a 	vmov	r0, r1, d10
 8014102:	f7ec fce3 	bl	8000acc <__aeabi_dcmpgt>
 8014106:	2800      	cmp	r0, #0
 8014108:	f47f ae04 	bne.w	8013d14 <__ieee754_pow+0x3b4>
 801410c:	4aa2      	ldr	r2, [pc, #648]	; (8014398 <__ieee754_pow+0xa38>)
 801410e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014112:	4293      	cmp	r3, r2
 8014114:	f340 8107 	ble.w	8014326 <__ieee754_pow+0x9c6>
 8014118:	151b      	asrs	r3, r3, #20
 801411a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801411e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014122:	fa4a fa03 	asr.w	sl, sl, r3
 8014126:	44da      	add	sl, fp
 8014128:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801412c:	489b      	ldr	r0, [pc, #620]	; (801439c <__ieee754_pow+0xa3c>)
 801412e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014132:	4108      	asrs	r0, r1
 8014134:	ea00 030a 	and.w	r3, r0, sl
 8014138:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801413c:	f1c1 0114 	rsb	r1, r1, #20
 8014140:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014144:	fa4a fa01 	asr.w	sl, sl, r1
 8014148:	f1bb 0f00 	cmp.w	fp, #0
 801414c:	f04f 0200 	mov.w	r2, #0
 8014150:	4620      	mov	r0, r4
 8014152:	4629      	mov	r1, r5
 8014154:	bfb8      	it	lt
 8014156:	f1ca 0a00 	rsblt	sl, sl, #0
 801415a:	f7ec f86f 	bl	800023c <__aeabi_dsub>
 801415e:	ec41 0b19 	vmov	d9, r0, r1
 8014162:	4642      	mov	r2, r8
 8014164:	464b      	mov	r3, r9
 8014166:	ec51 0b19 	vmov	r0, r1, d9
 801416a:	f7ec f869 	bl	8000240 <__adddf3>
 801416e:	a37a      	add	r3, pc, #488	; (adr r3, 8014358 <__ieee754_pow+0x9f8>)
 8014170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014174:	2000      	movs	r0, #0
 8014176:	4604      	mov	r4, r0
 8014178:	460d      	mov	r5, r1
 801417a:	f7ec fa17 	bl	80005ac <__aeabi_dmul>
 801417e:	ec53 2b19 	vmov	r2, r3, d9
 8014182:	4606      	mov	r6, r0
 8014184:	460f      	mov	r7, r1
 8014186:	4620      	mov	r0, r4
 8014188:	4629      	mov	r1, r5
 801418a:	f7ec f857 	bl	800023c <__aeabi_dsub>
 801418e:	4602      	mov	r2, r0
 8014190:	460b      	mov	r3, r1
 8014192:	4640      	mov	r0, r8
 8014194:	4649      	mov	r1, r9
 8014196:	f7ec f851 	bl	800023c <__aeabi_dsub>
 801419a:	a371      	add	r3, pc, #452	; (adr r3, 8014360 <__ieee754_pow+0xa00>)
 801419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a0:	f7ec fa04 	bl	80005ac <__aeabi_dmul>
 80141a4:	a370      	add	r3, pc, #448	; (adr r3, 8014368 <__ieee754_pow+0xa08>)
 80141a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141aa:	4680      	mov	r8, r0
 80141ac:	4689      	mov	r9, r1
 80141ae:	4620      	mov	r0, r4
 80141b0:	4629      	mov	r1, r5
 80141b2:	f7ec f9fb 	bl	80005ac <__aeabi_dmul>
 80141b6:	4602      	mov	r2, r0
 80141b8:	460b      	mov	r3, r1
 80141ba:	4640      	mov	r0, r8
 80141bc:	4649      	mov	r1, r9
 80141be:	f7ec f83f 	bl	8000240 <__adddf3>
 80141c2:	4604      	mov	r4, r0
 80141c4:	460d      	mov	r5, r1
 80141c6:	4602      	mov	r2, r0
 80141c8:	460b      	mov	r3, r1
 80141ca:	4630      	mov	r0, r6
 80141cc:	4639      	mov	r1, r7
 80141ce:	f7ec f837 	bl	8000240 <__adddf3>
 80141d2:	4632      	mov	r2, r6
 80141d4:	463b      	mov	r3, r7
 80141d6:	4680      	mov	r8, r0
 80141d8:	4689      	mov	r9, r1
 80141da:	f7ec f82f 	bl	800023c <__aeabi_dsub>
 80141de:	4602      	mov	r2, r0
 80141e0:	460b      	mov	r3, r1
 80141e2:	4620      	mov	r0, r4
 80141e4:	4629      	mov	r1, r5
 80141e6:	f7ec f829 	bl	800023c <__aeabi_dsub>
 80141ea:	4642      	mov	r2, r8
 80141ec:	4606      	mov	r6, r0
 80141ee:	460f      	mov	r7, r1
 80141f0:	464b      	mov	r3, r9
 80141f2:	4640      	mov	r0, r8
 80141f4:	4649      	mov	r1, r9
 80141f6:	f7ec f9d9 	bl	80005ac <__aeabi_dmul>
 80141fa:	a35d      	add	r3, pc, #372	; (adr r3, 8014370 <__ieee754_pow+0xa10>)
 80141fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014200:	4604      	mov	r4, r0
 8014202:	460d      	mov	r5, r1
 8014204:	f7ec f9d2 	bl	80005ac <__aeabi_dmul>
 8014208:	a35b      	add	r3, pc, #364	; (adr r3, 8014378 <__ieee754_pow+0xa18>)
 801420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420e:	f7ec f815 	bl	800023c <__aeabi_dsub>
 8014212:	4622      	mov	r2, r4
 8014214:	462b      	mov	r3, r5
 8014216:	f7ec f9c9 	bl	80005ac <__aeabi_dmul>
 801421a:	a359      	add	r3, pc, #356	; (adr r3, 8014380 <__ieee754_pow+0xa20>)
 801421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014220:	f7ec f80e 	bl	8000240 <__adddf3>
 8014224:	4622      	mov	r2, r4
 8014226:	462b      	mov	r3, r5
 8014228:	f7ec f9c0 	bl	80005ac <__aeabi_dmul>
 801422c:	a356      	add	r3, pc, #344	; (adr r3, 8014388 <__ieee754_pow+0xa28>)
 801422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014232:	f7ec f803 	bl	800023c <__aeabi_dsub>
 8014236:	4622      	mov	r2, r4
 8014238:	462b      	mov	r3, r5
 801423a:	f7ec f9b7 	bl	80005ac <__aeabi_dmul>
 801423e:	a354      	add	r3, pc, #336	; (adr r3, 8014390 <__ieee754_pow+0xa30>)
 8014240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014244:	f7eb fffc 	bl	8000240 <__adddf3>
 8014248:	4622      	mov	r2, r4
 801424a:	462b      	mov	r3, r5
 801424c:	f7ec f9ae 	bl	80005ac <__aeabi_dmul>
 8014250:	4602      	mov	r2, r0
 8014252:	460b      	mov	r3, r1
 8014254:	4640      	mov	r0, r8
 8014256:	4649      	mov	r1, r9
 8014258:	f7eb fff0 	bl	800023c <__aeabi_dsub>
 801425c:	4604      	mov	r4, r0
 801425e:	460d      	mov	r5, r1
 8014260:	4602      	mov	r2, r0
 8014262:	460b      	mov	r3, r1
 8014264:	4640      	mov	r0, r8
 8014266:	4649      	mov	r1, r9
 8014268:	f7ec f9a0 	bl	80005ac <__aeabi_dmul>
 801426c:	2200      	movs	r2, #0
 801426e:	ec41 0b19 	vmov	d9, r0, r1
 8014272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014276:	4620      	mov	r0, r4
 8014278:	4629      	mov	r1, r5
 801427a:	f7eb ffdf 	bl	800023c <__aeabi_dsub>
 801427e:	4602      	mov	r2, r0
 8014280:	460b      	mov	r3, r1
 8014282:	ec51 0b19 	vmov	r0, r1, d9
 8014286:	f7ec fabb 	bl	8000800 <__aeabi_ddiv>
 801428a:	4632      	mov	r2, r6
 801428c:	4604      	mov	r4, r0
 801428e:	460d      	mov	r5, r1
 8014290:	463b      	mov	r3, r7
 8014292:	4640      	mov	r0, r8
 8014294:	4649      	mov	r1, r9
 8014296:	f7ec f989 	bl	80005ac <__aeabi_dmul>
 801429a:	4632      	mov	r2, r6
 801429c:	463b      	mov	r3, r7
 801429e:	f7eb ffcf 	bl	8000240 <__adddf3>
 80142a2:	4602      	mov	r2, r0
 80142a4:	460b      	mov	r3, r1
 80142a6:	4620      	mov	r0, r4
 80142a8:	4629      	mov	r1, r5
 80142aa:	f7eb ffc7 	bl	800023c <__aeabi_dsub>
 80142ae:	4642      	mov	r2, r8
 80142b0:	464b      	mov	r3, r9
 80142b2:	f7eb ffc3 	bl	800023c <__aeabi_dsub>
 80142b6:	460b      	mov	r3, r1
 80142b8:	4602      	mov	r2, r0
 80142ba:	4939      	ldr	r1, [pc, #228]	; (80143a0 <__ieee754_pow+0xa40>)
 80142bc:	2000      	movs	r0, #0
 80142be:	f7eb ffbd 	bl	800023c <__aeabi_dsub>
 80142c2:	ec41 0b10 	vmov	d0, r0, r1
 80142c6:	ee10 3a90 	vmov	r3, s1
 80142ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80142ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80142d2:	da2b      	bge.n	801432c <__ieee754_pow+0x9cc>
 80142d4:	4650      	mov	r0, sl
 80142d6:	f000 f877 	bl	80143c8 <scalbn>
 80142da:	ec51 0b10 	vmov	r0, r1, d0
 80142de:	ec53 2b18 	vmov	r2, r3, d8
 80142e2:	f7ff bbee 	b.w	8013ac2 <__ieee754_pow+0x162>
 80142e6:	4b2f      	ldr	r3, [pc, #188]	; (80143a4 <__ieee754_pow+0xa44>)
 80142e8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80142ec:	429e      	cmp	r6, r3
 80142ee:	f77f af0d 	ble.w	801410c <__ieee754_pow+0x7ac>
 80142f2:	4b2d      	ldr	r3, [pc, #180]	; (80143a8 <__ieee754_pow+0xa48>)
 80142f4:	440b      	add	r3, r1
 80142f6:	4303      	orrs	r3, r0
 80142f8:	d009      	beq.n	801430e <__ieee754_pow+0x9ae>
 80142fa:	ec51 0b18 	vmov	r0, r1, d8
 80142fe:	2200      	movs	r2, #0
 8014300:	2300      	movs	r3, #0
 8014302:	f7ec fbc5 	bl	8000a90 <__aeabi_dcmplt>
 8014306:	3800      	subs	r0, #0
 8014308:	bf18      	it	ne
 801430a:	2001      	movne	r0, #1
 801430c:	e448      	b.n	8013ba0 <__ieee754_pow+0x240>
 801430e:	4622      	mov	r2, r4
 8014310:	462b      	mov	r3, r5
 8014312:	f7eb ff93 	bl	800023c <__aeabi_dsub>
 8014316:	4642      	mov	r2, r8
 8014318:	464b      	mov	r3, r9
 801431a:	f7ec fbcd 	bl	8000ab8 <__aeabi_dcmpge>
 801431e:	2800      	cmp	r0, #0
 8014320:	f43f aef4 	beq.w	801410c <__ieee754_pow+0x7ac>
 8014324:	e7e9      	b.n	80142fa <__ieee754_pow+0x99a>
 8014326:	f04f 0a00 	mov.w	sl, #0
 801432a:	e71a      	b.n	8014162 <__ieee754_pow+0x802>
 801432c:	ec51 0b10 	vmov	r0, r1, d0
 8014330:	4619      	mov	r1, r3
 8014332:	e7d4      	b.n	80142de <__ieee754_pow+0x97e>
 8014334:	491a      	ldr	r1, [pc, #104]	; (80143a0 <__ieee754_pow+0xa40>)
 8014336:	2000      	movs	r0, #0
 8014338:	f7ff bb31 	b.w	801399e <__ieee754_pow+0x3e>
 801433c:	2000      	movs	r0, #0
 801433e:	2100      	movs	r1, #0
 8014340:	f7ff bb2d 	b.w	801399e <__ieee754_pow+0x3e>
 8014344:	4630      	mov	r0, r6
 8014346:	4639      	mov	r1, r7
 8014348:	f7ff bb29 	b.w	801399e <__ieee754_pow+0x3e>
 801434c:	9204      	str	r2, [sp, #16]
 801434e:	f7ff bb7b 	b.w	8013a48 <__ieee754_pow+0xe8>
 8014352:	2300      	movs	r3, #0
 8014354:	f7ff bb65 	b.w	8013a22 <__ieee754_pow+0xc2>
 8014358:	00000000 	.word	0x00000000
 801435c:	3fe62e43 	.word	0x3fe62e43
 8014360:	fefa39ef 	.word	0xfefa39ef
 8014364:	3fe62e42 	.word	0x3fe62e42
 8014368:	0ca86c39 	.word	0x0ca86c39
 801436c:	be205c61 	.word	0xbe205c61
 8014370:	72bea4d0 	.word	0x72bea4d0
 8014374:	3e663769 	.word	0x3e663769
 8014378:	c5d26bf1 	.word	0xc5d26bf1
 801437c:	3ebbbd41 	.word	0x3ebbbd41
 8014380:	af25de2c 	.word	0xaf25de2c
 8014384:	3f11566a 	.word	0x3f11566a
 8014388:	16bebd93 	.word	0x16bebd93
 801438c:	3f66c16c 	.word	0x3f66c16c
 8014390:	5555553e 	.word	0x5555553e
 8014394:	3fc55555 	.word	0x3fc55555
 8014398:	3fe00000 	.word	0x3fe00000
 801439c:	fff00000 	.word	0xfff00000
 80143a0:	3ff00000 	.word	0x3ff00000
 80143a4:	4090cbff 	.word	0x4090cbff
 80143a8:	3f6f3400 	.word	0x3f6f3400
 80143ac:	652b82fe 	.word	0x652b82fe
 80143b0:	3c971547 	.word	0x3c971547

080143b4 <fabs>:
 80143b4:	ec51 0b10 	vmov	r0, r1, d0
 80143b8:	ee10 2a10 	vmov	r2, s0
 80143bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80143c0:	ec43 2b10 	vmov	d0, r2, r3
 80143c4:	4770      	bx	lr
	...

080143c8 <scalbn>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	ec55 4b10 	vmov	r4, r5, d0
 80143ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80143d2:	4606      	mov	r6, r0
 80143d4:	462b      	mov	r3, r5
 80143d6:	b999      	cbnz	r1, 8014400 <scalbn+0x38>
 80143d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80143dc:	4323      	orrs	r3, r4
 80143de:	d03f      	beq.n	8014460 <scalbn+0x98>
 80143e0:	4b35      	ldr	r3, [pc, #212]	; (80144b8 <scalbn+0xf0>)
 80143e2:	4629      	mov	r1, r5
 80143e4:	ee10 0a10 	vmov	r0, s0
 80143e8:	2200      	movs	r2, #0
 80143ea:	f7ec f8df 	bl	80005ac <__aeabi_dmul>
 80143ee:	4b33      	ldr	r3, [pc, #204]	; (80144bc <scalbn+0xf4>)
 80143f0:	429e      	cmp	r6, r3
 80143f2:	4604      	mov	r4, r0
 80143f4:	460d      	mov	r5, r1
 80143f6:	da10      	bge.n	801441a <scalbn+0x52>
 80143f8:	a327      	add	r3, pc, #156	; (adr r3, 8014498 <scalbn+0xd0>)
 80143fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fe:	e01f      	b.n	8014440 <scalbn+0x78>
 8014400:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014404:	4291      	cmp	r1, r2
 8014406:	d10c      	bne.n	8014422 <scalbn+0x5a>
 8014408:	ee10 2a10 	vmov	r2, s0
 801440c:	4620      	mov	r0, r4
 801440e:	4629      	mov	r1, r5
 8014410:	f7eb ff16 	bl	8000240 <__adddf3>
 8014414:	4604      	mov	r4, r0
 8014416:	460d      	mov	r5, r1
 8014418:	e022      	b.n	8014460 <scalbn+0x98>
 801441a:	460b      	mov	r3, r1
 801441c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014420:	3936      	subs	r1, #54	; 0x36
 8014422:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014426:	4296      	cmp	r6, r2
 8014428:	dd0d      	ble.n	8014446 <scalbn+0x7e>
 801442a:	2d00      	cmp	r5, #0
 801442c:	a11c      	add	r1, pc, #112	; (adr r1, 80144a0 <scalbn+0xd8>)
 801442e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014432:	da02      	bge.n	801443a <scalbn+0x72>
 8014434:	a11c      	add	r1, pc, #112	; (adr r1, 80144a8 <scalbn+0xe0>)
 8014436:	e9d1 0100 	ldrd	r0, r1, [r1]
 801443a:	a319      	add	r3, pc, #100	; (adr r3, 80144a0 <scalbn+0xd8>)
 801443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014440:	f7ec f8b4 	bl	80005ac <__aeabi_dmul>
 8014444:	e7e6      	b.n	8014414 <scalbn+0x4c>
 8014446:	1872      	adds	r2, r6, r1
 8014448:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801444c:	428a      	cmp	r2, r1
 801444e:	dcec      	bgt.n	801442a <scalbn+0x62>
 8014450:	2a00      	cmp	r2, #0
 8014452:	dd08      	ble.n	8014466 <scalbn+0x9e>
 8014454:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014458:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801445c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014460:	ec45 4b10 	vmov	d0, r4, r5
 8014464:	bd70      	pop	{r4, r5, r6, pc}
 8014466:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801446a:	da08      	bge.n	801447e <scalbn+0xb6>
 801446c:	2d00      	cmp	r5, #0
 801446e:	a10a      	add	r1, pc, #40	; (adr r1, 8014498 <scalbn+0xd0>)
 8014470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014474:	dac0      	bge.n	80143f8 <scalbn+0x30>
 8014476:	a10e      	add	r1, pc, #56	; (adr r1, 80144b0 <scalbn+0xe8>)
 8014478:	e9d1 0100 	ldrd	r0, r1, [r1]
 801447c:	e7bc      	b.n	80143f8 <scalbn+0x30>
 801447e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014482:	3236      	adds	r2, #54	; 0x36
 8014484:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014488:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801448c:	4620      	mov	r0, r4
 801448e:	4b0c      	ldr	r3, [pc, #48]	; (80144c0 <scalbn+0xf8>)
 8014490:	2200      	movs	r2, #0
 8014492:	e7d5      	b.n	8014440 <scalbn+0x78>
 8014494:	f3af 8000 	nop.w
 8014498:	c2f8f359 	.word	0xc2f8f359
 801449c:	01a56e1f 	.word	0x01a56e1f
 80144a0:	8800759c 	.word	0x8800759c
 80144a4:	7e37e43c 	.word	0x7e37e43c
 80144a8:	8800759c 	.word	0x8800759c
 80144ac:	fe37e43c 	.word	0xfe37e43c
 80144b0:	c2f8f359 	.word	0xc2f8f359
 80144b4:	81a56e1f 	.word	0x81a56e1f
 80144b8:	43500000 	.word	0x43500000
 80144bc:	ffff3cb0 	.word	0xffff3cb0
 80144c0:	3c900000 	.word	0x3c900000

080144c4 <with_errno>:
 80144c4:	b570      	push	{r4, r5, r6, lr}
 80144c6:	4604      	mov	r4, r0
 80144c8:	460d      	mov	r5, r1
 80144ca:	4616      	mov	r6, r2
 80144cc:	f7ff f938 	bl	8013740 <__errno>
 80144d0:	4629      	mov	r1, r5
 80144d2:	6006      	str	r6, [r0, #0]
 80144d4:	4620      	mov	r0, r4
 80144d6:	bd70      	pop	{r4, r5, r6, pc}

080144d8 <xflow>:
 80144d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144da:	4614      	mov	r4, r2
 80144dc:	461d      	mov	r5, r3
 80144de:	b108      	cbz	r0, 80144e4 <xflow+0xc>
 80144e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80144e4:	e9cd 2300 	strd	r2, r3, [sp]
 80144e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144ec:	4620      	mov	r0, r4
 80144ee:	4629      	mov	r1, r5
 80144f0:	f7ec f85c 	bl	80005ac <__aeabi_dmul>
 80144f4:	2222      	movs	r2, #34	; 0x22
 80144f6:	b003      	add	sp, #12
 80144f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144fc:	f7ff bfe2 	b.w	80144c4 <with_errno>

08014500 <__math_uflow>:
 8014500:	b508      	push	{r3, lr}
 8014502:	2200      	movs	r2, #0
 8014504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014508:	f7ff ffe6 	bl	80144d8 <xflow>
 801450c:	ec41 0b10 	vmov	d0, r0, r1
 8014510:	bd08      	pop	{r3, pc}

08014512 <__math_oflow>:
 8014512:	b508      	push	{r3, lr}
 8014514:	2200      	movs	r2, #0
 8014516:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801451a:	f7ff ffdd 	bl	80144d8 <xflow>
 801451e:	ec41 0b10 	vmov	d0, r0, r1
 8014522:	bd08      	pop	{r3, pc}

08014524 <__ieee754_sqrt>:
 8014524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014528:	ec55 4b10 	vmov	r4, r5, d0
 801452c:	4e67      	ldr	r6, [pc, #412]	; (80146cc <__ieee754_sqrt+0x1a8>)
 801452e:	43ae      	bics	r6, r5
 8014530:	ee10 0a10 	vmov	r0, s0
 8014534:	ee10 2a10 	vmov	r2, s0
 8014538:	4629      	mov	r1, r5
 801453a:	462b      	mov	r3, r5
 801453c:	d10d      	bne.n	801455a <__ieee754_sqrt+0x36>
 801453e:	f7ec f835 	bl	80005ac <__aeabi_dmul>
 8014542:	4602      	mov	r2, r0
 8014544:	460b      	mov	r3, r1
 8014546:	4620      	mov	r0, r4
 8014548:	4629      	mov	r1, r5
 801454a:	f7eb fe79 	bl	8000240 <__adddf3>
 801454e:	4604      	mov	r4, r0
 8014550:	460d      	mov	r5, r1
 8014552:	ec45 4b10 	vmov	d0, r4, r5
 8014556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801455a:	2d00      	cmp	r5, #0
 801455c:	dc0b      	bgt.n	8014576 <__ieee754_sqrt+0x52>
 801455e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014562:	4326      	orrs	r6, r4
 8014564:	d0f5      	beq.n	8014552 <__ieee754_sqrt+0x2e>
 8014566:	b135      	cbz	r5, 8014576 <__ieee754_sqrt+0x52>
 8014568:	f7eb fe68 	bl	800023c <__aeabi_dsub>
 801456c:	4602      	mov	r2, r0
 801456e:	460b      	mov	r3, r1
 8014570:	f7ec f946 	bl	8000800 <__aeabi_ddiv>
 8014574:	e7eb      	b.n	801454e <__ieee754_sqrt+0x2a>
 8014576:	1509      	asrs	r1, r1, #20
 8014578:	f000 808d 	beq.w	8014696 <__ieee754_sqrt+0x172>
 801457c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014580:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014588:	07c9      	lsls	r1, r1, #31
 801458a:	bf5c      	itt	pl
 801458c:	005b      	lslpl	r3, r3, #1
 801458e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014592:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014596:	bf58      	it	pl
 8014598:	0052      	lslpl	r2, r2, #1
 801459a:	2500      	movs	r5, #0
 801459c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80145a0:	1076      	asrs	r6, r6, #1
 80145a2:	0052      	lsls	r2, r2, #1
 80145a4:	f04f 0e16 	mov.w	lr, #22
 80145a8:	46ac      	mov	ip, r5
 80145aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80145ae:	eb0c 0001 	add.w	r0, ip, r1
 80145b2:	4298      	cmp	r0, r3
 80145b4:	bfde      	ittt	le
 80145b6:	1a1b      	suble	r3, r3, r0
 80145b8:	eb00 0c01 	addle.w	ip, r0, r1
 80145bc:	186d      	addle	r5, r5, r1
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	f1be 0e01 	subs.w	lr, lr, #1
 80145c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80145c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80145cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80145d0:	d1ed      	bne.n	80145ae <__ieee754_sqrt+0x8a>
 80145d2:	4674      	mov	r4, lr
 80145d4:	2720      	movs	r7, #32
 80145d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80145da:	4563      	cmp	r3, ip
 80145dc:	eb01 000e 	add.w	r0, r1, lr
 80145e0:	dc02      	bgt.n	80145e8 <__ieee754_sqrt+0xc4>
 80145e2:	d113      	bne.n	801460c <__ieee754_sqrt+0xe8>
 80145e4:	4290      	cmp	r0, r2
 80145e6:	d811      	bhi.n	801460c <__ieee754_sqrt+0xe8>
 80145e8:	2800      	cmp	r0, #0
 80145ea:	eb00 0e01 	add.w	lr, r0, r1
 80145ee:	da57      	bge.n	80146a0 <__ieee754_sqrt+0x17c>
 80145f0:	f1be 0f00 	cmp.w	lr, #0
 80145f4:	db54      	blt.n	80146a0 <__ieee754_sqrt+0x17c>
 80145f6:	f10c 0801 	add.w	r8, ip, #1
 80145fa:	eba3 030c 	sub.w	r3, r3, ip
 80145fe:	4290      	cmp	r0, r2
 8014600:	bf88      	it	hi
 8014602:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014606:	1a12      	subs	r2, r2, r0
 8014608:	440c      	add	r4, r1
 801460a:	46c4      	mov	ip, r8
 801460c:	005b      	lsls	r3, r3, #1
 801460e:	3f01      	subs	r7, #1
 8014610:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014614:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014618:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801461c:	d1dd      	bne.n	80145da <__ieee754_sqrt+0xb6>
 801461e:	4313      	orrs	r3, r2
 8014620:	d01b      	beq.n	801465a <__ieee754_sqrt+0x136>
 8014622:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80146d0 <__ieee754_sqrt+0x1ac>
 8014626:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80146d4 <__ieee754_sqrt+0x1b0>
 801462a:	e9da 0100 	ldrd	r0, r1, [sl]
 801462e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014632:	f7eb fe03 	bl	800023c <__aeabi_dsub>
 8014636:	e9da 8900 	ldrd	r8, r9, [sl]
 801463a:	4602      	mov	r2, r0
 801463c:	460b      	mov	r3, r1
 801463e:	4640      	mov	r0, r8
 8014640:	4649      	mov	r1, r9
 8014642:	f7ec fa2f 	bl	8000aa4 <__aeabi_dcmple>
 8014646:	b140      	cbz	r0, 801465a <__ieee754_sqrt+0x136>
 8014648:	f1b4 3fff 	cmp.w	r4, #4294967295
 801464c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014650:	e9db 2300 	ldrd	r2, r3, [fp]
 8014654:	d126      	bne.n	80146a4 <__ieee754_sqrt+0x180>
 8014656:	3501      	adds	r5, #1
 8014658:	463c      	mov	r4, r7
 801465a:	106a      	asrs	r2, r5, #1
 801465c:	0863      	lsrs	r3, r4, #1
 801465e:	07e9      	lsls	r1, r5, #31
 8014660:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014664:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014668:	bf48      	it	mi
 801466a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801466e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014672:	461c      	mov	r4, r3
 8014674:	e76d      	b.n	8014552 <__ieee754_sqrt+0x2e>
 8014676:	0ad3      	lsrs	r3, r2, #11
 8014678:	3815      	subs	r0, #21
 801467a:	0552      	lsls	r2, r2, #21
 801467c:	2b00      	cmp	r3, #0
 801467e:	d0fa      	beq.n	8014676 <__ieee754_sqrt+0x152>
 8014680:	02dc      	lsls	r4, r3, #11
 8014682:	d50a      	bpl.n	801469a <__ieee754_sqrt+0x176>
 8014684:	f1c1 0420 	rsb	r4, r1, #32
 8014688:	fa22 f404 	lsr.w	r4, r2, r4
 801468c:	1e4d      	subs	r5, r1, #1
 801468e:	408a      	lsls	r2, r1
 8014690:	4323      	orrs	r3, r4
 8014692:	1b41      	subs	r1, r0, r5
 8014694:	e772      	b.n	801457c <__ieee754_sqrt+0x58>
 8014696:	4608      	mov	r0, r1
 8014698:	e7f0      	b.n	801467c <__ieee754_sqrt+0x158>
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	3101      	adds	r1, #1
 801469e:	e7ef      	b.n	8014680 <__ieee754_sqrt+0x15c>
 80146a0:	46e0      	mov	r8, ip
 80146a2:	e7aa      	b.n	80145fa <__ieee754_sqrt+0xd6>
 80146a4:	f7eb fdcc 	bl	8000240 <__adddf3>
 80146a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80146ac:	4602      	mov	r2, r0
 80146ae:	460b      	mov	r3, r1
 80146b0:	4640      	mov	r0, r8
 80146b2:	4649      	mov	r1, r9
 80146b4:	f7ec f9ec 	bl	8000a90 <__aeabi_dcmplt>
 80146b8:	b120      	cbz	r0, 80146c4 <__ieee754_sqrt+0x1a0>
 80146ba:	1ca0      	adds	r0, r4, #2
 80146bc:	bf08      	it	eq
 80146be:	3501      	addeq	r5, #1
 80146c0:	3402      	adds	r4, #2
 80146c2:	e7ca      	b.n	801465a <__ieee754_sqrt+0x136>
 80146c4:	3401      	adds	r4, #1
 80146c6:	f024 0401 	bic.w	r4, r4, #1
 80146ca:	e7c6      	b.n	801465a <__ieee754_sqrt+0x136>
 80146cc:	7ff00000 	.word	0x7ff00000
 80146d0:	200001e0 	.word	0x200001e0
 80146d4:	200001e8 	.word	0x200001e8

080146d8 <_init>:
 80146d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146da:	bf00      	nop
 80146dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146de:	bc08      	pop	{r3}
 80146e0:	469e      	mov	lr, r3
 80146e2:	4770      	bx	lr

080146e4 <_fini>:
 80146e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e6:	bf00      	nop
 80146e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146ea:	bc08      	pop	{r3}
 80146ec:	469e      	mov	lr, r3
 80146ee:	4770      	bx	lr
