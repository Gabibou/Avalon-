
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d5c  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800af3c  0800af3c  0000af3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b034  0800b034  00010078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b034  0800b034  00010078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b034  0800b034  00010078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b034  0800b034  0000b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b038  0800b038  0000b038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b03c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c1c  20000078  0800b0b4  00010078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c94  0800b0b4  00011c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c343  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004041  00000000  00000000  0002c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00030430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e17  00000000  00000000  000330e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e49b  00000000  00000000  0005ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102fe6  00000000  00000000  0007b39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0017e380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e0  00000000  00000000  0017e448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	20000078 	.word	0x20000078
 80041fc:	00000000 	.word	0x00000000
 8004200:	0800af24 	.word	0x0800af24

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	2000007c 	.word	0x2000007c
 800421c:	0800af24 	.word	0x0800af24

08004220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004220:	b5b0      	push	{r4, r5, r7, lr}
 8004222:	b09e      	sub	sp, #120	; 0x78
 8004224:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8004226:	2300      	movs	r3, #0
 8004228:	657b      	str	r3, [r7, #84]	; 0x54
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800422a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800422e:	4618      	mov	r0, r3
 8004230:	f004 fd8a 	bl	8008d48 <osMutexCreate>
 8004234:	4603      	mov	r3, r0
 8004236:	4a30      	ldr	r2, [pc, #192]	; (80042f8 <MX_FREERTOS_Init+0xd8>)
 8004238:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */



  /*Configure output for timer*/
  PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 800423a:	4b30      	ldr	r3, [pc, #192]	; (80042fc <MX_FREERTOS_Init+0xdc>)
 800423c:	9306      	str	r3, [sp, #24]
 800423e:	2302      	movs	r3, #2
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	2301      	movs	r3, #1
 8004244:	9304      	str	r3, [sp, #16]
 8004246:	2304      	movs	r3, #4
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <MX_FREERTOS_Init+0xe0>)
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <MX_FREERTOS_Init+0xe0>)
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2340      	movs	r3, #64	; 0x40
 8004258:	4a29      	ldr	r2, [pc, #164]	; (8004300 <MX_FREERTOS_Init+0xe0>)
 800425a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800425e:	4829      	ldr	r0, [pc, #164]	; (8004304 <MX_FREERTOS_Init+0xe4>)
 8004260:	f000 ff18 	bl	8005094 <PropulsionAndControl_Init>

  /*Init for IMU sensors*/
  BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 8004264:	4928      	ldr	r1, [pc, #160]	; (8004308 <MX_FREERTOS_Init+0xe8>)
 8004266:	4829      	ldr	r0, [pc, #164]	; (800430c <MX_FREERTOS_Init+0xec>)
 8004268:	f000 f9ec 	bl	8004644 <BNO055_Init>



  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <MX_FREERTOS_Init+0xf0>)
 800426e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004272:	461d      	mov	r5, r3
 8004274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800427c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f004 fd25 	bl	8008cd2 <osThreadCreate>
 8004288:	4603      	mov	r3, r0
 800428a:	4a22      	ldr	r2, [pc, #136]	; (8004314 <MX_FREERTOS_Init+0xf4>)
 800428c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 800428e:	4b22      	ldr	r3, [pc, #136]	; (8004318 <MX_FREERTOS_Init+0xf8>)
 8004290:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004294:	461d      	mov	r5, r3
 8004296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800429a:	682b      	ldr	r3, [r5, #0]
 800429c:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 800429e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f004 fd14 	bl	8008cd2 <osThreadCreate>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <MX_FREERTOS_Init+0xfc>)
 80042ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityIdle, 0, 128);
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <MX_FREERTOS_Init+0x100>)
 80042b2:	f107 0418 	add.w	r4, r7, #24
 80042b6:	461d      	mov	r5, r3
 80042b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80042c0:	f107 0318 	add.w	r3, r7, #24
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f004 fd03 	bl	8008cd2 <osThreadCreate>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4a15      	ldr	r2, [pc, #84]	; (8004324 <MX_FREERTOS_Init+0x104>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityIdle, 0, 128);
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <MX_FREERTOS_Init+0x108>)
 80042d4:	1d3c      	adds	r4, r7, #4
 80042d6:	461d      	mov	r5, r3
 80042d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 80042e0:	1d3b      	adds	r3, r7, #4
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 fcf4 	bl	8008cd2 <osThreadCreate>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a0f      	ldr	r2, [pc, #60]	; (800432c <MX_FREERTOS_Init+0x10c>)
 80042ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80042f0:	bf00      	nop
 80042f2:	3758      	adds	r7, #88	; 0x58
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}
 80042f8:	20000110 	.word	0x20000110
 80042fc:	200002e8 	.word	0x200002e8
 8004300:	48000400 	.word	0x48000400
 8004304:	200001d4 	.word	0x200001d4
 8004308:	20000160 	.word	0x20000160
 800430c:	20000114 	.word	0x20000114
 8004310:	0800af64 	.word	0x0800af64
 8004314:	20000100 	.word	0x20000100
 8004318:	0800af78 	.word	0x0800af78
 800431c:	20000104 	.word	0x20000104
 8004320:	0800af8c 	.word	0x0800af8c
 8004324:	20000108 	.word	0x20000108
 8004328:	0800afa0 	.word	0x0800afa0
 800432c:	2000010c 	.word	0x2000010c

08004330 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800433c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004340:	f001 fc7c 	bl	8005c3c <HAL_GPIO_TogglePin>
    vTaskDelay(1000);
 8004344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004348:	f005 fac8 	bl	80098dc <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800434c:	e7f4      	b.n	8004338 <StartLedTask+0x8>
	...

08004350 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8004358:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80043a0 <StartRoll_PID+0x50>
 800435c:	eddf 0a11 	vldr	s1, [pc, #68]	; 80043a4 <StartRoll_PID+0x54>
 8004360:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80043a8 <StartRoll_PID+0x58>
 8004364:	4811      	ldr	r0, [pc, #68]	; (80043ac <StartRoll_PID+0x5c>)
 8004366:	f000 fc6f 	bl	8004c48 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <StartRoll_PID+0x60>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2119      	movs	r1, #25
 8004370:	4618      	mov	r0, r3
 8004372:	f004 ff71 	bl	8009258 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8004376:	490f      	ldr	r1, [pc, #60]	; (80043b4 <StartRoll_PID+0x64>)
 8004378:	480f      	ldr	r0, [pc, #60]	; (80043b8 <StartRoll_PID+0x68>)
 800437a:	f000 f99f 	bl	80046bc <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <StartRoll_PID+0x60>)
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	2300      	movs	r3, #0
 8004384:	2200      	movs	r2, #0
 8004386:	2100      	movs	r1, #0
 8004388:	f004 fe80 	bl	800908c <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <StartRoll_PID+0x6c>)
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <StartRoll_PID+0x64>)
 8004390:	490b      	ldr	r1, [pc, #44]	; (80043c0 <StartRoll_PID+0x70>)
 8004392:	4806      	ldr	r0, [pc, #24]	; (80043ac <StartRoll_PID+0x5c>)
 8004394:	f000 fcb6 	bl	8004d04 <Pid_CompensateRoll>


		vTaskDelay(150);
 8004398:	2096      	movs	r0, #150	; 0x96
 800439a:	f005 fa9f 	bl	80098dc <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800439e:	e7e4      	b.n	800436a <StartRoll_PID+0x1a>
 80043a0:	bdb15662 	.word	0xbdb15662
 80043a4:	bce59984 	.word	0xbce59984
 80043a8:	be07bf5a 	.word	0xbe07bf5a
 80043ac:	200000dc 	.word	0x200000dc
 80043b0:	20000110 	.word	0x20000110
 80043b4:	20000160 	.word	0x20000160
 80043b8:	20000114 	.word	0x20000114
 80043bc:	200001d4 	.word	0x200001d4
 80043c0:	200001c0 	.word	0x200001c0

080043c4 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 80043cc:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80043d0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8004414 <StartPitch_PID+0x50>
 80043d4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004418 <StartPitch_PID+0x54>
 80043d8:	4810      	ldr	r0, [pc, #64]	; (800441c <StartPitch_PID+0x58>)
 80043da:	f000 fc35 	bl	8004c48 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <StartPitch_PID+0x5c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2119      	movs	r1, #25
 80043e4:	4618      	mov	r0, r3
 80043e6:	f004 ff37 	bl	8009258 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80043ea:	490e      	ldr	r1, [pc, #56]	; (8004424 <StartPitch_PID+0x60>)
 80043ec:	480e      	ldr	r0, [pc, #56]	; (8004428 <StartPitch_PID+0x64>)
 80043ee:	f000 f9b7 	bl	8004760 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <StartPitch_PID+0x5c>)
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	2200      	movs	r2, #0
 80043fa:	2100      	movs	r1, #0
 80043fc:	f004 fe46 	bl	800908c <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <StartPitch_PID+0x68>)
 8004402:	4a08      	ldr	r2, [pc, #32]	; (8004424 <StartPitch_PID+0x60>)
 8004404:	490a      	ldr	r1, [pc, #40]	; (8004430 <StartPitch_PID+0x6c>)
 8004406:	4805      	ldr	r0, [pc, #20]	; (800441c <StartPitch_PID+0x58>)
 8004408:	f000 fd42 	bl	8004e90 <Pid_CompensatePitch>

		vTaskDelay(150);
 800440c:	2096      	movs	r0, #150	; 0x96
 800440e:	f005 fa65 	bl	80098dc <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8004412:	e7e4      	b.n	80043de <StartPitch_PID+0x1a>
 8004414:	3ccccccd 	.word	0x3ccccccd
 8004418:	42c80000 	.word	0x42c80000
 800441c:	20000094 	.word	0x20000094
 8004420:	20000110 	.word	0x20000110
 8004424:	20000160 	.word	0x20000160
 8004428:	20000114 	.word	0x20000114
 800442c:	200001d4 	.word	0x200001d4
 8004430:	200001c0 	.word	0x200001c0

08004434 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800443c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8004440:	eddf 0a10 	vldr	s1, [pc, #64]	; 8004484 <StartYaw_PID+0x50>
 8004444:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004488 <StartYaw_PID+0x54>
 8004448:	4810      	ldr	r0, [pc, #64]	; (800448c <StartYaw_PID+0x58>)
 800444a:	f000 fbfd 	bl	8004c48 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <StartYaw_PID+0x5c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2119      	movs	r1, #25
 8004454:	4618      	mov	r0, r3
 8004456:	f004 feff 	bl	8009258 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800445a:	490e      	ldr	r1, [pc, #56]	; (8004494 <StartYaw_PID+0x60>)
 800445c:	480e      	ldr	r0, [pc, #56]	; (8004498 <StartYaw_PID+0x64>)
 800445e:	f000 f9d1 	bl	8004804 <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <StartYaw_PID+0x5c>)
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	2300      	movs	r3, #0
 8004468:	2200      	movs	r2, #0
 800446a:	2100      	movs	r1, #0
 800446c:	f004 fe0e 	bl	800908c <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <StartYaw_PID+0x68>)
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <StartYaw_PID+0x60>)
 8004474:	490a      	ldr	r1, [pc, #40]	; (80044a0 <StartYaw_PID+0x6c>)
 8004476:	4805      	ldr	r0, [pc, #20]	; (800448c <StartYaw_PID+0x58>)
 8004478:	f000 fc01 	bl	8004c7e <Pid_CompensateYaw>

		vTaskDelay(150);
 800447c:	2096      	movs	r0, #150	; 0x96
 800447e:	f005 fa2d 	bl	80098dc <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8004482:	e7e4      	b.n	800444e <StartYaw_PID+0x1a>
 8004484:	3ccccccd 	.word	0x3ccccccd
 8004488:	42c80000 	.word	0x42c80000
 800448c:	200000b8 	.word	0x200000b8
 8004490:	20000110 	.word	0x20000110
 8004494:	20000160 	.word	0x20000160
 8004498:	20000114 	.word	0x20000114
 800449c:	200001d4 	.word	0x200001d4
 80044a0:	200001c0 	.word	0x200001c0

080044a4 <BNO055_SetPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14


void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 80044b0:	230a      	movs	r3, #10
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	2301      	movs	r3, #1
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	1cfb      	adds	r3, r7, #3
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	2301      	movs	r3, #1
 80044be:	2207      	movs	r2, #7
 80044c0:	2150      	movs	r1, #80	; 0x50
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 fc64 	bl	8005d90 <HAL_I2C_Mem_Write>
}
 80044c8:	bf00      	nop
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <BNO055_SetOperationMode>:

void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af04      	add	r7, sp, #16
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	460b      	mov	r3, r1
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 80044de:	7afa      	ldrb	r2, [r7, #11]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 80044e6:	230a      	movs	r3, #10
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	2301      	movs	r3, #1
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	f107 030b 	add.w	r3, r7, #11
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2301      	movs	r3, #1
 80044f6:	223d      	movs	r2, #61	; 0x3d
 80044f8:	2150      	movs	r1, #80	; 0x50
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f001 fc48 	bl	8005d90 <HAL_I2C_Mem_Write>
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <BNO055_ReadSystemReg>:
  bno055_opmode_t mode;
  HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
  return mode;
}

uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af04      	add	r7, sp, #16
 800450e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8004510:	2364      	movs	r3, #100	; 0x64
 8004512:	9302      	str	r3, [sp, #8]
 8004514:	2301      	movs	r3, #1
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	f107 030f 	add.w	r3, r7, #15
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2301      	movs	r3, #1
 8004520:	223f      	movs	r2, #63	; 0x3f
 8004522:	2150      	movs	r1, #80	; 0x50
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f001 fd47 	bl	8005fb8 <HAL_I2C_Mem_Read>
	return system_reg;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <BNO055_EnableExtClock>:

//Enable or disable the external oscillator --> If the lse is disable then we use lsi
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af04      	add	r7, sp, #16
 800453a:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ffe3 	bl	8004508 <BNO055_ReadSystemReg>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454c:	b2db      	uxtb	r3, r3
 800454e:	3b80      	subs	r3, #128	; 0x80
 8004550:	b2db      	uxtb	r3, r3
 8004552:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8004554:	230a      	movs	r3, #10
 8004556:	9302      	str	r3, [sp, #8]
 8004558:	2301      	movs	r3, #1
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	f107 030e 	add.w	r3, r7, #14
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2301      	movs	r3, #1
 8004564:	223f      	movs	r2, #63	; 0x3f
 8004566:	2150      	movs	r1, #80	; 0x50
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 fc11 	bl	8005d90 <HAL_I2C_Mem_Write>
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <BNO055_TriggerSelfTest>:
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F);
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
}

void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8004576:	b580      	push	{r7, lr}
 8004578:	b088      	sub	sp, #32
 800457a:	af04      	add	r7, sp, #16
 800457c:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ffc2 	bl	8004508 <BNO055_ReadSystemReg>
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	3301      	adds	r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8004596:	230a      	movs	r3, #10
 8004598:	9302      	str	r3, [sp, #8]
 800459a:	2301      	movs	r3, #1
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	f107 030e 	add.w	r3, r7, #14
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2301      	movs	r3, #1
 80045a6:	223f      	movs	r2, #63	; 0x3f
 80045a8:	2150      	movs	r1, #80	; 0x50
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f001 fbf0 	bl	8005d90 <HAL_I2C_Mem_Write>
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <BNO055_CheckSelfTestResult>:

//Check the self test result and check some basic register of IMU --> If an error occure then return 1
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af04      	add	r7, sp, #16
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 80045c6:	230a      	movs	r3, #10
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	2301      	movs	r3, #1
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	f107 030e 	add.w	r3, r7, #14
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2301      	movs	r3, #1
 80045d6:	2236      	movs	r2, #54	; 0x36
 80045d8:	2150      	movs	r1, #80	; 0x50
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f001 fcec 	bl	8005fb8 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	2b0f      	cmp	r3, #15
 80045e8:	d001      	beq.n	80045ee <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ffc1 	bl	8004576 <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 80045f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045f8:	f004 fb92 	bl	8008d20 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 80045fc:	230a      	movs	r3, #10
 80045fe:	9302      	str	r3, [sp, #8]
 8004600:	2301      	movs	r3, #1
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	f107 030e 	add.w	r3, r7, #14
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2301      	movs	r3, #1
 800460c:	223a      	movs	r2, #58	; 0x3a
 800460e:	2150      	movs	r1, #80	; 0x50
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 fcd1 	bl	8005fb8 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8004616:	7bbb      	ldrb	r3, [r7, #14]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8004620:	230a      	movs	r3, #10
 8004622:	9302      	str	r3, [sp, #8]
 8004624:	2301      	movs	r3, #1
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	f107 030e 	add.w	r3, r7, #14
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	2301      	movs	r3, #1
 8004630:	2239      	movs	r2, #57	; 0x39
 8004632:	2150      	movs	r1, #80	; 0x50
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f001 fcbf 	bl	8005fb8 <HAL_I2C_Mem_Read>

	return res;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <BNO055_Init>:

uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af04      	add	r7, sp, #16
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 800465a:	2100      	movs	r1, #0
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff21 	bl	80044a4 <BNO055_SetPage>
	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ff66 	bl	8004534 <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8004668:	20c8      	movs	r0, #200	; 0xc8
 800466a:	f004 fb59 	bl	8008d20 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ffa1 	bl	80045b8 <BNO055_CheckSelfTestResult>
 8004676:	4603      	mov	r3, r0
 8004678:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 800467a:	7bbb      	ldrb	r3, [r7, #14]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <BNO055_Init+0x40>
		res = 1;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	210c      	movs	r1, #12
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff21 	bl	80044d0 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 800468e:	230a      	movs	r3, #10
 8004690:	9302      	str	r3, [sp, #8]
 8004692:	2301      	movs	r3, #1
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	f107 030e 	add.w	r3, r7, #14
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2301      	movs	r3, #1
 800469e:	223d      	movs	r2, #61	; 0x3d
 80046a0:	2150      	movs	r1, #80	; 0x50
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 fc88 	bl	8005fb8 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d001      	beq.n	80046b2 <BNO055_Init+0x6e>
		res = 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af04      	add	r7, sp, #16
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80046c6:	230a      	movs	r3, #10
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	2301      	movs	r3, #1
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	f107 030f 	add.w	r3, r7, #15
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2301      	movs	r3, #1
 80046d6:	221c      	movs	r2, #28
 80046d8:	2150      	movs	r1, #80	; 0x50
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f001 fc6c 	bl	8005fb8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80046e0:	230a      	movs	r3, #10
 80046e2:	9302      	str	r3, [sp, #8]
 80046e4:	2301      	movs	r3, #1
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	f107 030e 	add.w	r3, r7, #14
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2301      	movs	r3, #1
 80046f0:	221d      	movs	r2, #29
 80046f2:	2150      	movs	r1, #80	; 0x50
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 fc5f 	bl	8005fb8 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_roll = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	461a      	mov	r2, r3
 80046fe:	7bbb      	ldrb	r3, [r7, #14]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	4413      	add	r3, r2
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <BNO055_ReadEuler_Roll+0x98>)
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_roll > 2000){
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004728:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004758 <BNO055_ReadEuler_Roll+0x9c>
 800472c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004734:	dc00      	bgt.n	8004738 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
	}
}
 8004736:	e009      	b.n	800474c <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800473e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800475c <BNO055_ReadEuler_Roll+0xa0>
 8004742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000000 	.word	0x20000000
 8004758:	44fa0000 	.word	0x44fa0000
 800475c:	45800000 	.word	0x45800000

08004760 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af04      	add	r7, sp, #16
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 800476a:	230a      	movs	r3, #10
 800476c:	9302      	str	r3, [sp, #8]
 800476e:	2301      	movs	r3, #1
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	f107 030f 	add.w	r3, r7, #15
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2301      	movs	r3, #1
 800477a:	221e      	movs	r2, #30
 800477c:	2150      	movs	r1, #80	; 0x50
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 fc1a 	bl	8005fb8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8004784:	230a      	movs	r3, #10
 8004786:	9302      	str	r3, [sp, #8]
 8004788:	2301      	movs	r3, #1
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	f107 030e 	add.w	r3, r7, #14
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2301      	movs	r3, #1
 8004794:	221f      	movs	r2, #31
 8004796:	2150      	movs	r1, #80	; 0x50
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fc0d 	bl	8005fb8 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_pitch = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	461a      	mov	r2, r3
 80047a2:	7bbb      	ldrb	r3, [r7, #14]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	4413      	add	r3, r2
 80047a8:	ee07 3a90 	vmov	s15, r3
 80047ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <BNO055_ReadEuler_Pitch+0x98>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_pitch > 2000){
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80047cc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80047fc <BNO055_ReadEuler_Pitch+0x9c>
 80047d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d8:	dc00      	bgt.n	80047dc <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
	}
}
 80047da:	e009      	b.n	80047f0 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80047e2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004800 <BNO055_ReadEuler_Pitch+0xa0>
 80047e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000000 	.word	0x20000000
 80047fc:	44fa0000 	.word	0x44fa0000
 8004800:	45800000 	.word	0x45800000

08004804 <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af04      	add	r7, sp, #16
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 800480e:	230a      	movs	r3, #10
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	2301      	movs	r3, #1
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	f107 030f 	add.w	r3, r7, #15
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2301      	movs	r3, #1
 800481e:	221a      	movs	r2, #26
 8004820:	2150      	movs	r1, #80	; 0x50
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f001 fbc8 	bl	8005fb8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8004828:	230a      	movs	r3, #10
 800482a:	9302      	str	r3, [sp, #8]
 800482c:	2301      	movs	r3, #1
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	f107 030e 	add.w	r3, r7, #14
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2301      	movs	r3, #1
 8004838:	221b      	movs	r2, #27
 800483a:	2150      	movs	r1, #80	; 0x50
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f001 fbbb 	bl	8005fb8 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_heading = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	461a      	mov	r2, r3
 8004846:	7bbb      	ldrb	r3, [r7, #14]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	4413      	add	r3, r2
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <BNO055_ReadEuler_Yaw+0x70>)
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000000 	.word	0x20000000

08004878 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487e:	f107 0314 	add.w	r3, r7, #20
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800488e:	4b25      	ldr	r3, [pc, #148]	; (8004924 <MX_GPIO_Init+0xac>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	4a24      	ldr	r2, [pc, #144]	; (8004924 <MX_GPIO_Init+0xac>)
 8004894:	f043 0320 	orr.w	r3, r3, #32
 8004898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800489a:	4b22      	ldr	r3, [pc, #136]	; (8004924 <MX_GPIO_Init+0xac>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048a6:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <MX_GPIO_Init+0xac>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <MX_GPIO_Init+0xac>)
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <MX_GPIO_Init+0xac>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <MX_GPIO_Init+0xac>)
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <MX_GPIO_Init+0xac>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <MX_GPIO_Init+0xac>)
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <MX_GPIO_Init+0xac>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <MX_GPIO_Init+0xac>)
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <MX_GPIO_Init+0xac>)
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80048ee:	2200      	movs	r2, #0
 80048f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048f8:	f001 f988 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80048fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004902:	2301      	movs	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800490a:	2300      	movs	r3, #0
 800490c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	4619      	mov	r1, r3
 8004914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004918:	f000 fff6 	bl	8005908 <HAL_GPIO_Init>

}
 800491c:	bf00      	nop
 800491e:	3728      	adds	r7, #40	; 0x28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000

08004928 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <MX_I2C2_Init+0x74>)
 800492e:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <MX_I2C2_Init+0x78>)
 8004930:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 8004932:	4b1a      	ldr	r3, [pc, #104]	; (800499c <MX_I2C2_Init+0x74>)
 8004934:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <MX_I2C2_Init+0x7c>)
 8004936:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004938:	4b18      	ldr	r3, [pc, #96]	; (800499c <MX_I2C2_Init+0x74>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800493e:	4b17      	ldr	r3, [pc, #92]	; (800499c <MX_I2C2_Init+0x74>)
 8004940:	2201      	movs	r2, #1
 8004942:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004944:	4b15      	ldr	r3, [pc, #84]	; (800499c <MX_I2C2_Init+0x74>)
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <MX_I2C2_Init+0x74>)
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <MX_I2C2_Init+0x74>)
 8004952:	2200      	movs	r2, #0
 8004954:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004956:	4b11      	ldr	r3, [pc, #68]	; (800499c <MX_I2C2_Init+0x74>)
 8004958:	2200      	movs	r2, #0
 800495a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <MX_I2C2_Init+0x74>)
 800495e:	2200      	movs	r2, #0
 8004960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004962:	480e      	ldr	r0, [pc, #56]	; (800499c <MX_I2C2_Init+0x74>)
 8004964:	f001 f984 	bl	8005c70 <HAL_I2C_Init>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800496e:	f000 f91b 	bl	8004ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004972:	2100      	movs	r1, #0
 8004974:	4809      	ldr	r0, [pc, #36]	; (800499c <MX_I2C2_Init+0x74>)
 8004976:	f001 fedf 	bl	8006738 <HAL_I2CEx_ConfigAnalogFilter>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004980:	f000 f912 	bl	8004ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004984:	2100      	movs	r1, #0
 8004986:	4805      	ldr	r0, [pc, #20]	; (800499c <MX_I2C2_Init+0x74>)
 8004988:	f001 ff21 	bl	80067ce <HAL_I2CEx_ConfigDigitalFilter>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004992:	f000 f909 	bl	8004ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000114 	.word	0x20000114
 80049a0:	40005800 	.word	0x40005800
 80049a4:	20c0edff 	.word	0x20c0edff

080049a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b0a0      	sub	sp, #128	; 0x80
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049c0:	f107 0318 	add.w	r3, r7, #24
 80049c4:	2254      	movs	r2, #84	; 0x54
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f006 f9e1 	bl	800ad90 <memset>
  if(i2cHandle->Instance==I2C2)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <HAL_I2C_MspInit+0xdc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d151      	bne.n	8004a7c <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80049dc:	2300      	movs	r3, #0
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049e0:	f107 0318 	add.w	r3, r7, #24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f002 fd33 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80049f0:	f000 f8da 	bl	8004ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	4a23      	ldr	r2, [pc, #140]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 80049fa:	f043 0320 	orr.w	r3, r3, #32
 80049fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 8004a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a0c:	4b1e      	ldr	r3, [pc, #120]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 8004a12:	f043 0304 	orr.w	r3, r3, #4
 8004a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a24:	2301      	movs	r3, #1
 8004a26:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a28:	2312      	movs	r3, #18
 8004a2a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a30:	2300      	movs	r3, #0
 8004a32:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a34:	2304      	movs	r3, #4
 8004a36:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4813      	ldr	r0, [pc, #76]	; (8004a8c <HAL_I2C_MspInit+0xe4>)
 8004a40:	f000 ff62 	bl	8005908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004a44:	2310      	movs	r3, #16
 8004a46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a48:	2312      	movs	r3, #18
 8004a4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a50:	2300      	movs	r3, #0
 8004a52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a54:	2304      	movs	r3, #4
 8004a56:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	480c      	ldr	r0, [pc, #48]	; (8004a90 <HAL_I2C_MspInit+0xe8>)
 8004a60:	f000 ff52 	bl	8005908 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004a64:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 8004a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_I2C_MspInit+0xe0>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3780      	adds	r7, #128	; 0x80
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40005800 	.word	0x40005800
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	48001400 	.word	0x48001400
 8004a90:	48000800 	.word	0x48000800

08004a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004a98:	b662      	cpsie	i
}
 8004a9a:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a9c:	f000 fe1d 	bl	80056da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aa0:	f000 f824 	bl	8004aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aa4:	f7ff fee8 	bl	8004878 <MX_GPIO_Init>
  MX_I2C2_Init();
 8004aa8:	f7ff ff3e 	bl	8004928 <MX_I2C2_Init>
  MX_TIM2_Init();
 8004aac:	f000 fc22 	bl	80052f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004ab0:	f000 fc78 	bl	80053a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004ab4:	f000 fcd0 	bl	8005458 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004ab8:	2100      	movs	r1, #0
 8004aba:	480a      	ldr	r0, [pc, #40]	; (8004ae4 <main+0x50>)
 8004abc:	f003 f848 	bl	8007b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4809      	ldr	r0, [pc, #36]	; (8004ae8 <main+0x54>)
 8004ac4:	f003 f844 	bl	8007b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004ac8:	2104      	movs	r1, #4
 8004aca:	4807      	ldr	r0, [pc, #28]	; (8004ae8 <main+0x54>)
 8004acc:	f003 f840 	bl	8007b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ad0:	210c      	movs	r1, #12
 8004ad2:	4805      	ldr	r0, [pc, #20]	; (8004ae8 <main+0x54>)
 8004ad4:	f003 f83c 	bl	8007b50 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004ad8:	f7ff fba2 	bl	8004220 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004adc:	f004 f8f2 	bl	8008cc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004ae0:	e7fe      	b.n	8004ae0 <main+0x4c>
 8004ae2:	bf00      	nop
 8004ae4:	2000029c 	.word	0x2000029c
 8004ae8:	200002e8 	.word	0x200002e8

08004aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b094      	sub	sp, #80	; 0x50
 8004af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004af2:	f107 0318 	add.w	r3, r7, #24
 8004af6:	2238      	movs	r2, #56	; 0x38
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f006 f948 	bl	800ad90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b12:	f001 fea9 	bl	8006868 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b16:	2302      	movs	r3, #2
 8004b18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b24:	2302      	movs	r3, #2
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8004b30:	234b      	movs	r3, #75	; 0x4b
 8004b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b34:	2302      	movs	r3, #2
 8004b36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b40:	f107 0318 	add.w	r3, r7, #24
 8004b44:	4618      	mov	r0, r3
 8004b46:	f001 ff33 	bl	80069b0 <HAL_RCC_OscConfig>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8004b50:	f000 f82a 	bl	8004ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b54:	230f      	movs	r3, #15
 8004b56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f002 fa37 	bl	8006fe0 <HAL_RCC_ClockConfig>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8004b78:	f000 f816 	bl	8004ba8 <Error_Handler>
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3750      	adds	r7, #80	; 0x50
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004b96:	f000 fdb9 	bl	800570c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40012c00 	.word	0x40012c00

08004ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bac:	b672      	cpsid	i
}
 8004bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bb0:	e7fe      	b.n	8004bb0 <Error_Handler+0x8>

08004bb2 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_pitch)-(command->pitch_angle);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bcc:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	ee07 3a90 	vmov	s15, r3
}
 8004bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_heading)-(command->yaw_angle);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bfe:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	ee07 3a90 	vmov	s15, r3
}
 8004c08:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_roll)-(command->roll_angle);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c30:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	ee07 3a90 	vmov	s15, r3
}
 8004c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c54:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c58:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 8004c6e:	2101      	movs	r1, #1
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f006 f83b 	bl	800acec <arm_pid_init_f32>

}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b08a      	sub	sp, #40	; 0x28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	68b8      	ldr	r0, [r7, #8]
 8004c90:	f7ff ffa8 	bl	8004be4 <Pid_CalculateYawError>
 8004c94:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	ed93 7a00 	vldr	s14, [r3]
 8004ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004caa:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	edd3 6a01 	vldr	s13, [r3, #4]
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8004cf8:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8004cfa:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8004cfc:	bf00      	nop
 8004cfe:	3728      	adds	r7, #40	; 0x28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	68b8      	ldr	r0, [r7, #8]
 8004d16:	f7ff ff7e 	bl	8004c16 <Pid_CalculateRollError>
 8004d1a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	ed93 7a00 	vldr	s14, [r3]
 8004d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d30:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004d44:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d66:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	615a      	str	r2, [r3, #20]
    return (out);
 8004d7e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8004d80:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d96:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004e88 <Pid_CompensateRoll+0x184>
 8004d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	dd04      	ble.n	8004dae <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f640 52ac 	movw	r2, #3500	; 0xdac
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
 8004dac:	e025      	b.n	8004dfa <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dba:	edd7 7a08 	vldr	s15, [r7, #32]
 8004dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004e8c <Pid_CompensateRoll+0x188>
 8004dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d504      	bpl.n	8004dda <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f240 5214 	movw	r2, #1300	; 0x514
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24
 8004dd8:	e00f      	b.n	8004dfa <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004de6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df2:	ee17 2a90 	vmov	r2, s15
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e0e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004e88 <Pid_CompensateRoll+0x184>
 8004e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1a:	dd04      	ble.n	8004e26 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
 8004e24:	e025      	b.n	8004e72 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e32:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e3a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e8c <Pid_CompensateRoll+0x188>
 8004e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e46:	d504      	bpl.n	8004e52 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f240 5214 	movw	r2, #1300	; 0x514
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e50:	e00f      	b.n	8004e72 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6a:	ee17 2a90 	vmov	r2, s15
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8004e72:	6838      	ldr	r0, [r7, #0]
 8004e74:	f000 f8d2 	bl	800501c <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8004e78:	6838      	ldr	r0, [r7, #0]
 8004e7a:	f000 f8ed 	bl	8005058 <PropulsionAndControl_UpdateRightFlaps>

}
 8004e7e:	bf00      	nop
 8004e80:	3728      	adds	r7, #40	; 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	455ac000 	.word	0x455ac000
 8004e8c:	44a28000 	.word	0x44a28000

08004e90 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	68b8      	ldr	r0, [r7, #8]
 8004ea2:	f7ff fe86 	bl	8004bb2 <Pid_CalculatePitchError>
 8004ea6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	ed93 7a00 	vldr	s14, [r3]
 8004eb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	edd3 6a02 	vldr	s13, [r3, #8]
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef2:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	615a      	str	r2, [r3, #20]
    return (out);
 8004f0a:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8004f0c:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f22:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005014 <Pid_CompensatePitch+0x184>
 8004f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	dd04      	ble.n	8004f3a <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f640 52ac 	movw	r2, #3500	; 0xdac
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
 8004f38:	e025      	b.n	8004f86 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f46:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005018 <Pid_CompensatePitch+0x188>
 8004f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	d504      	bpl.n	8004f66 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f240 5214 	movw	r2, #1300	; 0x514
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24
 8004f64:	e00f      	b.n	8004f86 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f72:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7e:	ee17 2a90 	vmov	r2, s15
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f92:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f9a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005014 <Pid_CompensatePitch+0x184>
 8004f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa6:	dd04      	ble.n	8004fb2 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f640 52ac 	movw	r2, #3500	; 0xdac
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb0:	e025      	b.n	8004ffe <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fc6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005018 <Pid_CompensatePitch+0x188>
 8004fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd2:	d504      	bpl.n	8004fde <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f240 5214 	movw	r2, #1300	; 0x514
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
 8004fdc:	e00f      	b.n	8004ffe <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fea:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff6:	ee17 2a90 	vmov	r2, s15
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8004ffe:	6838      	ldr	r0, [r7, #0]
 8005000:	f000 f80c 	bl	800501c <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8005004:	6838      	ldr	r0, [r7, #0]
 8005006:	f000 f827 	bl	8005058 <PropulsionAndControl_UpdateRightFlaps>

}
 800500a:	bf00      	nop
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	455ac000 	.word	0x455ac000
 8005018:	44a28000 	.word	0x44a28000

0800501c <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3334      	adds	r3, #52	; 0x34
 800502c:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7f5b      	ldrb	r3, [r3, #29]
 8005032:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005036:	3b01      	subs	r3, #1
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005042:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3334      	adds	r3, #52	; 0x34
 8005068:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7f9b      	ldrb	r3, [r3, #30]
 800506e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005072:	3b01      	subs	r3, #1
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800507e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a3a      	ldr	r2, [r7, #32]
 80050d4:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	osDelay(20);
 80050e4:	2014      	movs	r0, #20
 80050e6:	f003 fe1b 	bl	8008d20 <osDelay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f240 5214 	movw	r2, #1300	; 0x514
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ff92 	bl	800501c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f640 52ac 	movw	r2, #3500	; 0xdac
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7ff ffa9 	bl	8005058 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	osDelay(1500);
 8005106:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800510a:	f003 fe09 	bl	8008d20 <osDelay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f640 52ac 	movw	r2, #3500	; 0xdac
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff80 	bl	800501c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f240 5214 	movw	r2, #1300	; 0x514
 8005122:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff97 	bl	8005058 <PropulsionAndControl_UpdateRightFlaps>

	osDelay(1500);
 800512a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800512e:	f003 fdf7 	bl	8008d20 <osDelay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ff6e 	bl	800501c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff ff85 	bl	8005058 <PropulsionAndControl_UpdateRightFlaps>
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_MspInit+0x4c>)
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <HAL_MspInit+0x4c>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	6613      	str	r3, [r2, #96]	; 0x60
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <HAL_MspInit+0x4c>)
 800516c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_MspInit+0x4c>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <HAL_MspInit+0x4c>)
 800517c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005180:	6593      	str	r3, [r2, #88]	; 0x58
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_MspInit+0x4c>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800518e:	2200      	movs	r2, #0
 8005190:	210f      	movs	r1, #15
 8005192:	f06f 0001 	mvn.w	r0, #1
 8005196:	f000 fb8f 	bl	80058b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000

080051a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08c      	sub	sp, #48	; 0x30
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80051be:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <HAL_InitTick+0xcc>)
 80051c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c2:	4a2c      	ldr	r2, [pc, #176]	; (8005274 <HAL_InitTick+0xcc>)
 80051c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051c8:	6613      	str	r3, [r2, #96]	; 0x60
 80051ca:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_InitTick+0xcc>)
 80051cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80051d6:	f107 020c 	add.w	r2, r7, #12
 80051da:	f107 0310 	add.w	r3, r7, #16
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f002 f8bd 	bl	8007360 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80051e6:	f002 f8a5 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 80051ea:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	4a22      	ldr	r2, [pc, #136]	; (8005278 <HAL_InitTick+0xd0>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	0c9b      	lsrs	r3, r3, #18
 80051f6:	3b01      	subs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <HAL_InitTick+0xd4>)
 80051fc:	4a20      	ldr	r2, [pc, #128]	; (8005280 <HAL_InitTick+0xd8>)
 80051fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005200:	4b1e      	ldr	r3, [pc, #120]	; (800527c <HAL_InitTick+0xd4>)
 8005202:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005206:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005208:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_InitTick+0xd4>)
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800520e:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_InitTick+0xd4>)
 8005210:	2200      	movs	r2, #0
 8005212:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005214:	4b19      	ldr	r3, [pc, #100]	; (800527c <HAL_InitTick+0xd4>)
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800521a:	4818      	ldr	r0, [pc, #96]	; (800527c <HAL_InitTick+0xd4>)
 800521c:	f002 fb66 	bl	80078ec <HAL_TIM_Base_Init>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800522a:	2b00      	cmp	r3, #0
 800522c:	d11b      	bne.n	8005266 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800522e:	4813      	ldr	r0, [pc, #76]	; (800527c <HAL_InitTick+0xd4>)
 8005230:	f002 fbbe 	bl	80079b0 <HAL_TIM_Base_Start_IT>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800523a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800523e:	2b00      	cmp	r3, #0
 8005240:	d111      	bne.n	8005266 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005242:	2019      	movs	r0, #25
 8005244:	f000 fb52 	bl	80058ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d808      	bhi.n	8005260 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800524e:	2200      	movs	r2, #0
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	2019      	movs	r0, #25
 8005254:	f000 fb30 	bl	80058b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005258:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <HAL_InitTick+0xdc>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e002      	b.n	8005266 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800526a:	4618      	mov	r0, r3
 800526c:	3730      	adds	r7, #48	; 0x30
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40021000 	.word	0x40021000
 8005278:	431bde83 	.word	0x431bde83
 800527c:	20000204 	.word	0x20000204
 8005280:	40012c00 	.word	0x40012c00
 8005284:	20000008 	.word	0x20000008

08005288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800528c:	e7fe      	b.n	800528c <NMI_Handler+0x4>

0800528e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005292:	e7fe      	b.n	8005292 <HardFault_Handler+0x4>

08005294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005298:	e7fe      	b.n	8005298 <MemManage_Handler+0x4>

0800529a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800529a:	b480      	push	{r7}
 800529c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800529e:	e7fe      	b.n	800529e <BusFault_Handler+0x4>

080052a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052a4:	e7fe      	b.n	80052a4 <UsageFault_Handler+0x4>

080052a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80052ba:	f002 fd5b 	bl	8007d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000204 	.word	0x20000204

080052c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <SystemInit+0x24>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	4a06      	ldr	r2, [pc, #24]	; (80052ec <SystemInit+0x24>)
 80052d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <SystemInit+0x24>)
 80052de:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <SystemInit+0x28>)
 80052e0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	e000ed00 	.word	0xe000ed00
 80052f0:	08004000 	.word	0x08004000

080052f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052fa:	f107 031c 	add.w	r3, r7, #28
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005306:	463b      	mov	r3, r7
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	611a      	str	r2, [r3, #16]
 8005314:	615a      	str	r2, [r3, #20]
 8005316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005318:	4b20      	ldr	r3, [pc, #128]	; (800539c <MX_TIM2_Init+0xa8>)
 800531a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800531e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005320:	4b1e      	ldr	r3, [pc, #120]	; (800539c <MX_TIM2_Init+0xa8>)
 8005322:	2200      	movs	r2, #0
 8005324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <MX_TIM2_Init+0xa8>)
 8005328:	2200      	movs	r2, #0
 800532a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <MX_TIM2_Init+0xa8>)
 800532e:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <MX_TIM2_Init+0xac>)
 8005330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <MX_TIM2_Init+0xa8>)
 8005334:	2200      	movs	r2, #0
 8005336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <MX_TIM2_Init+0xa8>)
 800533a:	2200      	movs	r2, #0
 800533c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800533e:	4817      	ldr	r0, [pc, #92]	; (800539c <MX_TIM2_Init+0xa8>)
 8005340:	f002 fbae 	bl	8007aa0 <HAL_TIM_PWM_Init>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800534a:	f7ff fc2d 	bl	8004ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005356:	f107 031c 	add.w	r3, r7, #28
 800535a:	4619      	mov	r1, r3
 800535c:	480f      	ldr	r0, [pc, #60]	; (800539c <MX_TIM2_Init+0xa8>)
 800535e:	f003 fbbd 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005368:	f7ff fc1e 	bl	8004ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800536c:	2360      	movs	r3, #96	; 0x60
 800536e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800537c:	463b      	mov	r3, r7
 800537e:	2208      	movs	r2, #8
 8005380:	4619      	mov	r1, r3
 8005382:	4806      	ldr	r0, [pc, #24]	; (800539c <MX_TIM2_Init+0xa8>)
 8005384:	f002 fe76 	bl	8008074 <HAL_TIM_PWM_ConfigChannel>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800538e:	f7ff fc0b 	bl	8004ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005392:	bf00      	nop
 8005394:	3728      	adds	r7, #40	; 0x28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000250 	.word	0x20000250
 80053a0:	0015f900 	.word	0x0015f900

080053a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053aa:	f107 031c 	add.w	r3, r7, #28
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	605a      	str	r2, [r3, #4]
 80053b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053b6:	463b      	mov	r3, r7
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	611a      	str	r2, [r3, #16]
 80053c4:	615a      	str	r2, [r3, #20]
 80053c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053c8:	4b21      	ldr	r3, [pc, #132]	; (8005450 <MX_TIM3_Init+0xac>)
 80053ca:	4a22      	ldr	r2, [pc, #136]	; (8005454 <MX_TIM3_Init+0xb0>)
 80053cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <MX_TIM3_Init+0xac>)
 80053d0:	2232      	movs	r2, #50	; 0x32
 80053d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053d4:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <MX_TIM3_Init+0xac>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <MX_TIM3_Init+0xac>)
 80053dc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80053e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053e2:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <MX_TIM3_Init+0xac>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e8:	4b19      	ldr	r3, [pc, #100]	; (8005450 <MX_TIM3_Init+0xac>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053ee:	4818      	ldr	r0, [pc, #96]	; (8005450 <MX_TIM3_Init+0xac>)
 80053f0:	f002 fb56 	bl	8007aa0 <HAL_TIM_PWM_Init>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80053fa:	f7ff fbd5 	bl	8004ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005402:	2300      	movs	r3, #0
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005406:	f107 031c 	add.w	r3, r7, #28
 800540a:	4619      	mov	r1, r3
 800540c:	4810      	ldr	r0, [pc, #64]	; (8005450 <MX_TIM3_Init+0xac>)
 800540e:	f003 fb65 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8005418:	f7ff fbc6 	bl	8004ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800541c:	2360      	movs	r3, #96	; 0x60
 800541e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005424:	2300      	movs	r3, #0
 8005426:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800542c:	463b      	mov	r3, r7
 800542e:	2200      	movs	r2, #0
 8005430:	4619      	mov	r1, r3
 8005432:	4807      	ldr	r0, [pc, #28]	; (8005450 <MX_TIM3_Init+0xac>)
 8005434:	f002 fe1e 	bl	8008074 <HAL_TIM_PWM_ConfigChannel>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800543e:	f7ff fbb3 	bl	8004ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005442:	4803      	ldr	r0, [pc, #12]	; (8005450 <MX_TIM3_Init+0xac>)
 8005444:	f000 f8c2 	bl	80055cc <HAL_TIM_MspPostInit>

}
 8005448:	bf00      	nop
 800544a:	3728      	adds	r7, #40	; 0x28
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	2000029c 	.word	0x2000029c
 8005454:	40000400 	.word	0x40000400

08005458 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800545e:	f107 031c 	add.w	r3, r7, #28
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800546a:	463b      	mov	r3, r7
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	609a      	str	r2, [r3, #8]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	611a      	str	r2, [r3, #16]
 8005478:	615a      	str	r2, [r3, #20]
 800547a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800547c:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <MX_TIM4_Init+0xe0>)
 800547e:	4a2f      	ldr	r2, [pc, #188]	; (800553c <MX_TIM4_Init+0xe4>)
 8005480:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8005482:	4b2d      	ldr	r3, [pc, #180]	; (8005538 <MX_TIM4_Init+0xe0>)
 8005484:	2232      	movs	r2, #50	; 0x32
 8005486:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005488:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <MX_TIM4_Init+0xe0>)
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 57600;
 800548e:	4b2a      	ldr	r3, [pc, #168]	; (8005538 <MX_TIM4_Init+0xe0>)
 8005490:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005494:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005496:	4b28      	ldr	r3, [pc, #160]	; (8005538 <MX_TIM4_Init+0xe0>)
 8005498:	2200      	movs	r2, #0
 800549a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800549c:	4b26      	ldr	r3, [pc, #152]	; (8005538 <MX_TIM4_Init+0xe0>)
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80054a2:	4825      	ldr	r0, [pc, #148]	; (8005538 <MX_TIM4_Init+0xe0>)
 80054a4:	f002 fafc 	bl	8007aa0 <HAL_TIM_PWM_Init>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80054ae:	f7ff fb7b 	bl	8004ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054ba:	f107 031c 	add.w	r3, r7, #28
 80054be:	4619      	mov	r1, r3
 80054c0:	481d      	ldr	r0, [pc, #116]	; (8005538 <MX_TIM4_Init+0xe0>)
 80054c2:	f003 fb0b 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80054cc:	f7ff fb6c 	bl	8004ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054d0:	2360      	movs	r3, #96	; 0x60
 80054d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 80054d4:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80054d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054e2:	463b      	mov	r3, r7
 80054e4:	2200      	movs	r2, #0
 80054e6:	4619      	mov	r1, r3
 80054e8:	4813      	ldr	r0, [pc, #76]	; (8005538 <MX_TIM4_Init+0xe0>)
 80054ea:	f002 fdc3 	bl	8008074 <HAL_TIM_PWM_ConfigChannel>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80054f4:	f7ff fb58 	bl	8004ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054f8:	463b      	mov	r3, r7
 80054fa:	2204      	movs	r2, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	480e      	ldr	r0, [pc, #56]	; (8005538 <MX_TIM4_Init+0xe0>)
 8005500:	f002 fdb8 	bl	8008074 <HAL_TIM_PWM_ConfigChannel>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800550a:	f7ff fb4d 	bl	8004ba8 <Error_Handler>
  }
  sConfigOC.Pulse = 5760;
 800550e:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 8005512:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005514:	463b      	mov	r3, r7
 8005516:	220c      	movs	r2, #12
 8005518:	4619      	mov	r1, r3
 800551a:	4807      	ldr	r0, [pc, #28]	; (8005538 <MX_TIM4_Init+0xe0>)
 800551c:	f002 fdaa 	bl	8008074 <HAL_TIM_PWM_ConfigChannel>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8005526:	f7ff fb3f 	bl	8004ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800552a:	4803      	ldr	r0, [pc, #12]	; (8005538 <MX_TIM4_Init+0xe0>)
 800552c:	f000 f84e 	bl	80055cc <HAL_TIM_MspPostInit>

}
 8005530:	bf00      	nop
 8005532:	3728      	adds	r7, #40	; 0x28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	200002e8 	.word	0x200002e8
 800553c:	40000800 	.word	0x40000800

08005540 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d10c      	bne.n	800556c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6593      	str	r3, [r2, #88]	; 0x58
 800555e:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800556a:	e022      	b.n	80055b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <HAL_TIM_PWM_MspInit+0x84>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d10c      	bne.n	8005590 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 8005578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557a:	4a11      	ldr	r2, [pc, #68]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	6593      	str	r3, [r2, #88]	; 0x58
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 8005584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
}
 800558e:	e010      	b.n	80055b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <HAL_TIM_PWM_MspInit+0x88>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10b      	bne.n	80055b2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 80055a0:	f043 0304 	orr.w	r3, r3, #4
 80055a4:	6593      	str	r3, [r2, #88]	; 0x58
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_TIM_PWM_MspInit+0x80>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800

080055cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a22      	ldr	r2, [pc, #136]	; (8005674 <HAL_TIM_MspPostInit+0xa8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d11c      	bne.n	8005628 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ee:	4b22      	ldr	r3, [pc, #136]	; (8005678 <HAL_TIM_MspPostInit+0xac>)
 80055f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f2:	4a21      	ldr	r2, [pc, #132]	; (8005678 <HAL_TIM_MspPostInit+0xac>)
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055fa:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <HAL_TIM_MspPostInit+0xac>)
 80055fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560a:	2302      	movs	r3, #2
 800560c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005612:	2300      	movs	r3, #0
 8005614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005616:	2302      	movs	r3, #2
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800561a:	f107 0314 	add.w	r3, r7, #20
 800561e:	4619      	mov	r1, r3
 8005620:	4816      	ldr	r0, [pc, #88]	; (800567c <HAL_TIM_MspPostInit+0xb0>)
 8005622:	f000 f971 	bl	8005908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005626:	e021      	b.n	800566c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <HAL_TIM_MspPostInit+0xb4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d11c      	bne.n	800566c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005632:	4b11      	ldr	r3, [pc, #68]	; (8005678 <HAL_TIM_MspPostInit+0xac>)
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <HAL_TIM_MspPostInit+0xac>)
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800563e:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <HAL_TIM_MspPostInit+0xac>)
 8005640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800564a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800564e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005650:	2302      	movs	r3, #2
 8005652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005658:	2300      	movs	r3, #0
 800565a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800565c:	2302      	movs	r3, #2
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005660:	f107 0314 	add.w	r3, r7, #20
 8005664:	4619      	mov	r1, r3
 8005666:	4807      	ldr	r0, [pc, #28]	; (8005684 <HAL_TIM_MspPostInit+0xb8>)
 8005668:	f000 f94e 	bl	8005908 <HAL_GPIO_Init>
}
 800566c:	bf00      	nop
 800566e:	3728      	adds	r7, #40	; 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40000400 	.word	0x40000400
 8005678:	40021000 	.word	0x40021000
 800567c:	48000800 	.word	0x48000800
 8005680:	40000800 	.word	0x40000800
 8005684:	48000400 	.word	0x48000400

08005688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005688:	480d      	ldr	r0, [pc, #52]	; (80056c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800568a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800568c:	480d      	ldr	r0, [pc, #52]	; (80056c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800568e:	490e      	ldr	r1, [pc, #56]	; (80056c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005690:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <LoopForever+0xe>)
  movs r3, #0
 8005692:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005694:	e002      	b.n	800569c <LoopCopyDataInit>

08005696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800569a:	3304      	adds	r3, #4

0800569c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800569c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800569e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056a0:	d3f9      	bcc.n	8005696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056a2:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80056a4:	4c0b      	ldr	r4, [pc, #44]	; (80056d4 <LoopForever+0x16>)
  movs r3, #0
 80056a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056a8:	e001      	b.n	80056ae <LoopFillZerobss>

080056aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056ac:	3204      	adds	r2, #4

080056ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056b0:	d3fb      	bcc.n	80056aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80056b2:	f7ff fe09 	bl	80052c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056b6:	f005 fb37 	bl	800ad28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80056ba:	f7ff f9eb 	bl	8004a94 <main>

080056be <LoopForever>:

LoopForever:
    b LoopForever
 80056be:	e7fe      	b.n	80056be <LoopForever>
  ldr   r0, =_estack
 80056c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80056cc:	0800b03c 	.word	0x0800b03c
  ldr r2, =_sbss
 80056d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80056d4:	20001c94 	.word	0x20001c94

080056d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80056d8:	e7fe      	b.n	80056d8 <ADC1_2_IRQHandler>

080056da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056e4:	2003      	movs	r0, #3
 80056e6:	f000 f8dc 	bl	80058a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056ea:	200f      	movs	r0, #15
 80056ec:	f7ff fd5c 	bl	80051a8 <HAL_InitTick>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	71fb      	strb	r3, [r7, #7]
 80056fa:	e001      	b.n	8005700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056fc:	f7ff fd2c 	bl	8005158 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005700:	79fb      	ldrb	r3, [r7, #7]

}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_IncTick+0x1c>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_IncTick+0x20>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4413      	add	r3, r2
 800571a:	4a03      	ldr	r2, [pc, #12]	; (8005728 <HAL_IncTick+0x1c>)
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000334 	.word	0x20000334
 800572c:	2000000c 	.word	0x2000000c

08005730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return uwTick;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_GetTick+0x14>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000334 	.word	0x20000334

08005748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005764:	4013      	ands	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800577a:	4a04      	ldr	r2, [pc, #16]	; (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	60d3      	str	r3, [r2, #12]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005794:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f003 0307 	and.w	r3, r3, #7
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	db0b      	blt.n	80057d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	f003 021f 	and.w	r2, r3, #31
 80057c4:	4907      	ldr	r1, [pc, #28]	; (80057e4 <__NVIC_EnableIRQ+0x38>)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2001      	movs	r0, #1
 80057ce:	fa00 f202 	lsl.w	r2, r0, r2
 80057d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	e000e100 	.word	0xe000e100

080057e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	6039      	str	r1, [r7, #0]
 80057f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	db0a      	blt.n	8005812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	490c      	ldr	r1, [pc, #48]	; (8005834 <__NVIC_SetPriority+0x4c>)
 8005802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005806:	0112      	lsls	r2, r2, #4
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	440b      	add	r3, r1
 800580c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005810:	e00a      	b.n	8005828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4908      	ldr	r1, [pc, #32]	; (8005838 <__NVIC_SetPriority+0x50>)
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	3b04      	subs	r3, #4
 8005820:	0112      	lsls	r2, r2, #4
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	440b      	add	r3, r1
 8005826:	761a      	strb	r2, [r3, #24]
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000e100 	.word	0xe000e100
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800583c:	b480      	push	{r7}
 800583e:	b089      	sub	sp, #36	; 0x24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f1c3 0307 	rsb	r3, r3, #7
 8005856:	2b04      	cmp	r3, #4
 8005858:	bf28      	it	cs
 800585a:	2304      	movcs	r3, #4
 800585c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3304      	adds	r3, #4
 8005862:	2b06      	cmp	r3, #6
 8005864:	d902      	bls.n	800586c <NVIC_EncodePriority+0x30>
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3b03      	subs	r3, #3
 800586a:	e000      	b.n	800586e <NVIC_EncodePriority+0x32>
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	401a      	ands	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005884:	f04f 31ff 	mov.w	r1, #4294967295
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	43d9      	mvns	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005894:	4313      	orrs	r3, r2
         );
}
 8005896:	4618      	mov	r0, r3
 8005898:	3724      	adds	r7, #36	; 0x24
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff ff4c 	bl	8005748 <__NVIC_SetPriorityGrouping>
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058c6:	f7ff ff63 	bl	8005790 <__NVIC_GetPriorityGrouping>
 80058ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f7ff ffb3 	bl	800583c <NVIC_EncodePriority>
 80058d6:	4602      	mov	r2, r0
 80058d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff82 	bl	80057e8 <__NVIC_SetPriority>
}
 80058e4:	bf00      	nop
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff56 	bl	80057ac <__NVIC_EnableIRQ>
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005916:	e15a      	b.n	8005bce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	2101      	movs	r1, #1
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	4013      	ands	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 814c 	beq.w	8005bc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d005      	beq.n	8005948 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005944:	2b02      	cmp	r3, #2
 8005946:	d130      	bne.n	80059aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	2203      	movs	r2, #3
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800597e:	2201      	movs	r2, #1
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4013      	ands	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f003 0201 	and.w	r2, r3, #1
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d017      	beq.n	80059e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	2203      	movs	r2, #3
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d123      	bne.n	8005a3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	08da      	lsrs	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3208      	adds	r2, #8
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	220f      	movs	r2, #15
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4013      	ands	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	08da      	lsrs	r2, r3, #3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3208      	adds	r2, #8
 8005a34:	6939      	ldr	r1, [r7, #16]
 8005a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	2203      	movs	r2, #3
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 0203 	and.w	r2, r3, #3
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80a6 	beq.w	8005bc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a7c:	4b5b      	ldr	r3, [pc, #364]	; (8005bec <HAL_GPIO_Init+0x2e4>)
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a80:	4a5a      	ldr	r2, [pc, #360]	; (8005bec <HAL_GPIO_Init+0x2e4>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	6613      	str	r3, [r2, #96]	; 0x60
 8005a88:	4b58      	ldr	r3, [pc, #352]	; (8005bec <HAL_GPIO_Init+0x2e4>)
 8005a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a94:	4a56      	ldr	r2, [pc, #344]	; (8005bf0 <HAL_GPIO_Init+0x2e8>)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	089b      	lsrs	r3, r3, #2
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	220f      	movs	r2, #15
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005abe:	d01f      	beq.n	8005b00 <HAL_GPIO_Init+0x1f8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a4c      	ldr	r2, [pc, #304]	; (8005bf4 <HAL_GPIO_Init+0x2ec>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d019      	beq.n	8005afc <HAL_GPIO_Init+0x1f4>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a4b      	ldr	r2, [pc, #300]	; (8005bf8 <HAL_GPIO_Init+0x2f0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <HAL_GPIO_Init+0x1f0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a4a      	ldr	r2, [pc, #296]	; (8005bfc <HAL_GPIO_Init+0x2f4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00d      	beq.n	8005af4 <HAL_GPIO_Init+0x1ec>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a49      	ldr	r2, [pc, #292]	; (8005c00 <HAL_GPIO_Init+0x2f8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <HAL_GPIO_Init+0x1e8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a48      	ldr	r2, [pc, #288]	; (8005c04 <HAL_GPIO_Init+0x2fc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d101      	bne.n	8005aec <HAL_GPIO_Init+0x1e4>
 8005ae8:	2305      	movs	r3, #5
 8005aea:	e00a      	b.n	8005b02 <HAL_GPIO_Init+0x1fa>
 8005aec:	2306      	movs	r3, #6
 8005aee:	e008      	b.n	8005b02 <HAL_GPIO_Init+0x1fa>
 8005af0:	2304      	movs	r3, #4
 8005af2:	e006      	b.n	8005b02 <HAL_GPIO_Init+0x1fa>
 8005af4:	2303      	movs	r3, #3
 8005af6:	e004      	b.n	8005b02 <HAL_GPIO_Init+0x1fa>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e002      	b.n	8005b02 <HAL_GPIO_Init+0x1fa>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_GPIO_Init+0x1fa>
 8005b00:	2300      	movs	r3, #0
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	f002 0203 	and.w	r2, r2, #3
 8005b08:	0092      	lsls	r2, r2, #2
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b12:	4937      	ldr	r1, [pc, #220]	; (8005bf0 <HAL_GPIO_Init+0x2e8>)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b20:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b4a:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4013      	ands	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b6e:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b74:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4013      	ands	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bc2:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <HAL_GPIO_Init+0x300>)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f47f ae9d 	bne.w	8005918 <HAL_GPIO_Init+0x10>
  }
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	48000400 	.word	0x48000400
 8005bf8:	48000800 	.word	0x48000800
 8005bfc:	48000c00 	.word	0x48000c00
 8005c00:	48001000 	.word	0x48001000
 8005c04:	48001400 	.word	0x48001400
 8005c08:	40010400 	.word	0x40010400

08005c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c1c:	787b      	ldrb	r3, [r7, #1]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c22:	887a      	ldrh	r2, [r7, #2]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c28:	e002      	b.n	8005c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c2a:	887a      	ldrh	r2, [r7, #2]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c4e:	887a      	ldrh	r2, [r7, #2]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4013      	ands	r3, r2
 8005c54:	041a      	lsls	r2, r3, #16
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	43d9      	mvns	r1, r3
 8005c5a:	887b      	ldrh	r3, [r7, #2]
 8005c5c:	400b      	ands	r3, r1
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	619a      	str	r2, [r3, #24]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e081      	b.n	8005d86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fe fe86 	bl	80049a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2224      	movs	r2, #36	; 0x24
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d107      	bne.n	8005cea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	e006      	b.n	8005cf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d104      	bne.n	8005d0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69d9      	ldr	r1, [r3, #28]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	817b      	strh	r3, [r7, #10]
 8005da2:	460b      	mov	r3, r1
 8005da4:	813b      	strh	r3, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	f040 80f9 	bne.w	8005faa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_I2C_Mem_Write+0x34>
 8005dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0ed      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_I2C_Mem_Write+0x4e>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e0e6      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005de6:	f7ff fca3 	bl	8005730 <HAL_GetTick>
 8005dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2319      	movs	r3, #25
 8005df2:	2201      	movs	r2, #1
 8005df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fac3 	bl	8006384 <I2C_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0d1      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2221      	movs	r2, #33	; 0x21
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2240      	movs	r2, #64	; 0x40
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e30:	88f8      	ldrh	r0, [r7, #6]
 8005e32:	893a      	ldrh	r2, [r7, #8]
 8005e34:	8979      	ldrh	r1, [r7, #10]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	4603      	mov	r3, r0
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f9d3 	bl	80061ec <I2C_RequestMemoryWrite>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0a9      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d90e      	bls.n	8005e80 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	22ff      	movs	r2, #255	; 0xff
 8005e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	8979      	ldrh	r1, [r7, #10]
 8005e70:	2300      	movs	r3, #0
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 fc2b 	bl	80066d4 <I2C_TransferConfig>
 8005e7e:	e00f      	b.n	8005ea0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	8979      	ldrh	r1, [r7, #10]
 8005e92:	2300      	movs	r3, #0
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fc1a 	bl	80066d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 faad 	bl	8006404 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e07b      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d034      	beq.n	8005f58 <HAL_I2C_Mem_Write+0x1c8>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d130      	bne.n	8005f58 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	2200      	movs	r2, #0
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fa3f 	bl	8006384 <I2C_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e04d      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2bff      	cmp	r3, #255	; 0xff
 8005f18:	d90e      	bls.n	8005f38 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	22ff      	movs	r2, #255	; 0xff
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	8979      	ldrh	r1, [r7, #10]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fbcf 	bl	80066d4 <I2C_TransferConfig>
 8005f36:	e00f      	b.n	8005f58 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	8979      	ldrh	r1, [r7, #10]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fbbe 	bl	80066d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d19e      	bne.n	8005ea0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fa8c 	bl	8006484 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e01a      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6859      	ldr	r1, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_I2C_Mem_Write+0x224>)
 8005f8a:	400b      	ands	r3, r1
 8005f8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e000      	b.n	8005fac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005faa:	2302      	movs	r3, #2
  }
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	fe00e800 	.word	0xfe00e800

08005fb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	817b      	strh	r3, [r7, #10]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	813b      	strh	r3, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	f040 80fd 	bne.w	80061da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_I2C_Mem_Read+0x34>
 8005fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d105      	bne.n	8005ff8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0f1      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_I2C_Mem_Read+0x4e>
 8006002:	2302      	movs	r3, #2
 8006004:	e0ea      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800600e:	f7ff fb8f 	bl	8005730 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	2319      	movs	r3, #25
 800601a:	2201      	movs	r2, #1
 800601c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f9af 	bl	8006384 <I2C_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e0d5      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2222      	movs	r2, #34	; 0x22
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2240      	movs	r2, #64	; 0x40
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006058:	88f8      	ldrh	r0, [r7, #6]
 800605a:	893a      	ldrh	r2, [r7, #8]
 800605c:	8979      	ldrh	r1, [r7, #10]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4603      	mov	r3, r0
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f913 	bl	8006294 <I2C_RequestMemoryRead>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0ad      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2bff      	cmp	r3, #255	; 0xff
 8006088:	d90e      	bls.n	80060a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	22ff      	movs	r2, #255	; 0xff
 800608e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006094:	b2da      	uxtb	r2, r3
 8006096:	8979      	ldrh	r1, [r7, #10]
 8006098:	4b52      	ldr	r3, [pc, #328]	; (80061e4 <HAL_I2C_Mem_Read+0x22c>)
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fb17 	bl	80066d4 <I2C_TransferConfig>
 80060a6:	e00f      	b.n	80060c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	8979      	ldrh	r1, [r7, #10]
 80060ba:	4b4a      	ldr	r3, [pc, #296]	; (80061e4 <HAL_I2C_Mem_Read+0x22c>)
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fb06 	bl	80066d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	2200      	movs	r2, #0
 80060d0:	2104      	movs	r1, #4
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f956 	bl	8006384 <I2C_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07c      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d034      	beq.n	8006188 <HAL_I2C_Mem_Read+0x1d0>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	d130      	bne.n	8006188 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	2200      	movs	r2, #0
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f927 	bl	8006384 <I2C_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e04d      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006144:	b29b      	uxth	r3, r3
 8006146:	2bff      	cmp	r3, #255	; 0xff
 8006148:	d90e      	bls.n	8006168 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	22ff      	movs	r2, #255	; 0xff
 800614e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006154:	b2da      	uxtb	r2, r3
 8006156:	8979      	ldrh	r1, [r7, #10]
 8006158:	2300      	movs	r3, #0
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fab7 	bl	80066d4 <I2C_TransferConfig>
 8006166:	e00f      	b.n	8006188 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006176:	b2da      	uxtb	r2, r3
 8006178:	8979      	ldrh	r1, [r7, #10]
 800617a:	2300      	movs	r3, #0
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 faa6 	bl	80066d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d19a      	bne.n	80060c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f974 	bl	8006484 <I2C_WaitOnSTOPFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e01a      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2220      	movs	r2, #32
 80061ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6859      	ldr	r1, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_I2C_Mem_Read+0x230>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	80002400 	.word	0x80002400
 80061e8:	fe00e800 	.word	0xfe00e800

080061ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	461a      	mov	r2, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	817b      	strh	r3, [r7, #10]
 80061fe:	460b      	mov	r3, r1
 8006200:	813b      	strh	r3, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	4b20      	ldr	r3, [pc, #128]	; (8006290 <I2C_RequestMemoryWrite+0xa4>)
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fa5d 	bl	80066d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	69b9      	ldr	r1, [r7, #24]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f8f0 	bl	8006404 <I2C_WaitOnTXISFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e02c      	b.n	8006288 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d105      	bne.n	8006240 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006234:	893b      	ldrh	r3, [r7, #8]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	629a      	str	r2, [r3, #40]	; 0x28
 800623e:	e015      	b.n	800626c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006240:	893b      	ldrh	r3, [r7, #8]
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	b29b      	uxth	r3, r3
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	69b9      	ldr	r1, [r7, #24]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f8d6 	bl	8006404 <I2C_WaitOnTXISFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e012      	b.n	8006288 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006262:	893b      	ldrh	r3, [r7, #8]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2200      	movs	r2, #0
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f884 	bl	8006384 <I2C_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	80002000 	.word	0x80002000

08006294 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	4608      	mov	r0, r1
 800629e:	4611      	mov	r1, r2
 80062a0:	461a      	mov	r2, r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	817b      	strh	r3, [r7, #10]
 80062a6:	460b      	mov	r3, r1
 80062a8:	813b      	strh	r3, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	8979      	ldrh	r1, [r7, #10]
 80062b4:	4b20      	ldr	r3, [pc, #128]	; (8006338 <I2C_RequestMemoryRead+0xa4>)
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fa0a 	bl	80066d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	69b9      	ldr	r1, [r7, #24]
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f89d 	bl	8006404 <I2C_WaitOnTXISFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e02c      	b.n	800632e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d105      	bne.n	80062e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28
 80062e4:	e015      	b.n	8006312 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062e6:	893b      	ldrh	r3, [r7, #8]
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	69b9      	ldr	r1, [r7, #24]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f883 	bl	8006404 <I2C_WaitOnTXISFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e012      	b.n	800632e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006308:	893b      	ldrh	r3, [r7, #8]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2200      	movs	r2, #0
 800631a:	2140      	movs	r1, #64	; 0x40
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f831 	bl	8006384 <I2C_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	80002000 	.word	0x80002000

0800633c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d103      	bne.n	800635a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2200      	movs	r2, #0
 8006358:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b01      	cmp	r3, #1
 8006366:	d007      	beq.n	8006378 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	619a      	str	r2, [r3, #24]
  }
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006394:	e022      	b.n	80063dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d01e      	beq.n	80063dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639e:	f7ff f9c7 	bl	8005730 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d302      	bcc.n	80063b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d113      	bne.n	80063dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e00f      	b.n	80063fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d0cd      	beq.n	8006396 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006410:	e02c      	b.n	800646c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f870 	bl	80064fc <I2C_IsErrorOccurred>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e02a      	b.n	800647c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d01e      	beq.n	800646c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642e:	f7ff f97f 	bl	8005730 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	d302      	bcc.n	8006444 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d113      	bne.n	800646c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	f043 0220 	orr.w	r2, r3, #32
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e007      	b.n	800647c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d1cb      	bne.n	8006412 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006490:	e028      	b.n	80064e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f830 	bl	80064fc <I2C_IsErrorOccurred>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e026      	b.n	80064f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7ff f943 	bl	8005730 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d113      	bne.n	80064e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	f043 0220 	orr.w	r2, r3, #32
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e007      	b.n	80064f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d1cf      	bne.n	8006492 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d075      	beq.n	8006614 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2210      	movs	r2, #16
 800652e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006530:	e056      	b.n	80065e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d052      	beq.n	80065e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7ff f8f9 	bl	8005730 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <I2C_IsErrorOccurred+0x54>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d147      	bne.n	80065e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800655a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006562:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800656e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006572:	d12e      	bne.n	80065d2 <I2C_IsErrorOccurred+0xd6>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800657a:	d02a      	beq.n	80065d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800657c:	7cfb      	ldrb	r3, [r7, #19]
 800657e:	2b20      	cmp	r3, #32
 8006580:	d027      	beq.n	80065d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006590:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006592:	f7ff f8cd 	bl	8005730 <HAL_GetTick>
 8006596:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006598:	e01b      	b.n	80065d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800659a:	f7ff f8c9 	bl	8005730 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b19      	cmp	r3, #25
 80065a6:	d914      	bls.n	80065d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d1dc      	bne.n	800659a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d003      	beq.n	80065f6 <I2C_IsErrorOccurred+0xfa>
 80065ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d09d      	beq.n	8006532 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2220      	movs	r2, #32
 8006604:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f043 0304 	orr.w	r3, r3, #4
 800660c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006636:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	f043 0308 	orr.w	r3, r3, #8
 800664e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006658:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f043 0302 	orr.w	r3, r3, #2
 8006670:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01c      	beq.n	80066c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff fe56 	bl	800633c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6859      	ldr	r1, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <I2C_IsErrorOccurred+0x1d4>)
 800669c:	400b      	ands	r3, r1
 800669e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80066c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3728      	adds	r7, #40	; 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	fe00e800 	.word	0xfe00e800

080066d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	817b      	strh	r3, [r7, #10]
 80066e2:	4613      	mov	r3, r2
 80066e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066e6:	897b      	ldrh	r3, [r7, #10]
 80066e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066ec:	7a7b      	ldrb	r3, [r7, #9]
 80066ee:	041b      	lsls	r3, r3, #16
 80066f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066f4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006702:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	0d5b      	lsrs	r3, r3, #21
 800670e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006712:	4b08      	ldr	r3, [pc, #32]	; (8006734 <I2C_TransferConfig+0x60>)
 8006714:	430b      	orrs	r3, r1
 8006716:	43db      	mvns	r3, r3
 8006718:	ea02 0103 	and.w	r1, r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	03ff63ff 	.word	0x03ff63ff

08006738 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b20      	cmp	r3, #32
 800674c:	d138      	bne.n	80067c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006758:	2302      	movs	r3, #2
 800675a:	e032      	b.n	80067c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2224      	movs	r2, #36	; 0x24
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800678a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6819      	ldr	r1, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d139      	bne.n	8006858 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e033      	b.n	800685a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2224      	movs	r2, #36	; 0x24
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006820:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	e000      	b.n	800685a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006858:	2302      	movs	r3, #2
  }
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d141      	bne.n	80068fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006876:	4b4b      	ldr	r3, [pc, #300]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d131      	bne.n	80068e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006884:	4b47      	ldr	r3, [pc, #284]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800688a:	4a46      	ldr	r2, [pc, #280]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800689c:	4a41      	ldr	r2, [pc, #260]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068a4:	4b40      	ldr	r3, [pc, #256]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2232      	movs	r2, #50	; 0x32
 80068aa:	fb02 f303 	mul.w	r3, r2, r3
 80068ae:	4a3f      	ldr	r2, [pc, #252]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	0c9b      	lsrs	r3, r3, #18
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ba:	e002      	b.n	80068c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3b01      	subs	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068c2:	4b38      	ldr	r3, [pc, #224]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ce:	d102      	bne.n	80068d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f2      	bne.n	80068bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068d6:	4b33      	ldr	r3, [pc, #204]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e2:	d158      	bne.n	8006996 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e057      	b.n	8006998 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068e8:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ee:	4a2d      	ldr	r2, [pc, #180]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068f8:	e04d      	b.n	8006996 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006900:	d141      	bne.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006902:	4b28      	ldr	r3, [pc, #160]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800690a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690e:	d131      	bne.n	8006974 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006910:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006916:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800691c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006920:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006928:	4a1e      	ldr	r2, [pc, #120]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800692a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800692e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006930:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2232      	movs	r2, #50	; 0x32
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	0c9b      	lsrs	r3, r3, #18
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006946:	e002      	b.n	800694e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3b01      	subs	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800694e:	4b15      	ldr	r3, [pc, #84]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695a:	d102      	bne.n	8006962 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f2      	bne.n	8006948 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006962:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696e:	d112      	bne.n	8006996 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e011      	b.n	8006998 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697a:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006980:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006984:	e007      	b.n	8006996 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006986:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800698e:	4a05      	ldr	r2, [pc, #20]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006994:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40007000 	.word	0x40007000
 80069a8:	20000004 	.word	0x20000004
 80069ac:	431bde83 	.word	0x431bde83

080069b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e306      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d075      	beq.n	8006aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ce:	4b97      	ldr	r3, [pc, #604]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
 80069d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069d8:	4b94      	ldr	r3, [pc, #592]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b0c      	cmp	r3, #12
 80069e6:	d102      	bne.n	80069ee <HAL_RCC_OscConfig+0x3e>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d002      	beq.n	80069f4 <HAL_RCC_OscConfig+0x44>
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d10b      	bne.n	8006a0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f4:	4b8d      	ldr	r3, [pc, #564]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d05b      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x108>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d157      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e2e1      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a14:	d106      	bne.n	8006a24 <HAL_RCC_OscConfig+0x74>
 8006a16:	4b85      	ldr	r3, [pc, #532]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a84      	ldr	r2, [pc, #528]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	e01d      	b.n	8006a60 <HAL_RCC_OscConfig+0xb0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCC_OscConfig+0x98>
 8006a2e:	4b7f      	ldr	r3, [pc, #508]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a7e      	ldr	r2, [pc, #504]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	4b7c      	ldr	r3, [pc, #496]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a7b      	ldr	r2, [pc, #492]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e00b      	b.n	8006a60 <HAL_RCC_OscConfig+0xb0>
 8006a48:	4b78      	ldr	r3, [pc, #480]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a77      	ldr	r2, [pc, #476]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	4b75      	ldr	r3, [pc, #468]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a74      	ldr	r2, [pc, #464]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d013      	beq.n	8006a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fe fe62 	bl	8005730 <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a70:	f7fe fe5e 	bl	8005730 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e2a6      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a82:	4b6a      	ldr	r3, [pc, #424]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0xc0>
 8006a8e:	e014      	b.n	8006aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a90:	f7fe fe4e 	bl	8005730 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a98:	f7fe fe4a 	bl	8005730 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	; 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e292      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aaa:	4b60      	ldr	r3, [pc, #384]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0xe8>
 8006ab6:	e000      	b.n	8006aba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d075      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ac6:	4b59      	ldr	r3, [pc, #356]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ad0:	4b56      	ldr	r3, [pc, #344]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	d102      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x136>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d002      	beq.n	8006aec <HAL_RCC_OscConfig+0x13c>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d11f      	bne.n	8006b2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aec:	4b4f      	ldr	r3, [pc, #316]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_OscConfig+0x154>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e265      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b04:	4b49      	ldr	r3, [pc, #292]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	4946      	ldr	r1, [pc, #280]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b18:	4b45      	ldr	r3, [pc, #276]	; (8006c30 <HAL_RCC_OscConfig+0x280>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fb43 	bl	80051a8 <HAL_InitTick>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d043      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e251      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d023      	beq.n	8006b7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b34:	4b3d      	ldr	r3, [pc, #244]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fe fdf6 	bl	8005730 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b48:	f7fe fdf2 	bl	8005730 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e23a      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b5a:	4b34      	ldr	r3, [pc, #208]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f0      	beq.n	8006b48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b66:	4b31      	ldr	r3, [pc, #196]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	061b      	lsls	r3, r3, #24
 8006b74:	492d      	ldr	r1, [pc, #180]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	604b      	str	r3, [r1, #4]
 8006b7a:	e01a      	b.n	8006bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b7c:	4b2b      	ldr	r3, [pc, #172]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b88:	f7fe fdd2 	bl	8005730 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b90:	f7fe fdce 	bl	8005730 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e216      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ba2:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f0      	bne.n	8006b90 <HAL_RCC_OscConfig+0x1e0>
 8006bae:	e000      	b.n	8006bb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d041      	beq.n	8006c42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01c      	beq.n	8006c00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bc6:	4b19      	ldr	r3, [pc, #100]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bcc:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd6:	f7fe fdab 	bl	8005730 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bde:	f7fe fda7 	bl	8005730 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e1ef      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ef      	beq.n	8006bde <HAL_RCC_OscConfig+0x22e>
 8006bfe:	e020      	b.n	8006c42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c00:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c10:	f7fe fd8e 	bl	8005730 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c16:	e00d      	b.n	8006c34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c18:	f7fe fd8a 	bl	8005730 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d906      	bls.n	8006c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e1d2      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
 8006c2a:	bf00      	nop
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c34:	4b8c      	ldr	r3, [pc, #560]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1ea      	bne.n	8006c18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80a6 	beq.w	8006d9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c50:	2300      	movs	r3, #0
 8006c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c54:	4b84      	ldr	r3, [pc, #528]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCC_OscConfig+0x2b4>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_OscConfig+0x2b6>
 8006c64:	2300      	movs	r3, #0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c6a:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6e:	4a7e      	ldr	r2, [pc, #504]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c74:	6593      	str	r3, [r2, #88]	; 0x58
 8006c76:	4b7c      	ldr	r3, [pc, #496]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c82:	2301      	movs	r3, #1
 8006c84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c86:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <HAL_RCC_OscConfig+0x4bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d118      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c92:	4b76      	ldr	r3, [pc, #472]	; (8006e6c <HAL_RCC_OscConfig+0x4bc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a75      	ldr	r2, [pc, #468]	; (8006e6c <HAL_RCC_OscConfig+0x4bc>)
 8006c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c9e:	f7fe fd47 	bl	8005730 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca6:	f7fe fd43 	bl	8005730 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e18b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb8:	4b6c      	ldr	r3, [pc, #432]	; (8006e6c <HAL_RCC_OscConfig+0x4bc>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d108      	bne.n	8006cde <HAL_RCC_OscConfig+0x32e>
 8006ccc:	4b66      	ldr	r3, [pc, #408]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd2:	4a65      	ldr	r2, [pc, #404]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cdc:	e024      	b.n	8006d28 <HAL_RCC_OscConfig+0x378>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b05      	cmp	r3, #5
 8006ce4:	d110      	bne.n	8006d08 <HAL_RCC_OscConfig+0x358>
 8006ce6:	4b60      	ldr	r3, [pc, #384]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cec:	4a5e      	ldr	r2, [pc, #376]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006cee:	f043 0304 	orr.w	r3, r3, #4
 8006cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cf6:	4b5c      	ldr	r3, [pc, #368]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfc:	4a5a      	ldr	r2, [pc, #360]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d06:	e00f      	b.n	8006d28 <HAL_RCC_OscConfig+0x378>
 8006d08:	4b57      	ldr	r3, [pc, #348]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	4a56      	ldr	r2, [pc, #344]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d10:	f023 0301 	bic.w	r3, r3, #1
 8006d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d18:	4b53      	ldr	r3, [pc, #332]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	4a52      	ldr	r2, [pc, #328]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d20:	f023 0304 	bic.w	r3, r3, #4
 8006d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d016      	beq.n	8006d5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fe fcfe 	bl	8005730 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d36:	e00a      	b.n	8006d4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d38:	f7fe fcfa 	bl	8005730 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e140      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d4e:	4b46      	ldr	r3, [pc, #280]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0ed      	beq.n	8006d38 <HAL_RCC_OscConfig+0x388>
 8006d5c:	e015      	b.n	8006d8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5e:	f7fe fce7 	bl	8005730 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d64:	e00a      	b.n	8006d7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d66:	f7fe fce3 	bl	8005730 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e129      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1ed      	bne.n	8006d66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d8a:	7ffb      	ldrb	r3, [r7, #31]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d105      	bne.n	8006d9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d90:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	4a34      	ldr	r2, [pc, #208]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d03c      	beq.n	8006e22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01c      	beq.n	8006dea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006db0:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db6:	4a2c      	ldr	r2, [pc, #176]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc0:	f7fe fcb6 	bl	8005730 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc8:	f7fe fcb2 	bl	8005730 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e0fa      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0ef      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x418>
 8006de8:	e01b      	b.n	8006e22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dea:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006df0:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfa:	f7fe fc99 	bl	8005730 <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e00:	e008      	b.n	8006e14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e02:	f7fe fc95 	bl	8005730 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e0dd      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e14:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1ef      	bne.n	8006e02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80d1 	beq.w	8006fce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 030c 	and.w	r3, r3, #12
 8006e34:	2b0c      	cmp	r3, #12
 8006e36:	f000 808b 	beq.w	8006f50 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d15e      	bne.n	8006f00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <HAL_RCC_OscConfig+0x4b8>)
 8006e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4e:	f7fe fc6f 	bl	8005730 <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e54:	e00c      	b.n	8006e70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e56:	f7fe fc6b 	bl	8005730 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d905      	bls.n	8006e70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e0b3      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e70:	4b59      	ldr	r3, [pc, #356]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ec      	bne.n	8006e56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e7c:	4b56      	ldr	r3, [pc, #344]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	4b56      	ldr	r3, [pc, #344]	; (8006fdc <HAL_RCC_OscConfig+0x62c>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6a11      	ldr	r1, [r2, #32]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e8c:	3a01      	subs	r2, #1
 8006e8e:	0112      	lsls	r2, r2, #4
 8006e90:	4311      	orrs	r1, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006e96:	0212      	lsls	r2, r2, #8
 8006e98:	4311      	orrs	r1, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e9e:	0852      	lsrs	r2, r2, #1
 8006ea0:	3a01      	subs	r2, #1
 8006ea2:	0552      	lsls	r2, r2, #21
 8006ea4:	4311      	orrs	r1, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006eaa:	0852      	lsrs	r2, r2, #1
 8006eac:	3a01      	subs	r2, #1
 8006eae:	0652      	lsls	r2, r2, #25
 8006eb0:	4311      	orrs	r1, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006eb6:	06d2      	lsls	r2, r2, #27
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	4947      	ldr	r1, [pc, #284]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ec0:	4b45      	ldr	r3, [pc, #276]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a44      	ldr	r2, [pc, #272]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ecc:	4b42      	ldr	r3, [pc, #264]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4a41      	ldr	r2, [pc, #260]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ed6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fe fc2a 	bl	8005730 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee0:	f7fe fc26 	bl	8005730 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e06e      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ef2:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x530>
 8006efe:	e066      	b.n	8006fce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f00:	4b35      	ldr	r3, [pc, #212]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a34      	ldr	r2, [pc, #208]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f0c:	4b32      	ldr	r3, [pc, #200]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	4a31      	ldr	r2, [pc, #196]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f18:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4a2e      	ldr	r2, [pc, #184]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f28:	f7fe fc02 	bl	8005730 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fe fbfe 	bl	8005730 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e046      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f42:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f0      	bne.n	8006f30 <HAL_RCC_OscConfig+0x580>
 8006f4e:	e03e      	b.n	8006fce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e039      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_RCC_OscConfig+0x628>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 0203 	and.w	r2, r3, #3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d12c      	bne.n	8006fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d123      	bne.n	8006fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d11b      	bne.n	8006fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d113      	bne.n	8006fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d109      	bne.n	8006fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d001      	beq.n	8006fce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	019f800c 	.word	0x019f800c

08006fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e11e      	b.n	8007236 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff8:	4b91      	ldr	r3, [pc, #580]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d910      	bls.n	8007028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007006:	4b8e      	ldr	r3, [pc, #568]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f023 020f 	bic.w	r2, r3, #15
 800700e:	498c      	ldr	r1, [pc, #560]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	4313      	orrs	r3, r2
 8007014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007016:	4b8a      	ldr	r3, [pc, #552]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d001      	beq.n	8007028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e106      	b.n	8007236 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d073      	beq.n	800711c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b03      	cmp	r3, #3
 800703a:	d129      	bne.n	8007090 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800703c:	4b81      	ldr	r3, [pc, #516]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e0f4      	b.n	8007236 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800704c:	f000 f9ba 	bl	80073c4 <RCC_GetSysClockFreqFromPLLSource>
 8007050:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4a7c      	ldr	r2, [pc, #496]	; (8007248 <HAL_RCC_ClockConfig+0x268>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d93f      	bls.n	80070da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800705a:	4b7a      	ldr	r3, [pc, #488]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800706e:	2b00      	cmp	r3, #0
 8007070:	d033      	beq.n	80070da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007076:	2b00      	cmp	r3, #0
 8007078:	d12f      	bne.n	80070da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800707a:	4b72      	ldr	r3, [pc, #456]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007082:	4a70      	ldr	r2, [pc, #448]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 8007084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007088:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	e024      	b.n	80070da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d107      	bne.n	80070a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007098:	4b6a      	ldr	r3, [pc, #424]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0c6      	b.n	8007236 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070a8:	4b66      	ldr	r3, [pc, #408]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e0be      	b.n	8007236 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070b8:	f000 f8ce 	bl	8007258 <HAL_RCC_GetSysClockFreq>
 80070bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	4a61      	ldr	r2, [pc, #388]	; (8007248 <HAL_RCC_ClockConfig+0x268>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d909      	bls.n	80070da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070c6:	4b5f      	ldr	r3, [pc, #380]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ce:	4a5d      	ldr	r2, [pc, #372]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80070d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070da:	4b5a      	ldr	r3, [pc, #360]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f023 0203 	bic.w	r2, r3, #3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4957      	ldr	r1, [pc, #348]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ec:	f7fe fb20 	bl	8005730 <HAL_GetTick>
 80070f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070f2:	e00a      	b.n	800710a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f4:	f7fe fb1c 	bl	8005730 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e095      	b.n	8007236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	4b4e      	ldr	r3, [pc, #312]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 020c 	and.w	r2, r3, #12
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	429a      	cmp	r2, r3
 800711a:	d1eb      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d023      	beq.n	8007170 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007134:	4b43      	ldr	r3, [pc, #268]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	4a42      	ldr	r2, [pc, #264]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800713a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800713e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800714c:	4b3d      	ldr	r3, [pc, #244]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007154:	4a3b      	ldr	r2, [pc, #236]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 8007156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800715a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800715c:	4b39      	ldr	r3, [pc, #228]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	4936      	ldr	r1, [pc, #216]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800716a:	4313      	orrs	r3, r2
 800716c:	608b      	str	r3, [r1, #8]
 800716e:	e008      	b.n	8007182 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b80      	cmp	r3, #128	; 0x80
 8007174:	d105      	bne.n	8007182 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007176:	4b33      	ldr	r3, [pc, #204]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	4a32      	ldr	r2, [pc, #200]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 800717c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007180:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007182:	4b2f      	ldr	r3, [pc, #188]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d21d      	bcs.n	80071cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007190:	4b2b      	ldr	r3, [pc, #172]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f023 020f 	bic.w	r2, r3, #15
 8007198:	4929      	ldr	r1, [pc, #164]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	4313      	orrs	r3, r2
 800719e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071a0:	f7fe fac6 	bl	8005730 <HAL_GetTick>
 80071a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a6:	e00a      	b.n	80071be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a8:	f7fe fac2 	bl	8005730 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e03b      	b.n	8007236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071be:	4b20      	ldr	r3, [pc, #128]	; (8007240 <HAL_RCC_ClockConfig+0x260>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d1ed      	bne.n	80071a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4917      	ldr	r1, [pc, #92]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	490f      	ldr	r1, [pc, #60]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 8007206:	4313      	orrs	r3, r2
 8007208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800720a:	f000 f825 	bl	8007258 <HAL_RCC_GetSysClockFreq>
 800720e:	4602      	mov	r2, r0
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <HAL_RCC_ClockConfig+0x264>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	091b      	lsrs	r3, r3, #4
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	490c      	ldr	r1, [pc, #48]	; (800724c <HAL_RCC_ClockConfig+0x26c>)
 800721c:	5ccb      	ldrb	r3, [r1, r3]
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	fa22 f303 	lsr.w	r3, r2, r3
 8007226:	4a0a      	ldr	r2, [pc, #40]	; (8007250 <HAL_RCC_ClockConfig+0x270>)
 8007228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800722a:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <HAL_RCC_ClockConfig+0x274>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd ffba 	bl	80051a8 <HAL_InitTick>
 8007234:	4603      	mov	r3, r0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40022000 	.word	0x40022000
 8007244:	40021000 	.word	0x40021000
 8007248:	04c4b400 	.word	0x04c4b400
 800724c:	0800afbc 	.word	0x0800afbc
 8007250:	20000004 	.word	0x20000004
 8007254:	20000008 	.word	0x20000008

08007258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800725e:	4b2c      	ldr	r3, [pc, #176]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 030c 	and.w	r3, r3, #12
 8007266:	2b04      	cmp	r3, #4
 8007268:	d102      	bne.n	8007270 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800726a:	4b2a      	ldr	r3, [pc, #168]	; (8007314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	e047      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007270:	4b27      	ldr	r3, [pc, #156]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 030c 	and.w	r3, r3, #12
 8007278:	2b08      	cmp	r3, #8
 800727a:	d102      	bne.n	8007282 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800727c:	4b26      	ldr	r3, [pc, #152]	; (8007318 <HAL_RCC_GetSysClockFreq+0xc0>)
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	e03e      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007282:	4b23      	ldr	r3, [pc, #140]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b0c      	cmp	r3, #12
 800728c:	d136      	bne.n	80072fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800728e:	4b20      	ldr	r3, [pc, #128]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007298:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	3301      	adds	r3, #1
 80072a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d10c      	bne.n	80072c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072ac:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b4:	4a16      	ldr	r2, [pc, #88]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b6:	68d2      	ldr	r2, [r2, #12]
 80072b8:	0a12      	lsrs	r2, r2, #8
 80072ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072be:	fb02 f303 	mul.w	r3, r2, r3
 80072c2:	617b      	str	r3, [r7, #20]
      break;
 80072c4:	e00c      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c6:	4a13      	ldr	r2, [pc, #76]	; (8007314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ce:	4a10      	ldr	r2, [pc, #64]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072d0:	68d2      	ldr	r2, [r2, #12]
 80072d2:	0a12      	lsrs	r2, r2, #8
 80072d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]
      break;
 80072de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	0e5b      	lsrs	r3, r3, #25
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	3301      	adds	r3, #1
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	e001      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007300:	693b      	ldr	r3, [r7, #16]
}
 8007302:	4618      	mov	r0, r3
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40021000 	.word	0x40021000
 8007314:	00f42400 	.word	0x00f42400
 8007318:	007a1200 	.word	0x007a1200

0800731c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007320:	4b03      	ldr	r3, [pc, #12]	; (8007330 <HAL_RCC_GetHCLKFreq+0x14>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000004 	.word	0x20000004

08007334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007338:	f7ff fff0 	bl	800731c <HAL_RCC_GetHCLKFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b06      	ldr	r3, [pc, #24]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0adb      	lsrs	r3, r3, #11
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4904      	ldr	r1, [pc, #16]	; (800735c <HAL_RCC_GetPCLK2Freq+0x28>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40021000 	.word	0x40021000
 800735c:	0800afcc 	.word	0x0800afcc

08007360 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	220f      	movs	r2, #15
 800736e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007370:	4b12      	ldr	r3, [pc, #72]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f003 0203 	and.w	r2, r3, #3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_RCC_GetClockConfig+0x60>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	601a      	str	r2, [r3, #0]
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40021000 	.word	0x40021000
 80073c0:	40022000 	.word	0x40022000

080073c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073ca:	4b1e      	ldr	r3, [pc, #120]	; (8007444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	091b      	lsrs	r3, r3, #4
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d10c      	bne.n	8007402 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073e8:	4a17      	ldr	r2, [pc, #92]	; (8007448 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	4a14      	ldr	r2, [pc, #80]	; (8007444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073f2:	68d2      	ldr	r2, [r2, #12]
 80073f4:	0a12      	lsrs	r2, r2, #8
 80073f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073fa:	fb02 f303 	mul.w	r3, r2, r3
 80073fe:	617b      	str	r3, [r7, #20]
    break;
 8007400:	e00c      	b.n	800741c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007402:	4a12      	ldr	r2, [pc, #72]	; (800744c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	fbb2 f3f3 	udiv	r3, r2, r3
 800740a:	4a0e      	ldr	r2, [pc, #56]	; (8007444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800740c:	68d2      	ldr	r2, [r2, #12]
 800740e:	0a12      	lsrs	r2, r2, #8
 8007410:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
    break;
 800741a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	0e5b      	lsrs	r3, r3, #25
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	3301      	adds	r3, #1
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	fbb2 f3f3 	udiv	r3, r2, r3
 8007434:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007436:	687b      	ldr	r3, [r7, #4]
}
 8007438:	4618      	mov	r0, r3
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	40021000 	.word	0x40021000
 8007448:	007a1200 	.word	0x007a1200
 800744c:	00f42400 	.word	0x00f42400

08007450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007458:	2300      	movs	r3, #0
 800745a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800745c:	2300      	movs	r3, #0
 800745e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8098 	beq.w	800759e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800746e:	2300      	movs	r3, #0
 8007470:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007472:	4b43      	ldr	r3, [pc, #268]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10d      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800747e:	4b40      	ldr	r3, [pc, #256]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	4a3f      	ldr	r2, [pc, #252]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007488:	6593      	str	r3, [r2, #88]	; 0x58
 800748a:	4b3d      	ldr	r3, [pc, #244]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007492:	60bb      	str	r3, [r7, #8]
 8007494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007496:	2301      	movs	r3, #1
 8007498:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800749a:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a39      	ldr	r2, [pc, #228]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074a6:	f7fe f943 	bl	8005730 <HAL_GetTick>
 80074aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ac:	e009      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ae:	f7fe f93f 	bl	8005730 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d902      	bls.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	74fb      	strb	r3, [r7, #19]
        break;
 80074c0:	e005      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c2:	4b30      	ldr	r3, [pc, #192]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0ef      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d159      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074d4:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01e      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d019      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074f0:	4b23      	ldr	r3, [pc, #140]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074fc:	4b20      	ldr	r3, [pc, #128]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	4a1f      	ldr	r2, [pc, #124]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800750c:	4b1c      	ldr	r3, [pc, #112]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800750e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007512:	4a1b      	ldr	r2, [pc, #108]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800751c:	4a18      	ldr	r2, [pc, #96]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752e:	f7fe f8ff 	bl	8005730 <HAL_GetTick>
 8007532:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007534:	e00b      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007536:	f7fe f8fb 	bl	8005730 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f241 3288 	movw	r2, #5000	; 0x1388
 8007544:	4293      	cmp	r3, r2
 8007546:	d902      	bls.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	74fb      	strb	r3, [r7, #19]
            break;
 800754c:	e006      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0ec      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800755c:	7cfb      	ldrb	r3, [r7, #19]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	4903      	ldr	r1, [pc, #12]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007578:	e008      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800757a:	7cfb      	ldrb	r3, [r7, #19]
 800757c:	74bb      	strb	r3, [r7, #18]
 800757e:	e005      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007580:	40021000 	.word	0x40021000
 8007584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	7cfb      	ldrb	r3, [r7, #19]
 800758a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800758c:	7c7b      	ldrb	r3, [r7, #17]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d105      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007592:	4ba7      	ldr	r3, [pc, #668]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007596:	4aa6      	ldr	r2, [pc, #664]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800759c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075aa:	4ba1      	ldr	r3, [pc, #644]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b0:	f023 0203 	bic.w	r2, r3, #3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	499d      	ldr	r1, [pc, #628]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075cc:	4b98      	ldr	r3, [pc, #608]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d2:	f023 020c 	bic.w	r2, r3, #12
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	4995      	ldr	r1, [pc, #596]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075ee:	4b90      	ldr	r3, [pc, #576]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	498c      	ldr	r1, [pc, #560]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007610:	4b87      	ldr	r3, [pc, #540]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	4984      	ldr	r1, [pc, #528]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007632:	4b7f      	ldr	r3, [pc, #508]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	497b      	ldr	r1, [pc, #492]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007654:	4b76      	ldr	r3, [pc, #472]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	4973      	ldr	r1, [pc, #460]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007676:	4b6e      	ldr	r3, [pc, #440]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	496a      	ldr	r1, [pc, #424]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007686:	4313      	orrs	r3, r2
 8007688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007698:	4b65      	ldr	r3, [pc, #404]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	4962      	ldr	r1, [pc, #392]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076ba:	4b5d      	ldr	r3, [pc, #372]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	4959      	ldr	r1, [pc, #356]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076dc:	4b54      	ldr	r3, [pc, #336]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076e2:	f023 0203 	bic.w	r2, r3, #3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	4951      	ldr	r1, [pc, #324]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076fe:	4b4c      	ldr	r3, [pc, #304]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007704:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	4948      	ldr	r1, [pc, #288]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771c:	2b00      	cmp	r3, #0
 800771e:	d015      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007720:	4b43      	ldr	r3, [pc, #268]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	4940      	ldr	r1, [pc, #256]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800773e:	d105      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007740:	4b3b      	ldr	r3, [pc, #236]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	4a3a      	ldr	r2, [pc, #232]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800774a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007754:	2b00      	cmp	r3, #0
 8007756:	d015      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007758:	4b35      	ldr	r3, [pc, #212]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	4932      	ldr	r1, [pc, #200]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007776:	d105      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007778:	4b2d      	ldr	r3, [pc, #180]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4a2c      	ldr	r2, [pc, #176]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007782:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007790:	4b27      	ldr	r3, [pc, #156]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007796:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	4924      	ldr	r1, [pc, #144]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ae:	d105      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b0:	4b1f      	ldr	r3, [pc, #124]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4a1e      	ldr	r2, [pc, #120]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d015      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077c8:	4b19      	ldr	r3, [pc, #100]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d6:	4916      	ldr	r1, [pc, #88]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e6:	d105      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077e8:	4b11      	ldr	r3, [pc, #68]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	4a10      	ldr	r2, [pc, #64]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d019      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007800:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	4908      	ldr	r1, [pc, #32]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781e:	d109      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007820:	4b03      	ldr	r3, [pc, #12]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a02      	ldr	r2, [pc, #8]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800782a:	60d3      	str	r3, [r2, #12]
 800782c:	e002      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800782e:	bf00      	nop
 8007830:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d015      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007840:	4b29      	ldr	r3, [pc, #164]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007846:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	4926      	ldr	r1, [pc, #152]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007850:	4313      	orrs	r3, r2
 8007852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800785e:	d105      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007860:	4b21      	ldr	r3, [pc, #132]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d015      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007878:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007886:	4918      	ldr	r1, [pc, #96]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007888:	4313      	orrs	r3, r2
 800788a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007896:	d105      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007898:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800789e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d015      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078b0:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	490a      	ldr	r1, [pc, #40]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ce:	d105      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4a04      	ldr	r2, [pc, #16]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80078dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40021000 	.word	0x40021000

080078ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e049      	b.n	8007992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f841 	bl	800799a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f000 fcde 	bl	80082ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d001      	beq.n	80079c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e054      	b.n	8007a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0201 	orr.w	r2, r2, #1
 80079de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a26      	ldr	r2, [pc, #152]	; (8007a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d022      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x80>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f2:	d01d      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x80>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a22      	ldr	r2, [pc, #136]	; (8007a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d018      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x80>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a21      	ldr	r2, [pc, #132]	; (8007a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d013      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x80>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x80>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d009      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x80>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1b      	ldr	r2, [pc, #108]	; (8007a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d115      	bne.n	8007a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <HAL_TIM_Base_Start_IT+0xec>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b06      	cmp	r3, #6
 8007a40:	d015      	beq.n	8007a6e <HAL_TIM_Base_Start_IT+0xbe>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a48:	d011      	beq.n	8007a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0201 	orr.w	r2, r2, #1
 8007a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5a:	e008      	b.n	8007a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0201 	orr.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	e000      	b.n	8007a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40012c00 	.word	0x40012c00
 8007a84:	40000400 	.word	0x40000400
 8007a88:	40000800 	.word	0x40000800
 8007a8c:	40000c00 	.word	0x40000c00
 8007a90:	40013400 	.word	0x40013400
 8007a94:	40014000 	.word	0x40014000
 8007a98:	40015000 	.word	0x40015000
 8007a9c:	00010007 	.word	0x00010007

08007aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e049      	b.n	8007b46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fd fd3a 	bl	8005540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f000 fc04 	bl	80082ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d109      	bne.n	8007b74 <HAL_TIM_PWM_Start+0x24>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	bf14      	ite	ne
 8007b6c:	2301      	movne	r3, #1
 8007b6e:	2300      	moveq	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e03c      	b.n	8007bee <HAL_TIM_PWM_Start+0x9e>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d109      	bne.n	8007b8e <HAL_TIM_PWM_Start+0x3e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	bf14      	ite	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	2300      	moveq	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	e02f      	b.n	8007bee <HAL_TIM_PWM_Start+0x9e>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d109      	bne.n	8007ba8 <HAL_TIM_PWM_Start+0x58>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	bf14      	ite	ne
 8007ba0:	2301      	movne	r3, #1
 8007ba2:	2300      	moveq	r3, #0
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	e022      	b.n	8007bee <HAL_TIM_PWM_Start+0x9e>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b0c      	cmp	r3, #12
 8007bac:	d109      	bne.n	8007bc2 <HAL_TIM_PWM_Start+0x72>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	bf14      	ite	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	2300      	moveq	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	e015      	b.n	8007bee <HAL_TIM_PWM_Start+0x9e>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d109      	bne.n	8007bdc <HAL_TIM_PWM_Start+0x8c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	bf14      	ite	ne
 8007bd4:	2301      	movne	r3, #1
 8007bd6:	2300      	moveq	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	e008      	b.n	8007bee <HAL_TIM_PWM_Start+0x9e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	bf14      	ite	ne
 8007be8:	2301      	movne	r3, #1
 8007bea:	2300      	moveq	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e0a6      	b.n	8007d44 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d104      	bne.n	8007c06 <HAL_TIM_PWM_Start+0xb6>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c04:	e023      	b.n	8007c4e <HAL_TIM_PWM_Start+0xfe>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d104      	bne.n	8007c16 <HAL_TIM_PWM_Start+0xc6>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c14:	e01b      	b.n	8007c4e <HAL_TIM_PWM_Start+0xfe>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	d104      	bne.n	8007c26 <HAL_TIM_PWM_Start+0xd6>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c24:	e013      	b.n	8007c4e <HAL_TIM_PWM_Start+0xfe>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b0c      	cmp	r3, #12
 8007c2a:	d104      	bne.n	8007c36 <HAL_TIM_PWM_Start+0xe6>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c34:	e00b      	b.n	8007c4e <HAL_TIM_PWM_Start+0xfe>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b10      	cmp	r3, #16
 8007c3a:	d104      	bne.n	8007c46 <HAL_TIM_PWM_Start+0xf6>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c44:	e003      	b.n	8007c4e <HAL_TIM_PWM_Start+0xfe>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2201      	movs	r2, #1
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 ff1a 	bl	8008a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a3a      	ldr	r2, [pc, #232]	; (8007d4c <HAL_TIM_PWM_Start+0x1fc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d018      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x148>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a39      	ldr	r2, [pc, #228]	; (8007d50 <HAL_TIM_PWM_Start+0x200>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d013      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x148>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a37      	ldr	r2, [pc, #220]	; (8007d54 <HAL_TIM_PWM_Start+0x204>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x148>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a36      	ldr	r2, [pc, #216]	; (8007d58 <HAL_TIM_PWM_Start+0x208>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x148>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a34      	ldr	r2, [pc, #208]	; (8007d5c <HAL_TIM_PWM_Start+0x20c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x148>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a33      	ldr	r2, [pc, #204]	; (8007d60 <HAL_TIM_PWM_Start+0x210>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d101      	bne.n	8007c9c <HAL_TIM_PWM_Start+0x14c>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <HAL_TIM_PWM_Start+0x14e>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <HAL_TIM_PWM_Start+0x1fc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d022      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x1b2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d01d      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x1b2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a26      	ldr	r2, [pc, #152]	; (8007d64 <HAL_TIM_PWM_Start+0x214>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d018      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x1b2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <HAL_TIM_PWM_Start+0x218>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x1b2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a23      	ldr	r2, [pc, #140]	; (8007d6c <HAL_TIM_PWM_Start+0x21c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x1b2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <HAL_TIM_PWM_Start+0x200>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x1b2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <HAL_TIM_PWM_Start+0x204>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIM_PWM_Start+0x1b2>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <HAL_TIM_PWM_Start+0x210>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d115      	bne.n	8007d2e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <HAL_TIM_PWM_Start+0x220>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b06      	cmp	r3, #6
 8007d12:	d015      	beq.n	8007d40 <HAL_TIM_PWM_Start+0x1f0>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d1a:	d011      	beq.n	8007d40 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2c:	e008      	b.n	8007d40 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0201 	orr.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	e000      	b.n	8007d42 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	40013400 	.word	0x40013400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800
 8007d60:	40015000 	.word	0x40015000
 8007d64:	40000400 	.word	0x40000400
 8007d68:	40000800 	.word	0x40000800
 8007d6c:	40000c00 	.word	0x40000c00
 8007d70:	00010007 	.word	0x00010007

08007d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d122      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d11b      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0202 	mvn.w	r2, #2
 8007da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa7a 	bl	80082b0 <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa6c 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa7d 	bl	80082c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d122      	bne.n	8007e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d11b      	bne.n	8007e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0204 	mvn.w	r2, #4
 8007df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa50 	bl	80082b0 <HAL_TIM_IC_CaptureCallback>
 8007e10:	e005      	b.n	8007e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa42 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fa53 	bl	80082c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d122      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d11b      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0208 	mvn.w	r2, #8
 8007e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa26 	bl	80082b0 <HAL_TIM_IC_CaptureCallback>
 8007e64:	e005      	b.n	8007e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa18 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa29 	bl	80082c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0310 	and.w	r3, r3, #16
 8007e82:	2b10      	cmp	r3, #16
 8007e84:	d122      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b10      	cmp	r3, #16
 8007e92:	d11b      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f06f 0210 	mvn.w	r2, #16
 8007e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f9fc 	bl	80082b0 <HAL_TIM_IC_CaptureCallback>
 8007eb8:	e005      	b.n	8007ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9ee 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f9ff 	bl	80082c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d107      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0201 	mvn.w	r2, #1
 8007ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fc fe46 	bl	8004b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d10e      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f10:	2b80      	cmp	r3, #128	; 0x80
 8007f12:	d107      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fe7c 	bl	8008c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f32:	d10e      	bne.n	8007f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3e:	2b80      	cmp	r3, #128	; 0x80
 8007f40:	d107      	bne.n	8007f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fe6f 	bl	8008c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d10e      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	d107      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f9ad 	bl	80082d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d10e      	bne.n	8007faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d107      	bne.n	8007faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f06f 0220 	mvn.w	r2, #32
 8007fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fe2f 	bl	8008c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb8:	d10f      	bne.n	8007fda <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fc8:	d107      	bne.n	8007fda <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fe35 	bl	8008c44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fe8:	d10f      	bne.n	800800a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ff8:	d107      	bne.n	800800a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fe27 	bl	8008c58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008018:	d10f      	bne.n	800803a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008028:	d107      	bne.n	800803a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fe19 	bl	8008c6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008048:	d10f      	bne.n	800806a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008058:	d107      	bne.n	800806a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fe0b 	bl	8008c80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800808e:	2302      	movs	r3, #2
 8008090:	e0ff      	b.n	8008292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b14      	cmp	r3, #20
 800809e:	f200 80f0 	bhi.w	8008282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080fd 	.word	0x080080fd
 80080ac:	08008283 	.word	0x08008283
 80080b0:	08008283 	.word	0x08008283
 80080b4:	08008283 	.word	0x08008283
 80080b8:	0800813d 	.word	0x0800813d
 80080bc:	08008283 	.word	0x08008283
 80080c0:	08008283 	.word	0x08008283
 80080c4:	08008283 	.word	0x08008283
 80080c8:	0800817f 	.word	0x0800817f
 80080cc:	08008283 	.word	0x08008283
 80080d0:	08008283 	.word	0x08008283
 80080d4:	08008283 	.word	0x08008283
 80080d8:	080081bf 	.word	0x080081bf
 80080dc:	08008283 	.word	0x08008283
 80080e0:	08008283 	.word	0x08008283
 80080e4:	08008283 	.word	0x08008283
 80080e8:	08008201 	.word	0x08008201
 80080ec:	08008283 	.word	0x08008283
 80080f0:	08008283 	.word	0x08008283
 80080f4:	08008283 	.word	0x08008283
 80080f8:	08008241 	.word	0x08008241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68b9      	ldr	r1, [r7, #8]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f99a 	bl	800843c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0208 	orr.w	r2, r2, #8
 8008116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0204 	bic.w	r2, r2, #4
 8008126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6999      	ldr	r1, [r3, #24]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	691a      	ldr	r2, [r3, #16]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	619a      	str	r2, [r3, #24]
      break;
 800813a:	e0a5      	b.n	8008288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fa14 	bl	8008570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6999      	ldr	r1, [r3, #24]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	021a      	lsls	r2, r3, #8
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	619a      	str	r2, [r3, #24]
      break;
 800817c:	e084      	b.n	8008288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fa87 	bl	8008698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69da      	ldr	r2, [r3, #28]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0208 	orr.w	r2, r2, #8
 8008198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69da      	ldr	r2, [r3, #28]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0204 	bic.w	r2, r2, #4
 80081a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69d9      	ldr	r1, [r3, #28]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	61da      	str	r2, [r3, #28]
      break;
 80081bc:	e064      	b.n	8008288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 faf9 	bl	80087bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69da      	ldr	r2, [r3, #28]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69d9      	ldr	r1, [r3, #28]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	021a      	lsls	r2, r3, #8
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	61da      	str	r2, [r3, #28]
      break;
 80081fe:	e043      	b.n	8008288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fb6c 	bl	80088e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0204 	bic.w	r2, r2, #4
 800822a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800823e:	e023      	b.n	8008288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fbb6 	bl	80089b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800825a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800826a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	021a      	lsls	r2, r3, #8
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008280:	e002      	b.n	8008288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
      break;
 8008286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop

0800829c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a46      	ldr	r2, [pc, #280]	; (8008418 <TIM_Base_SetConfig+0x12c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d017      	beq.n	8008334 <TIM_Base_SetConfig+0x48>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830a:	d013      	beq.n	8008334 <TIM_Base_SetConfig+0x48>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a43      	ldr	r2, [pc, #268]	; (800841c <TIM_Base_SetConfig+0x130>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00f      	beq.n	8008334 <TIM_Base_SetConfig+0x48>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a42      	ldr	r2, [pc, #264]	; (8008420 <TIM_Base_SetConfig+0x134>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00b      	beq.n	8008334 <TIM_Base_SetConfig+0x48>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a41      	ldr	r2, [pc, #260]	; (8008424 <TIM_Base_SetConfig+0x138>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d007      	beq.n	8008334 <TIM_Base_SetConfig+0x48>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a40      	ldr	r2, [pc, #256]	; (8008428 <TIM_Base_SetConfig+0x13c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d003      	beq.n	8008334 <TIM_Base_SetConfig+0x48>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a3f      	ldr	r2, [pc, #252]	; (800842c <TIM_Base_SetConfig+0x140>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d108      	bne.n	8008346 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a33      	ldr	r2, [pc, #204]	; (8008418 <TIM_Base_SetConfig+0x12c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d023      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008354:	d01f      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a30      	ldr	r2, [pc, #192]	; (800841c <TIM_Base_SetConfig+0x130>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d01b      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a2f      	ldr	r2, [pc, #188]	; (8008420 <TIM_Base_SetConfig+0x134>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d017      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a2e      	ldr	r2, [pc, #184]	; (8008424 <TIM_Base_SetConfig+0x138>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d013      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2d      	ldr	r2, [pc, #180]	; (8008428 <TIM_Base_SetConfig+0x13c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d00f      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a2d      	ldr	r2, [pc, #180]	; (8008430 <TIM_Base_SetConfig+0x144>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00b      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a2c      	ldr	r2, [pc, #176]	; (8008434 <TIM_Base_SetConfig+0x148>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d007      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a2b      	ldr	r2, [pc, #172]	; (8008438 <TIM_Base_SetConfig+0x14c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d003      	beq.n	8008396 <TIM_Base_SetConfig+0xaa>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a26      	ldr	r2, [pc, #152]	; (800842c <TIM_Base_SetConfig+0x140>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d108      	bne.n	80083a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800839c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a12      	ldr	r2, [pc, #72]	; (8008418 <TIM_Base_SetConfig+0x12c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d013      	beq.n	80083fc <TIM_Base_SetConfig+0x110>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <TIM_Base_SetConfig+0x13c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00f      	beq.n	80083fc <TIM_Base_SetConfig+0x110>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a14      	ldr	r2, [pc, #80]	; (8008430 <TIM_Base_SetConfig+0x144>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00b      	beq.n	80083fc <TIM_Base_SetConfig+0x110>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a13      	ldr	r2, [pc, #76]	; (8008434 <TIM_Base_SetConfig+0x148>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <TIM_Base_SetConfig+0x110>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a12      	ldr	r2, [pc, #72]	; (8008438 <TIM_Base_SetConfig+0x14c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_Base_SetConfig+0x110>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a0d      	ldr	r2, [pc, #52]	; (800842c <TIM_Base_SetConfig+0x140>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d103      	bne.n	8008404 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	615a      	str	r2, [r3, #20]
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40012c00 	.word	0x40012c00
 800841c:	40000400 	.word	0x40000400
 8008420:	40000800 	.word	0x40000800
 8008424:	40000c00 	.word	0x40000c00
 8008428:	40013400 	.word	0x40013400
 800842c:	40015000 	.word	0x40015000
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800

0800843c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f023 0201 	bic.w	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 0302 	bic.w	r3, r3, #2
 8008488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	4313      	orrs	r3, r2
 8008492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a30      	ldr	r2, [pc, #192]	; (8008558 <TIM_OC1_SetConfig+0x11c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d013      	beq.n	80084c4 <TIM_OC1_SetConfig+0x88>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a2f      	ldr	r2, [pc, #188]	; (800855c <TIM_OC1_SetConfig+0x120>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00f      	beq.n	80084c4 <TIM_OC1_SetConfig+0x88>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a2e      	ldr	r2, [pc, #184]	; (8008560 <TIM_OC1_SetConfig+0x124>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00b      	beq.n	80084c4 <TIM_OC1_SetConfig+0x88>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a2d      	ldr	r2, [pc, #180]	; (8008564 <TIM_OC1_SetConfig+0x128>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d007      	beq.n	80084c4 <TIM_OC1_SetConfig+0x88>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a2c      	ldr	r2, [pc, #176]	; (8008568 <TIM_OC1_SetConfig+0x12c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d003      	beq.n	80084c4 <TIM_OC1_SetConfig+0x88>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a2b      	ldr	r2, [pc, #172]	; (800856c <TIM_OC1_SetConfig+0x130>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d10c      	bne.n	80084de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0308 	bic.w	r3, r3, #8
 80084ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f023 0304 	bic.w	r3, r3, #4
 80084dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a1d      	ldr	r2, [pc, #116]	; (8008558 <TIM_OC1_SetConfig+0x11c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <TIM_OC1_SetConfig+0xd2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1c      	ldr	r2, [pc, #112]	; (800855c <TIM_OC1_SetConfig+0x120>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00f      	beq.n	800850e <TIM_OC1_SetConfig+0xd2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1b      	ldr	r2, [pc, #108]	; (8008560 <TIM_OC1_SetConfig+0x124>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_OC1_SetConfig+0xd2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1a      	ldr	r2, [pc, #104]	; (8008564 <TIM_OC1_SetConfig+0x128>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_OC1_SetConfig+0xd2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <TIM_OC1_SetConfig+0x12c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_OC1_SetConfig+0xd2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a18      	ldr	r2, [pc, #96]	; (800856c <TIM_OC1_SetConfig+0x130>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d111      	bne.n	8008532 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800851c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	40012c00 	.word	0x40012c00
 800855c:	40013400 	.word	0x40013400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800
 800856c:	40015000 	.word	0x40015000

08008570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f023 0210 	bic.w	r2, r3, #16
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800859e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	021b      	lsls	r3, r3, #8
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f023 0320 	bic.w	r3, r3, #32
 80085be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a2c      	ldr	r2, [pc, #176]	; (8008680 <TIM_OC2_SetConfig+0x110>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <TIM_OC2_SetConfig+0x74>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a2b      	ldr	r2, [pc, #172]	; (8008684 <TIM_OC2_SetConfig+0x114>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC2_SetConfig+0x74>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a2a      	ldr	r2, [pc, #168]	; (8008688 <TIM_OC2_SetConfig+0x118>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d10d      	bne.n	8008600 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <TIM_OC2_SetConfig+0x110>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d013      	beq.n	8008630 <TIM_OC2_SetConfig+0xc0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a1e      	ldr	r2, [pc, #120]	; (8008684 <TIM_OC2_SetConfig+0x114>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00f      	beq.n	8008630 <TIM_OC2_SetConfig+0xc0>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a1e      	ldr	r2, [pc, #120]	; (800868c <TIM_OC2_SetConfig+0x11c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00b      	beq.n	8008630 <TIM_OC2_SetConfig+0xc0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a1d      	ldr	r2, [pc, #116]	; (8008690 <TIM_OC2_SetConfig+0x120>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d007      	beq.n	8008630 <TIM_OC2_SetConfig+0xc0>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1c      	ldr	r2, [pc, #112]	; (8008694 <TIM_OC2_SetConfig+0x124>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_OC2_SetConfig+0xc0>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a17      	ldr	r2, [pc, #92]	; (8008688 <TIM_OC2_SetConfig+0x118>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d113      	bne.n	8008658 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800863e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40012c00 	.word	0x40012c00
 8008684:	40013400 	.word	0x40013400
 8008688:	40015000 	.word	0x40015000
 800868c:	40014000 	.word	0x40014000
 8008690:	40014400 	.word	0x40014400
 8008694:	40014800 	.word	0x40014800

08008698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2b      	ldr	r2, [pc, #172]	; (80087a4 <TIM_OC3_SetConfig+0x10c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <TIM_OC3_SetConfig+0x72>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2a      	ldr	r2, [pc, #168]	; (80087a8 <TIM_OC3_SetConfig+0x110>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_OC3_SetConfig+0x72>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a29      	ldr	r2, [pc, #164]	; (80087ac <TIM_OC3_SetConfig+0x114>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d10d      	bne.n	8008726 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	021b      	lsls	r3, r3, #8
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	4313      	orrs	r3, r2
 800871c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a1e      	ldr	r2, [pc, #120]	; (80087a4 <TIM_OC3_SetConfig+0x10c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <TIM_OC3_SetConfig+0xbe>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <TIM_OC3_SetConfig+0x110>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00f      	beq.n	8008756 <TIM_OC3_SetConfig+0xbe>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a1d      	ldr	r2, [pc, #116]	; (80087b0 <TIM_OC3_SetConfig+0x118>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00b      	beq.n	8008756 <TIM_OC3_SetConfig+0xbe>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <TIM_OC3_SetConfig+0x11c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d007      	beq.n	8008756 <TIM_OC3_SetConfig+0xbe>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a1b      	ldr	r2, [pc, #108]	; (80087b8 <TIM_OC3_SetConfig+0x120>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d003      	beq.n	8008756 <TIM_OC3_SetConfig+0xbe>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a16      	ldr	r2, [pc, #88]	; (80087ac <TIM_OC3_SetConfig+0x114>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d113      	bne.n	800877e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800875c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	621a      	str	r2, [r3, #32]
}
 8008798:	bf00      	nop
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	40013400 	.word	0x40013400
 80087ac:	40015000 	.word	0x40015000
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400
 80087b8:	40014800 	.word	0x40014800

080087bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800880a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	031b      	lsls	r3, r3, #12
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4313      	orrs	r3, r2
 8008816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a2c      	ldr	r2, [pc, #176]	; (80088cc <TIM_OC4_SetConfig+0x110>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d007      	beq.n	8008830 <TIM_OC4_SetConfig+0x74>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a2b      	ldr	r2, [pc, #172]	; (80088d0 <TIM_OC4_SetConfig+0x114>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_OC4_SetConfig+0x74>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <TIM_OC4_SetConfig+0x118>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d10d      	bne.n	800884c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	031b      	lsls	r3, r3, #12
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a1f      	ldr	r2, [pc, #124]	; (80088cc <TIM_OC4_SetConfig+0x110>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <TIM_OC4_SetConfig+0xc0>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a1e      	ldr	r2, [pc, #120]	; (80088d0 <TIM_OC4_SetConfig+0x114>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00f      	beq.n	800887c <TIM_OC4_SetConfig+0xc0>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <TIM_OC4_SetConfig+0x11c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00b      	beq.n	800887c <TIM_OC4_SetConfig+0xc0>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a1d      	ldr	r2, [pc, #116]	; (80088dc <TIM_OC4_SetConfig+0x120>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_OC4_SetConfig+0xc0>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a1c      	ldr	r2, [pc, #112]	; (80088e0 <TIM_OC4_SetConfig+0x124>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC4_SetConfig+0xc0>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a17      	ldr	r2, [pc, #92]	; (80088d4 <TIM_OC4_SetConfig+0x118>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d113      	bne.n	80088a4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008882:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800888a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	019b      	lsls	r3, r3, #6
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	019b      	lsls	r3, r3, #6
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	621a      	str	r2, [r3, #32]
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	40013400 	.word	0x40013400
 80088d4:	40015000 	.word	0x40015000
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800

080088e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008928:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a19      	ldr	r2, [pc, #100]	; (80089a0 <TIM_OC5_SetConfig+0xbc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d013      	beq.n	8008966 <TIM_OC5_SetConfig+0x82>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a18      	ldr	r2, [pc, #96]	; (80089a4 <TIM_OC5_SetConfig+0xc0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00f      	beq.n	8008966 <TIM_OC5_SetConfig+0x82>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <TIM_OC5_SetConfig+0xc4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00b      	beq.n	8008966 <TIM_OC5_SetConfig+0x82>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a16      	ldr	r2, [pc, #88]	; (80089ac <TIM_OC5_SetConfig+0xc8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d007      	beq.n	8008966 <TIM_OC5_SetConfig+0x82>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a15      	ldr	r2, [pc, #84]	; (80089b0 <TIM_OC5_SetConfig+0xcc>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d003      	beq.n	8008966 <TIM_OC5_SetConfig+0x82>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a14      	ldr	r2, [pc, #80]	; (80089b4 <TIM_OC5_SetConfig+0xd0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d109      	bne.n	800897a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800896c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	621a      	str	r2, [r3, #32]
}
 8008994:	bf00      	nop
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	40012c00 	.word	0x40012c00
 80089a4:	40013400 	.word	0x40013400
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40014400 	.word	0x40014400
 80089b0:	40014800 	.word	0x40014800
 80089b4:	40015000 	.word	0x40015000

080089b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	021b      	lsls	r3, r3, #8
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	051b      	lsls	r3, r3, #20
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <TIM_OC6_SetConfig+0xc0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d013      	beq.n	8008a3c <TIM_OC6_SetConfig+0x84>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a19      	ldr	r2, [pc, #100]	; (8008a7c <TIM_OC6_SetConfig+0xc4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00f      	beq.n	8008a3c <TIM_OC6_SetConfig+0x84>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a18      	ldr	r2, [pc, #96]	; (8008a80 <TIM_OC6_SetConfig+0xc8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00b      	beq.n	8008a3c <TIM_OC6_SetConfig+0x84>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a17      	ldr	r2, [pc, #92]	; (8008a84 <TIM_OC6_SetConfig+0xcc>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d007      	beq.n	8008a3c <TIM_OC6_SetConfig+0x84>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a16      	ldr	r2, [pc, #88]	; (8008a88 <TIM_OC6_SetConfig+0xd0>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_OC6_SetConfig+0x84>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a15      	ldr	r2, [pc, #84]	; (8008a8c <TIM_OC6_SetConfig+0xd4>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d109      	bne.n	8008a50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	029b      	lsls	r3, r3, #10
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40013400 	.word	0x40013400
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40014400 	.word	0x40014400
 8008a88:	40014800 	.word	0x40014800
 8008a8c:	40015000 	.word	0x40015000

08008a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f003 031f 	and.w	r3, r3, #31
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1a      	ldr	r2, [r3, #32]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	401a      	ands	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6a1a      	ldr	r2, [r3, #32]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	621a      	str	r2, [r3, #32]
}
 8008ace:	bf00      	nop
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
	...

08008adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e074      	b.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a34      	ldr	r2, [pc, #208]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a33      	ldr	r2, [pc, #204]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a31      	ldr	r2, [pc, #196]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d108      	bne.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a21      	ldr	r2, [pc, #132]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d022      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b74:	d01d      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a1f      	ldr	r2, [pc, #124]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d018      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a1d      	ldr	r2, [pc, #116]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d013      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a1c      	ldr	r2, [pc, #112]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00e      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a15      	ldr	r2, [pc, #84]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d009      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a18      	ldr	r2, [pc, #96]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d004      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a11      	ldr	r2, [pc, #68]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d10c      	bne.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40012c00 	.word	0x40012c00
 8008bf0:	40013400 	.word	0x40013400
 8008bf4:	40015000 	.word	0x40015000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40014000 	.word	0x40014000

08008c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ca6:	2b84      	cmp	r3, #132	; 0x84
 8008ca8:	d005      	beq.n	8008cb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008caa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	3303      	adds	r3, #3
 8008cb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008cc8:	f000 fe3c 	bl	8009944 <vTaskStartScheduler>
  
  return osOK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd4:	b087      	sub	sp, #28
 8008cd6:	af02      	add	r7, sp, #8
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685c      	ldr	r4, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ce8:	b29e      	uxth	r6, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff ffcf 	bl	8008c94 <makeFreeRtosPriority>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	f107 030c 	add.w	r3, r7, #12
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	9200      	str	r2, [sp, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	4632      	mov	r2, r6
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fca8 	bl	800965c <xTaskCreate>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d001      	beq.n	8008d16 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e000      	b.n	8008d18 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008d16:	68fb      	ldr	r3, [r7, #12]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <osDelay+0x16>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	e000      	b.n	8008d38 <osDelay+0x18>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fdcf 	bl	80098dc <vTaskDelay>
  
  return osOK;
 8008d3e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8008d50:	2001      	movs	r0, #1
 8008d52:	f000 f983 	bl	800905c <xQueueCreateMutex>
 8008d56:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f103 0208 	add.w	r2, r3, #8
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f04f 32ff 	mov.w	r2, #4294967295
 8008d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f103 0208 	add.w	r2, r3, #8
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f103 0208 	add.w	r2, r3, #8
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d103      	bne.n	8008e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	e00c      	b.n	8008e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3308      	adds	r3, #8
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	e002      	b.n	8008e30 <vListInsert+0x2e>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d2f6      	bcs.n	8008e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6892      	ldr	r2, [r2, #8]
 8008e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6852      	ldr	r2, [r2, #4]
 8008e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d103      	bne.n	8008ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	1e5a      	subs	r2, r3, #1
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ef2:	f001 fc2f 	bl	800a754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f02:	fb01 f303 	mul.w	r3, r1, r3
 8008f06:	441a      	add	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f22:	3b01      	subs	r3, #1
 8008f24:	68f9      	ldr	r1, [r7, #12]
 8008f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f28:	fb01 f303 	mul.w	r3, r1, r3
 8008f2c:	441a      	add	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	22ff      	movs	r2, #255	; 0xff
 8008f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	22ff      	movs	r2, #255	; 0xff
 8008f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d109      	bne.n	8008f5c <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00f      	beq.n	8008f70 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3310      	adds	r3, #16
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fefd 	bl	8009d54 <xTaskRemoveFromEventList>
 8008f5a:	e009      	b.n	8008f70 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3310      	adds	r3, #16
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fefd 	bl	8008d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3324      	adds	r3, #36	; 0x24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fef8 	bl	8008d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f70:	f001 fc20 	bl	800a7b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f74:	2301      	movs	r3, #1
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b08a      	sub	sp, #40	; 0x28
 8008f82:	af02      	add	r7, sp, #8
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	613b      	str	r3, [r7, #16]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	fb02 f303 	mul.w	r3, r2, r3
 8008fb0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	3348      	adds	r3, #72	; 0x48
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fcae 	bl	800a918 <pvPortMalloc>
 8008fbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00d      	beq.n	8008fe0 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	3348      	adds	r3, #72	; 0x48
 8008fcc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fce:	79fa      	ldrb	r2, [r7, #7]
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	68b9      	ldr	r1, [r7, #8]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 f805 	bl	8008fea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
	}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3720      	adds	r7, #32
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
 8008ff6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e002      	b.n	800900c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009018:	2101      	movs	r1, #1
 800901a:	69b8      	ldr	r0, [r7, #24]
 800901c:	f7ff ff54 	bl	8008ec8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00e      	beq.n	8009054 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009048:	2300      	movs	r3, #0
 800904a:	2200      	movs	r2, #0
 800904c:	2100      	movs	r1, #0
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f81c 	bl	800908c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009066:	2301      	movs	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	461a      	mov	r2, r3
 8009072:	6939      	ldr	r1, [r7, #16]
 8009074:	6978      	ldr	r0, [r7, #20]
 8009076:	f7ff ff82 	bl	8008f7e <xQueueGenericCreate>
 800907a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff ffd3 	bl	8009028 <prvInitialiseMutex>

		return xNewQueue;
 8009082:	68fb      	ldr	r3, [r7, #12]
	}
 8009084:	4618      	mov	r0, r3
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	; 0x38
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800909a:	2300      	movs	r3, #0
 800909c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xQueueGenericSend+0x32>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d103      	bne.n	80090cc <xQueueGenericSend+0x40>
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <xQueueGenericSend+0x44>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <xQueueGenericSend+0x46>
 80090d0:	2300      	movs	r3, #0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <xQueueGenericSend+0x60>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d103      	bne.n	80090fa <xQueueGenericSend+0x6e>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <xQueueGenericSend+0x72>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueGenericSend+0x74>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueGenericSend+0x8e>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	623b      	str	r3, [r7, #32]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800911a:	f000 ffc7 	bl	800a0ac <xTaskGetSchedulerState>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <xQueueGenericSend+0x9e>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <xQueueGenericSend+0xa2>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <xQueueGenericSend+0xa4>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <xQueueGenericSend+0xbe>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	61fb      	str	r3, [r7, #28]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800914a:	f001 fb03 	bl	800a754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009156:	429a      	cmp	r2, r3
 8009158:	d302      	bcc.n	8009160 <xQueueGenericSend+0xd4>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d112      	bne.n	8009186 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009166:	f000 f98f 	bl	8009488 <prvCopyDataToQueue>
 800916a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	3324      	adds	r3, #36	; 0x24
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fdeb 	bl	8009d54 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800917e:	f001 fb19 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 8009182:	2301      	movs	r3, #1
 8009184:	e062      	b.n	800924c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d103      	bne.n	8009194 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800918c:	f001 fb12 	bl	800a7b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009190:	2300      	movs	r3, #0
 8009192:	e05b      	b.n	800924c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800919a:	f107 0314 	add.w	r3, r7, #20
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fe3a 	bl	8009e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091a8:	f001 fb04 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091ac:	f000 fc1a 	bl	80099e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091b0:	f001 fad0 	bl	800a754 <vPortEnterCritical>
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091ba:	b25b      	sxtb	r3, r3
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d103      	bne.n	80091ca <xQueueGenericSend+0x13e>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091d0:	b25b      	sxtb	r3, r3
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d103      	bne.n	80091e0 <xQueueGenericSend+0x154>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e0:	f001 fae8 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091e4:	1d3a      	adds	r2, r7, #4
 80091e6:	f107 0314 	add.w	r3, r7, #20
 80091ea:	4611      	mov	r1, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fe29 	bl	8009e44 <xTaskCheckForTimeOut>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d123      	bne.n	8009240 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091fa:	f000 fa17 	bl	800962c <prvIsQueueFull>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d017      	beq.n	8009234 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	3310      	adds	r3, #16
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fd7d 	bl	8009d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009214:	f000 f9a2 	bl	800955c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009218:	f000 fbf2 	bl	8009a00 <xTaskResumeAll>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d193      	bne.n	800914a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009222:	4b0c      	ldr	r3, [pc, #48]	; (8009254 <xQueueGenericSend+0x1c8>)
 8009224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	e78a      	b.n	800914a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009236:	f000 f991 	bl	800955c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800923a:	f000 fbe1 	bl	8009a00 <xTaskResumeAll>
 800923e:	e784      	b.n	800914a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009242:	f000 f98b 	bl	800955c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009246:	f000 fbdb 	bl	8009a00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800924a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800924c:	4618      	mov	r0, r3
 800924e:	3738      	adds	r7, #56	; 0x38
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08e      	sub	sp, #56	; 0x38
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009262:	2300      	movs	r3, #0
 8009264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800926a:	2300      	movs	r3, #0
 800926c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	623b      	str	r3, [r7, #32]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	61fb      	str	r3, [r7, #28]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092a8:	f000 ff00 	bl	800a0ac <xTaskGetSchedulerState>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d102      	bne.n	80092b8 <xQueueSemaphoreTake+0x60>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <xQueueSemaphoreTake+0x64>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e000      	b.n	80092be <xQueueSemaphoreTake+0x66>
 80092bc:	2300      	movs	r3, #0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	61bb      	str	r3, [r7, #24]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092d8:	f001 fa3c 	bl	800a754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d019      	beq.n	800931c <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	1e5a      	subs	r2, r3, #1
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80092f8:	f001 f880 	bl	800a3fc <pvTaskIncrementMutexHeldCount>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	3310      	adds	r3, #16
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fd20 	bl	8009d54 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009314:	f001 fa4e 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 8009318:	2301      	movs	r3, #1
 800931a:	e097      	b.n	800944c <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d111      	bne.n	8009346 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	617b      	str	r3, [r7, #20]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800933e:	f001 fa39 	bl	800a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009342:	2300      	movs	r3, #0
 8009344:	e082      	b.n	800944c <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	2b00      	cmp	r3, #0
 800934a:	d106      	bne.n	800935a <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fd61 	bl	8009e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009356:	2301      	movs	r3, #1
 8009358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800935a:	f001 fa2b 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800935e:	f000 fb41 	bl	80099e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009362:	f001 f9f7 	bl	800a754 <vPortEnterCritical>
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800936c:	b25b      	sxtb	r3, r3
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009372:	d103      	bne.n	800937c <xQueueSemaphoreTake+0x124>
 8009374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009382:	b25b      	sxtb	r3, r3
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d103      	bne.n	8009392 <xQueueSemaphoreTake+0x13a>
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009392:	f001 fa0f 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009396:	463a      	mov	r2, r7
 8009398:	f107 030c 	add.w	r3, r7, #12
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fd50 	bl	8009e44 <xTaskCheckForTimeOut>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d132      	bne.n	8009410 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093ac:	f000 f928 	bl	8009600 <prvIsQueueEmpty>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d026      	beq.n	8009404 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80093be:	f001 f9c9 	bl	800a754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fe8e 	bl	800a0e8 <xTaskPriorityInherit>
 80093cc:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80093ce:	f001 f9f1 	bl	800a7b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	3324      	adds	r3, #36	; 0x24
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4611      	mov	r1, r2
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fc96 	bl	8009d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093e2:	f000 f8bb 	bl	800955c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093e6:	f000 fb0b 	bl	8009a00 <xTaskResumeAll>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f47f af73 	bne.w	80092d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80093f2:	4b18      	ldr	r3, [pc, #96]	; (8009454 <xQueueSemaphoreTake+0x1fc>)
 80093f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	e769      	b.n	80092d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009406:	f000 f8a9 	bl	800955c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800940a:	f000 faf9 	bl	8009a00 <xTaskResumeAll>
 800940e:	e763      	b.n	80092d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009412:	f000 f8a3 	bl	800955c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009416:	f000 faf3 	bl	8009a00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800941a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800941c:	f000 f8f0 	bl	8009600 <prvIsQueueEmpty>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	f43f af58 	beq.w	80092d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00d      	beq.n	800944a <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 800942e:	f001 f991 	bl	800a754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009434:	f000 f810 	bl	8009458 <prvGetDisinheritPriorityAfterTimeout>
 8009438:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009440:	4618      	mov	r0, r3
 8009442:	f000 ff4d 	bl	800a2e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009446:	f001 f9b5 	bl	800a7b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800944a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800944c:	4618      	mov	r0, r3
 800944e:	3738      	adds	r7, #56	; 0x38
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	d006      	beq.n	8009476 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f1c3 0307 	rsb	r3, r3, #7
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e001      	b.n	800947a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800947a:	68fb      	ldr	r3, [r7, #12]
	}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10d      	bne.n	80094c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d14d      	bne.n	800954a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fe8e 	bl	800a1d4 <xTaskPriorityDisinherit>
 80094b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	609a      	str	r2, [r3, #8]
 80094c0:	e043      	b.n	800954a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d119      	bne.n	80094fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6858      	ldr	r0, [r3, #4]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d0:	461a      	mov	r2, r3
 80094d2:	68b9      	ldr	r1, [r7, #8]
 80094d4:	f001 fc4e 	bl	800ad74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e0:	441a      	add	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d32b      	bcc.n	800954a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	e026      	b.n	800954a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68d8      	ldr	r0, [r3, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009504:	461a      	mov	r2, r3
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	f001 fc34 	bl	800ad74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009514:	425b      	negs	r3, r3
 8009516:	441a      	add	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d207      	bcs.n	8009538 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009530:	425b      	negs	r3, r3
 8009532:	441a      	add	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d105      	bne.n	800954a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3b01      	subs	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009564:	f001 f8f6 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800956e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009570:	e011      	b.n	8009596 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	d012      	beq.n	80095a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3324      	adds	r3, #36	; 0x24
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fbe8 	bl	8009d54 <xTaskRemoveFromEventList>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800958a:	f000 fccd 	bl	8009f28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	3b01      	subs	r3, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800959a:	2b00      	cmp	r3, #0
 800959c:	dce9      	bgt.n	8009572 <prvUnlockQueue+0x16>
 800959e:	e000      	b.n	80095a2 <prvUnlockQueue+0x46>
					break;
 80095a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	22ff      	movs	r2, #255	; 0xff
 80095a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095aa:	f001 f903 	bl	800a7b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095ae:	f001 f8d1 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095ba:	e011      	b.n	80095e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d012      	beq.n	80095ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3310      	adds	r3, #16
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fbc3 	bl	8009d54 <xTaskRemoveFromEventList>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095d4:	f000 fca8 	bl	8009f28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	3b01      	subs	r3, #1
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dce9      	bgt.n	80095bc <prvUnlockQueue+0x60>
 80095e8:	e000      	b.n	80095ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	22ff      	movs	r2, #255	; 0xff
 80095f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095f4:	f001 f8de 	bl	800a7b4 <vPortExitCritical>
}
 80095f8:	bf00      	nop
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009608:	f001 f8a4 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009614:	2301      	movs	r3, #1
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	e001      	b.n	800961e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800961e:	f001 f8c9 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 8009622:	68fb      	ldr	r3, [r7, #12]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009634:	f001 f88e 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009640:	429a      	cmp	r2, r3
 8009642:	d102      	bne.n	800964a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009644:	2301      	movs	r3, #1
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	e001      	b.n	800964e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800964e:	f001 f8b1 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 8009652:	68fb      	ldr	r3, [r7, #12]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08c      	sub	sp, #48	; 0x30
 8009660:	af04      	add	r7, sp, #16
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	4613      	mov	r3, r2
 800966a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800966c:	88fb      	ldrh	r3, [r7, #6]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4618      	mov	r0, r3
 8009672:	f001 f951 	bl	800a918 <pvPortMalloc>
 8009676:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00e      	beq.n	800969c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800967e:	20b4      	movs	r0, #180	; 0xb4
 8009680:	f001 f94a 	bl	800a918 <pvPortMalloc>
 8009684:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d003      	beq.n	8009694 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	631a      	str	r2, [r3, #48]	; 0x30
 8009692:	e005      	b.n	80096a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009694:	6978      	ldr	r0, [r7, #20]
 8009696:	f001 fa0b 	bl	800aab0 <vPortFree>
 800969a:	e001      	b.n	80096a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800969c:	2300      	movs	r3, #0
 800969e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d013      	beq.n	80096ce <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096a6:	88fa      	ldrh	r2, [r7, #6]
 80096a8:	2300      	movs	r3, #0
 80096aa:	9303      	str	r3, [sp, #12]
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 f80f 	bl	80096e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096c2:	69f8      	ldr	r0, [r7, #28]
 80096c4:	f000 f8ae 	bl	8009824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096c8:	2301      	movs	r3, #1
 80096ca:	61bb      	str	r3, [r7, #24]
 80096cc:	e002      	b.n	80096d4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295
 80096d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096d4:	69bb      	ldr	r3, [r7, #24]
	}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096f8:	3b01      	subs	r3, #1
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	617b      	str	r3, [r7, #20]
}
 8009724:	bf00      	nop
 8009726:	e7fe      	b.n	8009726 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d01f      	beq.n	800976e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800972e:	2300      	movs	r3, #0
 8009730:	61fb      	str	r3, [r7, #28]
 8009732:	e012      	b.n	800975a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	4413      	add	r3, r2
 800973a:	7819      	ldrb	r1, [r3, #0]
 800973c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	3334      	adds	r3, #52	; 0x34
 8009744:	460a      	mov	r2, r1
 8009746:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4413      	add	r3, r2
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	3301      	adds	r3, #1
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	2b0f      	cmp	r3, #15
 800975e:	d9e9      	bls.n	8009734 <prvInitialiseNewTask+0x54>
 8009760:	e000      	b.n	8009764 <prvInitialiseNewTask+0x84>
			{
				break;
 8009762:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800976c:	e003      	b.n	8009776 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	2b06      	cmp	r3, #6
 800977a:	d901      	bls.n	8009780 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800977c:	2306      	movs	r3, #6
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009784:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800978a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	2200      	movs	r2, #0
 8009790:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	3304      	adds	r3, #4
 8009796:	4618      	mov	r0, r3
 8009798:	f7ff fb02 	bl	8008da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	3318      	adds	r3, #24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fafd 	bl	8008da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	f1c3 0207 	rsb	r2, r3, #7
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	334c      	adds	r3, #76	; 0x4c
 80097d0:	2260      	movs	r2, #96	; 0x60
 80097d2:	2100      	movs	r1, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 fadb 	bl	800ad90 <memset>
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	4a0e      	ldr	r2, [pc, #56]	; (8009818 <prvInitialiseNewTask+0x138>)
 80097de:	651a      	str	r2, [r3, #80]	; 0x50
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	4a0e      	ldr	r2, [pc, #56]	; (800981c <prvInitialiseNewTask+0x13c>)
 80097e4:	655a      	str	r2, [r3, #84]	; 0x54
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	4a0d      	ldr	r2, [pc, #52]	; (8009820 <prvInitialiseNewTask+0x140>)
 80097ea:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	69b8      	ldr	r0, [r7, #24]
 80097fa:	f000 fe7d 	bl	800a4f8 <pxPortInitialiseStack>
 80097fe:	4602      	mov	r2, r0
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009810:	bf00      	nop
 8009812:	3720      	adds	r7, #32
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	0800aff4 	.word	0x0800aff4
 800981c:	0800b014 	.word	0x0800b014
 8009820:	0800afd4 	.word	0x0800afd4

08009824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800982c:	f000 ff92 	bl	800a754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009830:	4b24      	ldr	r3, [pc, #144]	; (80098c4 <prvAddNewTaskToReadyList+0xa0>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3301      	adds	r3, #1
 8009836:	4a23      	ldr	r2, [pc, #140]	; (80098c4 <prvAddNewTaskToReadyList+0xa0>)
 8009838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800983a:	4b23      	ldr	r3, [pc, #140]	; (80098c8 <prvAddNewTaskToReadyList+0xa4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d109      	bne.n	8009856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009842:	4a21      	ldr	r2, [pc, #132]	; (80098c8 <prvAddNewTaskToReadyList+0xa4>)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009848:	4b1e      	ldr	r3, [pc, #120]	; (80098c4 <prvAddNewTaskToReadyList+0xa0>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d110      	bne.n	8009872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009850:	f000 fb88 	bl	8009f64 <prvInitialiseTaskLists>
 8009854:	e00d      	b.n	8009872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009856:	4b1d      	ldr	r3, [pc, #116]	; (80098cc <prvAddNewTaskToReadyList+0xa8>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800985e:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <prvAddNewTaskToReadyList+0xa4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	429a      	cmp	r2, r3
 800986a:	d802      	bhi.n	8009872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800986c:	4a16      	ldr	r2, [pc, #88]	; (80098c8 <prvAddNewTaskToReadyList+0xa4>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009872:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <prvAddNewTaskToReadyList+0xac>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	4a15      	ldr	r2, [pc, #84]	; (80098d0 <prvAddNewTaskToReadyList+0xac>)
 800987a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	2201      	movs	r2, #1
 8009882:	409a      	lsls	r2, r3
 8009884:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <prvAddNewTaskToReadyList+0xb0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4313      	orrs	r3, r2
 800988a:	4a12      	ldr	r2, [pc, #72]	; (80098d4 <prvAddNewTaskToReadyList+0xb0>)
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4a0f      	ldr	r2, [pc, #60]	; (80098d8 <prvAddNewTaskToReadyList+0xb4>)
 800989c:	441a      	add	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7ff fa88 	bl	8008dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098aa:	f000 ff83 	bl	800a7b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098ae:	4b07      	ldr	r3, [pc, #28]	; (80098cc <prvAddNewTaskToReadyList+0xa8>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098b6:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <prvAddNewTaskToReadyList+0xa4>)
 80098b8:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000438 	.word	0x20000438
 80098c8:	20000338 	.word	0x20000338
 80098cc:	20000444 	.word	0x20000444
 80098d0:	20000454 	.word	0x20000454
 80098d4:	20000440 	.word	0x20000440
 80098d8:	2000033c 	.word	0x2000033c

080098dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d017      	beq.n	800991e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <vTaskDelay+0x60>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <vTaskDelay+0x30>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60bb      	str	r3, [r7, #8]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800990c:	f000 f86a 	bl	80099e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009910:	2100      	movs	r1, #0
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fd86 	bl	800a424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009918:	f000 f872 	bl	8009a00 <xTaskResumeAll>
 800991c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d107      	bne.n	8009934 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009924:	4b06      	ldr	r3, [pc, #24]	; (8009940 <vTaskDelay+0x64>)
 8009926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009934:	bf00      	nop
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20000460 	.word	0x20000460
 8009940:	e000ed04 	.word	0xe000ed04

08009944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800994a:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <vTaskStartScheduler+0x80>)
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	2300      	movs	r3, #0
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	2300      	movs	r3, #0
 8009954:	2280      	movs	r2, #128	; 0x80
 8009956:	491c      	ldr	r1, [pc, #112]	; (80099c8 <vTaskStartScheduler+0x84>)
 8009958:	481c      	ldr	r0, [pc, #112]	; (80099cc <vTaskStartScheduler+0x88>)
 800995a:	f7ff fe7f 	bl	800965c <xTaskCreate>
 800995e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d11b      	bne.n	800999e <vTaskStartScheduler+0x5a>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60bb      	str	r3, [r7, #8]
}
 8009978:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800997a:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <vTaskStartScheduler+0x8c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	334c      	adds	r3, #76	; 0x4c
 8009980:	4a14      	ldr	r2, [pc, #80]	; (80099d4 <vTaskStartScheduler+0x90>)
 8009982:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009984:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <vTaskStartScheduler+0x94>)
 8009986:	f04f 32ff 	mov.w	r2, #4294967295
 800998a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800998c:	4b13      	ldr	r3, [pc, #76]	; (80099dc <vTaskStartScheduler+0x98>)
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009992:	4b13      	ldr	r3, [pc, #76]	; (80099e0 <vTaskStartScheduler+0x9c>)
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009998:	f000 fe3a 	bl	800a610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800999c:	e00e      	b.n	80099bc <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d10a      	bne.n	80099bc <vTaskStartScheduler+0x78>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	607b      	str	r3, [r7, #4]
}
 80099b8:	bf00      	nop
 80099ba:	e7fe      	b.n	80099ba <vTaskStartScheduler+0x76>
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	2000045c 	.word	0x2000045c
 80099c8:	0800afb4 	.word	0x0800afb4
 80099cc:	08009f41 	.word	0x08009f41
 80099d0:	20000338 	.word	0x20000338
 80099d4:	20000014 	.word	0x20000014
 80099d8:	20000458 	.word	0x20000458
 80099dc:	20000444 	.word	0x20000444
 80099e0:	2000043c 	.word	0x2000043c

080099e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099e8:	4b04      	ldr	r3, [pc, #16]	; (80099fc <vTaskSuspendAll+0x18>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3301      	adds	r3, #1
 80099ee:	4a03      	ldr	r2, [pc, #12]	; (80099fc <vTaskSuspendAll+0x18>)
 80099f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099f2:	bf00      	nop
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000460 	.word	0x20000460

08009a00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a0e:	4b3b      	ldr	r3, [pc, #236]	; (8009afc <xTaskResumeAll+0xfc>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10a      	bne.n	8009a2c <xTaskResumeAll+0x2c>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	603b      	str	r3, [r7, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a2c:	f000 fe92 	bl	800a754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a30:	4b32      	ldr	r3, [pc, #200]	; (8009afc <xTaskResumeAll+0xfc>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4a31      	ldr	r2, [pc, #196]	; (8009afc <xTaskResumeAll+0xfc>)
 8009a38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a3a:	4b30      	ldr	r3, [pc, #192]	; (8009afc <xTaskResumeAll+0xfc>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d155      	bne.n	8009aee <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a42:	4b2f      	ldr	r3, [pc, #188]	; (8009b00 <xTaskResumeAll+0x100>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d051      	beq.n	8009aee <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a4a:	e02e      	b.n	8009aaa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4c:	4b2d      	ldr	r3, [pc, #180]	; (8009b04 <xTaskResumeAll+0x104>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3318      	adds	r3, #24
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff fa0b 	bl	8008e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fa06 	bl	8008e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	409a      	lsls	r2, r3
 8009a70:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <xTaskResumeAll+0x108>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	4a24      	ldr	r2, [pc, #144]	; (8009b08 <xTaskResumeAll+0x108>)
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4a21      	ldr	r2, [pc, #132]	; (8009b0c <xTaskResumeAll+0x10c>)
 8009a88:	441a      	add	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f7ff f992 	bl	8008dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9a:	4b1d      	ldr	r3, [pc, #116]	; (8009b10 <xTaskResumeAll+0x110>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d302      	bcc.n	8009aaa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009aa4:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <xTaskResumeAll+0x114>)
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aaa:	4b16      	ldr	r3, [pc, #88]	; (8009b04 <xTaskResumeAll+0x104>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1cc      	bne.n	8009a4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ab8:	f000 fad8 	bl	800a06c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009abc:	4b16      	ldr	r3, [pc, #88]	; (8009b18 <xTaskResumeAll+0x118>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d010      	beq.n	8009aea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ac8:	f000 f828 	bl	8009b1c <xTaskIncrementTick>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ad2:	4b10      	ldr	r3, [pc, #64]	; (8009b14 <xTaskResumeAll+0x114>)
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1f1      	bne.n	8009ac8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009ae4:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <xTaskResumeAll+0x118>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009aea:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <xTaskResumeAll+0x114>)
 8009aec:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aee:	f000 fe61 	bl	800a7b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009af2:	687b      	ldr	r3, [r7, #4]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20000460 	.word	0x20000460
 8009b00:	20000438 	.word	0x20000438
 8009b04:	200003f8 	.word	0x200003f8
 8009b08:	20000440 	.word	0x20000440
 8009b0c:	2000033c 	.word	0x2000033c
 8009b10:	20000338 	.word	0x20000338
 8009b14:	2000044c 	.word	0x2000044c
 8009b18:	20000448 	.word	0x20000448

08009b1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b22:	2300      	movs	r3, #0
 8009b24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b26:	4b3f      	ldr	r3, [pc, #252]	; (8009c24 <xTaskIncrementTick+0x108>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d16f      	bne.n	8009c0e <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b2e:	4b3e      	ldr	r3, [pc, #248]	; (8009c28 <xTaskIncrementTick+0x10c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3301      	adds	r3, #1
 8009b34:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b36:	4a3c      	ldr	r2, [pc, #240]	; (8009c28 <xTaskIncrementTick+0x10c>)
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d120      	bne.n	8009b84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b42:	4b3a      	ldr	r3, [pc, #232]	; (8009c2c <xTaskIncrementTick+0x110>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00a      	beq.n	8009b62 <xTaskIncrementTick+0x46>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	603b      	str	r3, [r7, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xTaskIncrementTick+0x44>
 8009b62:	4b32      	ldr	r3, [pc, #200]	; (8009c2c <xTaskIncrementTick+0x110>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	4b31      	ldr	r3, [pc, #196]	; (8009c30 <xTaskIncrementTick+0x114>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a2f      	ldr	r2, [pc, #188]	; (8009c2c <xTaskIncrementTick+0x110>)
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	4a2f      	ldr	r2, [pc, #188]	; (8009c30 <xTaskIncrementTick+0x114>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	4b2f      	ldr	r3, [pc, #188]	; (8009c34 <xTaskIncrementTick+0x118>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	4a2d      	ldr	r2, [pc, #180]	; (8009c34 <xTaskIncrementTick+0x118>)
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	f000 fa74 	bl	800a06c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b84:	4b2c      	ldr	r3, [pc, #176]	; (8009c38 <xTaskIncrementTick+0x11c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d344      	bcc.n	8009c18 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8e:	4b27      	ldr	r3, [pc, #156]	; (8009c2c <xTaskIncrementTick+0x110>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b98:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <xTaskIncrementTick+0x11c>)
 8009b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9e:	601a      	str	r2, [r3, #0]
					break;
 8009ba0:	e03a      	b.n	8009c18 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba2:	4b22      	ldr	r3, [pc, #136]	; (8009c2c <xTaskIncrementTick+0x110>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d203      	bcs.n	8009bc2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bba:	4a1f      	ldr	r2, [pc, #124]	; (8009c38 <xTaskIncrementTick+0x11c>)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bc0:	e02a      	b.n	8009c18 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff f954 	bl	8008e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	3318      	adds	r3, #24
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff f94b 	bl	8008e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	2201      	movs	r2, #1
 8009be4:	409a      	lsls	r2, r3
 8009be6:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <xTaskIncrementTick+0x120>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	4a13      	ldr	r2, [pc, #76]	; (8009c3c <xTaskIncrementTick+0x120>)
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4a10      	ldr	r2, [pc, #64]	; (8009c40 <xTaskIncrementTick+0x124>)
 8009bfe:	441a      	add	r2, r3
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f7ff f8d7 	bl	8008dba <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c0c:	e7bf      	b.n	8009b8e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c0e:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <xTaskIncrementTick+0x128>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3301      	adds	r3, #1
 8009c14:	4a0b      	ldr	r2, [pc, #44]	; (8009c44 <xTaskIncrementTick+0x128>)
 8009c16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c18:	697b      	ldr	r3, [r7, #20]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000460 	.word	0x20000460
 8009c28:	2000043c 	.word	0x2000043c
 8009c2c:	200003f0 	.word	0x200003f0
 8009c30:	200003f4 	.word	0x200003f4
 8009c34:	20000450 	.word	0x20000450
 8009c38:	20000458 	.word	0x20000458
 8009c3c:	20000440 	.word	0x20000440
 8009c40:	2000033c 	.word	0x2000033c
 8009c44:	20000448 	.word	0x20000448

08009c48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c4e:	4b29      	ldr	r3, [pc, #164]	; (8009cf4 <vTaskSwitchContext+0xac>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c56:	4b28      	ldr	r3, [pc, #160]	; (8009cf8 <vTaskSwitchContext+0xb0>)
 8009c58:	2201      	movs	r2, #1
 8009c5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c5c:	e044      	b.n	8009ce8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009c5e:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <vTaskSwitchContext+0xb0>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c64:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <vTaskSwitchContext+0xb4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	fab3 f383 	clz	r3, r3
 8009c70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c72:	7afb      	ldrb	r3, [r7, #11]
 8009c74:	f1c3 031f 	rsb	r3, r3, #31
 8009c78:	617b      	str	r3, [r7, #20]
 8009c7a:	4921      	ldr	r1, [pc, #132]	; (8009d00 <vTaskSwitchContext+0xb8>)
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10a      	bne.n	8009ca4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	607b      	str	r3, [r7, #4]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <vTaskSwitchContext+0x5a>
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4a14      	ldr	r2, [pc, #80]	; (8009d00 <vTaskSwitchContext+0xb8>)
 8009cb0:	4413      	add	r3, r2
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	605a      	str	r2, [r3, #4]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	3308      	adds	r3, #8
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d104      	bne.n	8009cd4 <vTaskSwitchContext+0x8c>
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	605a      	str	r2, [r3, #4]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	4a0a      	ldr	r2, [pc, #40]	; (8009d04 <vTaskSwitchContext+0xbc>)
 8009cdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <vTaskSwitchContext+0xbc>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	334c      	adds	r3, #76	; 0x4c
 8009ce4:	4a08      	ldr	r2, [pc, #32]	; (8009d08 <vTaskSwitchContext+0xc0>)
 8009ce6:	6013      	str	r3, [r2, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	20000460 	.word	0x20000460
 8009cf8:	2000044c 	.word	0x2000044c
 8009cfc:	20000440 	.word	0x20000440
 8009d00:	2000033c 	.word	0x2000033c
 8009d04:	20000338 	.word	0x20000338
 8009d08:	20000014 	.word	0x20000014

08009d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10a      	bne.n	8009d32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60fb      	str	r3, [r7, #12]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <vTaskPlaceOnEventList+0x44>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3318      	adds	r3, #24
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff f861 	bl	8008e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d40:	2101      	movs	r1, #1
 8009d42:	6838      	ldr	r0, [r7, #0]
 8009d44:	f000 fb6e 	bl	800a424 <prvAddCurrentTaskToDelayedList>
}
 8009d48:	bf00      	nop
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000338 	.word	0x20000338

08009d54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	60fb      	str	r3, [r7, #12]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	3318      	adds	r3, #24
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff f875 	bl	8008e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <xTaskRemoveFromEventList+0xac>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d11c      	bne.n	8009dcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	3304      	adds	r3, #4
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff f86c 	bl	8008e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da0:	2201      	movs	r2, #1
 8009da2:	409a      	lsls	r2, r3
 8009da4:	4b17      	ldr	r3, [pc, #92]	; (8009e04 <xTaskRemoveFromEventList+0xb0>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	4a16      	ldr	r2, [pc, #88]	; (8009e04 <xTaskRemoveFromEventList+0xb0>)
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4a13      	ldr	r2, [pc, #76]	; (8009e08 <xTaskRemoveFromEventList+0xb4>)
 8009dbc:	441a      	add	r2, r3
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	f7fe fff8 	bl	8008dba <vListInsertEnd>
 8009dca:	e005      	b.n	8009dd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	3318      	adds	r3, #24
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	480e      	ldr	r0, [pc, #56]	; (8009e0c <xTaskRemoveFromEventList+0xb8>)
 8009dd4:	f7fe fff1 	bl	8008dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ddc:	4b0c      	ldr	r3, [pc, #48]	; (8009e10 <xTaskRemoveFromEventList+0xbc>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d905      	bls.n	8009df2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009de6:	2301      	movs	r3, #1
 8009de8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009dea:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <xTaskRemoveFromEventList+0xc0>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	e001      	b.n	8009df6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009df6:	697b      	ldr	r3, [r7, #20]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20000460 	.word	0x20000460
 8009e04:	20000440 	.word	0x20000440
 8009e08:	2000033c 	.word	0x2000033c
 8009e0c:	200003f8 	.word	0x200003f8
 8009e10:	20000338 	.word	0x20000338
 8009e14:	2000044c 	.word	0x2000044c

08009e18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e20:	4b06      	ldr	r3, [pc, #24]	; (8009e3c <vTaskInternalSetTimeOutState+0x24>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <vTaskInternalSetTimeOutState+0x28>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	605a      	str	r2, [r3, #4]
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	20000450 	.word	0x20000450
 8009e40:	2000043c 	.word	0x2000043c

08009e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	613b      	str	r3, [r7, #16]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	60fb      	str	r3, [r7, #12]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e86:	f000 fc65 	bl	800a754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e8a:	4b24      	ldr	r3, [pc, #144]	; (8009f1c <xTaskCheckForTimeOut+0xd8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8009e9a:	4b21      	ldr	r3, [pc, #132]	; (8009f20 <xTaskCheckForTimeOut+0xdc>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d007      	beq.n	8009eb6 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009ea6:	4b1e      	ldr	r3, [pc, #120]	; (8009f20 <xTaskCheckForTimeOut+0xdc>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				xReturn = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	61fb      	str	r3, [r7, #28]
 8009eb4:	e02b      	b.n	8009f0e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebe:	d102      	bne.n	8009ec6 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	61fb      	str	r3, [r7, #28]
 8009ec4:	e023      	b.n	8009f0e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4b16      	ldr	r3, [pc, #88]	; (8009f24 <xTaskCheckForTimeOut+0xe0>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d007      	beq.n	8009ee2 <xTaskCheckForTimeOut+0x9e>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d302      	bcc.n	8009ee2 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	61fb      	str	r3, [r7, #28]
 8009ee0:	e015      	b.n	8009f0e <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d20b      	bcs.n	8009f04 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	1ad2      	subs	r2, r2, r3
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ff8d 	bl	8009e18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	61fb      	str	r3, [r7, #28]
 8009f02:	e004      	b.n	8009f0e <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f0e:	f000 fc51 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 8009f12:	69fb      	ldr	r3, [r7, #28]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3720      	adds	r7, #32
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	2000043c 	.word	0x2000043c
 8009f20:	20000338 	.word	0x20000338
 8009f24:	20000450 	.word	0x20000450

08009f28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f2c:	4b03      	ldr	r3, [pc, #12]	; (8009f3c <vTaskMissedYield+0x14>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
}
 8009f32:	bf00      	nop
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	2000044c 	.word	0x2000044c

08009f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f48:	f000 f84c 	bl	8009fe4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8009f4c:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <prvIdleTask+0x20>)
 8009f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f5c:	e7f4      	b.n	8009f48 <prvIdleTask+0x8>
 8009f5e:	bf00      	nop
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	e00c      	b.n	8009f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4a12      	ldr	r2, [pc, #72]	; (8009fc4 <prvInitialiseTaskLists+0x60>)
 8009f7c:	4413      	add	r3, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe feee 	bl	8008d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3301      	adds	r3, #1
 8009f88:	607b      	str	r3, [r7, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b06      	cmp	r3, #6
 8009f8e:	d9ef      	bls.n	8009f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f90:	480d      	ldr	r0, [pc, #52]	; (8009fc8 <prvInitialiseTaskLists+0x64>)
 8009f92:	f7fe fee5 	bl	8008d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f96:	480d      	ldr	r0, [pc, #52]	; (8009fcc <prvInitialiseTaskLists+0x68>)
 8009f98:	f7fe fee2 	bl	8008d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f9c:	480c      	ldr	r0, [pc, #48]	; (8009fd0 <prvInitialiseTaskLists+0x6c>)
 8009f9e:	f7fe fedf 	bl	8008d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fa2:	480c      	ldr	r0, [pc, #48]	; (8009fd4 <prvInitialiseTaskLists+0x70>)
 8009fa4:	f7fe fedc 	bl	8008d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fa8:	480b      	ldr	r0, [pc, #44]	; (8009fd8 <prvInitialiseTaskLists+0x74>)
 8009faa:	f7fe fed9 	bl	8008d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fae:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <prvInitialiseTaskLists+0x78>)
 8009fb0:	4a05      	ldr	r2, [pc, #20]	; (8009fc8 <prvInitialiseTaskLists+0x64>)
 8009fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <prvInitialiseTaskLists+0x7c>)
 8009fb6:	4a05      	ldr	r2, [pc, #20]	; (8009fcc <prvInitialiseTaskLists+0x68>)
 8009fb8:	601a      	str	r2, [r3, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	2000033c 	.word	0x2000033c
 8009fc8:	200003c8 	.word	0x200003c8
 8009fcc:	200003dc 	.word	0x200003dc
 8009fd0:	200003f8 	.word	0x200003f8
 8009fd4:	2000040c 	.word	0x2000040c
 8009fd8:	20000424 	.word	0x20000424
 8009fdc:	200003f0 	.word	0x200003f0
 8009fe0:	200003f4 	.word	0x200003f4

08009fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fea:	e019      	b.n	800a020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009fec:	f000 fbb2 	bl	800a754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff0:	4b10      	ldr	r3, [pc, #64]	; (800a034 <prvCheckTasksWaitingTermination+0x50>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe ff39 	bl	8008e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a002:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <prvCheckTasksWaitingTermination+0x54>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3b01      	subs	r3, #1
 800a008:	4a0b      	ldr	r2, [pc, #44]	; (800a038 <prvCheckTasksWaitingTermination+0x54>)
 800a00a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a00c:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <prvCheckTasksWaitingTermination+0x58>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3b01      	subs	r3, #1
 800a012:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <prvCheckTasksWaitingTermination+0x58>)
 800a014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a016:	f000 fbcd 	bl	800a7b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f810 	bl	800a040 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a020:	4b06      	ldr	r3, [pc, #24]	; (800a03c <prvCheckTasksWaitingTermination+0x58>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e1      	bne.n	8009fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	2000040c 	.word	0x2000040c
 800a038:	20000438 	.word	0x20000438
 800a03c:	20000420 	.word	0x20000420

0800a040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	334c      	adds	r3, #76	; 0x4c
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 feb5 	bl	800adbc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	4618      	mov	r0, r3
 800a058:	f000 fd2a 	bl	800aab0 <vPortFree>
			vPortFree( pxTCB );
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fd27 	bl	800aab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a072:	4b0c      	ldr	r3, [pc, #48]	; (800a0a4 <prvResetNextTaskUnblockTime+0x38>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d104      	bne.n	800a086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a07c:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a07e:	f04f 32ff 	mov.w	r2, #4294967295
 800a082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a084:	e008      	b.n	800a098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a086:	4b07      	ldr	r3, [pc, #28]	; (800a0a4 <prvResetNextTaskUnblockTime+0x38>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	4a04      	ldr	r2, [pc, #16]	; (800a0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a096:	6013      	str	r3, [r2, #0]
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	200003f0 	.word	0x200003f0
 800a0a8:	20000458 	.word	0x20000458

0800a0ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <xTaskGetSchedulerState+0x34>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	e008      	b.n	800a0d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0c0:	4b08      	ldr	r3, [pc, #32]	; (800a0e4 <xTaskGetSchedulerState+0x38>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e001      	b.n	800a0d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0d2:	687b      	ldr	r3, [r7, #4]
	}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	20000444 	.word	0x20000444
 800a0e4:	20000460 	.word	0x20000460

0800a0e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d05e      	beq.n	800a1bc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a102:	4b31      	ldr	r3, [pc, #196]	; (800a1c8 <xTaskPriorityInherit+0xe0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	429a      	cmp	r2, r3
 800a10a:	d24e      	bcs.n	800a1aa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	2b00      	cmp	r3, #0
 800a112:	db06      	blt.n	800a122 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a114:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <xTaskPriorityInherit+0xe0>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	f1c3 0207 	rsb	r2, r3, #7
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6959      	ldr	r1, [r3, #20]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a12a:	4613      	mov	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4a26      	ldr	r2, [pc, #152]	; (800a1cc <xTaskPriorityInherit+0xe4>)
 800a134:	4413      	add	r3, r2
 800a136:	4299      	cmp	r1, r3
 800a138:	d12f      	bne.n	800a19a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fe98 	bl	8008e74 <uxListRemove>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	2201      	movs	r2, #1
 800a150:	fa02 f303 	lsl.w	r3, r2, r3
 800a154:	43da      	mvns	r2, r3
 800a156:	4b1e      	ldr	r3, [pc, #120]	; (800a1d0 <xTaskPriorityInherit+0xe8>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4013      	ands	r3, r2
 800a15c:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <xTaskPriorityInherit+0xe8>)
 800a15e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a160:	4b19      	ldr	r3, [pc, #100]	; (800a1c8 <xTaskPriorityInherit+0xe0>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	2201      	movs	r2, #1
 800a170:	409a      	lsls	r2, r3
 800a172:	4b17      	ldr	r3, [pc, #92]	; (800a1d0 <xTaskPriorityInherit+0xe8>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4313      	orrs	r3, r2
 800a178:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <xTaskPriorityInherit+0xe8>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a180:	4613      	mov	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4a10      	ldr	r2, [pc, #64]	; (800a1cc <xTaskPriorityInherit+0xe4>)
 800a18a:	441a      	add	r2, r3
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	3304      	adds	r3, #4
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f7fe fe11 	bl	8008dba <vListInsertEnd>
 800a198:	e004      	b.n	800a1a4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a19a:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <xTaskPriorityInherit+0xe0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e008      	b.n	800a1bc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ae:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <xTaskPriorityInherit+0xe0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d201      	bcs.n	800a1bc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
	}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000338 	.word	0x20000338
 800a1cc:	2000033c 	.word	0x2000033c
 800a1d0:	20000440 	.word	0x20000440

0800a1d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d06e      	beq.n	800a2c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a1ea:	4b3a      	ldr	r3, [pc, #232]	; (800a2d4 <xTaskPriorityDisinherit+0x100>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d00a      	beq.n	800a20a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	60fb      	str	r3, [r7, #12]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	60bb      	str	r3, [r7, #8]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a22c:	1e5a      	subs	r2, r3, #1
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d044      	beq.n	800a2c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a242:	2b00      	cmp	r3, #0
 800a244:	d140      	bne.n	800a2c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	3304      	adds	r3, #4
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fe12 	bl	8008e74 <uxListRemove>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d115      	bne.n	800a282 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25a:	491f      	ldr	r1, [pc, #124]	; (800a2d8 <xTaskPriorityDisinherit+0x104>)
 800a25c:	4613      	mov	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xTaskPriorityDisinherit+0xae>
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	2201      	movs	r2, #1
 800a272:	fa02 f303 	lsl.w	r3, r2, r3
 800a276:	43da      	mvns	r2, r3
 800a278:	4b18      	ldr	r3, [pc, #96]	; (800a2dc <xTaskPriorityDisinherit+0x108>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4013      	ands	r3, r2
 800a27e:	4a17      	ldr	r2, [pc, #92]	; (800a2dc <xTaskPriorityDisinherit+0x108>)
 800a280:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	f1c3 0207 	rsb	r2, r3, #7
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29a:	2201      	movs	r2, #1
 800a29c:	409a      	lsls	r2, r3
 800a29e:	4b0f      	ldr	r3, [pc, #60]	; (800a2dc <xTaskPriorityDisinherit+0x108>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	4a0d      	ldr	r2, [pc, #52]	; (800a2dc <xTaskPriorityDisinherit+0x108>)
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4a08      	ldr	r2, [pc, #32]	; (800a2d8 <xTaskPriorityDisinherit+0x104>)
 800a2b6:	441a      	add	r2, r3
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7fe fd7b 	bl	8008dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2c8:	697b      	ldr	r3, [r7, #20]
	}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000338 	.word	0x20000338
 800a2d8:	2000033c 	.word	0x2000033c
 800a2dc:	20000440 	.word	0x20000440

0800a2e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d077      	beq.n	800a3e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	60fb      	str	r3, [r7, #12]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d902      	bls.n	800a326 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	61fb      	str	r3, [r7, #28]
 800a324:	e002      	b.n	800a32c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	69fa      	ldr	r2, [r7, #28]
 800a332:	429a      	cmp	r2, r3
 800a334:	d058      	beq.n	800a3e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d153      	bne.n	800a3e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a340:	4b2b      	ldr	r3, [pc, #172]	; (800a3f0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	429a      	cmp	r2, r3
 800a348:	d10a      	bne.n	800a360 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	60bb      	str	r3, [r7, #8]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	db04      	blt.n	800a37e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	f1c3 0207 	rsb	r2, r3, #7
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	6959      	ldr	r1, [r3, #20]
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4a19      	ldr	r2, [pc, #100]	; (800a3f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a38e:	4413      	add	r3, r2
 800a390:	4299      	cmp	r1, r3
 800a392:	d129      	bne.n	800a3e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	3304      	adds	r3, #4
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fd6b 	bl	8008e74 <uxListRemove>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ae:	43da      	mvns	r2, r3
 800a3b0:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	4a10      	ldr	r2, [pc, #64]	; (800a3f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a3b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3be:	2201      	movs	r2, #1
 800a3c0:	409a      	lsls	r2, r3
 800a3c2:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	4a0b      	ldr	r2, [pc, #44]	; (800a3f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4a06      	ldr	r2, [pc, #24]	; (800a3f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a3da:	441a      	add	r2, r3
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	f7fe fce9 	bl	8008dba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3e8:	bf00      	nop
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000338 	.word	0x20000338
 800a3f4:	2000033c 	.word	0x2000033c
 800a3f8:	20000440 	.word	0x20000440

0800a3fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a3fc:	b480      	push	{r7}
 800a3fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <pvTaskIncrementMutexHeldCount+0x24>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d004      	beq.n	800a412 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <pvTaskIncrementMutexHeldCount+0x24>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a40e:	3201      	adds	r2, #1
 800a410:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a412:	4b03      	ldr	r3, [pc, #12]	; (800a420 <pvTaskIncrementMutexHeldCount+0x24>)
 800a414:	681b      	ldr	r3, [r3, #0]
	}
 800a416:	4618      	mov	r0, r3
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20000338 	.word	0x20000338

0800a424 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a42e:	4b2b      	ldr	r3, [pc, #172]	; (800a4dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a434:	4b2a      	ldr	r3, [pc, #168]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43e:	4b28      	ldr	r3, [pc, #160]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3304      	adds	r3, #4
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fd15 	bl	8008e74 <uxListRemove>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10b      	bne.n	800a468 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a450:	4b23      	ldr	r3, [pc, #140]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a456:	2201      	movs	r2, #1
 800a458:	fa02 f303 	lsl.w	r3, r2, r3
 800a45c:	43da      	mvns	r2, r3
 800a45e:	4b21      	ldr	r3, [pc, #132]	; (800a4e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4013      	ands	r3, r2
 800a464:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a466:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46e:	d10a      	bne.n	800a486 <prvAddCurrentTaskToDelayedList+0x62>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d007      	beq.n	800a486 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a476:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	481a      	ldr	r0, [pc, #104]	; (800a4e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a480:	f7fe fc9b 	bl	8008dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a484:	e026      	b.n	800a4d4 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a48e:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d209      	bcs.n	800a4b2 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	f7fe fca9 	bl	8008e02 <vListInsert>
}
 800a4b0:	e010      	b.n	800a4d4 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4b2:	4b0f      	ldr	r3, [pc, #60]	; (800a4f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4610      	mov	r0, r2
 800a4c0:	f7fe fc9f 	bl	8008e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4c4:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d202      	bcs.n	800a4d4 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800a4ce:	4a09      	ldr	r2, [pc, #36]	; (800a4f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	6013      	str	r3, [r2, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	2000043c 	.word	0x2000043c
 800a4e0:	20000338 	.word	0x20000338
 800a4e4:	20000440 	.word	0x20000440
 800a4e8:	20000424 	.word	0x20000424
 800a4ec:	200003f4 	.word	0x200003f4
 800a4f0:	200003f0 	.word	0x200003f0
 800a4f4:	20000458 	.word	0x20000458

0800a4f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	3b04      	subs	r3, #4
 800a508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3b04      	subs	r3, #4
 800a516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f023 0201 	bic.w	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3b04      	subs	r3, #4
 800a526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a528:	4a0c      	ldr	r2, [pc, #48]	; (800a55c <pxPortInitialiseStack+0x64>)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3b14      	subs	r3, #20
 800a532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3b04      	subs	r3, #4
 800a53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f06f 0202 	mvn.w	r2, #2
 800a546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3b20      	subs	r3, #32
 800a54c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a54e:	68fb      	ldr	r3, [r7, #12]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	0800a561 	.word	0x0800a561

0800a560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a56a:	4b12      	ldr	r3, [pc, #72]	; (800a5b4 <prvTaskExitError+0x54>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a572:	d00a      	beq.n	800a58a <prvTaskExitError+0x2a>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	60fb      	str	r3, [r7, #12]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <prvTaskExitError+0x28>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	60bb      	str	r3, [r7, #8]
}
 800a59c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a59e:	bf00      	nop
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0fc      	beq.n	800a5a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5a6:	bf00      	nop
 800a5a8:	bf00      	nop
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	20000010 	.word	0x20000010
	...

0800a5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <pxCurrentTCBConst2>)
 800a5c2:	6819      	ldr	r1, [r3, #0]
 800a5c4:	6808      	ldr	r0, [r1, #0]
 800a5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	f380 8809 	msr	PSP, r0
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f380 8811 	msr	BASEPRI, r0
 800a5da:	4770      	bx	lr
 800a5dc:	f3af 8000 	nop.w

0800a5e0 <pxCurrentTCBConst2>:
 800a5e0:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop

0800a5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5e8:	4808      	ldr	r0, [pc, #32]	; (800a60c <prvPortStartFirstTask+0x24>)
 800a5ea:	6800      	ldr	r0, [r0, #0]
 800a5ec:	6800      	ldr	r0, [r0, #0]
 800a5ee:	f380 8808 	msr	MSP, r0
 800a5f2:	f04f 0000 	mov.w	r0, #0
 800a5f6:	f380 8814 	msr	CONTROL, r0
 800a5fa:	b662      	cpsie	i
 800a5fc:	b661      	cpsie	f
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	df00      	svc	0
 800a608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a60a:	bf00      	nop
 800a60c:	e000ed08 	.word	0xe000ed08

0800a610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a616:	4b46      	ldr	r3, [pc, #280]	; (800a730 <xPortStartScheduler+0x120>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a46      	ldr	r2, [pc, #280]	; (800a734 <xPortStartScheduler+0x124>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10a      	bne.n	800a636 <xPortStartScheduler+0x26>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a636:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <xPortStartScheduler+0x120>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a3f      	ldr	r2, [pc, #252]	; (800a738 <xPortStartScheduler+0x128>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d10a      	bne.n	800a656 <xPortStartScheduler+0x46>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	60fb      	str	r3, [r7, #12]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a656:	4b39      	ldr	r3, [pc, #228]	; (800a73c <xPortStartScheduler+0x12c>)
 800a658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	4b31      	ldr	r3, [pc, #196]	; (800a740 <xPortStartScheduler+0x130>)
 800a67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a67e:	4b31      	ldr	r3, [pc, #196]	; (800a744 <xPortStartScheduler+0x134>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a684:	e009      	b.n	800a69a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a686:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <xPortStartScheduler+0x134>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	4a2d      	ldr	r2, [pc, #180]	; (800a744 <xPortStartScheduler+0x134>)
 800a68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	b2db      	uxtb	r3, r3
 800a698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d0ef      	beq.n	800a686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6a6:	4b27      	ldr	r3, [pc, #156]	; (800a744 <xPortStartScheduler+0x134>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f1c3 0307 	rsb	r3, r3, #7
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d00a      	beq.n	800a6c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	60bb      	str	r3, [r7, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <xPortStartScheduler+0x134>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6da:	4a1a      	ldr	r2, [pc, #104]	; (800a744 <xPortStartScheduler+0x134>)
 800a6dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6e6:	4b18      	ldr	r3, [pc, #96]	; (800a748 <xPortStartScheduler+0x138>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a17      	ldr	r2, [pc, #92]	; (800a748 <xPortStartScheduler+0x138>)
 800a6ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a14      	ldr	r2, [pc, #80]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6fe:	f000 f8dd 	bl	800a8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a702:	4b12      	ldr	r3, [pc, #72]	; (800a74c <xPortStartScheduler+0x13c>)
 800a704:	2200      	movs	r2, #0
 800a706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a708:	f000 f8fc 	bl	800a904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a70c:	4b10      	ldr	r3, [pc, #64]	; (800a750 <xPortStartScheduler+0x140>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0f      	ldr	r2, [pc, #60]	; (800a750 <xPortStartScheduler+0x140>)
 800a712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a718:	f7ff ff66 	bl	800a5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a71c:	f7ff fa94 	bl	8009c48 <vTaskSwitchContext>
	prvTaskExitError();
 800a720:	f7ff ff1e 	bl	800a560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	e000ed00 	.word	0xe000ed00
 800a734:	410fc271 	.word	0x410fc271
 800a738:	410fc270 	.word	0x410fc270
 800a73c:	e000e400 	.word	0xe000e400
 800a740:	20000464 	.word	0x20000464
 800a744:	20000468 	.word	0x20000468
 800a748:	e000ed20 	.word	0xe000ed20
 800a74c:	20000010 	.word	0x20000010
 800a750:	e000ef34 	.word	0xe000ef34

0800a754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	607b      	str	r3, [r7, #4]
}
 800a76c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <vPortEnterCritical+0x58>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a0d      	ldr	r2, [pc, #52]	; (800a7ac <vPortEnterCritical+0x58>)
 800a776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a778:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <vPortEnterCritical+0x58>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10f      	bne.n	800a7a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <vPortEnterCritical+0x5c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	603b      	str	r3, [r7, #0]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <vPortEnterCritical+0x4a>
	}
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	20000010 	.word	0x20000010
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7ba:	4b12      	ldr	r3, [pc, #72]	; (800a804 <vPortExitCritical+0x50>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10a      	bne.n	800a7d8 <vPortExitCritical+0x24>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	607b      	str	r3, [r7, #4]
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <vPortExitCritical+0x50>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4a09      	ldr	r2, [pc, #36]	; (800a804 <vPortExitCritical+0x50>)
 800a7e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7e2:	4b08      	ldr	r3, [pc, #32]	; (800a804 <vPortExitCritical+0x50>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <vPortExitCritical+0x42>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a7f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000010 	.word	0x20000010
	...

0800a810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a810:	f3ef 8009 	mrs	r0, PSP
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	4b15      	ldr	r3, [pc, #84]	; (800a870 <pxCurrentTCBConst>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	f01e 0f10 	tst.w	lr, #16
 800a820:	bf08      	it	eq
 800a822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	6010      	str	r0, [r2, #0]
 800a82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a834:	f380 8811 	msr	BASEPRI, r0
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f7ff fa02 	bl	8009c48 <vTaskSwitchContext>
 800a844:	f04f 0000 	mov.w	r0, #0
 800a848:	f380 8811 	msr	BASEPRI, r0
 800a84c:	bc09      	pop	{r0, r3}
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	6808      	ldr	r0, [r1, #0]
 800a852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a856:	f01e 0f10 	tst.w	lr, #16
 800a85a:	bf08      	it	eq
 800a85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a860:	f380 8809 	msr	PSP, r0
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst>:
 800a870:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	607b      	str	r3, [r7, #4]
}
 800a890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a892:	f7ff f943 	bl	8009b1c <xTaskIncrementTick>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <SysTick_Handler+0x40>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f383 8811 	msr	BASEPRI, r3
}
 800a8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <vPortSetupTimerInterrupt+0x38>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <vPortSetupTimerInterrupt+0x3c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <vPortSetupTimerInterrupt+0x40>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	099b      	lsrs	r3, r3, #6
 800a8d8:	4a09      	ldr	r2, [pc, #36]	; (800a900 <vPortSetupTimerInterrupt+0x44>)
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	e000e010 	.word	0xe000e010
 800a8f4:	e000e018 	.word	0xe000e018
 800a8f8:	20000004 	.word	0x20000004
 800a8fc:	10624dd3 	.word	0x10624dd3
 800a900:	e000e014 	.word	0xe000e014

0800a904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a914 <vPortEnableVFP+0x10>
 800a908:	6801      	ldr	r1, [r0, #0]
 800a90a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a90e:	6001      	str	r1, [r0, #0]
 800a910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a912:	bf00      	nop
 800a914:	e000ed88 	.word	0xe000ed88

0800a918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a920:	2300      	movs	r3, #0
 800a922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a924:	f7ff f85e 	bl	80099e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a928:	4b5b      	ldr	r3, [pc, #364]	; (800aa98 <pvPortMalloc+0x180>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a930:	f000 f920 	bl	800ab74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a934:	4b59      	ldr	r3, [pc, #356]	; (800aa9c <pvPortMalloc+0x184>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4013      	ands	r3, r2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f040 8093 	bne.w	800aa68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01d      	beq.n	800a984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a948:	2208      	movs	r2, #8
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4413      	add	r3, r2
 800a94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	2b00      	cmp	r3, #0
 800a958:	d014      	beq.n	800a984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f023 0307 	bic.w	r3, r3, #7
 800a960:	3308      	adds	r3, #8
 800a962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <pvPortMalloc+0x6c>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	617b      	str	r3, [r7, #20]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d06e      	beq.n	800aa68 <pvPortMalloc+0x150>
 800a98a:	4b45      	ldr	r3, [pc, #276]	; (800aaa0 <pvPortMalloc+0x188>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	d869      	bhi.n	800aa68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a994:	4b43      	ldr	r3, [pc, #268]	; (800aaa4 <pvPortMalloc+0x18c>)
 800a996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a998:	4b42      	ldr	r3, [pc, #264]	; (800aaa4 <pvPortMalloc+0x18c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a99e:	e004      	b.n	800a9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d903      	bls.n	800a9bc <pvPortMalloc+0xa4>
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1f1      	bne.n	800a9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9bc:	4b36      	ldr	r3, [pc, #216]	; (800aa98 <pvPortMalloc+0x180>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d050      	beq.n	800aa68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2208      	movs	r2, #8
 800a9cc:	4413      	add	r3, r2
 800a9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	1ad2      	subs	r2, r2, r3
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d91f      	bls.n	800aa28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	f003 0307 	and.w	r3, r3, #7
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <pvPortMalloc+0xf8>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	613b      	str	r3, [r7, #16]
}
 800aa0c:	bf00      	nop
 800aa0e:	e7fe      	b.n	800aa0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	1ad2      	subs	r2, r2, r3
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa22:	69b8      	ldr	r0, [r7, #24]
 800aa24:	f000 f908 	bl	800ac38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa28:	4b1d      	ldr	r3, [pc, #116]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	4a1b      	ldr	r2, [pc, #108]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa36:	4b1a      	ldr	r3, [pc, #104]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	4b1b      	ldr	r3, [pc, #108]	; (800aaa8 <pvPortMalloc+0x190>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d203      	bcs.n	800aa4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa42:	4b17      	ldr	r3, [pc, #92]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a18      	ldr	r2, [pc, #96]	; (800aaa8 <pvPortMalloc+0x190>)
 800aa48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <pvPortMalloc+0x184>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	431a      	orrs	r2, r3
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa5e:	4b13      	ldr	r3, [pc, #76]	; (800aaac <pvPortMalloc+0x194>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3301      	adds	r3, #1
 800aa64:	4a11      	ldr	r2, [pc, #68]	; (800aaac <pvPortMalloc+0x194>)
 800aa66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa68:	f7fe ffca 	bl	8009a00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	f003 0307 	and.w	r3, r3, #7
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <pvPortMalloc+0x174>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	60fb      	str	r3, [r7, #12]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <pvPortMalloc+0x172>
	return pvReturn;
 800aa8c:	69fb      	ldr	r3, [r7, #28]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3728      	adds	r7, #40	; 0x28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20001c74 	.word	0x20001c74
 800aa9c:	20001c88 	.word	0x20001c88
 800aaa0:	20001c78 	.word	0x20001c78
 800aaa4:	20001c6c 	.word	0x20001c6c
 800aaa8:	20001c7c 	.word	0x20001c7c
 800aaac:	20001c80 	.word	0x20001c80

0800aab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d04d      	beq.n	800ab5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aac2:	2308      	movs	r3, #8
 800aac4:	425b      	negs	r3, r3
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4413      	add	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	4b24      	ldr	r3, [pc, #144]	; (800ab68 <vPortFree+0xb8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4013      	ands	r3, r2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <vPortFree+0x44>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <vPortFree+0x62>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	60bb      	str	r3, [r7, #8]
}
 800ab0e:	bf00      	nop
 800ab10:	e7fe      	b.n	800ab10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	685a      	ldr	r2, [r3, #4]
 800ab16:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <vPortFree+0xb8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d01e      	beq.n	800ab5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11a      	bne.n	800ab5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <vPortFree+0xb8>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	43db      	mvns	r3, r3
 800ab32:	401a      	ands	r2, r3
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab38:	f7fe ff54 	bl	80099e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <vPortFree+0xbc>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4413      	add	r3, r2
 800ab46:	4a09      	ldr	r2, [pc, #36]	; (800ab6c <vPortFree+0xbc>)
 800ab48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab4a:	6938      	ldr	r0, [r7, #16]
 800ab4c:	f000 f874 	bl	800ac38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <vPortFree+0xc0>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3301      	adds	r3, #1
 800ab56:	4a06      	ldr	r2, [pc, #24]	; (800ab70 <vPortFree+0xc0>)
 800ab58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab5a:	f7fe ff51 	bl	8009a00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab5e:	bf00      	nop
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20001c88 	.word	0x20001c88
 800ab6c:	20001c78 	.word	0x20001c78
 800ab70:	20001c84 	.word	0x20001c84

0800ab74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ab7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab80:	4b27      	ldr	r3, [pc, #156]	; (800ac20 <prvHeapInit+0xac>)
 800ab82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00c      	beq.n	800aba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3307      	adds	r3, #7
 800ab92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f023 0307 	bic.w	r3, r3, #7
 800ab9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	4a1f      	ldr	r2, [pc, #124]	; (800ac20 <prvHeapInit+0xac>)
 800aba4:	4413      	add	r3, r2
 800aba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abac:	4a1d      	ldr	r2, [pc, #116]	; (800ac24 <prvHeapInit+0xb0>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abb2:	4b1c      	ldr	r3, [pc, #112]	; (800ac24 <prvHeapInit+0xb0>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4413      	add	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abc0:	2208      	movs	r2, #8
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0307 	bic.w	r3, r3, #7
 800abce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a15      	ldr	r2, [pc, #84]	; (800ac28 <prvHeapInit+0xb4>)
 800abd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <prvHeapInit+0xb4>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2200      	movs	r2, #0
 800abdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abde:	4b12      	ldr	r3, [pc, #72]	; (800ac28 <prvHeapInit+0xb4>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	1ad2      	subs	r2, r2, r3
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abf4:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <prvHeapInit+0xb4>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4a0a      	ldr	r2, [pc, #40]	; (800ac2c <prvHeapInit+0xb8>)
 800ac02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <prvHeapInit+0xbc>)
 800ac0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac0c:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <prvHeapInit+0xc0>)
 800ac0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac12:	601a      	str	r2, [r3, #0]
}
 800ac14:	bf00      	nop
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	2000046c 	.word	0x2000046c
 800ac24:	20001c6c 	.word	0x20001c6c
 800ac28:	20001c74 	.word	0x20001c74
 800ac2c:	20001c7c 	.word	0x20001c7c
 800ac30:	20001c78 	.word	0x20001c78
 800ac34:	20001c88 	.word	0x20001c88

0800ac38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac40:	4b28      	ldr	r3, [pc, #160]	; (800ace4 <prvInsertBlockIntoFreeList+0xac>)
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	e002      	b.n	800ac4c <prvInsertBlockIntoFreeList+0x14>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d8f7      	bhi.n	800ac46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	4413      	add	r3, r2
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d108      	bne.n	800ac7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	441a      	add	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	441a      	add	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d118      	bne.n	800acc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b15      	ldr	r3, [pc, #84]	; (800ace8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d00d      	beq.n	800acb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	441a      	add	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	e008      	b.n	800acc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acb6:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <prvInsertBlockIntoFreeList+0xb0>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	e003      	b.n	800acc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	429a      	cmp	r2, r3
 800acce:	d002      	beq.n	800acd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acd6:	bf00      	nop
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	20001c6c 	.word	0x20001c6c
 800ace8:	20001c74 	.word	0x20001c74

0800acec <arm_pid_init_f32>:
 800acec:	edd0 6a08 	vldr	s13, [r0, #32]
 800acf0:	edd0 7a06 	vldr	s15, [r0, #24]
 800acf4:	ed90 7a07 	vldr	s14, [r0, #28]
 800acf8:	edc0 6a02 	vstr	s13, [r0, #8]
 800acfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad00:	ee36 6aa6 	vadd.f32	s12, s13, s13
 800ad04:	eef1 7a67 	vneg.f32	s15, s15
 800ad08:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ad0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ad10:	ed80 7a00 	vstr	s14, [r0]
 800ad14:	edc0 7a01 	vstr	s15, [r0, #4]
 800ad18:	b901      	cbnz	r1, 800ad1c <arm_pid_init_f32+0x30>
 800ad1a:	4770      	bx	lr
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60c3      	str	r3, [r0, #12]
 800ad20:	6103      	str	r3, [r0, #16]
 800ad22:	6143      	str	r3, [r0, #20]
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop

0800ad28 <__libc_init_array>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	4d0d      	ldr	r5, [pc, #52]	; (800ad60 <__libc_init_array+0x38>)
 800ad2c:	4c0d      	ldr	r4, [pc, #52]	; (800ad64 <__libc_init_array+0x3c>)
 800ad2e:	1b64      	subs	r4, r4, r5
 800ad30:	10a4      	asrs	r4, r4, #2
 800ad32:	2600      	movs	r6, #0
 800ad34:	42a6      	cmp	r6, r4
 800ad36:	d109      	bne.n	800ad4c <__libc_init_array+0x24>
 800ad38:	4d0b      	ldr	r5, [pc, #44]	; (800ad68 <__libc_init_array+0x40>)
 800ad3a:	4c0c      	ldr	r4, [pc, #48]	; (800ad6c <__libc_init_array+0x44>)
 800ad3c:	f000 f8f2 	bl	800af24 <_init>
 800ad40:	1b64      	subs	r4, r4, r5
 800ad42:	10a4      	asrs	r4, r4, #2
 800ad44:	2600      	movs	r6, #0
 800ad46:	42a6      	cmp	r6, r4
 800ad48:	d105      	bne.n	800ad56 <__libc_init_array+0x2e>
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad50:	4798      	blx	r3
 800ad52:	3601      	adds	r6, #1
 800ad54:	e7ee      	b.n	800ad34 <__libc_init_array+0xc>
 800ad56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad5a:	4798      	blx	r3
 800ad5c:	3601      	adds	r6, #1
 800ad5e:	e7f2      	b.n	800ad46 <__libc_init_array+0x1e>
 800ad60:	0800b034 	.word	0x0800b034
 800ad64:	0800b034 	.word	0x0800b034
 800ad68:	0800b034 	.word	0x0800b034
 800ad6c:	0800b038 	.word	0x0800b038

0800ad70 <__retarget_lock_acquire_recursive>:
 800ad70:	4770      	bx	lr

0800ad72 <__retarget_lock_release_recursive>:
 800ad72:	4770      	bx	lr

0800ad74 <memcpy>:
 800ad74:	440a      	add	r2, r1
 800ad76:	4291      	cmp	r1, r2
 800ad78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad7c:	d100      	bne.n	800ad80 <memcpy+0xc>
 800ad7e:	4770      	bx	lr
 800ad80:	b510      	push	{r4, lr}
 800ad82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad8a:	4291      	cmp	r1, r2
 800ad8c:	d1f9      	bne.n	800ad82 <memcpy+0xe>
 800ad8e:	bd10      	pop	{r4, pc}

0800ad90 <memset>:
 800ad90:	4402      	add	r2, r0
 800ad92:	4603      	mov	r3, r0
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d100      	bne.n	800ad9a <memset+0xa>
 800ad98:	4770      	bx	lr
 800ad9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9e:	e7f9      	b.n	800ad94 <memset+0x4>

0800ada0 <cleanup_glue>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	460c      	mov	r4, r1
 800ada4:	6809      	ldr	r1, [r1, #0]
 800ada6:	4605      	mov	r5, r0
 800ada8:	b109      	cbz	r1, 800adae <cleanup_glue+0xe>
 800adaa:	f7ff fff9 	bl	800ada0 <cleanup_glue>
 800adae:	4621      	mov	r1, r4
 800adb0:	4628      	mov	r0, r5
 800adb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adb6:	f000 b869 	b.w	800ae8c <_free_r>
	...

0800adbc <_reclaim_reent>:
 800adbc:	4b2c      	ldr	r3, [pc, #176]	; (800ae70 <_reclaim_reent+0xb4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4283      	cmp	r3, r0
 800adc2:	b570      	push	{r4, r5, r6, lr}
 800adc4:	4604      	mov	r4, r0
 800adc6:	d051      	beq.n	800ae6c <_reclaim_reent+0xb0>
 800adc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800adca:	b143      	cbz	r3, 800adde <_reclaim_reent+0x22>
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d14a      	bne.n	800ae68 <_reclaim_reent+0xac>
 800add2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800add4:	6819      	ldr	r1, [r3, #0]
 800add6:	b111      	cbz	r1, 800adde <_reclaim_reent+0x22>
 800add8:	4620      	mov	r0, r4
 800adda:	f000 f857 	bl	800ae8c <_free_r>
 800adde:	6961      	ldr	r1, [r4, #20]
 800ade0:	b111      	cbz	r1, 800ade8 <_reclaim_reent+0x2c>
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 f852 	bl	800ae8c <_free_r>
 800ade8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800adea:	b111      	cbz	r1, 800adf2 <_reclaim_reent+0x36>
 800adec:	4620      	mov	r0, r4
 800adee:	f000 f84d 	bl	800ae8c <_free_r>
 800adf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800adf4:	b111      	cbz	r1, 800adfc <_reclaim_reent+0x40>
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 f848 	bl	800ae8c <_free_r>
 800adfc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800adfe:	b111      	cbz	r1, 800ae06 <_reclaim_reent+0x4a>
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 f843 	bl	800ae8c <_free_r>
 800ae06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ae08:	b111      	cbz	r1, 800ae10 <_reclaim_reent+0x54>
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 f83e 	bl	800ae8c <_free_r>
 800ae10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ae12:	b111      	cbz	r1, 800ae1a <_reclaim_reent+0x5e>
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 f839 	bl	800ae8c <_free_r>
 800ae1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ae1c:	b111      	cbz	r1, 800ae24 <_reclaim_reent+0x68>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 f834 	bl	800ae8c <_free_r>
 800ae24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae26:	b111      	cbz	r1, 800ae2e <_reclaim_reent+0x72>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 f82f 	bl	800ae8c <_free_r>
 800ae2e:	69a3      	ldr	r3, [r4, #24]
 800ae30:	b1e3      	cbz	r3, 800ae6c <_reclaim_reent+0xb0>
 800ae32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae34:	4620      	mov	r0, r4
 800ae36:	4798      	blx	r3
 800ae38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ae3a:	b1b9      	cbz	r1, 800ae6c <_reclaim_reent+0xb0>
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae42:	f7ff bfad 	b.w	800ada0 <cleanup_glue>
 800ae46:	5949      	ldr	r1, [r1, r5]
 800ae48:	b941      	cbnz	r1, 800ae5c <_reclaim_reent+0xa0>
 800ae4a:	3504      	adds	r5, #4
 800ae4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae4e:	2d80      	cmp	r5, #128	; 0x80
 800ae50:	68d9      	ldr	r1, [r3, #12]
 800ae52:	d1f8      	bne.n	800ae46 <_reclaim_reent+0x8a>
 800ae54:	4620      	mov	r0, r4
 800ae56:	f000 f819 	bl	800ae8c <_free_r>
 800ae5a:	e7ba      	b.n	800add2 <_reclaim_reent+0x16>
 800ae5c:	680e      	ldr	r6, [r1, #0]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 f814 	bl	800ae8c <_free_r>
 800ae64:	4631      	mov	r1, r6
 800ae66:	e7ef      	b.n	800ae48 <_reclaim_reent+0x8c>
 800ae68:	2500      	movs	r5, #0
 800ae6a:	e7ef      	b.n	800ae4c <_reclaim_reent+0x90>
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000014 	.word	0x20000014

0800ae74 <__malloc_lock>:
 800ae74:	4801      	ldr	r0, [pc, #4]	; (800ae7c <__malloc_lock+0x8>)
 800ae76:	f7ff bf7b 	b.w	800ad70 <__retarget_lock_acquire_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	20001c8c 	.word	0x20001c8c

0800ae80 <__malloc_unlock>:
 800ae80:	4801      	ldr	r0, [pc, #4]	; (800ae88 <__malloc_unlock+0x8>)
 800ae82:	f7ff bf76 	b.w	800ad72 <__retarget_lock_release_recursive>
 800ae86:	bf00      	nop
 800ae88:	20001c8c 	.word	0x20001c8c

0800ae8c <_free_r>:
 800ae8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae8e:	2900      	cmp	r1, #0
 800ae90:	d044      	beq.n	800af1c <_free_r+0x90>
 800ae92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae96:	9001      	str	r0, [sp, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae9e:	bfb8      	it	lt
 800aea0:	18e4      	addlt	r4, r4, r3
 800aea2:	f7ff ffe7 	bl	800ae74 <__malloc_lock>
 800aea6:	4a1e      	ldr	r2, [pc, #120]	; (800af20 <_free_r+0x94>)
 800aea8:	9801      	ldr	r0, [sp, #4]
 800aeaa:	6813      	ldr	r3, [r2, #0]
 800aeac:	b933      	cbnz	r3, 800aebc <_free_r+0x30>
 800aeae:	6063      	str	r3, [r4, #4]
 800aeb0:	6014      	str	r4, [r2, #0]
 800aeb2:	b003      	add	sp, #12
 800aeb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeb8:	f7ff bfe2 	b.w	800ae80 <__malloc_unlock>
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	d908      	bls.n	800aed2 <_free_r+0x46>
 800aec0:	6825      	ldr	r5, [r4, #0]
 800aec2:	1961      	adds	r1, r4, r5
 800aec4:	428b      	cmp	r3, r1
 800aec6:	bf01      	itttt	eq
 800aec8:	6819      	ldreq	r1, [r3, #0]
 800aeca:	685b      	ldreq	r3, [r3, #4]
 800aecc:	1949      	addeq	r1, r1, r5
 800aece:	6021      	streq	r1, [r4, #0]
 800aed0:	e7ed      	b.n	800aeae <_free_r+0x22>
 800aed2:	461a      	mov	r2, r3
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	b10b      	cbz	r3, 800aedc <_free_r+0x50>
 800aed8:	42a3      	cmp	r3, r4
 800aeda:	d9fa      	bls.n	800aed2 <_free_r+0x46>
 800aedc:	6811      	ldr	r1, [r2, #0]
 800aede:	1855      	adds	r5, r2, r1
 800aee0:	42a5      	cmp	r5, r4
 800aee2:	d10b      	bne.n	800aefc <_free_r+0x70>
 800aee4:	6824      	ldr	r4, [r4, #0]
 800aee6:	4421      	add	r1, r4
 800aee8:	1854      	adds	r4, r2, r1
 800aeea:	42a3      	cmp	r3, r4
 800aeec:	6011      	str	r1, [r2, #0]
 800aeee:	d1e0      	bne.n	800aeb2 <_free_r+0x26>
 800aef0:	681c      	ldr	r4, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	6053      	str	r3, [r2, #4]
 800aef6:	4421      	add	r1, r4
 800aef8:	6011      	str	r1, [r2, #0]
 800aefa:	e7da      	b.n	800aeb2 <_free_r+0x26>
 800aefc:	d902      	bls.n	800af04 <_free_r+0x78>
 800aefe:	230c      	movs	r3, #12
 800af00:	6003      	str	r3, [r0, #0]
 800af02:	e7d6      	b.n	800aeb2 <_free_r+0x26>
 800af04:	6825      	ldr	r5, [r4, #0]
 800af06:	1961      	adds	r1, r4, r5
 800af08:	428b      	cmp	r3, r1
 800af0a:	bf04      	itt	eq
 800af0c:	6819      	ldreq	r1, [r3, #0]
 800af0e:	685b      	ldreq	r3, [r3, #4]
 800af10:	6063      	str	r3, [r4, #4]
 800af12:	bf04      	itt	eq
 800af14:	1949      	addeq	r1, r1, r5
 800af16:	6021      	streq	r1, [r4, #0]
 800af18:	6054      	str	r4, [r2, #4]
 800af1a:	e7ca      	b.n	800aeb2 <_free_r+0x26>
 800af1c:	b003      	add	sp, #12
 800af1e:	bd30      	pop	{r4, r5, pc}
 800af20:	20001c90 	.word	0x20001c90

0800af24 <_init>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	bf00      	nop
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr

0800af30 <_fini>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	bf00      	nop
 800af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af36:	bc08      	pop	{r3}
 800af38:	469e      	mov	lr, r3
 800af3a:	4770      	bx	lr
