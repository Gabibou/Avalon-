
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9cc  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08011bb0  08011bb0  00011bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d88  08011d88  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08011d88  08011d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d90  08011d90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d90  08011d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d94  08011d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a50  20000078  08011e10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ac8  08011e10  00023ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002994e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053d6  00000000  00000000  000499f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f28  00000000  00000000  0004edd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  00050cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e724  00000000  00000000  000529d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002925c  00000000  00000000  000810fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012039a  00000000  00000000  000aa358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001ca6f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089f4  00000000  00000000  001ca7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	20000078 	.word	0x20000078
 80041fc:	00000000 	.word	0x00000000
 8004200:	08011b94 	.word	0x08011b94

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	2000007c 	.word	0x2000007c
 800421c:	08011b94 	.word	0x08011b94

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <__aeabi_drsub>:
 8004234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004238:	e002      	b.n	8004240 <__adddf3>
 800423a:	bf00      	nop

0800423c <__aeabi_dsub>:
 800423c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004240 <__adddf3>:
 8004240:	b530      	push	{r4, r5, lr}
 8004242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800424a:	ea94 0f05 	teq	r4, r5
 800424e:	bf08      	it	eq
 8004250:	ea90 0f02 	teqeq	r0, r2
 8004254:	bf1f      	itttt	ne
 8004256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800425a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800425e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004266:	f000 80e2 	beq.w	800442e <__adddf3+0x1ee>
 800426a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800426e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004272:	bfb8      	it	lt
 8004274:	426d      	neglt	r5, r5
 8004276:	dd0c      	ble.n	8004292 <__adddf3+0x52>
 8004278:	442c      	add	r4, r5
 800427a:	ea80 0202 	eor.w	r2, r0, r2
 800427e:	ea81 0303 	eor.w	r3, r1, r3
 8004282:	ea82 0000 	eor.w	r0, r2, r0
 8004286:	ea83 0101 	eor.w	r1, r3, r1
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	2d36      	cmp	r5, #54	; 0x36
 8004294:	bf88      	it	hi
 8004296:	bd30      	pophi	{r4, r5, pc}
 8004298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800429c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042a8:	d002      	beq.n	80042b0 <__adddf3+0x70>
 80042aa:	4240      	negs	r0, r0
 80042ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042bc:	d002      	beq.n	80042c4 <__adddf3+0x84>
 80042be:	4252      	negs	r2, r2
 80042c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042c4:	ea94 0f05 	teq	r4, r5
 80042c8:	f000 80a7 	beq.w	800441a <__adddf3+0x1da>
 80042cc:	f1a4 0401 	sub.w	r4, r4, #1
 80042d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042d4:	db0d      	blt.n	80042f2 <__adddf3+0xb2>
 80042d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042da:	fa22 f205 	lsr.w	r2, r2, r5
 80042de:	1880      	adds	r0, r0, r2
 80042e0:	f141 0100 	adc.w	r1, r1, #0
 80042e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042e8:	1880      	adds	r0, r0, r2
 80042ea:	fa43 f305 	asr.w	r3, r3, r5
 80042ee:	4159      	adcs	r1, r3
 80042f0:	e00e      	b.n	8004310 <__adddf3+0xd0>
 80042f2:	f1a5 0520 	sub.w	r5, r5, #32
 80042f6:	f10e 0e20 	add.w	lr, lr, #32
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004300:	bf28      	it	cs
 8004302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004306:	fa43 f305 	asr.w	r3, r3, r5
 800430a:	18c0      	adds	r0, r0, r3
 800430c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004314:	d507      	bpl.n	8004326 <__adddf3+0xe6>
 8004316:	f04f 0e00 	mov.w	lr, #0
 800431a:	f1dc 0c00 	rsbs	ip, ip, #0
 800431e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004322:	eb6e 0101 	sbc.w	r1, lr, r1
 8004326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800432a:	d31b      	bcc.n	8004364 <__adddf3+0x124>
 800432c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004330:	d30c      	bcc.n	800434c <__adddf3+0x10c>
 8004332:	0849      	lsrs	r1, r1, #1
 8004334:	ea5f 0030 	movs.w	r0, r0, rrx
 8004338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800433c:	f104 0401 	add.w	r4, r4, #1
 8004340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004348:	f080 809a 	bcs.w	8004480 <__adddf3+0x240>
 800434c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004350:	bf08      	it	eq
 8004352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004356:	f150 0000 	adcs.w	r0, r0, #0
 800435a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800435e:	ea41 0105 	orr.w	r1, r1, r5
 8004362:	bd30      	pop	{r4, r5, pc}
 8004364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004368:	4140      	adcs	r0, r0
 800436a:	eb41 0101 	adc.w	r1, r1, r1
 800436e:	3c01      	subs	r4, #1
 8004370:	bf28      	it	cs
 8004372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004376:	d2e9      	bcs.n	800434c <__adddf3+0x10c>
 8004378:	f091 0f00 	teq	r1, #0
 800437c:	bf04      	itt	eq
 800437e:	4601      	moveq	r1, r0
 8004380:	2000      	moveq	r0, #0
 8004382:	fab1 f381 	clz	r3, r1
 8004386:	bf08      	it	eq
 8004388:	3320      	addeq	r3, #32
 800438a:	f1a3 030b 	sub.w	r3, r3, #11
 800438e:	f1b3 0220 	subs.w	r2, r3, #32
 8004392:	da0c      	bge.n	80043ae <__adddf3+0x16e>
 8004394:	320c      	adds	r2, #12
 8004396:	dd08      	ble.n	80043aa <__adddf3+0x16a>
 8004398:	f102 0c14 	add.w	ip, r2, #20
 800439c:	f1c2 020c 	rsb	r2, r2, #12
 80043a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043a4:	fa21 f102 	lsr.w	r1, r1, r2
 80043a8:	e00c      	b.n	80043c4 <__adddf3+0x184>
 80043aa:	f102 0214 	add.w	r2, r2, #20
 80043ae:	bfd8      	it	le
 80043b0:	f1c2 0c20 	rsble	ip, r2, #32
 80043b4:	fa01 f102 	lsl.w	r1, r1, r2
 80043b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043bc:	bfdc      	itt	le
 80043be:	ea41 010c 	orrle.w	r1, r1, ip
 80043c2:	4090      	lslle	r0, r2
 80043c4:	1ae4      	subs	r4, r4, r3
 80043c6:	bfa2      	ittt	ge
 80043c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043cc:	4329      	orrge	r1, r5
 80043ce:	bd30      	popge	{r4, r5, pc}
 80043d0:	ea6f 0404 	mvn.w	r4, r4
 80043d4:	3c1f      	subs	r4, #31
 80043d6:	da1c      	bge.n	8004412 <__adddf3+0x1d2>
 80043d8:	340c      	adds	r4, #12
 80043da:	dc0e      	bgt.n	80043fa <__adddf3+0x1ba>
 80043dc:	f104 0414 	add.w	r4, r4, #20
 80043e0:	f1c4 0220 	rsb	r2, r4, #32
 80043e4:	fa20 f004 	lsr.w	r0, r0, r4
 80043e8:	fa01 f302 	lsl.w	r3, r1, r2
 80043ec:	ea40 0003 	orr.w	r0, r0, r3
 80043f0:	fa21 f304 	lsr.w	r3, r1, r4
 80043f4:	ea45 0103 	orr.w	r1, r5, r3
 80043f8:	bd30      	pop	{r4, r5, pc}
 80043fa:	f1c4 040c 	rsb	r4, r4, #12
 80043fe:	f1c4 0220 	rsb	r2, r4, #32
 8004402:	fa20 f002 	lsr.w	r0, r0, r2
 8004406:	fa01 f304 	lsl.w	r3, r1, r4
 800440a:	ea40 0003 	orr.w	r0, r0, r3
 800440e:	4629      	mov	r1, r5
 8004410:	bd30      	pop	{r4, r5, pc}
 8004412:	fa21 f004 	lsr.w	r0, r1, r4
 8004416:	4629      	mov	r1, r5
 8004418:	bd30      	pop	{r4, r5, pc}
 800441a:	f094 0f00 	teq	r4, #0
 800441e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004422:	bf06      	itte	eq
 8004424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004428:	3401      	addeq	r4, #1
 800442a:	3d01      	subne	r5, #1
 800442c:	e74e      	b.n	80042cc <__adddf3+0x8c>
 800442e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004432:	bf18      	it	ne
 8004434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004438:	d029      	beq.n	800448e <__adddf3+0x24e>
 800443a:	ea94 0f05 	teq	r4, r5
 800443e:	bf08      	it	eq
 8004440:	ea90 0f02 	teqeq	r0, r2
 8004444:	d005      	beq.n	8004452 <__adddf3+0x212>
 8004446:	ea54 0c00 	orrs.w	ip, r4, r0
 800444a:	bf04      	itt	eq
 800444c:	4619      	moveq	r1, r3
 800444e:	4610      	moveq	r0, r2
 8004450:	bd30      	pop	{r4, r5, pc}
 8004452:	ea91 0f03 	teq	r1, r3
 8004456:	bf1e      	ittt	ne
 8004458:	2100      	movne	r1, #0
 800445a:	2000      	movne	r0, #0
 800445c:	bd30      	popne	{r4, r5, pc}
 800445e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004462:	d105      	bne.n	8004470 <__adddf3+0x230>
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	4149      	adcs	r1, r1
 8004468:	bf28      	it	cs
 800446a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800446e:	bd30      	pop	{r4, r5, pc}
 8004470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004474:	bf3c      	itt	cc
 8004476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800447a:	bd30      	popcc	{r4, r5, pc}
 800447c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004492:	bf1a      	itte	ne
 8004494:	4619      	movne	r1, r3
 8004496:	4610      	movne	r0, r2
 8004498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800449c:	bf1c      	itt	ne
 800449e:	460b      	movne	r3, r1
 80044a0:	4602      	movne	r2, r0
 80044a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044a6:	bf06      	itte	eq
 80044a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044ac:	ea91 0f03 	teqeq	r1, r3
 80044b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044b4:	bd30      	pop	{r4, r5, pc}
 80044b6:	bf00      	nop

080044b8 <__aeabi_ui2d>:
 80044b8:	f090 0f00 	teq	r0, #0
 80044bc:	bf04      	itt	eq
 80044be:	2100      	moveq	r1, #0
 80044c0:	4770      	bxeq	lr
 80044c2:	b530      	push	{r4, r5, lr}
 80044c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	e750      	b.n	8004378 <__adddf3+0x138>
 80044d6:	bf00      	nop

080044d8 <__aeabi_i2d>:
 80044d8:	f090 0f00 	teq	r0, #0
 80044dc:	bf04      	itt	eq
 80044de:	2100      	moveq	r1, #0
 80044e0:	4770      	bxeq	lr
 80044e2:	b530      	push	{r4, r5, lr}
 80044e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80044f0:	bf48      	it	mi
 80044f2:	4240      	negmi	r0, r0
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	e73e      	b.n	8004378 <__adddf3+0x138>
 80044fa:	bf00      	nop

080044fc <__aeabi_f2d>:
 80044fc:	0042      	lsls	r2, r0, #1
 80044fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004502:	ea4f 0131 	mov.w	r1, r1, rrx
 8004506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800450a:	bf1f      	itttt	ne
 800450c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004518:	4770      	bxne	lr
 800451a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800451e:	bf08      	it	eq
 8004520:	4770      	bxeq	lr
 8004522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004526:	bf04      	itt	eq
 8004528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800452c:	4770      	bxeq	lr
 800452e:	b530      	push	{r4, r5, lr}
 8004530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800453c:	e71c      	b.n	8004378 <__adddf3+0x138>
 800453e:	bf00      	nop

08004540 <__aeabi_ul2d>:
 8004540:	ea50 0201 	orrs.w	r2, r0, r1
 8004544:	bf08      	it	eq
 8004546:	4770      	bxeq	lr
 8004548:	b530      	push	{r4, r5, lr}
 800454a:	f04f 0500 	mov.w	r5, #0
 800454e:	e00a      	b.n	8004566 <__aeabi_l2d+0x16>

08004550 <__aeabi_l2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800455e:	d502      	bpl.n	8004566 <__aeabi_l2d+0x16>
 8004560:	4240      	negs	r0, r0
 8004562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800456a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800456e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004572:	f43f aed8 	beq.w	8004326 <__adddf3+0xe6>
 8004576:	f04f 0203 	mov.w	r2, #3
 800457a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800457e:	bf18      	it	ne
 8004580:	3203      	addne	r2, #3
 8004582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004586:	bf18      	it	ne
 8004588:	3203      	addne	r2, #3
 800458a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800458e:	f1c2 0320 	rsb	r3, r2, #32
 8004592:	fa00 fc03 	lsl.w	ip, r0, r3
 8004596:	fa20 f002 	lsr.w	r0, r0, r2
 800459a:	fa01 fe03 	lsl.w	lr, r1, r3
 800459e:	ea40 000e 	orr.w	r0, r0, lr
 80045a2:	fa21 f102 	lsr.w	r1, r1, r2
 80045a6:	4414      	add	r4, r2
 80045a8:	e6bd      	b.n	8004326 <__adddf3+0xe6>
 80045aa:	bf00      	nop

080045ac <__aeabi_dmul>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ba:	bf1d      	ittte	ne
 80045bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045c0:	ea94 0f0c 	teqne	r4, ip
 80045c4:	ea95 0f0c 	teqne	r5, ip
 80045c8:	f000 f8de 	bleq	8004788 <__aeabi_dmul+0x1dc>
 80045cc:	442c      	add	r4, r5
 80045ce:	ea81 0603 	eor.w	r6, r1, r3
 80045d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045de:	bf18      	it	ne
 80045e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ec:	d038      	beq.n	8004660 <__aeabi_dmul+0xb4>
 80045ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80045f2:	f04f 0500 	mov.w	r5, #0
 80045f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80045fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80045fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800460a:	f09c 0f00 	teq	ip, #0
 800460e:	bf18      	it	ne
 8004610:	f04e 0e01 	orrne.w	lr, lr, #1
 8004614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800461c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004620:	d204      	bcs.n	800462c <__aeabi_dmul+0x80>
 8004622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004626:	416d      	adcs	r5, r5
 8004628:	eb46 0606 	adc.w	r6, r6, r6
 800462c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800463c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004644:	bf88      	it	hi
 8004646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800464a:	d81e      	bhi.n	800468a <__aeabi_dmul+0xde>
 800464c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004650:	bf08      	it	eq
 8004652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004656:	f150 0000 	adcs.w	r0, r0, #0
 800465a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004664:	ea46 0101 	orr.w	r1, r6, r1
 8004668:	ea40 0002 	orr.w	r0, r0, r2
 800466c:	ea81 0103 	eor.w	r1, r1, r3
 8004670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004674:	bfc2      	ittt	gt
 8004676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800467a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800467e:	bd70      	popgt	{r4, r5, r6, pc}
 8004680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004684:	f04f 0e00 	mov.w	lr, #0
 8004688:	3c01      	subs	r4, #1
 800468a:	f300 80ab 	bgt.w	80047e4 <__aeabi_dmul+0x238>
 800468e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004692:	bfde      	ittt	le
 8004694:	2000      	movle	r0, #0
 8004696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800469a:	bd70      	pople	{r4, r5, r6, pc}
 800469c:	f1c4 0400 	rsb	r4, r4, #0
 80046a0:	3c20      	subs	r4, #32
 80046a2:	da35      	bge.n	8004710 <__aeabi_dmul+0x164>
 80046a4:	340c      	adds	r4, #12
 80046a6:	dc1b      	bgt.n	80046e0 <__aeabi_dmul+0x134>
 80046a8:	f104 0414 	add.w	r4, r4, #20
 80046ac:	f1c4 0520 	rsb	r5, r4, #32
 80046b0:	fa00 f305 	lsl.w	r3, r0, r5
 80046b4:	fa20 f004 	lsr.w	r0, r0, r4
 80046b8:	fa01 f205 	lsl.w	r2, r1, r5
 80046bc:	ea40 0002 	orr.w	r0, r0, r2
 80046c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046cc:	fa21 f604 	lsr.w	r6, r1, r4
 80046d0:	eb42 0106 	adc.w	r1, r2, r6
 80046d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046d8:	bf08      	it	eq
 80046da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f1c4 040c 	rsb	r4, r4, #12
 80046e4:	f1c4 0520 	rsb	r5, r4, #32
 80046e8:	fa00 f304 	lsl.w	r3, r0, r4
 80046ec:	fa20 f005 	lsr.w	r0, r0, r5
 80046f0:	fa01 f204 	lsl.w	r2, r1, r4
 80046f4:	ea40 0002 	orr.w	r0, r0, r2
 80046f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004700:	f141 0100 	adc.w	r1, r1, #0
 8004704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004708:	bf08      	it	eq
 800470a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f1c4 0520 	rsb	r5, r4, #32
 8004714:	fa00 f205 	lsl.w	r2, r0, r5
 8004718:	ea4e 0e02 	orr.w	lr, lr, r2
 800471c:	fa20 f304 	lsr.w	r3, r0, r4
 8004720:	fa01 f205 	lsl.w	r2, r1, r5
 8004724:	ea43 0302 	orr.w	r3, r3, r2
 8004728:	fa21 f004 	lsr.w	r0, r1, r4
 800472c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004730:	fa21 f204 	lsr.w	r2, r1, r4
 8004734:	ea20 0002 	bic.w	r0, r0, r2
 8004738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800473c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004740:	bf08      	it	eq
 8004742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f094 0f00 	teq	r4, #0
 800474c:	d10f      	bne.n	800476e <__aeabi_dmul+0x1c2>
 800474e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004752:	0040      	lsls	r0, r0, #1
 8004754:	eb41 0101 	adc.w	r1, r1, r1
 8004758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800475c:	bf08      	it	eq
 800475e:	3c01      	subeq	r4, #1
 8004760:	d0f7      	beq.n	8004752 <__aeabi_dmul+0x1a6>
 8004762:	ea41 0106 	orr.w	r1, r1, r6
 8004766:	f095 0f00 	teq	r5, #0
 800476a:	bf18      	it	ne
 800476c:	4770      	bxne	lr
 800476e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004772:	0052      	lsls	r2, r2, #1
 8004774:	eb43 0303 	adc.w	r3, r3, r3
 8004778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800477c:	bf08      	it	eq
 800477e:	3d01      	subeq	r5, #1
 8004780:	d0f7      	beq.n	8004772 <__aeabi_dmul+0x1c6>
 8004782:	ea43 0306 	orr.w	r3, r3, r6
 8004786:	4770      	bx	lr
 8004788:	ea94 0f0c 	teq	r4, ip
 800478c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004790:	bf18      	it	ne
 8004792:	ea95 0f0c 	teqne	r5, ip
 8004796:	d00c      	beq.n	80047b2 <__aeabi_dmul+0x206>
 8004798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800479c:	bf18      	it	ne
 800479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047a2:	d1d1      	bne.n	8004748 <__aeabi_dmul+0x19c>
 80047a4:	ea81 0103 	eor.w	r1, r1, r3
 80047a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047ac:	f04f 0000 	mov.w	r0, #0
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047b6:	bf06      	itte	eq
 80047b8:	4610      	moveq	r0, r2
 80047ba:	4619      	moveq	r1, r3
 80047bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047c0:	d019      	beq.n	80047f6 <__aeabi_dmul+0x24a>
 80047c2:	ea94 0f0c 	teq	r4, ip
 80047c6:	d102      	bne.n	80047ce <__aeabi_dmul+0x222>
 80047c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047cc:	d113      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047ce:	ea95 0f0c 	teq	r5, ip
 80047d2:	d105      	bne.n	80047e0 <__aeabi_dmul+0x234>
 80047d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047d8:	bf1c      	itt	ne
 80047da:	4610      	movne	r0, r2
 80047dc:	4619      	movne	r1, r3
 80047de:	d10a      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047f0:	f04f 0000 	mov.w	r0, #0
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80047fe:	bd70      	pop	{r4, r5, r6, pc}

08004800 <__aeabi_ddiv>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800480a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800480e:	bf1d      	ittte	ne
 8004810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004814:	ea94 0f0c 	teqne	r4, ip
 8004818:	ea95 0f0c 	teqne	r5, ip
 800481c:	f000 f8a7 	bleq	800496e <__aeabi_ddiv+0x16e>
 8004820:	eba4 0405 	sub.w	r4, r4, r5
 8004824:	ea81 0e03 	eor.w	lr, r1, r3
 8004828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800482c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004830:	f000 8088 	beq.w	8004944 <__aeabi_ddiv+0x144>
 8004834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800483c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800484c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004858:	429d      	cmp	r5, r3
 800485a:	bf08      	it	eq
 800485c:	4296      	cmpeq	r6, r2
 800485e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004866:	d202      	bcs.n	800486e <__aeabi_ddiv+0x6e>
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	ea4f 0232 	mov.w	r2, r2, rrx
 800486e:	1ab6      	subs	r6, r6, r2
 8004870:	eb65 0503 	sbc.w	r5, r5, r3
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	ea4f 0232 	mov.w	r2, r2, rrx
 800487a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800487e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004882:	ebb6 0e02 	subs.w	lr, r6, r2
 8004886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800488a:	bf22      	ittt	cs
 800488c:	1ab6      	subcs	r6, r6, r2
 800488e:	4675      	movcs	r5, lr
 8004890:	ea40 000c 	orrcs.w	r0, r0, ip
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	ea4f 0232 	mov.w	r2, r2, rrx
 800489a:	ebb6 0e02 	subs.w	lr, r6, r2
 800489e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048a2:	bf22      	ittt	cs
 80048a4:	1ab6      	subcs	r6, r6, r2
 80048a6:	4675      	movcs	r5, lr
 80048a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ba:	bf22      	ittt	cs
 80048bc:	1ab6      	subcs	r6, r6, r2
 80048be:	4675      	movcs	r5, lr
 80048c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048d2:	bf22      	ittt	cs
 80048d4:	1ab6      	subcs	r6, r6, r2
 80048d6:	4675      	movcs	r5, lr
 80048d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80048e0:	d018      	beq.n	8004914 <__aeabi_ddiv+0x114>
 80048e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80048f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80048f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80048fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80048fe:	d1c0      	bne.n	8004882 <__aeabi_ddiv+0x82>
 8004900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004904:	d10b      	bne.n	800491e <__aeabi_ddiv+0x11e>
 8004906:	ea41 0100 	orr.w	r1, r1, r0
 800490a:	f04f 0000 	mov.w	r0, #0
 800490e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004912:	e7b6      	b.n	8004882 <__aeabi_ddiv+0x82>
 8004914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004918:	bf04      	itt	eq
 800491a:	4301      	orreq	r1, r0
 800491c:	2000      	moveq	r0, #0
 800491e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004922:	bf88      	it	hi
 8004924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004928:	f63f aeaf 	bhi.w	800468a <__aeabi_dmul+0xde>
 800492c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004930:	bf04      	itt	eq
 8004932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800493a:	f150 0000 	adcs.w	r0, r0, #0
 800493e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800494c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004950:	bfc2      	ittt	gt
 8004952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800495a:	bd70      	popgt	{r4, r5, r6, pc}
 800495c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004960:	f04f 0e00 	mov.w	lr, #0
 8004964:	3c01      	subs	r4, #1
 8004966:	e690      	b.n	800468a <__aeabi_dmul+0xde>
 8004968:	ea45 0e06 	orr.w	lr, r5, r6
 800496c:	e68d      	b.n	800468a <__aeabi_dmul+0xde>
 800496e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004972:	ea94 0f0c 	teq	r4, ip
 8004976:	bf08      	it	eq
 8004978:	ea95 0f0c 	teqeq	r5, ip
 800497c:	f43f af3b 	beq.w	80047f6 <__aeabi_dmul+0x24a>
 8004980:	ea94 0f0c 	teq	r4, ip
 8004984:	d10a      	bne.n	800499c <__aeabi_ddiv+0x19c>
 8004986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800498a:	f47f af34 	bne.w	80047f6 <__aeabi_dmul+0x24a>
 800498e:	ea95 0f0c 	teq	r5, ip
 8004992:	f47f af25 	bne.w	80047e0 <__aeabi_dmul+0x234>
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	e72c      	b.n	80047f6 <__aeabi_dmul+0x24a>
 800499c:	ea95 0f0c 	teq	r5, ip
 80049a0:	d106      	bne.n	80049b0 <__aeabi_ddiv+0x1b0>
 80049a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049a6:	f43f aefd 	beq.w	80047a4 <__aeabi_dmul+0x1f8>
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	e722      	b.n	80047f6 <__aeabi_dmul+0x24a>
 80049b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049b4:	bf18      	it	ne
 80049b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ba:	f47f aec5 	bne.w	8004748 <__aeabi_dmul+0x19c>
 80049be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049c2:	f47f af0d 	bne.w	80047e0 <__aeabi_dmul+0x234>
 80049c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049ca:	f47f aeeb 	bne.w	80047a4 <__aeabi_dmul+0x1f8>
 80049ce:	e712      	b.n	80047f6 <__aeabi_dmul+0x24a>

080049d0 <__gedf2>:
 80049d0:	f04f 3cff 	mov.w	ip, #4294967295
 80049d4:	e006      	b.n	80049e4 <__cmpdf2+0x4>
 80049d6:	bf00      	nop

080049d8 <__ledf2>:
 80049d8:	f04f 0c01 	mov.w	ip, #1
 80049dc:	e002      	b.n	80049e4 <__cmpdf2+0x4>
 80049de:	bf00      	nop

080049e0 <__cmpdf2>:
 80049e0:	f04f 0c01 	mov.w	ip, #1
 80049e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80049f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80049f4:	bf18      	it	ne
 80049f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80049fa:	d01b      	beq.n	8004a34 <__cmpdf2+0x54>
 80049fc:	b001      	add	sp, #4
 80049fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a02:	bf0c      	ite	eq
 8004a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a08:	ea91 0f03 	teqne	r1, r3
 8004a0c:	bf02      	ittt	eq
 8004a0e:	ea90 0f02 	teqeq	r0, r2
 8004a12:	2000      	moveq	r0, #0
 8004a14:	4770      	bxeq	lr
 8004a16:	f110 0f00 	cmn.w	r0, #0
 8004a1a:	ea91 0f03 	teq	r1, r3
 8004a1e:	bf58      	it	pl
 8004a20:	4299      	cmppl	r1, r3
 8004a22:	bf08      	it	eq
 8004a24:	4290      	cmpeq	r0, r2
 8004a26:	bf2c      	ite	cs
 8004a28:	17d8      	asrcs	r0, r3, #31
 8004a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a2e:	f040 0001 	orr.w	r0, r0, #1
 8004a32:	4770      	bx	lr
 8004a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a3c:	d102      	bne.n	8004a44 <__cmpdf2+0x64>
 8004a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a42:	d107      	bne.n	8004a54 <__cmpdf2+0x74>
 8004a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d1d6      	bne.n	80049fc <__cmpdf2+0x1c>
 8004a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a52:	d0d3      	beq.n	80049fc <__cmpdf2+0x1c>
 8004a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <__aeabi_cdrcmple>:
 8004a5c:	4684      	mov	ip, r0
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4662      	mov	r2, ip
 8004a62:	468c      	mov	ip, r1
 8004a64:	4619      	mov	r1, r3
 8004a66:	4663      	mov	r3, ip
 8004a68:	e000      	b.n	8004a6c <__aeabi_cdcmpeq>
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdcmpeq>:
 8004a6c:	b501      	push	{r0, lr}
 8004a6e:	f7ff ffb7 	bl	80049e0 <__cmpdf2>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	bf48      	it	mi
 8004a76:	f110 0f00 	cmnmi.w	r0, #0
 8004a7a:	bd01      	pop	{r0, pc}

08004a7c <__aeabi_dcmpeq>:
 8004a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a80:	f7ff fff4 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a84:	bf0c      	ite	eq
 8004a86:	2001      	moveq	r0, #1
 8004a88:	2000      	movne	r0, #0
 8004a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a8e:	bf00      	nop

08004a90 <__aeabi_dcmplt>:
 8004a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a94:	f7ff ffea 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a98:	bf34      	ite	cc
 8004a9a:	2001      	movcc	r0, #1
 8004a9c:	2000      	movcs	r0, #0
 8004a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aa2:	bf00      	nop

08004aa4 <__aeabi_dcmple>:
 8004aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa8:	f7ff ffe0 	bl	8004a6c <__aeabi_cdcmpeq>
 8004aac:	bf94      	ite	ls
 8004aae:	2001      	movls	r0, #1
 8004ab0:	2000      	movhi	r0, #0
 8004ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab6:	bf00      	nop

08004ab8 <__aeabi_dcmpge>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff ffce 	bl	8004a5c <__aeabi_cdrcmple>
 8004ac0:	bf94      	ite	ls
 8004ac2:	2001      	movls	r0, #1
 8004ac4:	2000      	movhi	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmpgt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffc4 	bl	8004a5c <__aeabi_cdrcmple>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmpun>:
 8004ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004ae8:	d102      	bne.n	8004af0 <__aeabi_dcmpun+0x10>
 8004aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004aee:	d10a      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x20>
 8004afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004afe:	d102      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	4770      	bx	lr
 8004b06:	f04f 0001 	mov.w	r0, #1
 8004b0a:	4770      	bx	lr

08004b0c <__aeabi_d2f>:
 8004b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b14:	bf24      	itt	cs
 8004b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b1e:	d90d      	bls.n	8004b3c <__aeabi_d2f+0x30>
 8004b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b34:	bf08      	it	eq
 8004b36:	f020 0001 	biceq.w	r0, r0, #1
 8004b3a:	4770      	bx	lr
 8004b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b40:	d121      	bne.n	8004b86 <__aeabi_d2f+0x7a>
 8004b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b46:	bfbc      	itt	lt
 8004b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b4c:	4770      	bxlt	lr
 8004b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b56:	f1c2 0218 	rsb	r2, r2, #24
 8004b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b62:	fa20 f002 	lsr.w	r0, r0, r2
 8004b66:	bf18      	it	ne
 8004b68:	f040 0001 	orrne.w	r0, r0, #1
 8004b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b78:	ea40 000c 	orr.w	r0, r0, ip
 8004b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b84:	e7cc      	b.n	8004b20 <__aeabi_d2f+0x14>
 8004b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b8a:	d107      	bne.n	8004b9c <__aeabi_d2f+0x90>
 8004b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004b90:	bf1e      	ittt	ne
 8004b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004b9a:	4770      	bxne	lr
 8004b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <__aeabi_uldivmod>:
 8004bac:	b953      	cbnz	r3, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bae:	b94a      	cbnz	r2, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	bf08      	it	eq
 8004bb4:	2800      	cmpeq	r0, #0
 8004bb6:	bf1c      	itt	ne
 8004bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bc0:	f000 b974 	b.w	8004eac <__aeabi_idiv0>
 8004bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bcc:	f000 f806 	bl	8004bdc <__udivmoddi4>
 8004bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd8:	b004      	add	sp, #16
 8004bda:	4770      	bx	lr

08004bdc <__udivmoddi4>:
 8004bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	9d08      	ldr	r5, [sp, #32]
 8004be2:	4604      	mov	r4, r0
 8004be4:	468e      	mov	lr, r1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d14d      	bne.n	8004c86 <__udivmoddi4+0xaa>
 8004bea:	428a      	cmp	r2, r1
 8004bec:	4694      	mov	ip, r2
 8004bee:	d969      	bls.n	8004cc4 <__udivmoddi4+0xe8>
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b152      	cbz	r2, 8004c0c <__udivmoddi4+0x30>
 8004bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8004bfa:	f1c2 0120 	rsb	r1, r2, #32
 8004bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8004c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8004c06:	ea41 0e03 	orr.w	lr, r1, r3
 8004c0a:	4094      	lsls	r4, r2
 8004c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004c10:	0c21      	lsrs	r1, r4, #16
 8004c12:	fbbe f6f8 	udiv	r6, lr, r8
 8004c16:	fa1f f78c 	uxth.w	r7, ip
 8004c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8004c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c22:	fb06 f107 	mul.w	r1, r6, r7
 8004c26:	4299      	cmp	r1, r3
 8004c28:	d90a      	bls.n	8004c40 <__udivmoddi4+0x64>
 8004c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8004c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8004c32:	f080 811f 	bcs.w	8004e74 <__udivmoddi4+0x298>
 8004c36:	4299      	cmp	r1, r3
 8004c38:	f240 811c 	bls.w	8004e74 <__udivmoddi4+0x298>
 8004c3c:	3e02      	subs	r6, #2
 8004c3e:	4463      	add	r3, ip
 8004c40:	1a5b      	subs	r3, r3, r1
 8004c42:	b2a4      	uxth	r4, r4
 8004c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8004c48:	fb08 3310 	mls	r3, r8, r0, r3
 8004c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004c50:	fb00 f707 	mul.w	r7, r0, r7
 8004c54:	42a7      	cmp	r7, r4
 8004c56:	d90a      	bls.n	8004c6e <__udivmoddi4+0x92>
 8004c58:	eb1c 0404 	adds.w	r4, ip, r4
 8004c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c60:	f080 810a 	bcs.w	8004e78 <__udivmoddi4+0x29c>
 8004c64:	42a7      	cmp	r7, r4
 8004c66:	f240 8107 	bls.w	8004e78 <__udivmoddi4+0x29c>
 8004c6a:	4464      	add	r4, ip
 8004c6c:	3802      	subs	r0, #2
 8004c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004c72:	1be4      	subs	r4, r4, r7
 8004c74:	2600      	movs	r6, #0
 8004c76:	b11d      	cbz	r5, 8004c80 <__udivmoddi4+0xa4>
 8004c78:	40d4      	lsrs	r4, r2
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8004c80:	4631      	mov	r1, r6
 8004c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c86:	428b      	cmp	r3, r1
 8004c88:	d909      	bls.n	8004c9e <__udivmoddi4+0xc2>
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	f000 80ef 	beq.w	8004e6e <__udivmoddi4+0x292>
 8004c90:	2600      	movs	r6, #0
 8004c92:	e9c5 0100 	strd	r0, r1, [r5]
 8004c96:	4630      	mov	r0, r6
 8004c98:	4631      	mov	r1, r6
 8004c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9e:	fab3 f683 	clz	r6, r3
 8004ca2:	2e00      	cmp	r6, #0
 8004ca4:	d14a      	bne.n	8004d3c <__udivmoddi4+0x160>
 8004ca6:	428b      	cmp	r3, r1
 8004ca8:	d302      	bcc.n	8004cb0 <__udivmoddi4+0xd4>
 8004caa:	4282      	cmp	r2, r0
 8004cac:	f200 80f9 	bhi.w	8004ea2 <__udivmoddi4+0x2c6>
 8004cb0:	1a84      	subs	r4, r0, r2
 8004cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	469e      	mov	lr, r3
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	d0e0      	beq.n	8004c80 <__udivmoddi4+0xa4>
 8004cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8004cc2:	e7dd      	b.n	8004c80 <__udivmoddi4+0xa4>
 8004cc4:	b902      	cbnz	r2, 8004cc8 <__udivmoddi4+0xec>
 8004cc6:	deff      	udf	#255	; 0xff
 8004cc8:	fab2 f282 	clz	r2, r2
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	f040 8092 	bne.w	8004df6 <__udivmoddi4+0x21a>
 8004cd2:	eba1 010c 	sub.w	r1, r1, ip
 8004cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004cda:	fa1f fe8c 	uxth.w	lr, ip
 8004cde:	2601      	movs	r6, #1
 8004ce0:	0c20      	lsrs	r0, r4, #16
 8004ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8004ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8004cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004cee:	fb0e f003 	mul.w	r0, lr, r3
 8004cf2:	4288      	cmp	r0, r1
 8004cf4:	d908      	bls.n	8004d08 <__udivmoddi4+0x12c>
 8004cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8004cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8004cfe:	d202      	bcs.n	8004d06 <__udivmoddi4+0x12a>
 8004d00:	4288      	cmp	r0, r1
 8004d02:	f200 80cb 	bhi.w	8004e9c <__udivmoddi4+0x2c0>
 8004d06:	4643      	mov	r3, r8
 8004d08:	1a09      	subs	r1, r1, r0
 8004d0a:	b2a4      	uxth	r4, r4
 8004d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8004d10:	fb07 1110 	mls	r1, r7, r0, r1
 8004d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8004d18:	fb0e fe00 	mul.w	lr, lr, r0
 8004d1c:	45a6      	cmp	lr, r4
 8004d1e:	d908      	bls.n	8004d32 <__udivmoddi4+0x156>
 8004d20:	eb1c 0404 	adds.w	r4, ip, r4
 8004d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8004d28:	d202      	bcs.n	8004d30 <__udivmoddi4+0x154>
 8004d2a:	45a6      	cmp	lr, r4
 8004d2c:	f200 80bb 	bhi.w	8004ea6 <__udivmoddi4+0x2ca>
 8004d30:	4608      	mov	r0, r1
 8004d32:	eba4 040e 	sub.w	r4, r4, lr
 8004d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004d3a:	e79c      	b.n	8004c76 <__udivmoddi4+0x9a>
 8004d3c:	f1c6 0720 	rsb	r7, r6, #32
 8004d40:	40b3      	lsls	r3, r6
 8004d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8004d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8004d52:	431c      	orrs	r4, r3
 8004d54:	40f9      	lsrs	r1, r7
 8004d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8004d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8004d62:	0c20      	lsrs	r0, r4, #16
 8004d64:	fa1f fe8c 	uxth.w	lr, ip
 8004d68:	fb09 1118 	mls	r1, r9, r8, r1
 8004d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004d70:	fb08 f00e 	mul.w	r0, r8, lr
 8004d74:	4288      	cmp	r0, r1
 8004d76:	fa02 f206 	lsl.w	r2, r2, r6
 8004d7a:	d90b      	bls.n	8004d94 <__udivmoddi4+0x1b8>
 8004d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8004d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d84:	f080 8088 	bcs.w	8004e98 <__udivmoddi4+0x2bc>
 8004d88:	4288      	cmp	r0, r1
 8004d8a:	f240 8085 	bls.w	8004e98 <__udivmoddi4+0x2bc>
 8004d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8004d92:	4461      	add	r1, ip
 8004d94:	1a09      	subs	r1, r1, r0
 8004d96:	b2a4      	uxth	r4, r4
 8004d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8004d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8004da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8004da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8004da8:	458e      	cmp	lr, r1
 8004daa:	d908      	bls.n	8004dbe <__udivmoddi4+0x1e2>
 8004dac:	eb1c 0101 	adds.w	r1, ip, r1
 8004db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8004db4:	d26c      	bcs.n	8004e90 <__udivmoddi4+0x2b4>
 8004db6:	458e      	cmp	lr, r1
 8004db8:	d96a      	bls.n	8004e90 <__udivmoddi4+0x2b4>
 8004dba:	3802      	subs	r0, #2
 8004dbc:	4461      	add	r1, ip
 8004dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8004dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8004dc6:	eba1 010e 	sub.w	r1, r1, lr
 8004dca:	42a1      	cmp	r1, r4
 8004dcc:	46c8      	mov	r8, r9
 8004dce:	46a6      	mov	lr, r4
 8004dd0:	d356      	bcc.n	8004e80 <__udivmoddi4+0x2a4>
 8004dd2:	d053      	beq.n	8004e7c <__udivmoddi4+0x2a0>
 8004dd4:	b15d      	cbz	r5, 8004dee <__udivmoddi4+0x212>
 8004dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8004dda:	eb61 010e 	sbc.w	r1, r1, lr
 8004dde:	fa01 f707 	lsl.w	r7, r1, r7
 8004de2:	fa22 f306 	lsr.w	r3, r2, r6
 8004de6:	40f1      	lsrs	r1, r6
 8004de8:	431f      	orrs	r7, r3
 8004dea:	e9c5 7100 	strd	r7, r1, [r5]
 8004dee:	2600      	movs	r6, #0
 8004df0:	4631      	mov	r1, r6
 8004df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df6:	f1c2 0320 	rsb	r3, r2, #32
 8004dfa:	40d8      	lsrs	r0, r3
 8004dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e00:	fa21 f303 	lsr.w	r3, r1, r3
 8004e04:	4091      	lsls	r1, r2
 8004e06:	4301      	orrs	r1, r0
 8004e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e0c:	fa1f fe8c 	uxth.w	lr, ip
 8004e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8004e14:	fb07 3610 	mls	r6, r7, r0, r3
 8004e18:	0c0b      	lsrs	r3, r1, #16
 8004e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8004e22:	429e      	cmp	r6, r3
 8004e24:	fa04 f402 	lsl.w	r4, r4, r2
 8004e28:	d908      	bls.n	8004e3c <__udivmoddi4+0x260>
 8004e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8004e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e32:	d22f      	bcs.n	8004e94 <__udivmoddi4+0x2b8>
 8004e34:	429e      	cmp	r6, r3
 8004e36:	d92d      	bls.n	8004e94 <__udivmoddi4+0x2b8>
 8004e38:	3802      	subs	r0, #2
 8004e3a:	4463      	add	r3, ip
 8004e3c:	1b9b      	subs	r3, r3, r6
 8004e3e:	b289      	uxth	r1, r1
 8004e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8004e44:	fb07 3316 	mls	r3, r7, r6, r3
 8004e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8004e50:	428b      	cmp	r3, r1
 8004e52:	d908      	bls.n	8004e66 <__udivmoddi4+0x28a>
 8004e54:	eb1c 0101 	adds.w	r1, ip, r1
 8004e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8004e5c:	d216      	bcs.n	8004e8c <__udivmoddi4+0x2b0>
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	d914      	bls.n	8004e8c <__udivmoddi4+0x2b0>
 8004e62:	3e02      	subs	r6, #2
 8004e64:	4461      	add	r1, ip
 8004e66:	1ac9      	subs	r1, r1, r3
 8004e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8004e6c:	e738      	b.n	8004ce0 <__udivmoddi4+0x104>
 8004e6e:	462e      	mov	r6, r5
 8004e70:	4628      	mov	r0, r5
 8004e72:	e705      	b.n	8004c80 <__udivmoddi4+0xa4>
 8004e74:	4606      	mov	r6, r0
 8004e76:	e6e3      	b.n	8004c40 <__udivmoddi4+0x64>
 8004e78:	4618      	mov	r0, r3
 8004e7a:	e6f8      	b.n	8004c6e <__udivmoddi4+0x92>
 8004e7c:	454b      	cmp	r3, r9
 8004e7e:	d2a9      	bcs.n	8004dd4 <__udivmoddi4+0x1f8>
 8004e80:	ebb9 0802 	subs.w	r8, r9, r2
 8004e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8004e88:	3801      	subs	r0, #1
 8004e8a:	e7a3      	b.n	8004dd4 <__udivmoddi4+0x1f8>
 8004e8c:	4646      	mov	r6, r8
 8004e8e:	e7ea      	b.n	8004e66 <__udivmoddi4+0x28a>
 8004e90:	4620      	mov	r0, r4
 8004e92:	e794      	b.n	8004dbe <__udivmoddi4+0x1e2>
 8004e94:	4640      	mov	r0, r8
 8004e96:	e7d1      	b.n	8004e3c <__udivmoddi4+0x260>
 8004e98:	46d0      	mov	r8, sl
 8004e9a:	e77b      	b.n	8004d94 <__udivmoddi4+0x1b8>
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	4461      	add	r1, ip
 8004ea0:	e732      	b.n	8004d08 <__udivmoddi4+0x12c>
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	e709      	b.n	8004cba <__udivmoddi4+0xde>
 8004ea6:	4464      	add	r4, ip
 8004ea8:	3802      	subs	r0, #2
 8004eaa:	e742      	b.n	8004d32 <__udivmoddi4+0x156>

08004eac <__aeabi_idiv0>:
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop

08004eb0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	2220      	movs	r2, #32
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f00b fe85 	bl	8010bcc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004ec4:	4a3a      	ldr	r2, [pc, #232]	; (8004fb0 <MX_ADC2_Init+0x100>)
 8004ec6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ec8:	4b38      	ldr	r3, [pc, #224]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004eca:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ece:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ed0:	4b36      	ldr	r3, [pc, #216]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ed6:	4b35      	ldr	r3, [pc, #212]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004edc:	4b33      	ldr	r3, [pc, #204]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004ee2:	4b32      	ldr	r3, [pc, #200]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ee8:	4b30      	ldr	r3, [pc, #192]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004eea:	2204      	movs	r2, #4
 8004eec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004eee:	4b2f      	ldr	r3, [pc, #188]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004ef4:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004efa:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004efc:	2203      	movs	r2, #3
 8004efe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004f00:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f08:	4b28      	ldr	r3, [pc, #160]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f0e:	4b27      	ldr	r3, [pc, #156]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f1c:	4b23      	ldr	r3, [pc, #140]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f2c:	481f      	ldr	r0, [pc, #124]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f2e:	f002 ff1b 	bl	8007d68 <HAL_ADC_Init>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f38:	f001 fd7c 	bl	8006a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <MX_ADC2_Init+0x104>)
 8004f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f40:	2306      	movs	r3, #6
 8004f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f44:	2304      	movs	r3, #4
 8004f46:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f48:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <MX_ADC2_Init+0x108>)
 8004f4a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f54:	463b      	mov	r3, r7
 8004f56:	4619      	mov	r1, r3
 8004f58:	4814      	ldr	r0, [pc, #80]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f5a:	f003 f9b9 	bl	80082d0 <HAL_ADC_ConfigChannel>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f64:	f001 fd66 	bl	8006a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <MX_ADC2_Init+0x10c>)
 8004f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f70:	463b      	mov	r3, r7
 8004f72:	4619      	mov	r1, r3
 8004f74:	480d      	ldr	r0, [pc, #52]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f76:	f003 f9ab 	bl	80082d0 <HAL_ADC_ConfigChannel>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f80:	f001 fd58 	bl	8006a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <MX_ADC2_Init+0x110>)
 8004f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f88:	2312      	movs	r3, #18
 8004f8a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f8c:	237f      	movs	r3, #127	; 0x7f
 8004f8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f90:	463b      	mov	r3, r7
 8004f92:	4619      	mov	r1, r3
 8004f94:	4805      	ldr	r0, [pc, #20]	; (8004fac <MX_ADC2_Init+0xfc>)
 8004f96:	f003 f99b 	bl	80082d0 <HAL_ADC_ConfigChannel>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004fa0:	f001 fd48 	bl	8006a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004fa4:	bf00      	nop
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000094 	.word	0x20000094
 8004fb0:	50000100 	.word	0x50000100
 8004fb4:	04300002 	.word	0x04300002
 8004fb8:	407f0000 	.word	0x407f0000
 8004fbc:	19200040 	.word	0x19200040
 8004fc0:	2a000400 	.word	0x2a000400

08004fc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b0a0      	sub	sp, #128	; 0x80
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fdc:	f107 0318 	add.w	r3, r7, #24
 8004fe0:	2254      	movs	r2, #84	; 0x54
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f00b fdf1 	bl	8010bcc <memset>
  if(adcHandle->Instance==ADC2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a4c      	ldr	r2, [pc, #304]	; (8005120 <HAL_ADC_MspInit+0x15c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	f040 8090 	bne.w	8005116 <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ffc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005000:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005002:	f107 0318 	add.w	r3, r7, #24
 8005006:	4618      	mov	r0, r3
 8005008:	f006 f864 	bl	800b0d4 <HAL_RCCEx_PeriphCLKConfig>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005012:	f001 fd0f 	bl	8006a34 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005016:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	4a42      	ldr	r2, [pc, #264]	; (8005124 <HAL_ADC_MspInit+0x160>)
 800501c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005022:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005034:	f043 0320 	orr.w	r3, r3, #32
 8005038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800503a:	4b3a      	ldr	r3, [pc, #232]	; (8005124 <HAL_ADC_MspInit+0x160>)
 800503c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005046:	4b37      	ldr	r3, [pc, #220]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	4a36      	ldr	r2, [pc, #216]	; (8005124 <HAL_ADC_MspInit+0x160>)
 800504c:	f043 0304 	orr.w	r3, r3, #4
 8005050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005052:	4b34      	ldr	r3, [pc, #208]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	4a30      	ldr	r2, [pc, #192]	; (8005124 <HAL_ADC_MspInit+0x160>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800506a:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <HAL_ADC_MspInit+0x160>)
 800506c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005076:	2302      	movs	r3, #2
 8005078:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800507a:	2303      	movs	r3, #3
 800507c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005082:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005086:	4619      	mov	r1, r3
 8005088:	4827      	ldr	r0, [pc, #156]	; (8005128 <HAL_ADC_MspInit+0x164>)
 800508a:	f004 fa69 	bl	8009560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800508e:	2303      	movs	r3, #3
 8005090:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005092:	2303      	movs	r3, #3
 8005094:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005096:	2300      	movs	r3, #0
 8005098:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800509a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800509e:	4619      	mov	r1, r3
 80050a0:	4822      	ldr	r0, [pc, #136]	; (800512c <HAL_ADC_MspInit+0x168>)
 80050a2:	f004 fa5d 	bl	8009560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050a6:	2303      	movs	r3, #3
 80050a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050aa:	2303      	movs	r3, #3
 80050ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050b6:	4619      	mov	r1, r3
 80050b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050bc:	f004 fa50 	bl	8009560 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050c2:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <HAL_ADC_MspInit+0x170>)
 80050c4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050c8:	2224      	movs	r2, #36	; 0x24
 80050ca:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050cc:	4b18      	ldr	r3, [pc, #96]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d2:	4b17      	ldr	r3, [pc, #92]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050da:	2280      	movs	r2, #128	; 0x80
 80050dc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050e4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ec:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050f0:	2220      	movs	r2, #32
 80050f2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80050fa:	480d      	ldr	r0, [pc, #52]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 80050fc:	f003 fefe 	bl	8008efc <HAL_DMA_Init>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 8005106:	f001 fc95 	bl	8006a34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a08      	ldr	r2, [pc, #32]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
 8005110:	4a07      	ldr	r2, [pc, #28]	; (8005130 <HAL_ADC_MspInit+0x16c>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005116:	bf00      	nop
 8005118:	3780      	adds	r7, #128	; 0x80
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	50000100 	.word	0x50000100
 8005124:	40021000 	.word	0x40021000
 8005128:	48001400 	.word	0x48001400
 800512c:	48000800 	.word	0x48000800
 8005130:	20000100 	.word	0x20000100
 8005134:	40020008 	.word	0x40020008

08005138 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	3304      	adds	r3, #4
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff f9c5 	bl	80044d8 <__aeabi_i2d>
 800514e:	a30f      	add	r3, pc, #60	; (adr r3, 800518c <Battery_ReadBatteryVoltage+0x54>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7ff fa2a 	bl	80045ac <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <Battery_ReadBatteryVoltage+0x50>)
 8005166:	f7ff fb4b 	bl	8004800 <__aeabi_ddiv>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	f7ff fccb 	bl	8004b0c <__aeabi_d2f>
 8005176:	4602      	mov	r2, r0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	601a      	str	r2, [r3, #0]
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	f3af 8000 	nop.w
 8005188:	40b00000 	.word	0x40b00000
 800518c:	66666666 	.word	0x66666666
 8005190:	400a6666 	.word	0x400a6666
 8005194:	00000000 	.word	0x00000000

08005198 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	3302      	adds	r3, #2
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff f995 	bl	80044d8 <__aeabi_i2d>
 80051ae:	a319      	add	r3, pc, #100	; (adr r3, 8005214 <Battery_ReadCurrent3V3+0x7c>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7ff f9fa 	bl	80045ac <__aeabi_dmul>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <Battery_ReadCurrent3V3+0x78>)
 80051c6:	f7ff fb1b 	bl	8004800 <__aeabi_ddiv>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	f7ff fc9b 	bl	8004b0c <__aeabi_d2f>
 80051d6:	4603      	mov	r3, r0
 80051d8:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff f98e 	bl	80044fc <__aeabi_f2d>
 80051e0:	a309      	add	r3, pc, #36	; (adr r3, 8005208 <Battery_ReadCurrent3V3+0x70>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f7ff fb0b 	bl	8004800 <__aeabi_ddiv>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	f7ff fc8b 	bl	8004b0c <__aeabi_d2f>
 80051f6:	4602      	mov	r2, r0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	f3af 8000 	nop.w
 8005208:	d2f1a9fc 	.word	0xd2f1a9fc
 800520c:	3f60624d 	.word	0x3f60624d
 8005210:	40b00000 	.word	0x40b00000
 8005214:	66666666 	.word	0x66666666
 8005218:	400a6666 	.word	0x400a6666
 800521c:	00000000 	.word	0x00000000

08005220 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff f952 	bl	80044d8 <__aeabi_i2d>
 8005234:	a319      	add	r3, pc, #100	; (adr r3, 800529c <Battery_ReadCurrent5V+0x7c>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7ff f9b7 	bl	80045ac <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <Battery_ReadCurrent5V+0x78>)
 800524c:	f7ff fad8 	bl	8004800 <__aeabi_ddiv>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	f7ff fc58 	bl	8004b0c <__aeabi_d2f>
 800525c:	4603      	mov	r3, r0
 800525e:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff f94b 	bl	80044fc <__aeabi_f2d>
 8005266:	a30a      	add	r3, pc, #40	; (adr r3, 8005290 <Battery_ReadCurrent5V+0x70>)
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f7ff fac8 	bl	8004800 <__aeabi_ddiv>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	f7ff fc48 	bl	8004b0c <__aeabi_d2f>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	609a      	str	r2, [r3, #8]
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w
 8005290:	d2f1a9fc 	.word	0xd2f1a9fc
 8005294:	3f60624d 	.word	0x3f60624d
 8005298:	40b00000 	.word	0x40b00000
 800529c:	66666666 	.word	0x66666666
 80052a0:	400a6666 	.word	0x400a6666
 80052a4:	00000000 	.word	0x00000000

080052a8 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80052bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c0:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff f919 	bl	80044fc <__aeabi_f2d>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	a10f      	add	r1, pc, #60	; (adr r1, 800530c <Battery_RemaningTime+0x64>)
 80052d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d4:	f7ff fa94 	bl	8004800 <__aeabi_ddiv>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	f7ff fc14 	bl	8004b0c <__aeabi_d2f>
 80052e4:	4603      	mov	r3, r0
 80052e6:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80052ec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005308 <Battery_RemaningTime+0x60>
 80052f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f8:	ee17 2a90 	vmov	r2, s15
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	4a5bba00 	.word	0x4a5bba00
 800530c:	9999999a 	.word	0x9999999a
 8005310:	40019999 	.word	0x40019999

08005314 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005314:	b5b0      	push	{r4, r5, r7, lr}
 8005316:	b0b2      	sub	sp, #200	; 0xc8
 8005318:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */



	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 800531a:	4b5d      	ldr	r3, [pc, #372]	; (8005490 <MX_FREERTOS_Init+0x17c>)
 800531c:	9306      	str	r3, [sp, #24]
 800531e:	2302      	movs	r3, #2
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	2301      	movs	r3, #1
 8005324:	9304      	str	r3, [sp, #16]
 8005326:	2304      	movs	r3, #4
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	4b5a      	ldr	r3, [pc, #360]	; (8005494 <MX_FREERTOS_Init+0x180>)
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	4b58      	ldr	r3, [pc, #352]	; (8005494 <MX_FREERTOS_Init+0x180>)
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2340      	movs	r3, #64	; 0x40
 8005338:	4a56      	ldr	r2, [pc, #344]	; (8005494 <MX_FREERTOS_Init+0x180>)
 800533a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800533e:	4856      	ldr	r0, [pc, #344]	; (8005498 <MX_FREERTOS_Init+0x184>)
 8005340:	f001 fdee 	bl	8006f20 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 8005344:	4955      	ldr	r1, [pc, #340]	; (800549c <MX_FREERTOS_Init+0x188>)
 8005346:	4856      	ldr	r0, [pc, #344]	; (80054a0 <MX_FREERTOS_Init+0x18c>)
 8005348:	f000 fcbc 	bl	8005cc4 <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 8005352:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005356:	4618      	mov	r0, r3
 8005358:	f009 fb22 	bl	800e9a0 <osMutexCreate>
 800535c:	4603      	mov	r3, r0
 800535e:	4a51      	ldr	r2, [pc, #324]	; (80054a4 <MX_FREERTOS_Init+0x190>)
 8005360:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005368:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800536c:	2101      	movs	r1, #1
 800536e:	4618      	mov	r0, r3
 8005370:	f009 fb22 	bl	800e9b8 <osSemaphoreCreate>
 8005374:	4603      	mov	r3, r0
 8005376:	4a4c      	ldr	r2, [pc, #304]	; (80054a8 <MX_FREERTOS_Init+0x194>)
 8005378:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800537a:	4b4c      	ldr	r3, [pc, #304]	; (80054ac <MX_FREERTOS_Init+0x198>)
 800537c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005380:	461d      	mov	r5, r3
 8005382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005386:	682b      	ldr	r3, [r5, #0]
 8005388:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800538a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800538e:	2100      	movs	r1, #0
 8005390:	4618      	mov	r0, r3
 8005392:	f009 faca 	bl	800e92a <osThreadCreate>
 8005396:	4603      	mov	r3, r0
 8005398:	4a45      	ldr	r2, [pc, #276]	; (80054b0 <MX_FREERTOS_Init+0x19c>)
 800539a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 800539c:	4b45      	ldr	r3, [pc, #276]	; (80054b4 <MX_FREERTOS_Init+0x1a0>)
 800539e:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80053a2:	461d      	mov	r5, r3
 80053a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f009 fab9 	bl	800e92a <osThreadCreate>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <MX_FREERTOS_Init+0x1a4>)
 80053bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityIdle, 0, 128);
 80053be:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <MX_FREERTOS_Init+0x1a8>)
 80053c0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80053c4:	461d      	mov	r5, r3
 80053c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f009 faa8 	bl	800e92a <osThreadCreate>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a38      	ldr	r2, [pc, #224]	; (80054c0 <MX_FREERTOS_Init+0x1ac>)
 80053de:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityIdle, 0, 128);
 80053e0:	4b38      	ldr	r3, [pc, #224]	; (80054c4 <MX_FREERTOS_Init+0x1b0>)
 80053e2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80053e6:	461d      	mov	r5, r3
 80053e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 80053f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f009 fa97 	bl	800e92a <osThreadCreate>
 80053fc:	4603      	mov	r3, r0
 80053fe:	4a32      	ldr	r2, [pc, #200]	; (80054c8 <MX_FREERTOS_Init+0x1b4>)
 8005400:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityIdle, 0, 128);
 8005402:	4b32      	ldr	r3, [pc, #200]	; (80054cc <MX_FREERTOS_Init+0x1b8>)
 8005404:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005408:	461d      	mov	r5, r3
 800540a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800540c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 8005412:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f009 fa86 	bl	800e92a <osThreadCreate>
 800541e:	4603      	mov	r3, r0
 8005420:	4a2b      	ldr	r2, [pc, #172]	; (80054d0 <MX_FREERTOS_Init+0x1bc>)
 8005422:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 128);
 8005424:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <MX_FREERTOS_Init+0x1c0>)
 8005426:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800542a:	461d      	mov	r5, r3
 800542c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800542e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8005434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f009 fa75 	bl	800e92a <osThreadCreate>
 8005440:	4603      	mov	r3, r0
 8005442:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <MX_FREERTOS_Init+0x1c4>)
 8005444:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityIdle, 0, 256);
 8005446:	4b25      	ldr	r3, [pc, #148]	; (80054dc <MX_FREERTOS_Init+0x1c8>)
 8005448:	f107 0414 	add.w	r4, r7, #20
 800544c:	461d      	mov	r5, r3
 800544e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8005456:	f107 0314 	add.w	r3, r7, #20
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f009 fa64 	bl	800e92a <osThreadCreate>
 8005462:	4603      	mov	r3, r0
 8005464:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <MX_FREERTOS_Init+0x1cc>)
 8005466:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityIdle, 0, 128);
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <MX_FREERTOS_Init+0x1d0>)
 800546a:	463c      	mov	r4, r7
 800546c:	461d      	mov	r5, r3
 800546e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 8005476:	463b      	mov	r3, r7
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f009 fa55 	bl	800e92a <osThreadCreate>
 8005480:	4603      	mov	r3, r0
 8005482:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <MX_FREERTOS_Init+0x1d4>)
 8005484:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8005486:	bf00      	nop
 8005488:	37a8      	adds	r7, #168	; 0xa8
 800548a:	46bd      	mov	sp, r7
 800548c:	bdb0      	pop	{r4, r5, r7, pc}
 800548e:	bf00      	nop
 8005490:	200007fc 	.word	0x200007fc
 8005494:	48000400 	.word	0x48000400
 8005498:	200002b4 	.word	0x200002b4
 800549c:	20000240 	.word	0x20000240
 80054a0:	200001f4 	.word	0x200001f4
 80054a4:	200001ec 	.word	0x200001ec
 80054a8:	200001f0 	.word	0x200001f0
 80054ac:	08011c08 	.word	0x08011c08
 80054b0:	200001cc 	.word	0x200001cc
 80054b4:	08011c1c 	.word	0x08011c1c
 80054b8:	200001d0 	.word	0x200001d0
 80054bc:	08011c30 	.word	0x08011c30
 80054c0:	200001d4 	.word	0x200001d4
 80054c4:	08011c44 	.word	0x08011c44
 80054c8:	200001d8 	.word	0x200001d8
 80054cc:	08011c58 	.word	0x08011c58
 80054d0:	200001dc 	.word	0x200001dc
 80054d4:	08011c6c 	.word	0x08011c6c
 80054d8:	200001e0 	.word	0x200001e0
 80054dc:	08011c80 	.word	0x08011c80
 80054e0:	200001e4 	.word	0x200001e4
 80054e4:	08011c94 	.word	0x08011c94
 80054e8:	200001e8 	.word	0x200001e8

080054ec <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80054f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054fc:	f004 f9ca 	bl	8009894 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8005500:	f241 3088 	movw	r0, #5000	; 0x1388
 8005504:	f00a f8c2 	bl	800f68c <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005508:	e7f4      	b.n	80054f4 <StartLedTask+0x8>
	...

0800550c <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8005514:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800555c <StartRoll_PID+0x50>
 8005518:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005560 <StartRoll_PID+0x54>
 800551c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005564 <StartRoll_PID+0x58>
 8005520:	4811      	ldr	r0, [pc, #68]	; (8005568 <StartRoll_PID+0x5c>)
 8005522:	f001 fad7 	bl	8006ad4 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <StartRoll_PID+0x60>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2119      	movs	r1, #25
 800552c:	4618      	mov	r0, r3
 800552e:	f009 fd6b 	bl	800f008 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8005532:	490f      	ldr	r1, [pc, #60]	; (8005570 <StartRoll_PID+0x64>)
 8005534:	480f      	ldr	r0, [pc, #60]	; (8005574 <StartRoll_PID+0x68>)
 8005536:	f000 fc01 	bl	8005d3c <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <StartRoll_PID+0x60>)
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	2300      	movs	r3, #0
 8005540:	2200      	movs	r2, #0
 8005542:	2100      	movs	r1, #0
 8005544:	f009 fbec 	bl	800ed20 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005548:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <StartRoll_PID+0x6c>)
 800554a:	4a09      	ldr	r2, [pc, #36]	; (8005570 <StartRoll_PID+0x64>)
 800554c:	490b      	ldr	r1, [pc, #44]	; (800557c <StartRoll_PID+0x70>)
 800554e:	4806      	ldr	r0, [pc, #24]	; (8005568 <StartRoll_PID+0x5c>)
 8005550:	f001 fb1e 	bl	8006b90 <Pid_CompensateRoll>


		vTaskDelay(150);
 8005554:	2096      	movs	r0, #150	; 0x96
 8005556:	f00a f899 	bl	800f68c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800555a:	e7e4      	b.n	8005526 <StartRoll_PID+0x1a>
 800555c:	bdb15662 	.word	0xbdb15662
 8005560:	bce59984 	.word	0xbce59984
 8005564:	be07bf5a 	.word	0xbe07bf5a
 8005568:	200001a8 	.word	0x200001a8
 800556c:	200001ec 	.word	0x200001ec
 8005570:	20000240 	.word	0x20000240
 8005574:	200001f4 	.word	0x200001f4
 8005578:	200002b4 	.word	0x200002b4
 800557c:	200002a0 	.word	0x200002a0

08005580 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 8005588:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800558c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80055d0 <StartPitch_PID+0x50>
 8005590:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80055d4 <StartPitch_PID+0x54>
 8005594:	4810      	ldr	r0, [pc, #64]	; (80055d8 <StartPitch_PID+0x58>)
 8005596:	f001 fa9d 	bl	8006ad4 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800559a:	4b10      	ldr	r3, [pc, #64]	; (80055dc <StartPitch_PID+0x5c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2119      	movs	r1, #25
 80055a0:	4618      	mov	r0, r3
 80055a2:	f009 fd31 	bl	800f008 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80055a6:	490e      	ldr	r1, [pc, #56]	; (80055e0 <StartPitch_PID+0x60>)
 80055a8:	480e      	ldr	r0, [pc, #56]	; (80055e4 <StartPitch_PID+0x64>)
 80055aa:	f000 fc19 	bl	8005de0 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <StartPitch_PID+0x5c>)
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	2200      	movs	r2, #0
 80055b6:	2100      	movs	r1, #0
 80055b8:	f009 fbb2 	bl	800ed20 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <StartPitch_PID+0x68>)
 80055be:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <StartPitch_PID+0x60>)
 80055c0:	490a      	ldr	r1, [pc, #40]	; (80055ec <StartPitch_PID+0x6c>)
 80055c2:	4805      	ldr	r0, [pc, #20]	; (80055d8 <StartPitch_PID+0x58>)
 80055c4:	f001 fbaa 	bl	8006d1c <Pid_CompensatePitch>

		vTaskDelay(150);
 80055c8:	2096      	movs	r0, #150	; 0x96
 80055ca:	f00a f85f 	bl	800f68c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ce:	e7e4      	b.n	800559a <StartPitch_PID+0x1a>
 80055d0:	3ccccccd 	.word	0x3ccccccd
 80055d4:	42c80000 	.word	0x42c80000
 80055d8:	20000160 	.word	0x20000160
 80055dc:	200001ec 	.word	0x200001ec
 80055e0:	20000240 	.word	0x20000240
 80055e4:	200001f4 	.word	0x200001f4
 80055e8:	200002b4 	.word	0x200002b4
 80055ec:	200002a0 	.word	0x200002a0

080055f0 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 80055f8:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055fc:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005640 <StartYaw_PID+0x50>
 8005600:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005644 <StartYaw_PID+0x54>
 8005604:	4810      	ldr	r0, [pc, #64]	; (8005648 <StartYaw_PID+0x58>)
 8005606:	f001 fa65 	bl	8006ad4 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <StartYaw_PID+0x5c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2119      	movs	r1, #25
 8005610:	4618      	mov	r0, r3
 8005612:	f009 fcf9 	bl	800f008 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 8005616:	490e      	ldr	r1, [pc, #56]	; (8005650 <StartYaw_PID+0x60>)
 8005618:	480e      	ldr	r0, [pc, #56]	; (8005654 <StartYaw_PID+0x64>)
 800561a:	f000 fc33 	bl	8005e84 <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <StartYaw_PID+0x5c>)
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	2300      	movs	r3, #0
 8005624:	2200      	movs	r2, #0
 8005626:	2100      	movs	r1, #0
 8005628:	f009 fb7a 	bl	800ed20 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <StartYaw_PID+0x68>)
 800562e:	4a08      	ldr	r2, [pc, #32]	; (8005650 <StartYaw_PID+0x60>)
 8005630:	490a      	ldr	r1, [pc, #40]	; (800565c <StartYaw_PID+0x6c>)
 8005632:	4805      	ldr	r0, [pc, #20]	; (8005648 <StartYaw_PID+0x58>)
 8005634:	f001 fa69 	bl	8006b0a <Pid_CompensateYaw>

		vTaskDelay(150);
 8005638:	2096      	movs	r0, #150	; 0x96
 800563a:	f00a f827 	bl	800f68c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800563e:	e7e4      	b.n	800560a <StartYaw_PID+0x1a>
 8005640:	3ccccccd 	.word	0x3ccccccd
 8005644:	42c80000 	.word	0x42c80000
 8005648:	20000184 	.word	0x20000184
 800564c:	200001ec 	.word	0x200001ec
 8005650:	20000240 	.word	0x20000240
 8005654:	200001f4 	.word	0x200001f4
 8005658:	200002b4 	.word	0x200002b4
 800565c:	200002a0 	.word	0x200002a0

08005660 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 8005668:	480f      	ldr	r0, [pc, #60]	; (80056a8 <StartPressureMonitor+0x48>)
 800566a:	f000 f9a3 	bl	80059b4 <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <StartPressureMonitor+0x4c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	490e      	ldr	r1, [pc, #56]	; (80056b0 <StartPressureMonitor+0x50>)
 8005676:	480c      	ldr	r0, [pc, #48]	; (80056a8 <StartPressureMonitor+0x48>)
 8005678:	f000 f9e6 	bl	8005a48 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <StartPressureMonitor+0x4c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	490b      	ldr	r1, [pc, #44]	; (80056b0 <StartPressureMonitor+0x50>)
 8005684:	4808      	ldr	r0, [pc, #32]	; (80056a8 <StartPressureMonitor+0x48>)
 8005686:	f000 f92f 	bl	80058e8 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <StartPressureMonitor+0x4c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	4907      	ldr	r1, [pc, #28]	; (80056b0 <StartPressureMonitor+0x50>)
 8005692:	4805      	ldr	r0, [pc, #20]	; (80056a8 <StartPressureMonitor+0x48>)
 8005694:	f000 f8d2 	bl	800583c <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 8005698:	4805      	ldr	r0, [pc, #20]	; (80056b0 <StartPressureMonitor+0x50>)
 800569a:	f000 fa01 	bl	8005aa0 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
		vTaskDelay(500);
 800569e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056a2:	f009 fff3 	bl	800f68c <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056a6:	e7e9      	b.n	800567c <StartPressureMonitor+0x1c>
 80056a8:	200001f4 	.word	0x200001f4
 80056ac:	200001ec 	.word	0x200001ec
 80056b0:	200002e4 	.word	0x200002e4

080056b4 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056c0:	4909      	ldr	r1, [pc, #36]	; (80056e8 <StartGPS+0x34>)
 80056c2:	480a      	ldr	r0, [pc, #40]	; (80056ec <StartGPS+0x38>)
 80056c4:	f007 f978 	bl	800c9b8 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 80056c8:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <StartGPS+0x3c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4909      	ldr	r1, [pc, #36]	; (80056f4 <StartGPS+0x40>)
 80056ce:	4618      	mov	r0, r3
 80056d0:	f009 fc9a 	bl	800f008 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 80056d4:	4908      	ldr	r1, [pc, #32]	; (80056f8 <StartGPS+0x44>)
 80056d6:	4804      	ldr	r0, [pc, #16]	; (80056e8 <StartGPS+0x34>)
 80056d8:	f000 fd52 	bl	8006180 <gps_ReadNMEA>
	  vTaskDelay(1000);
 80056dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056e0:	f009 ffd4 	bl	800f68c <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056e4:	e7ea      	b.n	80056bc <StartGPS+0x8>
 80056e6:	bf00      	nop
 80056e8:	20000328 	.word	0x20000328
 80056ec:	20000848 	.word	0x20000848
 80056f0:	200001f0 	.word	0x200001f0
 80056f4:	000186a0 	.word	0x000186a0
 80056f8:	200002f8 	.word	0x200002f8

080056fc <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]





    vTaskDelay(1);
 8005704:	2001      	movs	r0, #1
 8005706:	f009 ffc1 	bl	800f68c <vTaskDelay>
 800570a:	e7fb      	b.n	8005704 <StartMainTask+0x8>

0800570c <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 8005714:	4909      	ldr	r1, [pc, #36]	; (800573c <StartBatteryMonitoring+0x30>)
 8005716:	480a      	ldr	r0, [pc, #40]	; (8005740 <StartBatteryMonitoring+0x34>)
 8005718:	f7ff fd0e 	bl	8005138 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 800571c:	4907      	ldr	r1, [pc, #28]	; (800573c <StartBatteryMonitoring+0x30>)
 800571e:	4808      	ldr	r0, [pc, #32]	; (8005740 <StartBatteryMonitoring+0x34>)
 8005720:	f7ff fd7e 	bl	8005220 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 8005724:	4905      	ldr	r1, [pc, #20]	; (800573c <StartBatteryMonitoring+0x30>)
 8005726:	4806      	ldr	r0, [pc, #24]	; (8005740 <StartBatteryMonitoring+0x34>)
 8005728:	f7ff fd36 	bl	8005198 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 800572c:	4804      	ldr	r0, [pc, #16]	; (8005740 <StartBatteryMonitoring+0x34>)
 800572e:	f7ff fdbb 	bl	80052a8 <Battery_RemaningTime>
    vTaskDelay(5000);
 8005732:	f241 3088 	movw	r0, #5000	; 0x1388
 8005736:	f009 ffa9 	bl	800f68c <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 800573a:	e7eb      	b.n	8005714 <StartBatteryMonitoring+0x8>
 800573c:	20000710 	.word	0x20000710
 8005740:	20000318 	.word	0x20000318

08005744 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af04      	add	r7, sp, #16
 800574a:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800574c:	230a      	movs	r3, #10
 800574e:	9302      	str	r3, [sp, #8]
 8005750:	2301      	movs	r3, #1
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	f107 030f 	add.w	r3, r7, #15
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	2301      	movs	r3, #1
 800575c:	221b      	movs	r2, #27
 800575e:	21ec      	movs	r1, #236	; 0xec
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f004 fa55 	bl	8009c10 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800576c:	b2db      	uxtb	r3, r3
 800576e:	3301      	adds	r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005774:	230a      	movs	r3, #10
 8005776:	9302      	str	r3, [sp, #8]
 8005778:	2301      	movs	r3, #1
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	f107 030e 	add.w	r3, r7, #14
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2301      	movs	r3, #1
 8005784:	221b      	movs	r2, #27
 8005786:	21ec      	movs	r1, #236	; 0xec
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f004 f92d 	bl	80099e8 <HAL_I2C_Mem_Write>
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 8005796:	b580      	push	{r7, lr}
 8005798:	b088      	sub	sp, #32
 800579a:	af04      	add	r7, sp, #16
 800579c:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800579e:	230a      	movs	r3, #10
 80057a0:	9302      	str	r3, [sp, #8]
 80057a2:	2301      	movs	r3, #1
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	f107 030f 	add.w	r3, r7, #15
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2301      	movs	r3, #1
 80057ae:	221b      	movs	r2, #27
 80057b0:	21ec      	movs	r1, #236	; 0xec
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f004 fa2c 	bl	8009c10 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	f003 0331 	and.w	r3, r3, #49	; 0x31
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	3301      	adds	r3, #1
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80057c6:	230a      	movs	r3, #10
 80057c8:	9302      	str	r3, [sp, #8]
 80057ca:	2301      	movs	r3, #1
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	f107 030e 	add.w	r3, r7, #14
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2301      	movs	r3, #1
 80057d6:	221b      	movs	r2, #27
 80057d8:	21ec      	movs	r1, #236	; 0xec
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f004 f904 	bl	80099e8 <HAL_I2C_Mem_Write>
}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af04      	add	r7, sp, #16
 80057ee:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80057f0:	230a      	movs	r3, #10
 80057f2:	9302      	str	r3, [sp, #8]
 80057f4:	2301      	movs	r3, #1
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	f107 030f 	add.w	r3, r7, #15
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2301      	movs	r3, #1
 8005800:	221b      	movs	r2, #27
 8005802:	21ec      	movs	r1, #236	; 0xec
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f004 fa03 	bl	8009c10 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	3330      	adds	r3, #48	; 0x30
 8005814:	b2db      	uxtb	r3, r3
 8005816:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005818:	230a      	movs	r3, #10
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	2301      	movs	r3, #1
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	f107 030e 	add.w	r3, r7, #14
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	2301      	movs	r3, #1
 8005828:	221b      	movs	r2, #27
 800582a:	21ec      	movs	r1, #236	; 0xec
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f004 f8db 	bl	80099e8 <HAL_I2C_Mem_Write>
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af04      	add	r7, sp, #16
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 8005848:	2123      	movs	r1, #35	; 0x23
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f009 fbdc 	bl	800f008 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8005850:	230a      	movs	r3, #10
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	2301      	movs	r3, #1
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	f107 0313 	add.w	r3, r7, #19
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2301      	movs	r3, #1
 8005860:	2207      	movs	r2, #7
 8005862:	21ec      	movs	r1, #236	; 0xec
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f004 f9d3 	bl	8009c10 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 800586a:	230a      	movs	r3, #10
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	2301      	movs	r3, #1
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	f107 0312 	add.w	r3, r7, #18
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2301      	movs	r3, #1
 800587a:	2208      	movs	r2, #8
 800587c:	21ec      	movs	r1, #236	; 0xec
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f004 f9c6 	bl	8009c10 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 8005884:	230a      	movs	r3, #10
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	2301      	movs	r3, #1
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	f107 0311 	add.w	r3, r7, #17
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2301      	movs	r3, #1
 8005894:	2209      	movs	r2, #9
 8005896:	21ec      	movs	r1, #236	; 0xec
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f004 f9b9 	bl	8009c10 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800589e:	2300      	movs	r3, #0
 80058a0:	2200      	movs	r2, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f009 fa3b 	bl	800ed20 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	461a      	mov	r2, r3
 80058ae:	7cbb      	ldrb	r3, [r7, #18]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	441a      	add	r2, r3
 80058b4:	7c7b      	ldrb	r3, [r7, #17]
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	4413      	add	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <BMP390_ReadTemp+0xa8>)
 80058c0:	fba3 1302 	umull	r1, r3, r3, r2
 80058c4:	1ad2      	subs	r2, r2, r3
 80058c6:	0852      	lsrs	r2, r2, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	0c5b      	lsrs	r3, r3, #17
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80058da:	bf00      	nop
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	04000105 	.word	0x04000105

080058e8 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af04      	add	r7, sp, #16
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80058f4:	2123      	movs	r1, #35	; 0x23
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f009 fb86 	bl	800f008 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80058fc:	230a      	movs	r3, #10
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	2301      	movs	r3, #1
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	f107 0313 	add.w	r3, r7, #19
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	2301      	movs	r3, #1
 800590c:	2204      	movs	r2, #4
 800590e:	21ec      	movs	r1, #236	; 0xec
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f004 f97d 	bl	8009c10 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 8005916:	230a      	movs	r3, #10
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	2301      	movs	r3, #1
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	f107 0312 	add.w	r3, r7, #18
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2301      	movs	r3, #1
 8005926:	2205      	movs	r2, #5
 8005928:	21ec      	movs	r1, #236	; 0xec
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f004 f970 	bl	8009c10 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 8005930:	230a      	movs	r3, #10
 8005932:	9302      	str	r3, [sp, #8]
 8005934:	2301      	movs	r3, #1
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	f107 0311 	add.w	r3, r7, #17
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2301      	movs	r3, #1
 8005940:	2206      	movs	r2, #6
 8005942:	21ec      	movs	r1, #236	; 0xec
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f004 f963 	bl	8009c10 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800594a:	2300      	movs	r3, #0
 800594c:	2200      	movs	r2, #0
 800594e:	2100      	movs	r1, #0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f009 f9e5 	bl	800ed20 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 8005956:	7cfb      	ldrb	r3, [r7, #19]
 8005958:	461a      	mov	r2, r3
 800595a:	7cbb      	ldrb	r3, [r7, #18]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	441a      	add	r2, r3
 8005960:	7c7b      	ldrb	r3, [r7, #17]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	4413      	add	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f7fe fda5 	bl	80044b8 <__aeabi_ui2d>
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <BMP390_ReadPress+0xc8>)
 8005974:	f7fe fe1a 	bl	80045ac <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4610      	mov	r0, r2
 800597e:	4619      	mov	r1, r3
 8005980:	a309      	add	r3, pc, #36	; (adr r3, 80059a8 <BMP390_ReadPress+0xc0>)
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f7fe fc5b 	bl	8004240 <__adddf3>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	f7ff f8bb 	bl	8004b0c <__aeabi_d2f>
 8005996:	4602      	mov	r2, r0
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	601a      	str	r2, [r3, #0]

}
 800599c:	bf00      	nop
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	f3af 8000 	nop.w
 80059a8:	00000000 	.word	0x00000000
 80059ac:	4072c000 	.word	0x4072c000
 80059b0:	3f0db000 	.word	0x3f0db000

080059b4 <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af04      	add	r7, sp, #16
 80059ba:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 80059c0:	230a      	movs	r3, #10
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	2301      	movs	r3, #1
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	f107 030e 	add.w	r3, r7, #14
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	2301      	movs	r3, #1
 80059d0:	2200      	movs	r2, #0
 80059d2:	21ec      	movs	r1, #236	; 0xec
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f004 f91b 	bl	8009c10 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	2b60      	cmp	r3, #96	; 0x60
 80059de:	d001      	beq.n	80059e4 <BMP390_Init+0x30>
		res = 1;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 80059e4:	230a      	movs	r3, #10
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	2301      	movs	r3, #1
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f107 030e 	add.w	r3, r7, #14
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	2201      	movs	r2, #1
 80059f6:	21ec      	movs	r1, #236	; 0xec
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f004 f909 	bl	8009c10 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <BMP390_Init+0x54>
		res = 1;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fec4 	bl	8005796 <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff fe98 	bl	8005744 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fee7 	bl	80057e8 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005a1a:	2005      	movs	r0, #5
 8005a1c:	f001 ff60 	bl	80078e0 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005a20:	2342      	movs	r3, #66	; 0x42
 8005a22:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005a24:	230a      	movs	r3, #10
 8005a26:	9302      	str	r3, [sp, #8]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	f107 030e 	add.w	r3, r7, #14
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	2301      	movs	r3, #1
 8005a34:	2219      	movs	r2, #25
 8005a36:	21ec      	movs	r1, #236	; 0xec
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f003 ffd5 	bl	80099e8 <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005a54:	2300      	movs	r3, #0
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	e010      	b.n	8005a7c <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff ff42 	bl	80058e8 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	edd3 7a00 	vldr	s15, [r3]
 8005a6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a72:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	ddeb      	ble.n	8005a5a <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005a82:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a86:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005a94:	bf00      	nop
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	0000      	movs	r0, r0
	...

08005aa0 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	ed93 7a00 	vldr	s14, [r3]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ab4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ab8:	ee16 0a90 	vmov	r0, s13
 8005abc:	f7fe fd1e 	bl	80044fc <__aeabi_f2d>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005b10 <BMP390_GetRelativeAltitude+0x70>
 8005ac8:	ec43 2b10 	vmov	d0, r2, r3
 8005acc:	f00b f948 	bl	8010d60 <pow>
 8005ad0:	ec53 2b10 	vmov	r2, r3, d0
 8005ad4:	f04f 0000 	mov.w	r0, #0
 8005ad8:	4911      	ldr	r1, [pc, #68]	; (8005b20 <BMP390_GetRelativeAltitude+0x80>)
 8005ada:	f7fe fbaf 	bl	800423c <__aeabi_dsub>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	a30c      	add	r3, pc, #48	; (adr r3, 8005b18 <BMP390_GetRelativeAltitude+0x78>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f7fe fd5e 	bl	80045ac <__aeabi_dmul>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4610      	mov	r0, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	f7ff f808 	bl	8004b0c <__aeabi_d2f>
 8005afc:	4602      	mov	r2, r0
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]
}
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w
 8005b10:	1a36e2eb 	.word	0x1a36e2eb
 8005b14:	3fc85bc0 	.word	0x3fc85bc0
 8005b18:	00000000 	.word	0x00000000
 8005b1c:	40e5a540 	.word	0x40e5a540
 8005b20:	3ff00000 	.word	0x3ff00000

08005b24 <BNO055_SetPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14


void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af04      	add	r7, sp, #16
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005b30:	230a      	movs	r3, #10
 8005b32:	9302      	str	r3, [sp, #8]
 8005b34:	2301      	movs	r3, #1
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	1cfb      	adds	r3, r7, #3
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	2207      	movs	r2, #7
 8005b40:	2150      	movs	r1, #80	; 0x50
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f003 ff50 	bl	80099e8 <HAL_I2C_Mem_Write>
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <BNO055_SetOperationMode>:

void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af04      	add	r7, sp, #16
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005b5e:	7afa      	ldrb	r2, [r7, #11]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005b66:	230a      	movs	r3, #10
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	f107 030b 	add.w	r3, r7, #11
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2301      	movs	r3, #1
 8005b76:	223d      	movs	r2, #61	; 0x3d
 8005b78:	2150      	movs	r1, #80	; 0x50
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f003 ff34 	bl	80099e8 <HAL_I2C_Mem_Write>
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <BNO055_ReadSystemReg>:
  bno055_opmode_t mode;
  HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
  return mode;
}

uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af04      	add	r7, sp, #16
 8005b8e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005b90:	2364      	movs	r3, #100	; 0x64
 8005b92:	9302      	str	r3, [sp, #8]
 8005b94:	2301      	movs	r3, #1
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	f107 030f 	add.w	r3, r7, #15
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	223f      	movs	r2, #63	; 0x3f
 8005ba2:	2150      	movs	r1, #80	; 0x50
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f004 f833 	bl	8009c10 <HAL_I2C_Mem_Read>
	return system_reg;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <BNO055_EnableExtClock>:

//Enable or disable the external oscillator --> If the lse is disable then we use lsi
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af04      	add	r7, sp, #16
 8005bba:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ffe3 	bl	8005b88 <BNO055_ReadSystemReg>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	3b80      	subs	r3, #128	; 0x80
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005bd4:	230a      	movs	r3, #10
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	2301      	movs	r3, #1
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	f107 030e 	add.w	r3, r7, #14
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	2301      	movs	r3, #1
 8005be4:	223f      	movs	r2, #63	; 0x3f
 8005be6:	2150      	movs	r1, #80	; 0x50
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f003 fefd 	bl	80099e8 <HAL_I2C_Mem_Write>
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <BNO055_TriggerSelfTest>:
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F);
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
}

void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b088      	sub	sp, #32
 8005bfa:	af04      	add	r7, sp, #16
 8005bfc:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff ffc2 	bl	8005b88 <BNO055_ReadSystemReg>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	3301      	adds	r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005c16:	230a      	movs	r3, #10
 8005c18:	9302      	str	r3, [sp, #8]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	f107 030e 	add.w	r3, r7, #14
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2301      	movs	r3, #1
 8005c26:	223f      	movs	r2, #63	; 0x3f
 8005c28:	2150      	movs	r1, #80	; 0x50
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f003 fedc 	bl	80099e8 <HAL_I2C_Mem_Write>
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <BNO055_CheckSelfTestResult>:

//Check the self test result and check some basic register of IMU --> If an error occure then return 1
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af04      	add	r7, sp, #16
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005c46:	230a      	movs	r3, #10
 8005c48:	9302      	str	r3, [sp, #8]
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	f107 030e 	add.w	r3, r7, #14
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2301      	movs	r3, #1
 8005c56:	2236      	movs	r2, #54	; 0x36
 8005c58:	2150      	movs	r1, #80	; 0x50
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f003 ffd8 	bl	8009c10 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005c60:	7bbb      	ldrb	r3, [r7, #14]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d001      	beq.n	8005c6e <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff ffc1 	bl	8005bf6 <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c78:	f008 fe7e 	bl	800e978 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005c7c:	230a      	movs	r3, #10
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	2301      	movs	r3, #1
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	f107 030e 	add.w	r3, r7, #14
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	223a      	movs	r2, #58	; 0x3a
 8005c8e:	2150      	movs	r1, #80	; 0x50
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f003 ffbd 	bl	8009c10 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005ca0:	230a      	movs	r3, #10
 8005ca2:	9302      	str	r3, [sp, #8]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	f107 030e 	add.w	r3, r7, #14
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	2239      	movs	r2, #57	; 0x39
 8005cb2:	2150      	movs	r1, #80	; 0x50
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f003 ffab 	bl	8009c10 <HAL_I2C_Mem_Read>

	return res;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <BNO055_Init>:

uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8005cda:	2100      	movs	r1, #0
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ff21 	bl	8005b24 <BNO055_SetPage>
	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ff66 	bl	8005bb4 <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8005ce8:	20c8      	movs	r0, #200	; 0xc8
 8005cea:	f008 fe45 	bl	800e978 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ffa1 	bl	8005c38 <BNO055_CheckSelfTestResult>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <BNO055_Init+0x40>
		res = 1;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	210c      	movs	r1, #12
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff21 	bl	8005b50 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8005d0e:	230a      	movs	r3, #10
 8005d10:	9302      	str	r3, [sp, #8]
 8005d12:	2301      	movs	r3, #1
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f107 030e 	add.w	r3, r7, #14
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	223d      	movs	r2, #61	; 0x3d
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f003 ff74 	bl	8009c10 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d001      	beq.n	8005d32 <BNO055_Init+0x6e>
		res = 1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af04      	add	r7, sp, #16
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 8005d46:	230a      	movs	r3, #10
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	f107 030f 	add.w	r3, r7, #15
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	2301      	movs	r3, #1
 8005d56:	221c      	movs	r2, #28
 8005d58:	2150      	movs	r1, #80	; 0x50
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f003 ff58 	bl	8009c10 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 8005d60:	230a      	movs	r3, #10
 8005d62:	9302      	str	r3, [sp, #8]
 8005d64:	2301      	movs	r3, #1
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f107 030e 	add.w	r3, r7, #14
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	221d      	movs	r2, #29
 8005d72:	2150      	movs	r1, #80	; 0x50
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f003 ff4b 	bl	8009c10 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_roll = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	7bbb      	ldrb	r3, [r7, #14]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	4413      	add	r3, r2
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <BNO055_ReadEuler_Roll+0x98>)
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_roll > 2000){
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005da8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005dd8 <BNO055_ReadEuler_Roll+0x9c>
 8005dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db4:	dc00      	bgt.n	8005db8 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
	}
}
 8005db6:	e009      	b.n	8005dcc <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005dbe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005ddc <BNO055_ReadEuler_Roll+0xa0>
 8005dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000000 	.word	0x20000000
 8005dd8:	44fa0000 	.word	0x44fa0000
 8005ddc:	45800000 	.word	0x45800000

08005de0 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 8005dea:	230a      	movs	r3, #10
 8005dec:	9302      	str	r3, [sp, #8]
 8005dee:	2301      	movs	r3, #1
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f107 030f 	add.w	r3, r7, #15
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	221e      	movs	r2, #30
 8005dfc:	2150      	movs	r1, #80	; 0x50
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f003 ff06 	bl	8009c10 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8005e04:	230a      	movs	r3, #10
 8005e06:	9302      	str	r3, [sp, #8]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	f107 030e 	add.w	r3, r7, #14
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	2301      	movs	r3, #1
 8005e14:	221f      	movs	r2, #31
 8005e16:	2150      	movs	r1, #80	; 0x50
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f003 fef9 	bl	8009c10 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_pitch = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	461a      	mov	r2, r3
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	4413      	add	r3, r2
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e30:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <BNO055_ReadEuler_Pitch+0x98>)
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_pitch > 2000){
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e4c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005e7c <BNO055_ReadEuler_Pitch+0x9c>
 8005e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e58:	dc00      	bgt.n	8005e5c <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
	}
}
 8005e5a:	e009      	b.n	8005e70 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e62:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005e80 <BNO055_ReadEuler_Pitch+0xa0>
 8005e66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	44fa0000 	.word	0x44fa0000
 8005e80:	45800000 	.word	0x45800000

08005e84 <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af04      	add	r7, sp, #16
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 8005e8e:	230a      	movs	r3, #10
 8005e90:	9302      	str	r3, [sp, #8]
 8005e92:	2301      	movs	r3, #1
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	f107 030f 	add.w	r3, r7, #15
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	221a      	movs	r2, #26
 8005ea0:	2150      	movs	r1, #80	; 0x50
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f003 feb4 	bl	8009c10 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8005ea8:	230a      	movs	r3, #10
 8005eaa:	9302      	str	r3, [sp, #8]
 8005eac:	2301      	movs	r3, #1
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	f107 030e 	add.w	r3, r7, #14
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	221b      	movs	r2, #27
 8005eba:	2150      	movs	r1, #80	; 0x50
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f003 fea7 	bl	8009c10 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_heading = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	4413      	add	r3, r2
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <BNO055_ReadEuler_Yaw+0x70>)
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000000 	.word	0x20000000

08005ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <MX_DMA_Init+0x50>)
 8005f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f02:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <MX_DMA_Init+0x50>)
 8005f04:	f043 0304 	orr.w	r3, r3, #4
 8005f08:	6493      	str	r3, [r2, #72]	; 0x48
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <MX_DMA_Init+0x50>)
 8005f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <MX_DMA_Init+0x50>)
 8005f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1a:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <MX_DMA_Init+0x50>)
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	6493      	str	r3, [r2, #72]	; 0x48
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <MX_DMA_Init+0x50>)
 8005f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2105      	movs	r1, #5
 8005f32:	200b      	movs	r0, #11
 8005f34:	f002 ffba 	bl	8008eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005f38:	200b      	movs	r0, #11
 8005f3a:	f002 ffd1 	bl	8008ee0 <HAL_NVIC_EnableIRQ>

}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000

08005f4c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f62:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f68:	f043 0320 	orr.w	r3, r3, #32
 8005f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f6e:	4b28      	ldr	r3, [pc, #160]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f7a:	4b25      	ldr	r3, [pc, #148]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7e:	4a24      	ldr	r2, [pc, #144]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f80:	f043 0304 	orr.w	r3, r3, #4
 8005f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f86:	4b22      	ldr	r3, [pc, #136]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f92:	4b1f      	ldr	r3, [pc, #124]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f9e:	4b1c      	ldr	r3, [pc, #112]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005faa:	4b19      	ldr	r3, [pc, #100]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fae:	4a18      	ldr	r2, [pc, #96]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005fb0:	f043 0308 	orr.w	r3, r3, #8
 8005fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fb6:	4b16      	ldr	r3, [pc, #88]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	607b      	str	r3, [r7, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <MX_GPIO_Init+0xc4>)
 8005fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fe4:	f003 fc3e 	bl	8009864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005ffa:	f107 0314 	add.w	r3, r7, #20
 8005ffe:	4619      	mov	r1, r3
 8006000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006004:	f003 faac 	bl	8009560 <HAL_GPIO_Init>

}
 8006008:	bf00      	nop
 800600a:	3728      	adds	r7, #40	; 0x28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40021000 	.word	0x40021000

08006014 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <MX_I2C2_Init+0x74>)
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <MX_I2C2_Init+0x78>)
 800601c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 800601e:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <MX_I2C2_Init+0x74>)
 8006020:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <MX_I2C2_Init+0x7c>)
 8006022:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006024:	4b18      	ldr	r3, [pc, #96]	; (8006088 <MX_I2C2_Init+0x74>)
 8006026:	2200      	movs	r2, #0
 8006028:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800602a:	4b17      	ldr	r3, [pc, #92]	; (8006088 <MX_I2C2_Init+0x74>)
 800602c:	2201      	movs	r2, #1
 800602e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006030:	4b15      	ldr	r3, [pc, #84]	; (8006088 <MX_I2C2_Init+0x74>)
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006036:	4b14      	ldr	r3, [pc, #80]	; (8006088 <MX_I2C2_Init+0x74>)
 8006038:	2200      	movs	r2, #0
 800603a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <MX_I2C2_Init+0x74>)
 800603e:	2200      	movs	r2, #0
 8006040:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006042:	4b11      	ldr	r3, [pc, #68]	; (8006088 <MX_I2C2_Init+0x74>)
 8006044:	2200      	movs	r2, #0
 8006046:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <MX_I2C2_Init+0x74>)
 800604a:	2200      	movs	r2, #0
 800604c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800604e:	480e      	ldr	r0, [pc, #56]	; (8006088 <MX_I2C2_Init+0x74>)
 8006050:	f003 fc3a 	bl	80098c8 <HAL_I2C_Init>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800605a:	f000 fceb 	bl	8006a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800605e:	2100      	movs	r1, #0
 8006060:	4809      	ldr	r0, [pc, #36]	; (8006088 <MX_I2C2_Init+0x74>)
 8006062:	f004 f995 	bl	800a390 <HAL_I2CEx_ConfigAnalogFilter>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800606c:	f000 fce2 	bl	8006a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006070:	2100      	movs	r1, #0
 8006072:	4805      	ldr	r0, [pc, #20]	; (8006088 <MX_I2C2_Init+0x74>)
 8006074:	f004 f9d7 	bl	800a426 <HAL_I2CEx_ConfigDigitalFilter>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800607e:	f000 fcd9 	bl	8006a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200001f4 	.word	0x200001f4
 800608c:	40005800 	.word	0x40005800
 8006090:	20c0edff 	.word	0x20c0edff

08006094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b0a0      	sub	sp, #128	; 0x80
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800609c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060ac:	f107 0318 	add.w	r3, r7, #24
 80060b0:	2254      	movs	r2, #84	; 0x54
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f00a fd89 	bl	8010bcc <memset>
  if(i2cHandle->Instance==I2C2)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <HAL_I2C_MspInit+0xdc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d151      	bne.n	8006168 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80060c8:	2300      	movs	r3, #0
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060cc:	f107 0318 	add.w	r3, r7, #24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f004 ffff 	bl	800b0d4 <HAL_RCCEx_PeriphCLKConfig>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80060dc:	f000 fcaa 	bl	8006a34 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060e0:	4b24      	ldr	r3, [pc, #144]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 80060e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e4:	4a23      	ldr	r2, [pc, #140]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 80060e6:	f043 0320 	orr.w	r3, r3, #32
 80060ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 80060ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 80060fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fc:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 80060fe:	f043 0304 	orr.w	r3, r3, #4
 8006102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 8006106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006110:	2301      	movs	r3, #1
 8006112:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006114:	2312      	movs	r3, #18
 8006116:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006118:	2300      	movs	r3, #0
 800611a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800611c:	2300      	movs	r3, #0
 800611e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006120:	2304      	movs	r3, #4
 8006122:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006124:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006128:	4619      	mov	r1, r3
 800612a:	4813      	ldr	r0, [pc, #76]	; (8006178 <HAL_I2C_MspInit+0xe4>)
 800612c:	f003 fa18 	bl	8009560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006130:	2310      	movs	r3, #16
 8006132:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006134:	2312      	movs	r3, #18
 8006136:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006138:	2300      	movs	r3, #0
 800613a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613c:	2300      	movs	r3, #0
 800613e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006140:	2304      	movs	r3, #4
 8006142:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006144:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006148:	4619      	mov	r1, r3
 800614a:	480c      	ldr	r0, [pc, #48]	; (800617c <HAL_I2C_MspInit+0xe8>)
 800614c:	f003 fa08 	bl	8009560 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006150:	4b08      	ldr	r3, [pc, #32]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	4a07      	ldr	r2, [pc, #28]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 8006156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800615a:	6593      	str	r3, [r2, #88]	; 0x58
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_I2C_MspInit+0xe0>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006168:	bf00      	nop
 800616a:	3780      	adds	r7, #128	; 0x80
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40005800 	.word	0x40005800
 8006174:	40021000 	.word	0x40021000
 8006178:	48001400 	.word	0x48001400
 800617c:	48000800 	.word	0x48000800

08006180 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8006180:	b580      	push	{r7, lr}
 8006182:	b08e      	sub	sp, #56	; 0x38
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 800618a:	4a70      	ldr	r2, [pc, #448]	; (800634c <gps_ReadNMEA+0x1cc>)
 800618c:	f107 0318 	add.w	r3, r7, #24
 8006190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006194:	6018      	str	r0, [r3, #0]
 8006196:	3304      	adds	r3, #4
 8006198:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 80061a0:	2300      	movs	r3, #0
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30
 80061a4:	e0c8      	b.n	8006338 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b24      	cmp	r3, #36	; 0x24
 80061b0:	f040 80bf 	bne.w	8006332 <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 80061b4:	2300      	movs	r3, #0
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b8:	e00f      	b.n	80061da <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	4413      	add	r3, r2
 80061c0:	3301      	adds	r3, #1
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	7819      	ldrb	r1, [r3, #0]
 80061c8:	f107 0220 	add.w	r2, r7, #32
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	4413      	add	r3, r2
 80061d0:	460a      	mov	r2, r1
 80061d2:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	3301      	adds	r3, #1
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	2b04      	cmp	r3, #4
 80061de:	ddec      	ble.n	80061ba <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80061e6:	f107 0218 	add.w	r2, r7, #24
 80061ea:	f107 0320 	add.w	r3, r7, #32
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe f815 	bl	8004220 <strcmp>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 809a 	bne.w	8006332 <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	3306      	adds	r3, #6
 8006202:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8006204:	2300      	movs	r3, #0
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
 8006208:	e08e      	b.n	8006328 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	3301      	adds	r3, #1
 800620e:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 800621c:	e013      	b.n	8006246 <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	441a      	add	r2, r3
 8006224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	3338      	adds	r3, #56	; 0x38
 800622c:	443b      	add	r3, r7
 800622e:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	3301      	adds	r3, #1
 8006236:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	b2da      	uxtb	r2, r3
 800623c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4413      	add	r3, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <gps_ReadNMEA+0xde>
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4413      	add	r3, r2
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b2c      	cmp	r3, #44	; 0x2c
 800625c:	d1df      	bne.n	800621e <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 800625e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006262:	3301      	adds	r3, #1
 8006264:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 8006268:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800626c:	3b01      	subs	r3, #1
 800626e:	2b0a      	cmp	r3, #10
 8006270:	d857      	bhi.n	8006322 <gps_ReadNMEA+0x1a2>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <gps_ReadNMEA+0xf8>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	080062a5 	.word	0x080062a5
 800627c:	080062b3 	.word	0x080062b3
 8006280:	080062c1 	.word	0x080062c1
 8006284:	080062cf 	.word	0x080062cf
 8006288:	080062dd 	.word	0x080062dd
 800628c:	080062eb 	.word	0x080062eb
 8006290:	080062f9 	.word	0x080062f9
 8006294:	08006323 	.word	0x08006323
 8006298:	08006307 	.word	0x08006307
 800629c:	08006323 	.word	0x08006323
 80062a0:	08006315 	.word	0x08006315
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 80062a4:	f107 030c 	add.w	r3, r7, #12
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f850 	bl	8006350 <gps_ProcessUTC>
							break;
 80062b0:	e037      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f889 	bl	80063d0 <gps_ProcessLatitude>
							break;
 80062be:	e030      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80062c0:	f107 030c 	add.w	r3, r7, #12
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f9fc 	bl	80066c4 <gps_ProcessNorthSouth>
							break;
 80062cc:	e029      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80062ce:	f107 030c 	add.w	r3, r7, #12
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 f937 	bl	8006548 <gps_ProcessLongitude>
							break;
 80062da:	e022      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fa04 	bl	80066f0 <gps_ProcessEastWest>
							break;
 80062e8:	e01b      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fa13 	bl	800671c <gps_ProcessFix>
							break;
 80062f6:	e014      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80062f8:	f107 030c 	add.w	r3, r7, #12
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fa2a 	bl	8006758 <gps_ProcessSatelliteCount>
							break;
 8006304:	e00d      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 8006306:	f107 030c 	add.w	r3, r7, #12
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fa3f 	bl	8006790 <gps_ProcessAltitude>
							break;
 8006312:	e006      	b.n	8006322 <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8006314:	f107 030c 	add.w	r3, r7, #12
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa94 	bl	8006848 <gps_ProcessAltitudeCorre>
							break;
 8006320:	bf00      	nop
				for(int k=0;k<12;k++){
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	3301      	adds	r3, #1
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2b0b      	cmp	r3, #11
 800632c:	f77f af6d 	ble.w	800620a <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8006330:	e008      	b.n	8006344 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	3301      	adds	r3, #1
 8006336:	633b      	str	r3, [r7, #48]	; 0x30
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800633e:	f6ff af32 	blt.w	80061a6 <gps_ReadNMEA+0x26>

			}
		}
	}
}
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	3738      	adds	r7, #56	; 0x38
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	08011ca8 	.word	0x08011ca8

08006350 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	0092      	lsls	r2, r2, #2
 8006362:	4413      	add	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	b2da      	uxtb	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3301      	adds	r3, #1
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	4413      	add	r3, r2
 8006370:	b2db      	uxtb	r3, r3
 8006372:	3b10      	subs	r3, #16
 8006374:	b2da      	uxtb	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3302      	adds	r3, #2
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	0092      	lsls	r2, r2, #2
 8006384:	4413      	add	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	b2da      	uxtb	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3303      	adds	r3, #3
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	4413      	add	r3, r2
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3b10      	subs	r3, #16
 8006396:	b2da      	uxtb	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	0092      	lsls	r2, r2, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3305      	adds	r3, #5
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	4413      	add	r3, r2
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	3b10      	subs	r3, #16
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	769a      	strb	r2, [r3, #26]
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	0000      	movs	r0, r0
 80063cc:	0000      	movs	r0, r0
	...

080063d0 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80063d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	3b30      	subs	r3, #48	; 0x30
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	0092      	lsls	r2, r2, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3301      	adds	r3, #1
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	4413      	add	r3, r2
 8006400:	b2db      	uxtb	r3, r3
 8006402:	3b30      	subs	r3, #48	; 0x30
 8006404:	b2db      	uxtb	r3, r3
 8006406:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3302      	adds	r3, #2
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3303      	adds	r3, #3
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	3b30      	subs	r3, #48	; 0x30
 8006424:	4413      	add	r3, r2
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800642e:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006432:	68b8      	ldr	r0, [r7, #8]
 8006434:	f7fe f862 	bl	80044fc <__aeabi_f2d>
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3305      	adds	r3, #5
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	3b30      	subs	r3, #48	; 0x30
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe f847 	bl	80044d8 <__aeabi_i2d>
 800644a:	a336      	add	r3, pc, #216	; (adr r3, 8006524 <gps_ProcessLatitude+0x154>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7fe f8ac 	bl	80045ac <__aeabi_dmul>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4690      	mov	r8, r2
 800645a:	4699      	mov	r9, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3306      	adds	r3, #6
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	3b30      	subs	r3, #48	; 0x30
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe f837 	bl	80044d8 <__aeabi_i2d>
 800646a:	a330      	add	r3, pc, #192	; (adr r3, 800652c <gps_ProcessLatitude+0x15c>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7fe f89c 	bl	80045ac <__aeabi_dmul>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fd fee0 	bl	8004240 <__adddf3>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4690      	mov	r8, r2
 8006486:	4699      	mov	r9, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3307      	adds	r3, #7
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	3b30      	subs	r3, #48	; 0x30
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe f821 	bl	80044d8 <__aeabi_i2d>
 8006496:	a327      	add	r3, pc, #156	; (adr r3, 8006534 <gps_ProcessLatitude+0x164>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f7fe f886 	bl	80045ac <__aeabi_dmul>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4640      	mov	r0, r8
 80064a6:	4649      	mov	r1, r9
 80064a8:	f7fd feca 	bl	8004240 <__adddf3>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4690      	mov	r8, r2
 80064b2:	4699      	mov	r9, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3308      	adds	r3, #8
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	3b30      	subs	r3, #48	; 0x30
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe f80b 	bl	80044d8 <__aeabi_i2d>
 80064c2:	a31e      	add	r3, pc, #120	; (adr r3, 800653c <gps_ProcessLatitude+0x16c>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fe f870 	bl	80045ac <__aeabi_dmul>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	f7fd feb4 	bl	8004240 <__adddf3>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4620      	mov	r0, r4
 80064de:	4629      	mov	r1, r5
 80064e0:	f7fd feae 	bl	8004240 <__adddf3>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	f7fe fb0e 	bl	8004b0c <__aeabi_d2f>
 80064f0:	4603      	mov	r3, r0
 80064f2:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 80064f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006500:	edd7 6a02 	vldr	s13, [r7, #8]
 8006504:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006520 <gps_ProcessLatitude+0x150>
 8006508:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800650c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	edc3 7a00 	vstr	s15, [r3]
}
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006520:	42700000 	.word	0x42700000
 8006524:	9999999a 	.word	0x9999999a
 8006528:	3fb99999 	.word	0x3fb99999
 800652c:	47ae147b 	.word	0x47ae147b
 8006530:	3f847ae1 	.word	0x3f847ae1
 8006534:	d2f1a9fc 	.word	0xd2f1a9fc
 8006538:	3f50624d 	.word	0x3f50624d
 800653c:	eb1c432d 	.word	0xeb1c432d
 8006540:	3f1a36e2 	.word	0x3f1a36e2
 8006544:	00000000 	.word	0x00000000

08006548 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3301      	adds	r3, #1
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	3b30      	subs	r3, #48	; 0x30
 8006566:	b2db      	uxtb	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	0092      	lsls	r2, r2, #2
 800656c:	4413      	add	r3, r2
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3302      	adds	r3, #2
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	4413      	add	r3, r2
 800657a:	b2db      	uxtb	r3, r3
 800657c:	3b30      	subs	r3, #48	; 0x30
 800657e:	b2db      	uxtb	r3, r3
 8006580:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3303      	adds	r3, #3
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3304      	adds	r3, #4
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	3b30      	subs	r3, #48	; 0x30
 800659e:	4413      	add	r3, r2
 80065a0:	ee07 3a90 	vmov	s15, r3
 80065a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a8:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 80065ac:	68b8      	ldr	r0, [r7, #8]
 80065ae:	f7fd ffa5 	bl	80044fc <__aeabi_f2d>
 80065b2:	4604      	mov	r4, r0
 80065b4:	460d      	mov	r5, r1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3305      	adds	r3, #5
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	3b30      	subs	r3, #48	; 0x30
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fd ff8a 	bl	80044d8 <__aeabi_i2d>
 80065c4:	a337      	add	r3, pc, #220	; (adr r3, 80066a4 <gps_ProcessLongitude+0x15c>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f7fd ffef 	bl	80045ac <__aeabi_dmul>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4690      	mov	r8, r2
 80065d4:	4699      	mov	r9, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3306      	adds	r3, #6
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	3b30      	subs	r3, #48	; 0x30
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fd ff7a 	bl	80044d8 <__aeabi_i2d>
 80065e4:	a331      	add	r3, pc, #196	; (adr r3, 80066ac <gps_ProcessLongitude+0x164>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7fd ffdf 	bl	80045ac <__aeabi_dmul>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	f7fd fe23 	bl	8004240 <__adddf3>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4690      	mov	r8, r2
 8006600:	4699      	mov	r9, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3307      	adds	r3, #7
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	3b30      	subs	r3, #48	; 0x30
 800660a:	4618      	mov	r0, r3
 800660c:	f7fd ff64 	bl	80044d8 <__aeabi_i2d>
 8006610:	a328      	add	r3, pc, #160	; (adr r3, 80066b4 <gps_ProcessLongitude+0x16c>)
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	f7fd ffc9 	bl	80045ac <__aeabi_dmul>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4640      	mov	r0, r8
 8006620:	4649      	mov	r1, r9
 8006622:	f7fd fe0d 	bl	8004240 <__adddf3>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4690      	mov	r8, r2
 800662c:	4699      	mov	r9, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3308      	adds	r3, #8
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	3b30      	subs	r3, #48	; 0x30
 8006636:	4618      	mov	r0, r3
 8006638:	f7fd ff4e 	bl	80044d8 <__aeabi_i2d>
 800663c:	a31f      	add	r3, pc, #124	; (adr r3, 80066bc <gps_ProcessLongitude+0x174>)
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	f7fd ffb3 	bl	80045ac <__aeabi_dmul>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	f7fd fdf7 	bl	8004240 <__adddf3>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fd fdf1 	bl	8004240 <__adddf3>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	f7fe fa51 	bl	8004b0c <__aeabi_d2f>
 800666a:	4603      	mov	r3, r0
 800666c:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 800666e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667a:	edd7 6a02 	vldr	s13, [r7, #8]
 800667e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 80066a0 <gps_ProcessLongitude+0x158>
 8006682:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	42700000 	.word	0x42700000
 80066a4:	9999999a 	.word	0x9999999a
 80066a8:	3fb99999 	.word	0x3fb99999
 80066ac:	47ae147b 	.word	0x47ae147b
 80066b0:	3f847ae1 	.word	0x3f847ae1
 80066b4:	d2f1a9fc 	.word	0xd2f1a9fc
 80066b8:	3f50624d 	.word	0x3f50624d
 80066bc:	eb1c432d 	.word	0xeb1c432d
 80066c0:	3f1a36e2 	.word	0x3f1a36e2

080066c4 <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b4e      	cmp	r3, #78	; 0x4e
 80066d4:	d103      	bne.n	80066de <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2200      	movs	r2, #0
 80066da:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 80066dc:	e002      	b.n	80066e4 <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2201      	movs	r2, #1
 80066e2:	741a      	strb	r2, [r3, #16]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b45      	cmp	r3, #69	; 0x45
 8006700:	d103      	bne.n	800670a <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2202      	movs	r2, #2
 8006706:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8006708:	e002      	b.n	8006710 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2203      	movs	r2, #3
 800670e:	745a      	strb	r2, [r3, #17]
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b31      	cmp	r3, #49	; 0x31
 800672c:	d103      	bne.n	8006736 <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8006734:	e00a      	b.n	800674c <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b32      	cmp	r3, #50	; 0x32
 800673c:	d103      	bne.n	8006746 <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2202      	movs	r2, #2
 8006742:	771a      	strb	r2, [r3, #28]
}
 8006744:	e002      	b.n	800674c <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	0092      	lsls	r2, r2, #2
 800676a:	4413      	add	r3, r2
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	b2da      	uxtb	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3301      	adds	r3, #1
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	4413      	add	r3, r2
 8006778:	b2db      	uxtb	r3, r3
 800677a:	3b10      	subs	r3, #16
 800677c:	b2da      	uxtb	r2, r3
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	76da      	strb	r2, [r3, #27]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e03f      	b.n	800682a <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b2e      	cmp	r3, #46	; 0x2e
 80067b4:	d104      	bne.n	80067c0 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 80067b6:	2301      	movs	r3, #1
 80067b8:	74fb      	strb	r3, [r7, #19]
			i++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 80067c0:	7cfb      	ldrb	r3, [r7, #19]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01b      	beq.n	80067fe <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	3b30      	subs	r3, #48	; 0x30
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fd fe81 	bl	80044d8 <__aeabi_i2d>
 80067d6:	a31a      	add	r3, pc, #104	; (adr r3, 8006840 <gps_ProcessAltitude+0xb0>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f7fd fee6 	bl	80045ac <__aeabi_dmul>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4610      	mov	r0, r2
 80067e6:	4619      	mov	r1, r3
 80067e8:	f7fe f990 	bl	8004b0c <__aeabi_d2f>
 80067ec:	ee07 0a10 	vmov	s14, r0
 80067f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80067f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067f8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80067fc:	e018      	b.n	8006830 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 80067fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8006802:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006806:	ee27 7a87 	vmul.f32	s14, s15, s14
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4413      	add	r3, r2
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	3b30      	subs	r3, #48	; 0x30
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800681c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006820:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d9bc      	bls.n	80067aa <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	609a      	str	r2, [r3, #8]
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	9999999a 	.word	0x9999999a
 8006844:	3fb99999 	.word	0x3fb99999

08006848 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e03f      	b.n	80068e2 <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4413      	add	r3, r2
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b2e      	cmp	r3, #46	; 0x2e
 800686c:	d104      	bne.n	8006878 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 800686e:	2301      	movs	r3, #1
 8006870:	74fb      	strb	r3, [r7, #19]
			i++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01b      	beq.n	80068b6 <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4413      	add	r3, r2
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	3b30      	subs	r3, #48	; 0x30
 8006888:	4618      	mov	r0, r3
 800688a:	f7fd fe25 	bl	80044d8 <__aeabi_i2d>
 800688e:	a31a      	add	r3, pc, #104	; (adr r3, 80068f8 <gps_ProcessAltitudeCorre+0xb0>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7fd fe8a 	bl	80045ac <__aeabi_dmul>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4610      	mov	r0, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	f7fe f934 	bl	8004b0c <__aeabi_d2f>
 80068a4:	ee07 0a10 	vmov	s14, r0
 80068a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80068ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068b0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80068b4:	e018      	b.n	80068e8 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 80068b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80068ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80068be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4413      	add	r3, r2
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	3b30      	subs	r3, #48	; 0x30
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d9bc      	bls.n	8006862 <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	60da      	str	r2, [r3, #12]
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	9999999a 	.word	0x9999999a
 80068fc:	3fb99999 	.word	0x3fb99999

08006900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8006904:	b662      	cpsie	i
}
 8006906:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006908:	f000 ffb3 	bl	8007872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800690c:	f000 f834 	bl	8006978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006910:	f7ff fb1c 	bl	8005f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8006914:	f7ff faf0 	bl	8005ef8 <MX_DMA_Init>
  MX_I2C2_Init();
 8006918:	f7ff fb7c 	bl	8006014 <MX_I2C2_Init>
  MX_TIM2_Init();
 800691c:	f000 fc52 	bl	80071c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006920:	f000 fca8 	bl	8007274 <MX_TIM3_Init>
  MX_TIM4_Init();
 8006924:	f000 fd00 	bl	8007328 <MX_TIM4_Init>
  MX_UART4_Init();
 8006928:	f000 fe16 	bl	8007558 <MX_UART4_Init>
  MX_UART5_Init();
 800692c:	f000 fe60 	bl	80075f0 <MX_UART5_Init>
  MX_ADC2_Init();
 8006930:	f7fe fabe 	bl	8004eb0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006934:	2100      	movs	r1, #0
 8006936:	480c      	ldr	r0, [pc, #48]	; (8006968 <main+0x68>)
 8006938:	f004 ff4c 	bl	800b7d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800693c:	2100      	movs	r1, #0
 800693e:	480b      	ldr	r0, [pc, #44]	; (800696c <main+0x6c>)
 8006940:	f004 ff48 	bl	800b7d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8006944:	2104      	movs	r1, #4
 8006946:	4809      	ldr	r0, [pc, #36]	; (800696c <main+0x6c>)
 8006948:	f004 ff44 	bl	800b7d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800694c:	210c      	movs	r1, #12
 800694e:	4807      	ldr	r0, [pc, #28]	; (800696c <main+0x6c>)
 8006950:	f004 ff40 	bl	800b7d4 <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 8006954:	2203      	movs	r2, #3
 8006956:	4906      	ldr	r1, [pc, #24]	; (8006970 <main+0x70>)
 8006958:	4806      	ldr	r0, [pc, #24]	; (8006974 <main+0x74>)
 800695a:	f001 fbc7 	bl	80080ec <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800695e:	f7fe fcd9 	bl	8005314 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006962:	f007 ffdb 	bl	800e91c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006966:	e7fe      	b.n	8006966 <main+0x66>
 8006968:	200007b0 	.word	0x200007b0
 800696c:	200007fc 	.word	0x200007fc
 8006970:	20000710 	.word	0x20000710
 8006974:	20000094 	.word	0x20000094

08006978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b094      	sub	sp, #80	; 0x50
 800697c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800697e:	f107 0318 	add.w	r3, r7, #24
 8006982:	2238      	movs	r2, #56	; 0x38
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f00a f920 	bl	8010bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800698c:	1d3b      	adds	r3, r7, #4
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	605a      	str	r2, [r3, #4]
 8006994:	609a      	str	r2, [r3, #8]
 8006996:	60da      	str	r2, [r3, #12]
 8006998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800699a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800699e:	f003 fd8f 	bl	800a4c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80069a2:	2302      	movs	r3, #2
 80069a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80069a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80069ac:	2340      	movs	r3, #64	; 0x40
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80069b0:	2302      	movs	r3, #2
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80069b4:	2302      	movs	r3, #2
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80069b8:	2304      	movs	r3, #4
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80069bc:	234b      	movs	r3, #75	; 0x4b
 80069be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80069c0:	2302      	movs	r3, #2
 80069c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80069c4:	2302      	movs	r3, #2
 80069c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80069c8:	2302      	movs	r3, #2
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069cc:	f107 0318 	add.w	r3, r7, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f003 fe19 	bl	800a608 <HAL_RCC_OscConfig>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80069dc:	f000 f82a 	bl	8006a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069e0:	230f      	movs	r3, #15
 80069e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069e4:	2303      	movs	r3, #3
 80069e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	2104      	movs	r1, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f004 f91d 	bl	800ac38 <HAL_RCC_ClockConfig>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8006a04:	f000 f816 	bl	8006a34 <Error_Handler>
  }
}
 8006a08:	bf00      	nop
 8006a0a:	3750      	adds	r7, #80	; 0x50
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d101      	bne.n	8006a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006a22:	f000 ff3f 	bl	80078a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00

08006a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a38:	b672      	cpsid	i
}
 8006a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a3c:	e7fe      	b.n	8006a3c <Error_Handler+0x8>

08006a3e <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_pitch)-(command->pitch_angle);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a58:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	ee07 3a90 	vmov	s15, r3
}
 8006a62:	eeb0 0a67 	vmov.f32	s0, s15
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_heading)-(command->yaw_angle);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a8a:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	ee07 3a90 	vmov	s15, r3
}
 8006a94:	eeb0 0a67 	vmov.f32	s0, s15
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_roll)-(command->roll_angle);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006abc:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	ee07 3a90 	vmov	s15, r3
}
 8006ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	ed87 0a02 	vstr	s0, [r7, #8]
 8006ae0:	edc7 0a01 	vstr	s1, [r7, #4]
 8006ae4:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 8006afa:	2101      	movs	r1, #1
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f00a f80d 	bl	8010b1c <arm_pid_init_f32>

}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b08a      	sub	sp, #40	; 0x28
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f7ff ffa8 	bl	8006a70 <Pid_CalculateYawError>
 8006b20:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	ed93 7a00 	vldr	s14, [r3]
 8006b32:	edd7 7a06 	vldr	s15, [r7, #24]
 8006b36:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	edd3 7a04 	vldr	s15, [r3, #16]
 8006b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b6c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8006b84:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006b86:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8006b88:	bf00      	nop
 8006b8a:	3728      	adds	r7, #40	; 0x28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	68b8      	ldr	r0, [r7, #8]
 8006ba2:	f7ff ff7e 	bl	8006aa2 <Pid_CalculateRollError>
 8006ba6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	ed93 7a00 	vldr	s14, [r3]
 8006bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8006bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	edd3 6a01 	vldr	s13, [r3, #4]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	edd3 6a02 	vldr	s13, [r3, #8]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bf2:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	615a      	str	r2, [r3, #20]
    return (out);
 8006c0a:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006c0c:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c22:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006d14 <Pid_CompensateRoll+0x184>
 8006c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2e:	dd04      	ble.n	8006c3a <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24
 8006c38:	e025      	b.n	8006c86 <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c46:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c4e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006d18 <Pid_CompensateRoll+0x188>
 8006c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5a:	d504      	bpl.n	8006c66 <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f240 5214 	movw	r2, #1300	; 0x514
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24
 8006c64:	e00f      	b.n	8006c86 <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c72:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c7e:	ee17 2a90 	vmov	r2, s15
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c92:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c9a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006d14 <Pid_CompensateRoll+0x184>
 8006c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca6:	dd04      	ble.n	8006cb2 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb0:	e025      	b.n	8006cfe <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8006cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cc6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006d18 <Pid_CompensateRoll+0x188>
 8006cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	d504      	bpl.n	8006cde <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	f240 5214 	movw	r2, #1300	; 0x514
 8006cda:	629a      	str	r2, [r3, #40]	; 0x28
 8006cdc:	e00f      	b.n	8006cfe <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8006cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf6:	ee17 2a90 	vmov	r2, s15
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006cfe:	6838      	ldr	r0, [r7, #0]
 8006d00:	f000 f8d2 	bl	8006ea8 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f000 f8ed 	bl	8006ee4 <PropulsionAndControl_UpdateRightFlaps>

}
 8006d0a:	bf00      	nop
 8006d0c:	3728      	adds	r7, #40	; 0x28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	455ac000 	.word	0x455ac000
 8006d18:	44a28000 	.word	0x44a28000

08006d1c <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	; 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	68b8      	ldr	r0, [r7, #8]
 8006d2e:	f7ff fe86 	bl	8006a3e <Pid_CalculatePitchError>
 8006d32:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	ed93 7a00 	vldr	s14, [r3]
 8006d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d48:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d7e:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	615a      	str	r2, [r3, #20]
    return (out);
 8006d96:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006d98:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dae:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006ea0 <Pid_CompensatePitch+0x184>
 8006db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dba:	dd04      	ble.n	8006dc6 <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24
 8006dc4:	e025      	b.n	8006e12 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8006dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dda:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006ea4 <Pid_CompensatePitch+0x188>
 8006dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de6:	d504      	bpl.n	8006df2 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f240 5214 	movw	r2, #1300	; 0x514
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24
 8006df0:	e00f      	b.n	8006e12 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e0a:	ee17 2a90 	vmov	r2, s15
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e26:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006ea0 <Pid_CompensatePitch+0x184>
 8006e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e32:	dd04      	ble.n	8006e3e <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e3c:	e025      	b.n	8006e8a <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e52:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006ea4 <Pid_CompensatePitch+0x188>
 8006e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5e:	d504      	bpl.n	8006e6a <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f240 5214 	movw	r2, #1300	; 0x514
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
 8006e68:	e00f      	b.n	8006e8a <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e76:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e82:	ee17 2a90 	vmov	r2, s15
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006e8a:	6838      	ldr	r0, [r7, #0]
 8006e8c:	f000 f80c 	bl	8006ea8 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006e90:	6838      	ldr	r0, [r7, #0]
 8006e92:	f000 f827 	bl	8006ee4 <PropulsionAndControl_UpdateRightFlaps>

}
 8006e96:	bf00      	nop
 8006e98:	3728      	adds	r7, #40	; 0x28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	455ac000 	.word	0x455ac000
 8006ea4:	44a28000 	.word	0x44a28000

08006ea8 <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3334      	adds	r3, #52	; 0x34
 8006eb8:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	7f5b      	ldrb	r3, [r3, #29]
 8006ebe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ece:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3334      	adds	r3, #52	; 0x34
 8006ef4:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7f9b      	ldrb	r3, [r3, #30]
 8006efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006efe:	3b01      	subs	r3, #1
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006f0a:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	69fa      	ldr	r2, [r7, #28]
 8006f5a:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a3a      	ldr	r2, [r7, #32]
 8006f60:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6e:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	osDelay(20);
 8006f70:	2014      	movs	r0, #20
 8006f72:	f007 fd01 	bl	800e978 <osDelay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f240 5214 	movw	r2, #1300	; 0x514
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff ff92 	bl	8006ea8 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006f8a:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff ffa9 	bl	8006ee4 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	osDelay(1500);
 8006f92:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006f96:	f007 fcef 	bl	800e978 <osDelay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff ff80 	bl	8006ea8 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f240 5214 	movw	r2, #1300	; 0x514
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff ff97 	bl	8006ee4 <PropulsionAndControl_UpdateRightFlaps>

	osDelay(1500);
 8006fb6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006fba:	f007 fcdd 	bl	800e978 <osDelay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff ff6e 	bl	8006ea8 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff ff85 	bl	8006ee4 <PropulsionAndControl_UpdateRightFlaps>
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <HAL_MspInit+0x4c>)
 8006fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fee:	4a10      	ldr	r2, [pc, #64]	; (8007030 <HAL_MspInit+0x4c>)
 8006ff0:	f043 0301 	orr.w	r3, r3, #1
 8006ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <HAL_MspInit+0x4c>)
 8006ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	607b      	str	r3, [r7, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007002:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <HAL_MspInit+0x4c>)
 8007004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007006:	4a0a      	ldr	r2, [pc, #40]	; (8007030 <HAL_MspInit+0x4c>)
 8007008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800700c:	6593      	str	r3, [r2, #88]	; 0x58
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <HAL_MspInit+0x4c>)
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800701a:	2200      	movs	r2, #0
 800701c:	210f      	movs	r1, #15
 800701e:	f06f 0001 	mvn.w	r0, #1
 8007022:	f001 ff43 	bl	8008eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40021000 	.word	0x40021000

08007034 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08c      	sub	sp, #48	; 0x30
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007044:	4b2c      	ldr	r3, [pc, #176]	; (80070f8 <HAL_InitTick+0xc4>)
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007048:	4a2b      	ldr	r2, [pc, #172]	; (80070f8 <HAL_InitTick+0xc4>)
 800704a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800704e:	6613      	str	r3, [r2, #96]	; 0x60
 8007050:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <HAL_InitTick+0xc4>)
 8007052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800705c:	f107 020c 	add.w	r2, r7, #12
 8007060:	f107 0310 	add.w	r3, r7, #16
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f003 ffbc 	bl	800afe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800706c:	f003 ffa4 	bl	800afb8 <HAL_RCC_GetPCLK2Freq>
 8007070:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	4a21      	ldr	r2, [pc, #132]	; (80070fc <HAL_InitTick+0xc8>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	0c9b      	lsrs	r3, r3, #18
 800707c:	3b01      	subs	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007080:	4b1f      	ldr	r3, [pc, #124]	; (8007100 <HAL_InitTick+0xcc>)
 8007082:	4a20      	ldr	r2, [pc, #128]	; (8007104 <HAL_InitTick+0xd0>)
 8007084:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007086:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <HAL_InitTick+0xcc>)
 8007088:	f240 32e7 	movw	r2, #999	; 0x3e7
 800708c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <HAL_InitTick+0xcc>)
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007094:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <HAL_InitTick+0xcc>)
 8007096:	2200      	movs	r2, #0
 8007098:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800709a:	4b19      	ldr	r3, [pc, #100]	; (8007100 <HAL_InitTick+0xcc>)
 800709c:	2200      	movs	r2, #0
 800709e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80070a0:	4817      	ldr	r0, [pc, #92]	; (8007100 <HAL_InitTick+0xcc>)
 80070a2:	f004 fa65 	bl	800b570 <HAL_TIM_Base_Init>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80070ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11b      	bne.n	80070ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80070b4:	4812      	ldr	r0, [pc, #72]	; (8007100 <HAL_InitTick+0xcc>)
 80070b6:	f004 fabd 	bl	800b634 <HAL_TIM_Base_Start_IT>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80070c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d111      	bne.n	80070ec <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80070c8:	2019      	movs	r0, #25
 80070ca:	f001 ff09 	bl	8008ee0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b0f      	cmp	r3, #15
 80070d2:	d808      	bhi.n	80070e6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80070d4:	2200      	movs	r2, #0
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	2019      	movs	r0, #25
 80070da:	f001 fee7 	bl	8008eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80070de:	4a0a      	ldr	r2, [pc, #40]	; (8007108 <HAL_InitTick+0xd4>)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	e002      	b.n	80070ec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80070ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3730      	adds	r7, #48	; 0x30
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40021000 	.word	0x40021000
 80070fc:	431bde83 	.word	0x431bde83
 8007100:	20000718 	.word	0x20000718
 8007104:	40012c00 	.word	0x40012c00
 8007108:	20000008 	.word	0x20000008

0800710c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007110:	e7fe      	b.n	8007110 <NMI_Handler+0x4>

08007112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007112:	b480      	push	{r7}
 8007114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007116:	e7fe      	b.n	8007116 <HardFault_Handler+0x4>

08007118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800711c:	e7fe      	b.n	800711c <MemManage_Handler+0x4>

0800711e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800711e:	b480      	push	{r7}
 8007120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007122:	e7fe      	b.n	8007122 <BusFault_Handler+0x4>

08007124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007128:	e7fe      	b.n	8007128 <UsageFault_Handler+0x4>

0800712a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800712a:	b480      	push	{r7}
 800712c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800712e:	bf00      	nop
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800713c:	4802      	ldr	r0, [pc, #8]	; (8007148 <DMA1_Channel1_IRQHandler+0x10>)
 800713e:	f002 f8c0 	bl	80092c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007142:	bf00      	nop
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000100 	.word	0x20000100

0800714c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007150:	4802      	ldr	r0, [pc, #8]	; (800715c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007152:	f004 fc51 	bl	800b9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000718 	.word	0x20000718

08007160 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007164:	4805      	ldr	r0, [pc, #20]	; (800717c <UART4_IRQHandler+0x1c>)
 8007166:	f005 fc7d 	bl	800ca64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <UART4_IRQHandler+0x20>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f007 febb 	bl	800eeec <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000848 	.word	0x20000848
 8007180:	200001f0 	.word	0x200001f0

08007184 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007188:	4802      	ldr	r0, [pc, #8]	; (8007194 <UART5_IRQHandler+0x10>)
 800718a:	f005 fc6b 	bl	800ca64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800718e:	bf00      	nop
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	200008d8 	.word	0x200008d8

08007198 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <SystemInit+0x24>)
 800719e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a2:	4a06      	ldr	r2, [pc, #24]	; (80071bc <SystemInit+0x24>)
 80071a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <SystemInit+0x24>)
 80071ae:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <SystemInit+0x28>)
 80071b0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071b2:	bf00      	nop
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	e000ed00 	.word	0xe000ed00
 80071c0:	08004000 	.word	0x08004000

080071c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	; 0x28
 80071c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071ca:	f107 031c 	add.w	r3, r7, #28
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	605a      	str	r2, [r3, #4]
 80071d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80071d6:	463b      	mov	r3, r7
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	611a      	str	r2, [r3, #16]
 80071e4:	615a      	str	r2, [r3, #20]
 80071e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80071e8:	4b20      	ldr	r3, [pc, #128]	; (800726c <MX_TIM2_Init+0xa8>)
 80071ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80071ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80071f0:	4b1e      	ldr	r3, [pc, #120]	; (800726c <MX_TIM2_Init+0xa8>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071f6:	4b1d      	ldr	r3, [pc, #116]	; (800726c <MX_TIM2_Init+0xa8>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 80071fc:	4b1b      	ldr	r3, [pc, #108]	; (800726c <MX_TIM2_Init+0xa8>)
 80071fe:	4a1c      	ldr	r2, [pc, #112]	; (8007270 <MX_TIM2_Init+0xac>)
 8007200:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007202:	4b1a      	ldr	r3, [pc, #104]	; (800726c <MX_TIM2_Init+0xa8>)
 8007204:	2200      	movs	r2, #0
 8007206:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007208:	4b18      	ldr	r3, [pc, #96]	; (800726c <MX_TIM2_Init+0xa8>)
 800720a:	2200      	movs	r2, #0
 800720c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800720e:	4817      	ldr	r0, [pc, #92]	; (800726c <MX_TIM2_Init+0xa8>)
 8007210:	f004 fa88 	bl	800b724 <HAL_TIM_PWM_Init>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800721a:	f7ff fc0b 	bl	8006a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800721e:	2300      	movs	r3, #0
 8007220:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007222:	2300      	movs	r3, #0
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007226:	f107 031c 	add.w	r3, r7, #28
 800722a:	4619      	mov	r1, r3
 800722c:	480f      	ldr	r0, [pc, #60]	; (800726c <MX_TIM2_Init+0xa8>)
 800722e:	f005 fa97 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007238:	f7ff fbfc 	bl	8006a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800723c:	2360      	movs	r3, #96	; 0x60
 800723e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007244:	2300      	movs	r3, #0
 8007246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007248:	2300      	movs	r3, #0
 800724a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800724c:	463b      	mov	r3, r7
 800724e:	2208      	movs	r2, #8
 8007250:	4619      	mov	r1, r3
 8007252:	4806      	ldr	r0, [pc, #24]	; (800726c <MX_TIM2_Init+0xa8>)
 8007254:	f004 fd50 	bl	800bcf8 <HAL_TIM_PWM_ConfigChannel>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800725e:	f7ff fbe9 	bl	8006a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007262:	bf00      	nop
 8007264:	3728      	adds	r7, #40	; 0x28
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000764 	.word	0x20000764
 8007270:	0015f900 	.word	0x0015f900

08007274 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800727a:	f107 031c 	add.w	r3, r7, #28
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	605a      	str	r2, [r3, #4]
 8007284:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007286:	463b      	mov	r3, r7
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	605a      	str	r2, [r3, #4]
 800728e:	609a      	str	r2, [r3, #8]
 8007290:	60da      	str	r2, [r3, #12]
 8007292:	611a      	str	r2, [r3, #16]
 8007294:	615a      	str	r2, [r3, #20]
 8007296:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007298:	4b21      	ldr	r3, [pc, #132]	; (8007320 <MX_TIM3_Init+0xac>)
 800729a:	4a22      	ldr	r2, [pc, #136]	; (8007324 <MX_TIM3_Init+0xb0>)
 800729c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 800729e:	4b20      	ldr	r3, [pc, #128]	; (8007320 <MX_TIM3_Init+0xac>)
 80072a0:	2232      	movs	r2, #50	; 0x32
 80072a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <MX_TIM3_Init+0xac>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80072aa:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <MX_TIM3_Init+0xac>)
 80072ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80072b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072b2:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <MX_TIM3_Init+0xac>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072b8:	4b19      	ldr	r3, [pc, #100]	; (8007320 <MX_TIM3_Init+0xac>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80072be:	4818      	ldr	r0, [pc, #96]	; (8007320 <MX_TIM3_Init+0xac>)
 80072c0:	f004 fa30 	bl	800b724 <HAL_TIM_PWM_Init>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80072ca:	f7ff fbb3 	bl	8006a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80072d6:	f107 031c 	add.w	r3, r7, #28
 80072da:	4619      	mov	r1, r3
 80072dc:	4810      	ldr	r0, [pc, #64]	; (8007320 <MX_TIM3_Init+0xac>)
 80072de:	f005 fa3f 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80072e8:	f7ff fba4 	bl	8006a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072ec:	2360      	movs	r3, #96	; 0x60
 80072ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80072fc:	463b      	mov	r3, r7
 80072fe:	2200      	movs	r2, #0
 8007300:	4619      	mov	r1, r3
 8007302:	4807      	ldr	r0, [pc, #28]	; (8007320 <MX_TIM3_Init+0xac>)
 8007304:	f004 fcf8 	bl	800bcf8 <HAL_TIM_PWM_ConfigChannel>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800730e:	f7ff fb91 	bl	8006a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007312:	4803      	ldr	r0, [pc, #12]	; (8007320 <MX_TIM3_Init+0xac>)
 8007314:	f000 f8c2 	bl	800749c <HAL_TIM_MspPostInit>

}
 8007318:	bf00      	nop
 800731a:	3728      	adds	r7, #40	; 0x28
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200007b0 	.word	0x200007b0
 8007324:	40000400 	.word	0x40000400

08007328 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800732e:	f107 031c 	add.w	r3, r7, #28
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	605a      	str	r2, [r3, #4]
 8007338:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800733a:	463b      	mov	r3, r7
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	60da      	str	r2, [r3, #12]
 8007346:	611a      	str	r2, [r3, #16]
 8007348:	615a      	str	r2, [r3, #20]
 800734a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800734c:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <MX_TIM4_Init+0xe0>)
 800734e:	4a2f      	ldr	r2, [pc, #188]	; (800740c <MX_TIM4_Init+0xe4>)
 8007350:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8007352:	4b2d      	ldr	r3, [pc, #180]	; (8007408 <MX_TIM4_Init+0xe0>)
 8007354:	2232      	movs	r2, #50	; 0x32
 8007356:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007358:	4b2b      	ldr	r3, [pc, #172]	; (8007408 <MX_TIM4_Init+0xe0>)
 800735a:	2200      	movs	r2, #0
 800735c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 57600;
 800735e:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <MX_TIM4_Init+0xe0>)
 8007360:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007364:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007366:	4b28      	ldr	r3, [pc, #160]	; (8007408 <MX_TIM4_Init+0xe0>)
 8007368:	2200      	movs	r2, #0
 800736a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800736c:	4b26      	ldr	r3, [pc, #152]	; (8007408 <MX_TIM4_Init+0xe0>)
 800736e:	2200      	movs	r2, #0
 8007370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007372:	4825      	ldr	r0, [pc, #148]	; (8007408 <MX_TIM4_Init+0xe0>)
 8007374:	f004 f9d6 	bl	800b724 <HAL_TIM_PWM_Init>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800737e:	f7ff fb59 	bl	8006a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007382:	2300      	movs	r3, #0
 8007384:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800738a:	f107 031c 	add.w	r3, r7, #28
 800738e:	4619      	mov	r1, r3
 8007390:	481d      	ldr	r0, [pc, #116]	; (8007408 <MX_TIM4_Init+0xe0>)
 8007392:	f005 f9e5 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800739c:	f7ff fb4a 	bl	8006a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80073a0:	2360      	movs	r3, #96	; 0x60
 80073a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 80073a4:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80073a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80073b2:	463b      	mov	r3, r7
 80073b4:	2200      	movs	r2, #0
 80073b6:	4619      	mov	r1, r3
 80073b8:	4813      	ldr	r0, [pc, #76]	; (8007408 <MX_TIM4_Init+0xe0>)
 80073ba:	f004 fc9d 	bl	800bcf8 <HAL_TIM_PWM_ConfigChannel>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80073c4:	f7ff fb36 	bl	8006a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80073c8:	463b      	mov	r3, r7
 80073ca:	2204      	movs	r2, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	480e      	ldr	r0, [pc, #56]	; (8007408 <MX_TIM4_Init+0xe0>)
 80073d0:	f004 fc92 	bl	800bcf8 <HAL_TIM_PWM_ConfigChannel>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80073da:	f7ff fb2b 	bl	8006a34 <Error_Handler>
  }
  sConfigOC.Pulse = 5760;
 80073de:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 80073e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80073e4:	463b      	mov	r3, r7
 80073e6:	220c      	movs	r2, #12
 80073e8:	4619      	mov	r1, r3
 80073ea:	4807      	ldr	r0, [pc, #28]	; (8007408 <MX_TIM4_Init+0xe0>)
 80073ec:	f004 fc84 	bl	800bcf8 <HAL_TIM_PWM_ConfigChannel>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80073f6:	f7ff fb1d 	bl	8006a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80073fa:	4803      	ldr	r0, [pc, #12]	; (8007408 <MX_TIM4_Init+0xe0>)
 80073fc:	f000 f84e 	bl	800749c <HAL_TIM_MspPostInit>

}
 8007400:	bf00      	nop
 8007402:	3728      	adds	r7, #40	; 0x28
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	200007fc 	.word	0x200007fc
 800740c:	40000800 	.word	0x40000800

08007410 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d10c      	bne.n	800743c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007422:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 8007424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007426:	4a1a      	ldr	r2, [pc, #104]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 8007428:	f043 0301 	orr.w	r3, r3, #1
 800742c:	6593      	str	r3, [r2, #88]	; 0x58
 800742e:	4b18      	ldr	r3, [pc, #96]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800743a:	e022      	b.n	8007482 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a14      	ldr	r2, [pc, #80]	; (8007494 <HAL_TIM_PWM_MspInit+0x84>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d10c      	bne.n	8007460 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	4a11      	ldr	r2, [pc, #68]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 800744c:	f043 0302 	orr.w	r3, r3, #2
 8007450:	6593      	str	r3, [r2, #88]	; 0x58
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
}
 800745e:	e010      	b.n	8007482 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <HAL_TIM_PWM_MspInit+0x88>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d10b      	bne.n	8007482 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	4a08      	ldr	r2, [pc, #32]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 8007470:	f043 0304 	orr.w	r3, r3, #4
 8007474:	6593      	str	r3, [r2, #88]	; 0x58
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <HAL_TIM_PWM_MspInit+0x80>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40021000 	.word	0x40021000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800

0800749c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a4:	f107 0314 	add.w	r3, r7, #20
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a22      	ldr	r2, [pc, #136]	; (8007544 <HAL_TIM_MspPostInit+0xa8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d11c      	bne.n	80074f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074be:	4b22      	ldr	r3, [pc, #136]	; (8007548 <HAL_TIM_MspPostInit+0xac>)
 80074c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <HAL_TIM_MspPostInit+0xac>)
 80074c4:	f043 0304 	orr.w	r3, r3, #4
 80074c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ca:	4b1f      	ldr	r3, [pc, #124]	; (8007548 <HAL_TIM_MspPostInit+0xac>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80074d6:	2340      	movs	r3, #64	; 0x40
 80074d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074da:	2302      	movs	r3, #2
 80074dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e2:	2300      	movs	r3, #0
 80074e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80074e6:	2302      	movs	r3, #2
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	4619      	mov	r1, r3
 80074f0:	4816      	ldr	r0, [pc, #88]	; (800754c <HAL_TIM_MspPostInit+0xb0>)
 80074f2:	f002 f835 	bl	8009560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80074f6:	e021      	b.n	800753c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a14      	ldr	r2, [pc, #80]	; (8007550 <HAL_TIM_MspPostInit+0xb4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d11c      	bne.n	800753c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007502:	4b11      	ldr	r3, [pc, #68]	; (8007548 <HAL_TIM_MspPostInit+0xac>)
 8007504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007506:	4a10      	ldr	r2, [pc, #64]	; (8007548 <HAL_TIM_MspPostInit+0xac>)
 8007508:	f043 0302 	orr.w	r3, r3, #2
 800750c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800750e:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <HAL_TIM_MspPostInit+0xac>)
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800751a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800751e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007520:	2302      	movs	r3, #2
 8007522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007524:	2300      	movs	r3, #0
 8007526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007528:	2300      	movs	r3, #0
 800752a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800752c:	2302      	movs	r3, #2
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007530:	f107 0314 	add.w	r3, r7, #20
 8007534:	4619      	mov	r1, r3
 8007536:	4807      	ldr	r0, [pc, #28]	; (8007554 <HAL_TIM_MspPostInit+0xb8>)
 8007538:	f002 f812 	bl	8009560 <HAL_GPIO_Init>
}
 800753c:	bf00      	nop
 800753e:	3728      	adds	r7, #40	; 0x28
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40000400 	.word	0x40000400
 8007548:	40021000 	.word	0x40021000
 800754c:	48000800 	.word	0x48000800
 8007550:	40000800 	.word	0x40000800
 8007554:	48000400 	.word	0x48000400

08007558 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800755c:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <MX_UART4_Init+0x90>)
 800755e:	4a23      	ldr	r2, [pc, #140]	; (80075ec <MX_UART4_Init+0x94>)
 8007560:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8007562:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <MX_UART4_Init+0x90>)
 8007564:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007568:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800756a:	4b1f      	ldr	r3, [pc, #124]	; (80075e8 <MX_UART4_Init+0x90>)
 800756c:	2200      	movs	r2, #0
 800756e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007570:	4b1d      	ldr	r3, [pc, #116]	; (80075e8 <MX_UART4_Init+0x90>)
 8007572:	2200      	movs	r2, #0
 8007574:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007576:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <MX_UART4_Init+0x90>)
 8007578:	2200      	movs	r2, #0
 800757a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800757c:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <MX_UART4_Init+0x90>)
 800757e:	220c      	movs	r2, #12
 8007580:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007582:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <MX_UART4_Init+0x90>)
 8007584:	2200      	movs	r2, #0
 8007586:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007588:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <MX_UART4_Init+0x90>)
 800758a:	2200      	movs	r2, #0
 800758c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <MX_UART4_Init+0x90>)
 8007590:	2200      	movs	r2, #0
 8007592:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007594:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <MX_UART4_Init+0x90>)
 8007596:	2200      	movs	r2, #0
 8007598:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800759a:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <MX_UART4_Init+0x90>)
 800759c:	2200      	movs	r2, #0
 800759e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80075a0:	4811      	ldr	r0, [pc, #68]	; (80075e8 <MX_UART4_Init+0x90>)
 80075a2:	f005 f9b9 	bl	800c918 <HAL_UART_Init>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80075ac:	f7ff fa42 	bl	8006a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075b0:	2100      	movs	r1, #0
 80075b2:	480d      	ldr	r0, [pc, #52]	; (80075e8 <MX_UART4_Init+0x90>)
 80075b4:	f007 f8cf 	bl	800e756 <HAL_UARTEx_SetTxFifoThreshold>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80075be:	f7ff fa39 	bl	8006a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075c2:	2100      	movs	r1, #0
 80075c4:	4808      	ldr	r0, [pc, #32]	; (80075e8 <MX_UART4_Init+0x90>)
 80075c6:	f007 f904 	bl	800e7d2 <HAL_UARTEx_SetRxFifoThreshold>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80075d0:	f7ff fa30 	bl	8006a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80075d4:	4804      	ldr	r0, [pc, #16]	; (80075e8 <MX_UART4_Init+0x90>)
 80075d6:	f007 f885 	bl	800e6e4 <HAL_UARTEx_DisableFifoMode>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80075e0:	f7ff fa28 	bl	8006a34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80075e4:	bf00      	nop
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000848 	.word	0x20000848
 80075ec:	40004c00 	.word	0x40004c00

080075f0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80075f4:	4b22      	ldr	r3, [pc, #136]	; (8007680 <MX_UART5_Init+0x90>)
 80075f6:	4a23      	ldr	r2, [pc, #140]	; (8007684 <MX_UART5_Init+0x94>)
 80075f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80075fa:	4b21      	ldr	r3, [pc, #132]	; (8007680 <MX_UART5_Init+0x90>)
 80075fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007600:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007602:	4b1f      	ldr	r3, [pc, #124]	; (8007680 <MX_UART5_Init+0x90>)
 8007604:	2200      	movs	r2, #0
 8007606:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007608:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <MX_UART5_Init+0x90>)
 800760a:	2200      	movs	r2, #0
 800760c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800760e:	4b1c      	ldr	r3, [pc, #112]	; (8007680 <MX_UART5_Init+0x90>)
 8007610:	2200      	movs	r2, #0
 8007612:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007614:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <MX_UART5_Init+0x90>)
 8007616:	220c      	movs	r2, #12
 8007618:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800761a:	4b19      	ldr	r3, [pc, #100]	; (8007680 <MX_UART5_Init+0x90>)
 800761c:	2200      	movs	r2, #0
 800761e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007620:	4b17      	ldr	r3, [pc, #92]	; (8007680 <MX_UART5_Init+0x90>)
 8007622:	2200      	movs	r2, #0
 8007624:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007626:	4b16      	ldr	r3, [pc, #88]	; (8007680 <MX_UART5_Init+0x90>)
 8007628:	2200      	movs	r2, #0
 800762a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800762c:	4b14      	ldr	r3, [pc, #80]	; (8007680 <MX_UART5_Init+0x90>)
 800762e:	2200      	movs	r2, #0
 8007630:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <MX_UART5_Init+0x90>)
 8007634:	2200      	movs	r2, #0
 8007636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007638:	4811      	ldr	r0, [pc, #68]	; (8007680 <MX_UART5_Init+0x90>)
 800763a:	f005 f96d 	bl	800c918 <HAL_UART_Init>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8007644:	f7ff f9f6 	bl	8006a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007648:	2100      	movs	r1, #0
 800764a:	480d      	ldr	r0, [pc, #52]	; (8007680 <MX_UART5_Init+0x90>)
 800764c:	f007 f883 	bl	800e756 <HAL_UARTEx_SetTxFifoThreshold>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8007656:	f7ff f9ed 	bl	8006a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800765a:	2100      	movs	r1, #0
 800765c:	4808      	ldr	r0, [pc, #32]	; (8007680 <MX_UART5_Init+0x90>)
 800765e:	f007 f8b8 	bl	800e7d2 <HAL_UARTEx_SetRxFifoThreshold>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8007668:	f7ff f9e4 	bl	8006a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800766c:	4804      	ldr	r0, [pc, #16]	; (8007680 <MX_UART5_Init+0x90>)
 800766e:	f007 f839 	bl	800e6e4 <HAL_UARTEx_DisableFifoMode>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8007678:	f7ff f9dc 	bl	8006a34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800767c:	bf00      	nop
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200008d8 	.word	0x200008d8
 8007684:	40005000 	.word	0x40005000

08007688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b0a2      	sub	sp, #136	; 0x88
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007690:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	609a      	str	r2, [r3, #8]
 800769c:	60da      	str	r2, [r3, #12]
 800769e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80076a0:	f107 0320 	add.w	r3, r7, #32
 80076a4:	2254      	movs	r2, #84	; 0x54
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f009 fa8f 	bl	8010bcc <memset>
  if(uartHandle->Instance==UART4)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a56      	ldr	r2, [pc, #344]	; (800780c <HAL_UART_MspInit+0x184>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d141      	bne.n	800773c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80076b8:	2308      	movs	r3, #8
 80076ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80076bc:	2300      	movs	r3, #0
 80076be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076c0:	f107 0320 	add.w	r3, r7, #32
 80076c4:	4618      	mov	r0, r3
 80076c6:	f003 fd05 	bl	800b0d4 <HAL_RCCEx_PeriphCLKConfig>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80076d0:	f7ff f9b0 	bl	8006a34 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80076d4:	4b4e      	ldr	r3, [pc, #312]	; (8007810 <HAL_UART_MspInit+0x188>)
 80076d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d8:	4a4d      	ldr	r2, [pc, #308]	; (8007810 <HAL_UART_MspInit+0x188>)
 80076da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076de:	6593      	str	r3, [r2, #88]	; 0x58
 80076e0:	4b4b      	ldr	r3, [pc, #300]	; (8007810 <HAL_UART_MspInit+0x188>)
 80076e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076ec:	4b48      	ldr	r3, [pc, #288]	; (8007810 <HAL_UART_MspInit+0x188>)
 80076ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f0:	4a47      	ldr	r2, [pc, #284]	; (8007810 <HAL_UART_MspInit+0x188>)
 80076f2:	f043 0304 	orr.w	r3, r3, #4
 80076f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076f8:	4b45      	ldr	r3, [pc, #276]	; (8007810 <HAL_UART_MspInit+0x188>)
 80076fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007704:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007708:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800770a:	2302      	movs	r3, #2
 800770c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800770e:	2300      	movs	r3, #0
 8007710:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007712:	2300      	movs	r3, #0
 8007714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8007718:	2305      	movs	r3, #5
 800771a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800771e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007722:	4619      	mov	r1, r3
 8007724:	483b      	ldr	r0, [pc, #236]	; (8007814 <HAL_UART_MspInit+0x18c>)
 8007726:	f001 ff1b 	bl	8009560 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800772a:	2200      	movs	r2, #0
 800772c:	2105      	movs	r1, #5
 800772e:	2034      	movs	r0, #52	; 0x34
 8007730:	f001 fbbc 	bl	8008eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007734:	2034      	movs	r0, #52	; 0x34
 8007736:	f001 fbd3 	bl	8008ee0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800773a:	e063      	b.n	8007804 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==UART5)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a35      	ldr	r2, [pc, #212]	; (8007818 <HAL_UART_MspInit+0x190>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d15e      	bne.n	8007804 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007746:	2310      	movs	r3, #16
 8007748:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800774a:	2300      	movs	r3, #0
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800774e:	f107 0320 	add.w	r3, r7, #32
 8007752:	4618      	mov	r0, r3
 8007754:	f003 fcbe 	bl	800b0d4 <HAL_RCCEx_PeriphCLKConfig>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <HAL_UART_MspInit+0xda>
      Error_Handler();
 800775e:	f7ff f969 	bl	8006a34 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007762:	4b2b      	ldr	r3, [pc, #172]	; (8007810 <HAL_UART_MspInit+0x188>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <HAL_UART_MspInit+0x188>)
 8007768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800776c:	6593      	str	r3, [r2, #88]	; 0x58
 800776e:	4b28      	ldr	r3, [pc, #160]	; (8007810 <HAL_UART_MspInit+0x188>)
 8007770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800777a:	4b25      	ldr	r3, [pc, #148]	; (8007810 <HAL_UART_MspInit+0x188>)
 800777c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777e:	4a24      	ldr	r2, [pc, #144]	; (8007810 <HAL_UART_MspInit+0x188>)
 8007780:	f043 0304 	orr.w	r3, r3, #4
 8007784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007786:	4b22      	ldr	r3, [pc, #136]	; (8007810 <HAL_UART_MspInit+0x188>)
 8007788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007792:	4b1f      	ldr	r3, [pc, #124]	; (8007810 <HAL_UART_MspInit+0x188>)
 8007794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007796:	4a1e      	ldr	r2, [pc, #120]	; (8007810 <HAL_UART_MspInit+0x188>)
 8007798:	f043 0308 	orr.w	r3, r3, #8
 800779c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800779e:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <HAL_UART_MspInit+0x188>)
 80077a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80077aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b0:	2302      	movs	r3, #2
 80077b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077b8:	2300      	movs	r3, #0
 80077ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80077be:	2305      	movs	r3, #5
 80077c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80077c8:	4619      	mov	r1, r3
 80077ca:	4812      	ldr	r0, [pc, #72]	; (8007814 <HAL_UART_MspInit+0x18c>)
 80077cc:	f001 fec8 	bl	8009560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80077d0:	2304      	movs	r3, #4
 80077d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d4:	2302      	movs	r3, #2
 80077d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077dc:	2300      	movs	r3, #0
 80077de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80077e2:	2305      	movs	r3, #5
 80077e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80077ec:	4619      	mov	r1, r3
 80077ee:	480b      	ldr	r0, [pc, #44]	; (800781c <HAL_UART_MspInit+0x194>)
 80077f0:	f001 feb6 	bl	8009560 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80077f4:	2200      	movs	r2, #0
 80077f6:	2105      	movs	r1, #5
 80077f8:	2035      	movs	r0, #53	; 0x35
 80077fa:	f001 fb57 	bl	8008eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80077fe:	2035      	movs	r0, #53	; 0x35
 8007800:	f001 fb6e 	bl	8008ee0 <HAL_NVIC_EnableIRQ>
}
 8007804:	bf00      	nop
 8007806:	3788      	adds	r7, #136	; 0x88
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40004c00 	.word	0x40004c00
 8007810:	40021000 	.word	0x40021000
 8007814:	48000800 	.word	0x48000800
 8007818:	40005000 	.word	0x40005000
 800781c:	48000c00 	.word	0x48000c00

08007820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007820:	480d      	ldr	r0, [pc, #52]	; (8007858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007822:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007824:	480d      	ldr	r0, [pc, #52]	; (800785c <LoopForever+0x6>)
  ldr r1, =_edata
 8007826:	490e      	ldr	r1, [pc, #56]	; (8007860 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007828:	4a0e      	ldr	r2, [pc, #56]	; (8007864 <LoopForever+0xe>)
  movs r3, #0
 800782a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800782c:	e002      	b.n	8007834 <LoopCopyDataInit>

0800782e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800782e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007832:	3304      	adds	r3, #4

08007834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007838:	d3f9      	bcc.n	800782e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800783a:	4a0b      	ldr	r2, [pc, #44]	; (8007868 <LoopForever+0x12>)
  ldr r4, =_ebss
 800783c:	4c0b      	ldr	r4, [pc, #44]	; (800786c <LoopForever+0x16>)
  movs r3, #0
 800783e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007840:	e001      	b.n	8007846 <LoopFillZerobss>

08007842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007844:	3204      	adds	r2, #4

08007846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007848:	d3fb      	bcc.n	8007842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800784a:	f7ff fca5 	bl	8007198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800784e:	f009 f989 	bl	8010b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007852:	f7ff f855 	bl	8006900 <main>

08007856 <LoopForever>:

LoopForever:
    b LoopForever
 8007856:	e7fe      	b.n	8007856 <LoopForever>
  ldr   r0, =_estack
 8007858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800785c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007860:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8007864:	08011d98 	.word	0x08011d98
  ldr r2, =_sbss
 8007868:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800786c:	20003ac8 	.word	0x20003ac8

08007870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007870:	e7fe      	b.n	8007870 <ADC1_2_IRQHandler>

08007872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800787c:	2003      	movs	r0, #3
 800787e:	f001 fb0a 	bl	8008e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007882:	200f      	movs	r0, #15
 8007884:	f7ff fbd6 	bl	8007034 <HAL_InitTick>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	71fb      	strb	r3, [r7, #7]
 8007892:	e001      	b.n	8007898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007894:	f7ff fba6 	bl	8006fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007898:	79fb      	ldrb	r3, [r7, #7]

}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <HAL_IncTick+0x1c>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <HAL_IncTick+0x20>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4413      	add	r3, r2
 80078b2:	4a03      	ldr	r2, [pc, #12]	; (80078c0 <HAL_IncTick+0x1c>)
 80078b4:	6013      	str	r3, [r2, #0]
}
 80078b6:	bf00      	nop
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000968 	.word	0x20000968
 80078c4:	2000000c 	.word	0x2000000c

080078c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  return uwTick;
 80078cc:	4b03      	ldr	r3, [pc, #12]	; (80078dc <HAL_GetTick+0x14>)
 80078ce:	681b      	ldr	r3, [r3, #0]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20000968 	.word	0x20000968

080078e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80078e8:	f7ff ffee 	bl	80078c8 <HAL_GetTick>
 80078ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d004      	beq.n	8007904 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <HAL_Delay+0x40>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007904:	bf00      	nop
 8007906:	f7ff ffdf 	bl	80078c8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	429a      	cmp	r2, r3
 8007914:	d8f7      	bhi.n	8007906 <HAL_Delay+0x26>
  {
  }
}
 8007916:	bf00      	nop
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	2000000c 	.word	0x2000000c

08007924 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	609a      	str	r2, [r3, #8]
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	609a      	str	r2, [r3, #8]
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3360      	adds	r3, #96	; 0x60
 800799e:	461a      	mov	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <LL_ADC_SetOffset+0x44>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80079c4:	bf00      	nop
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	03fff000 	.word	0x03fff000

080079d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3360      	adds	r3, #96	; 0x60
 80079e2:	461a      	mov	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3360      	adds	r3, #96	; 0x60
 8007a10:	461a      	mov	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3360      	adds	r3, #96	; 0x60
 8007a46:	461a      	mov	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3360      	adds	r3, #96	; 0x60
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	431a      	orrs	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	615a      	str	r2, [r3, #20]
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b087      	sub	sp, #28
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3330      	adds	r3, #48	; 0x30
 8007afe:	461a      	mov	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	4413      	add	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	211f      	movs	r1, #31
 8007b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	401a      	ands	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	0e9b      	lsrs	r3, r3, #26
 8007b26:	f003 011f 	and.w	r1, r3, #31
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	fa01 f303 	lsl.w	r3, r1, r3
 8007b34:	431a      	orrs	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007b3a:	bf00      	nop
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b087      	sub	sp, #28
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3314      	adds	r3, #20
 8007b56:	461a      	mov	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	0e5b      	lsrs	r3, r3, #25
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	4413      	add	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	0d1b      	lsrs	r3, r3, #20
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2107      	movs	r1, #7
 8007b74:	fa01 f303 	lsl.w	r3, r1, r3
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	401a      	ands	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	0d1b      	lsrs	r3, r3, #20
 8007b80:	f003 031f 	and.w	r3, r3, #31
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	fa01 f303 	lsl.w	r3, r1, r3
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007b90:	bf00      	nop
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a0f      	ldr	r2, [pc, #60]	; (8007be8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d10a      	bne.n	8007bc6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8007bc4:	e00a      	b.n	8007bdc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd2:	43db      	mvns	r3, r3
 8007bd4:	401a      	ands	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	407f0000 	.word	0x407f0000

08007bec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 031f 	and.w	r3, r3, #31
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6093      	str	r3, [r2, #8]
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c40:	d101      	bne.n	8007c46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c90:	d101      	bne.n	8007c96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007cb8:	f043 0201 	orr.w	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <LL_ADC_IsEnabled+0x18>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <LL_ADC_IsEnabled+0x1a>
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d06:	f043 0204 	orr.w	r2, r3, #4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d101      	bne.n	8007d32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d101      	bne.n	8007d58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007d68:	b590      	push	{r4, r7, lr}
 8007d6a:	b089      	sub	sp, #36	; 0x24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e1af      	b.n	80080e2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7fd f917 	bl	8004fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff ff3f 	bl	8007c2c <LL_ADC_IsDeepPowerDownEnabled>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ff25 	bl	8007c08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff ff5a 	bl	8007c7c <LL_ADC_IsInternalRegulatorEnabled>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d115      	bne.n	8007dfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff ff3e 	bl	8007c54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007dd8:	4b9f      	ldr	r3, [pc, #636]	; (8008058 <HAL_ADC_Init+0x2f0>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	099b      	lsrs	r3, r3, #6
 8007dde:	4a9f      	ldr	r2, [pc, #636]	; (800805c <HAL_ADC_Init+0x2f4>)
 8007de0:	fba2 2303 	umull	r2, r3, r2, r3
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	3301      	adds	r3, #1
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007dec:	e002      	b.n	8007df4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1f9      	bne.n	8007dee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff ff3c 	bl	8007c7c <LL_ADC_IsInternalRegulatorEnabled>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10d      	bne.n	8007e26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e0e:	f043 0210 	orr.w	r2, r3, #16
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1a:	f043 0201 	orr.w	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff ff75 	bl	8007d1a <LL_ADC_REG_IsConversionOngoing>
 8007e30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 8148 	bne.w	80080d0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 8144 	bne.w	80080d0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007e50:	f043 0202 	orr.w	r2, r3, #2
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff ff35 	bl	8007ccc <LL_ADC_IsEnabled>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d141      	bne.n	8007eec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e70:	d004      	beq.n	8007e7c <HAL_ADC_Init+0x114>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a7a      	ldr	r2, [pc, #488]	; (8008060 <HAL_ADC_Init+0x2f8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d10f      	bne.n	8007e9c <HAL_ADC_Init+0x134>
 8007e7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007e80:	f7ff ff24 	bl	8007ccc <LL_ADC_IsEnabled>
 8007e84:	4604      	mov	r4, r0
 8007e86:	4876      	ldr	r0, [pc, #472]	; (8008060 <HAL_ADC_Init+0x2f8>)
 8007e88:	f7ff ff20 	bl	8007ccc <LL_ADC_IsEnabled>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	4323      	orrs	r3, r4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	e012      	b.n	8007ec2 <HAL_ADC_Init+0x15a>
 8007e9c:	4871      	ldr	r0, [pc, #452]	; (8008064 <HAL_ADC_Init+0x2fc>)
 8007e9e:	f7ff ff15 	bl	8007ccc <LL_ADC_IsEnabled>
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4870      	ldr	r0, [pc, #448]	; (8008068 <HAL_ADC_Init+0x300>)
 8007ea6:	f7ff ff11 	bl	8007ccc <LL_ADC_IsEnabled>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	431c      	orrs	r4, r3
 8007eae:	486f      	ldr	r0, [pc, #444]	; (800806c <HAL_ADC_Init+0x304>)
 8007eb0:	f7ff ff0c 	bl	8007ccc <LL_ADC_IsEnabled>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	4323      	orrs	r3, r4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d012      	beq.n	8007eec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ece:	d004      	beq.n	8007eda <HAL_ADC_Init+0x172>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a62      	ldr	r2, [pc, #392]	; (8008060 <HAL_ADC_Init+0x2f8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d101      	bne.n	8007ede <HAL_ADC_Init+0x176>
 8007eda:	4a65      	ldr	r2, [pc, #404]	; (8008070 <HAL_ADC_Init+0x308>)
 8007edc:	e000      	b.n	8007ee0 <HAL_ADC_Init+0x178>
 8007ede:	4a65      	ldr	r2, [pc, #404]	; (8008074 <HAL_ADC_Init+0x30c>)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f7ff fd1c 	bl	8007924 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	7f5b      	ldrb	r3, [r3, #29]
 8007ef0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007ef6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007efc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007f02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d106      	bne.n	8007f28 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	045b      	lsls	r3, r3, #17
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	4b4b      	ldr	r3, [pc, #300]	; (8008078 <HAL_ADC_Init+0x310>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	69b9      	ldr	r1, [r7, #24]
 8007f54:	430b      	orrs	r3, r1
 8007f56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff fed1 	bl	8007d1a <LL_ADC_REG_IsConversionOngoing>
 8007f78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fede 	bl	8007d40 <LL_ADC_INJ_IsConversionOngoing>
 8007f84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d17f      	bne.n	800808c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d17c      	bne.n	800808c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007f96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fae:	f023 0302 	bic.w	r3, r3, #2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	69b9      	ldr	r1, [r7, #24]
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d017      	beq.n	8007ff4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007fd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007fdc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6911      	ldr	r1, [r2, #16]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	430b      	orrs	r3, r1
 8007fee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007ff2:	e013      	b.n	800801c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008002:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008018:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008022:	2b01      	cmp	r3, #1
 8008024:	d12a      	bne.n	800807c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008030:	f023 0304 	bic.w	r3, r3, #4
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800803c:	4311      	orrs	r1, r2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008042:	4311      	orrs	r1, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008048:	430a      	orrs	r2, r1
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f042 0201 	orr.w	r2, r2, #1
 8008054:	611a      	str	r2, [r3, #16]
 8008056:	e019      	b.n	800808c <HAL_ADC_Init+0x324>
 8008058:	20000004 	.word	0x20000004
 800805c:	053e2d63 	.word	0x053e2d63
 8008060:	50000100 	.word	0x50000100
 8008064:	50000400 	.word	0x50000400
 8008068:	50000500 	.word	0x50000500
 800806c:	50000600 	.word	0x50000600
 8008070:	50000300 	.word	0x50000300
 8008074:	50000700 	.word	0x50000700
 8008078:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d10c      	bne.n	80080ae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	f023 010f 	bic.w	r1, r3, #15
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	1e5a      	subs	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	631a      	str	r2, [r3, #48]	; 0x30
 80080ac:	e007      	b.n	80080be <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 020f 	bic.w	r2, r2, #15
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	f043 0201 	orr.w	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80080ce:	e007      	b.n	80080e0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d4:	f043 0210 	orr.w	r2, r3, #16
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80080e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3724      	adds	r7, #36	; 0x24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd90      	pop	{r4, r7, pc}
 80080ea:	bf00      	nop

080080ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008100:	d004      	beq.n	800810c <HAL_ADC_Start_DMA+0x20>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a5a      	ldr	r2, [pc, #360]	; (8008270 <HAL_ADC_Start_DMA+0x184>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d101      	bne.n	8008110 <HAL_ADC_Start_DMA+0x24>
 800810c:	4b59      	ldr	r3, [pc, #356]	; (8008274 <HAL_ADC_Start_DMA+0x188>)
 800810e:	e000      	b.n	8008112 <HAL_ADC_Start_DMA+0x26>
 8008110:	4b59      	ldr	r3, [pc, #356]	; (8008278 <HAL_ADC_Start_DMA+0x18c>)
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fd6a 	bl	8007bec <LL_ADC_GetMultimode>
 8008118:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fdfb 	bl	8007d1a <LL_ADC_REG_IsConversionOngoing>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	f040 809b 	bne.w	8008262 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_ADC_Start_DMA+0x4e>
 8008136:	2302      	movs	r3, #2
 8008138:	e096      	b.n	8008268 <HAL_ADC_Start_DMA+0x17c>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a4d      	ldr	r2, [pc, #308]	; (800827c <HAL_ADC_Start_DMA+0x190>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d008      	beq.n	800815e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b05      	cmp	r3, #5
 8008156:	d002      	beq.n	800815e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b09      	cmp	r3, #9
 800815c:	d17a      	bne.n	8008254 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fcf6 	bl	8008b50 <ADC_Enable>
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d16d      	bne.n	800824a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008172:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a3a      	ldr	r2, [pc, #232]	; (8008270 <HAL_ADC_Start_DMA+0x184>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_ADC_Start_DMA+0xb4>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a3b      	ldr	r2, [pc, #236]	; (8008280 <HAL_ADC_Start_DMA+0x194>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d002      	beq.n	800819c <HAL_ADC_Start_DMA+0xb0>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	e003      	b.n	80081a4 <HAL_ADC_Start_DMA+0xb8>
 800819c:	4b39      	ldr	r3, [pc, #228]	; (8008284 <HAL_ADC_Start_DMA+0x198>)
 800819e:	e001      	b.n	80081a4 <HAL_ADC_Start_DMA+0xb8>
 80081a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	6812      	ldr	r2, [r2, #0]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d002      	beq.n	80081b2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d105      	bne.n	80081be <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d006      	beq.n	80081d8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ce:	f023 0206 	bic.w	r2, r3, #6
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	661a      	str	r2, [r3, #96]	; 0x60
 80081d6:	e002      	b.n	80081de <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e2:	4a29      	ldr	r2, [pc, #164]	; (8008288 <HAL_ADC_Start_DMA+0x19c>)
 80081e4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ea:	4a28      	ldr	r2, [pc, #160]	; (800828c <HAL_ADC_Start_DMA+0x1a0>)
 80081ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f2:	4a27      	ldr	r2, [pc, #156]	; (8008290 <HAL_ADC_Start_DMA+0x1a4>)
 80081f4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	221c      	movs	r2, #28
 80081fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 0210 	orr.w	r2, r2, #16
 8008214:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f042 0201 	orr.w	r2, r2, #1
 8008224:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3340      	adds	r3, #64	; 0x40
 8008230:	4619      	mov	r1, r3
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f000 ff09 	bl	800904c <HAL_DMA_Start_IT>
 800823a:	4603      	mov	r3, r0
 800823c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fd55 	bl	8007cf2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008248:	e00d      	b.n	8008266 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8008252:	e008      	b.n	8008266 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8008260:	e001      	b.n	8008266 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008262:	2302      	movs	r3, #2
 8008264:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	50000100 	.word	0x50000100
 8008274:	50000300 	.word	0x50000300
 8008278:	50000700 	.word	0x50000700
 800827c:	50000600 	.word	0x50000600
 8008280:	50000500 	.word	0x50000500
 8008284:	50000400 	.word	0x50000400
 8008288:	08008c15 	.word	0x08008c15
 800828c:	08008ced 	.word	0x08008ced
 8008290:	08008d09 	.word	0x08008d09

08008294 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b0b6      	sub	sp, #216	; 0xd8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d102      	bne.n	80082f4 <HAL_ADC_ConfigChannel+0x24>
 80082ee:	2302      	movs	r3, #2
 80082f0:	f000 bc13 	b.w	8008b1a <HAL_ADC_ConfigChannel+0x84a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff fd0a 	bl	8007d1a <LL_ADC_REG_IsConversionOngoing>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	f040 83f3 	bne.w	8008af4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	6859      	ldr	r1, [r3, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7ff fbe7 	bl	8007aee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fcf8 	bl	8007d1a <LL_ADC_REG_IsConversionOngoing>
 800832a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fd04 	bl	8007d40 <LL_ADC_INJ_IsConversionOngoing>
 8008338:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800833c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008340:	2b00      	cmp	r3, #0
 8008342:	f040 81d9 	bne.w	80086f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800834a:	2b00      	cmp	r3, #0
 800834c:	f040 81d4 	bne.w	80086f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008358:	d10f      	bne.n	800837a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	4619      	mov	r1, r3
 8008366:	f7ff fbee 	bl	8007b46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fb95 	bl	8007aa2 <LL_ADC_SetSamplingTimeCommonConfig>
 8008378:	e00e      	b.n	8008398 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	461a      	mov	r2, r3
 8008388:	f7ff fbdd 	bl	8007b46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fb85 	bl	8007aa2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	695a      	ldr	r2, [r3, #20]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	08db      	lsrs	r3, r3, #3
 80083a4:	f003 0303 	and.w	r3, r3, #3
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d022      	beq.n	8008400 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	6919      	ldr	r1, [r3, #16]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ca:	f7ff fadf 	bl	800798c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6919      	ldr	r1, [r3, #16]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7ff fb2b 	bl	8007a36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	6919      	ldr	r1, [r3, #16]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7f1b      	ldrb	r3, [r3, #28]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d102      	bne.n	80083f6 <HAL_ADC_ConfigChannel+0x126>
 80083f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083f4:	e000      	b.n	80083f8 <HAL_ADC_ConfigChannel+0x128>
 80083f6:	2300      	movs	r3, #0
 80083f8:	461a      	mov	r2, r3
 80083fa:	f7ff fb37 	bl	8007a6c <LL_ADC_SetOffsetSaturation>
 80083fe:	e17b      	b.n	80086f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fae4 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 800840c:	4603      	mov	r3, r0
 800840e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10a      	bne.n	800842c <HAL_ADC_ConfigChannel+0x15c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2100      	movs	r1, #0
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fad9 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 8008422:	4603      	mov	r3, r0
 8008424:	0e9b      	lsrs	r3, r3, #26
 8008426:	f003 021f 	and.w	r2, r3, #31
 800842a:	e01e      	b.n	800846a <HAL_ADC_ConfigChannel+0x19a>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff face 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 8008438:	4603      	mov	r3, r0
 800843a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800843e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008442:	fa93 f3a3 	rbit	r3, r3
 8008446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800844a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800844e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800845a:	2320      	movs	r3, #32
 800845c:	e004      	b.n	8008468 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800845e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008462:	fab3 f383 	clz	r3, r3
 8008466:	b2db      	uxtb	r3, r3
 8008468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008472:	2b00      	cmp	r3, #0
 8008474:	d105      	bne.n	8008482 <HAL_ADC_ConfigChannel+0x1b2>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	0e9b      	lsrs	r3, r3, #26
 800847c:	f003 031f 	and.w	r3, r3, #31
 8008480:	e018      	b.n	80084b4 <HAL_ADC_ConfigChannel+0x1e4>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800848a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800848e:	fa93 f3a3 	rbit	r3, r3
 8008492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800849a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800849e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80084a6:	2320      	movs	r3, #32
 80084a8:	e004      	b.n	80084b4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80084aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084ae:	fab3 f383 	clz	r3, r3
 80084b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d106      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff fa9d 	bl	8007a00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2101      	movs	r1, #1
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff fa81 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <HAL_ADC_ConfigChannel+0x222>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2101      	movs	r1, #1
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff fa76 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 80084e8:	4603      	mov	r3, r0
 80084ea:	0e9b      	lsrs	r3, r3, #26
 80084ec:	f003 021f 	and.w	r2, r3, #31
 80084f0:	e01e      	b.n	8008530 <HAL_ADC_ConfigChannel+0x260>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2101      	movs	r1, #1
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fa6b 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 80084fe:	4603      	mov	r3, r0
 8008500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008508:	fa93 f3a3 	rbit	r3, r3
 800850c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008520:	2320      	movs	r3, #32
 8008522:	e004      	b.n	800852e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008528:	fab3 f383 	clz	r3, r3
 800852c:	b2db      	uxtb	r3, r3
 800852e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <HAL_ADC_ConfigChannel+0x278>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	0e9b      	lsrs	r3, r3, #26
 8008542:	f003 031f 	and.w	r3, r3, #31
 8008546:	e018      	b.n	800857a <HAL_ADC_ConfigChannel+0x2aa>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008554:	fa93 f3a3 	rbit	r3, r3
 8008558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800855c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800856c:	2320      	movs	r3, #32
 800856e:	e004      	b.n	800857a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008574:	fab3 f383 	clz	r3, r3
 8008578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800857a:	429a      	cmp	r2, r3
 800857c:	d106      	bne.n	800858c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2200      	movs	r2, #0
 8008584:	2101      	movs	r1, #1
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff fa3a 	bl	8007a00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2102      	movs	r1, #2
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fa1e 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 8008598:	4603      	mov	r3, r0
 800859a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <HAL_ADC_ConfigChannel+0x2e8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2102      	movs	r1, #2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fa13 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 80085ae:	4603      	mov	r3, r0
 80085b0:	0e9b      	lsrs	r3, r3, #26
 80085b2:	f003 021f 	and.w	r2, r3, #31
 80085b6:	e01e      	b.n	80085f6 <HAL_ADC_ConfigChannel+0x326>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2102      	movs	r1, #2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff fa08 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085ce:	fa93 f3a3 	rbit	r3, r3
 80085d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80085d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80085de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80085e6:	2320      	movs	r3, #32
 80085e8:	e004      	b.n	80085f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80085ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085ee:	fab3 f383 	clz	r3, r3
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <HAL_ADC_ConfigChannel+0x33e>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	0e9b      	lsrs	r3, r3, #26
 8008608:	f003 031f 	and.w	r3, r3, #31
 800860c:	e016      	b.n	800863c <HAL_ADC_ConfigChannel+0x36c>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800861a:	fa93 f3a3 	rbit	r3, r3
 800861e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800862e:	2320      	movs	r3, #32
 8008630:	e004      	b.n	800863c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008636:	fab3 f383 	clz	r3, r3
 800863a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800863c:	429a      	cmp	r2, r3
 800863e:	d106      	bne.n	800864e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2200      	movs	r2, #0
 8008646:	2102      	movs	r1, #2
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff f9d9 	bl	8007a00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2103      	movs	r1, #3
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff f9bd 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 800865a:	4603      	mov	r3, r0
 800865c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <HAL_ADC_ConfigChannel+0x3aa>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2103      	movs	r1, #3
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff f9b2 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 8008670:	4603      	mov	r3, r0
 8008672:	0e9b      	lsrs	r3, r3, #26
 8008674:	f003 021f 	and.w	r2, r3, #31
 8008678:	e017      	b.n	80086aa <HAL_ADC_ConfigChannel+0x3da>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2103      	movs	r1, #3
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff f9a7 	bl	80079d4 <LL_ADC_GetOffsetChannel>
 8008686:	4603      	mov	r3, r0
 8008688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800868c:	fa93 f3a3 	rbit	r3, r3
 8008690:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008694:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800869c:	2320      	movs	r3, #32
 800869e:	e003      	b.n	80086a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80086a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a2:	fab3 f383 	clz	r3, r3
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d105      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0x3f2>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	0e9b      	lsrs	r3, r3, #26
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	e011      	b.n	80086e6 <HAL_ADC_ConfigChannel+0x416>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086ca:	fa93 f3a3 	rbit	r3, r3
 80086ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80086d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80086d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80086da:	2320      	movs	r3, #32
 80086dc:	e003      	b.n	80086e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80086de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e0:	fab3 f383 	clz	r3, r3
 80086e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d106      	bne.n	80086f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	2103      	movs	r1, #3
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff f984 	bl	8007a00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fae5 	bl	8007ccc <LL_ADC_IsEnabled>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	f040 813d 	bne.w	8008984 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6819      	ldr	r1, [r3, #0]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	461a      	mov	r2, r3
 8008718:	f7ff fa40 	bl	8007b9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	4aa2      	ldr	r2, [pc, #648]	; (80089ac <HAL_ADC_ConfigChannel+0x6dc>)
 8008722:	4293      	cmp	r3, r2
 8008724:	f040 812e 	bne.w	8008984 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10b      	bne.n	8008750 <HAL_ADC_ConfigChannel+0x480>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	0e9b      	lsrs	r3, r3, #26
 800873e:	3301      	adds	r3, #1
 8008740:	f003 031f 	and.w	r3, r3, #31
 8008744:	2b09      	cmp	r3, #9
 8008746:	bf94      	ite	ls
 8008748:	2301      	movls	r3, #1
 800874a:	2300      	movhi	r3, #0
 800874c:	b2db      	uxtb	r3, r3
 800874e:	e019      	b.n	8008784 <HAL_ADC_ConfigChannel+0x4b4>
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008758:	fa93 f3a3 	rbit	r3, r3
 800875c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800875e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008760:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008768:	2320      	movs	r3, #32
 800876a:	e003      	b.n	8008774 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800876c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800876e:	fab3 f383 	clz	r3, r3
 8008772:	b2db      	uxtb	r3, r3
 8008774:	3301      	adds	r3, #1
 8008776:	f003 031f 	and.w	r3, r3, #31
 800877a:	2b09      	cmp	r3, #9
 800877c:	bf94      	ite	ls
 800877e:	2301      	movls	r3, #1
 8008780:	2300      	movhi	r3, #0
 8008782:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008784:	2b00      	cmp	r3, #0
 8008786:	d079      	beq.n	800887c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008790:	2b00      	cmp	r3, #0
 8008792:	d107      	bne.n	80087a4 <HAL_ADC_ConfigChannel+0x4d4>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	0e9b      	lsrs	r3, r3, #26
 800879a:	3301      	adds	r3, #1
 800879c:	069b      	lsls	r3, r3, #26
 800879e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80087a2:	e015      	b.n	80087d0 <HAL_ADC_ConfigChannel+0x500>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ac:	fa93 f3a3 	rbit	r3, r3
 80087b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80087b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80087b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80087bc:	2320      	movs	r3, #32
 80087be:	e003      	b.n	80087c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80087c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c2:	fab3 f383 	clz	r3, r3
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	3301      	adds	r3, #1
 80087ca:	069b      	lsls	r3, r3, #26
 80087cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d109      	bne.n	80087f0 <HAL_ADC_ConfigChannel+0x520>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	0e9b      	lsrs	r3, r3, #26
 80087e2:	3301      	adds	r3, #1
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	2101      	movs	r1, #1
 80087ea:	fa01 f303 	lsl.w	r3, r1, r3
 80087ee:	e017      	b.n	8008820 <HAL_ADC_ConfigChannel+0x550>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f8:	fa93 f3a3 	rbit	r3, r3
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8008808:	2320      	movs	r3, #32
 800880a:	e003      	b.n	8008814 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800880c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880e:	fab3 f383 	clz	r3, r3
 8008812:	b2db      	uxtb	r3, r3
 8008814:	3301      	adds	r3, #1
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2101      	movs	r1, #1
 800881c:	fa01 f303 	lsl.w	r3, r1, r3
 8008820:	ea42 0103 	orr.w	r1, r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10a      	bne.n	8008846 <HAL_ADC_ConfigChannel+0x576>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	0e9b      	lsrs	r3, r3, #26
 8008836:	3301      	adds	r3, #1
 8008838:	f003 021f 	and.w	r2, r3, #31
 800883c:	4613      	mov	r3, r2
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	4413      	add	r3, r2
 8008842:	051b      	lsls	r3, r3, #20
 8008844:	e018      	b.n	8008878 <HAL_ADC_ConfigChannel+0x5a8>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	fa93 f3a3 	rbit	r3, r3
 8008852:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800885e:	2320      	movs	r3, #32
 8008860:	e003      	b.n	800886a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8008862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008864:	fab3 f383 	clz	r3, r3
 8008868:	b2db      	uxtb	r3, r3
 800886a:	3301      	adds	r3, #1
 800886c:	f003 021f 	and.w	r2, r3, #31
 8008870:	4613      	mov	r3, r2
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	4413      	add	r3, r2
 8008876:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008878:	430b      	orrs	r3, r1
 800887a:	e07e      	b.n	800897a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008884:	2b00      	cmp	r3, #0
 8008886:	d107      	bne.n	8008898 <HAL_ADC_ConfigChannel+0x5c8>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	0e9b      	lsrs	r3, r3, #26
 800888e:	3301      	adds	r3, #1
 8008890:	069b      	lsls	r3, r3, #26
 8008892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008896:	e015      	b.n	80088c4 <HAL_ADC_ConfigChannel+0x5f4>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	fa93 f3a3 	rbit	r3, r3
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80088b0:	2320      	movs	r3, #32
 80088b2:	e003      	b.n	80088bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	fab3 f383 	clz	r3, r3
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	3301      	adds	r3, #1
 80088be:	069b      	lsls	r3, r3, #26
 80088c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d109      	bne.n	80088e4 <HAL_ADC_ConfigChannel+0x614>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	0e9b      	lsrs	r3, r3, #26
 80088d6:	3301      	adds	r3, #1
 80088d8:	f003 031f 	and.w	r3, r3, #31
 80088dc:	2101      	movs	r1, #1
 80088de:	fa01 f303 	lsl.w	r3, r1, r3
 80088e2:	e017      	b.n	8008914 <HAL_ADC_ConfigChannel+0x644>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	fa93 f3a3 	rbit	r3, r3
 80088f0:	61fb      	str	r3, [r7, #28]
  return result;
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80088fc:	2320      	movs	r3, #32
 80088fe:	e003      	b.n	8008908 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	fab3 f383 	clz	r3, r3
 8008906:	b2db      	uxtb	r3, r3
 8008908:	3301      	adds	r3, #1
 800890a:	f003 031f 	and.w	r3, r3, #31
 800890e:	2101      	movs	r1, #1
 8008910:	fa01 f303 	lsl.w	r3, r1, r3
 8008914:	ea42 0103 	orr.w	r1, r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10d      	bne.n	8008940 <HAL_ADC_ConfigChannel+0x670>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	0e9b      	lsrs	r3, r3, #26
 800892a:	3301      	adds	r3, #1
 800892c:	f003 021f 	and.w	r2, r3, #31
 8008930:	4613      	mov	r3, r2
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	4413      	add	r3, r2
 8008936:	3b1e      	subs	r3, #30
 8008938:	051b      	lsls	r3, r3, #20
 800893a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800893e:	e01b      	b.n	8008978 <HAL_ADC_ConfigChannel+0x6a8>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	fa93 f3a3 	rbit	r3, r3
 800894c:	613b      	str	r3, [r7, #16]
  return result;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8008958:	2320      	movs	r3, #32
 800895a:	e003      	b.n	8008964 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	fab3 f383 	clz	r3, r3
 8008962:	b2db      	uxtb	r3, r3
 8008964:	3301      	adds	r3, #1
 8008966:	f003 021f 	and.w	r2, r3, #31
 800896a:	4613      	mov	r3, r2
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4413      	add	r3, r2
 8008970:	3b1e      	subs	r3, #30
 8008972:	051b      	lsls	r3, r3, #20
 8008974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008978:	430b      	orrs	r3, r1
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	6892      	ldr	r2, [r2, #8]
 800897e:	4619      	mov	r1, r3
 8008980:	f7ff f8e1 	bl	8007b46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800898a:	4013      	ands	r3, r2
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80be 	beq.w	8008b0e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800899a:	d004      	beq.n	80089a6 <HAL_ADC_ConfigChannel+0x6d6>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a04      	ldr	r2, [pc, #16]	; (80089b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d10a      	bne.n	80089bc <HAL_ADC_ConfigChannel+0x6ec>
 80089a6:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80089a8:	e009      	b.n	80089be <HAL_ADC_ConfigChannel+0x6ee>
 80089aa:	bf00      	nop
 80089ac:	407f0000 	.word	0x407f0000
 80089b0:	80080000 	.word	0x80080000
 80089b4:	50000100 	.word	0x50000100
 80089b8:	50000300 	.word	0x50000300
 80089bc:	4b59      	ldr	r3, [pc, #356]	; (8008b24 <HAL_ADC_ConfigChannel+0x854>)
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe ffd6 	bl	8007970 <LL_ADC_GetCommonPathInternalCh>
 80089c4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a56      	ldr	r2, [pc, #344]	; (8008b28 <HAL_ADC_ConfigChannel+0x858>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d004      	beq.n	80089dc <HAL_ADC_ConfigChannel+0x70c>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a55      	ldr	r2, [pc, #340]	; (8008b2c <HAL_ADC_ConfigChannel+0x85c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d13a      	bne.n	8008a52 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80089dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d134      	bne.n	8008a52 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089f0:	d005      	beq.n	80089fe <HAL_ADC_ConfigChannel+0x72e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a4e      	ldr	r2, [pc, #312]	; (8008b30 <HAL_ADC_ConfigChannel+0x860>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	f040 8085 	bne.w	8008b08 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a06:	d004      	beq.n	8008a12 <HAL_ADC_ConfigChannel+0x742>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a49      	ldr	r2, [pc, #292]	; (8008b34 <HAL_ADC_ConfigChannel+0x864>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d101      	bne.n	8008a16 <HAL_ADC_ConfigChannel+0x746>
 8008a12:	4a49      	ldr	r2, [pc, #292]	; (8008b38 <HAL_ADC_ConfigChannel+0x868>)
 8008a14:	e000      	b.n	8008a18 <HAL_ADC_ConfigChannel+0x748>
 8008a16:	4a43      	ldr	r2, [pc, #268]	; (8008b24 <HAL_ADC_ConfigChannel+0x854>)
 8008a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f7fe ff91 	bl	800794a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a28:	4b44      	ldr	r3, [pc, #272]	; (8008b3c <HAL_ADC_ConfigChannel+0x86c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	099b      	lsrs	r3, r3, #6
 8008a2e:	4a44      	ldr	r2, [pc, #272]	; (8008b40 <HAL_ADC_ConfigChannel+0x870>)
 8008a30:	fba2 2303 	umull	r2, r3, r2, r3
 8008a34:	099b      	lsrs	r3, r3, #6
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	4613      	mov	r3, r2
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008a42:	e002      	b.n	8008a4a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1f9      	bne.n	8008a44 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a50:	e05a      	b.n	8008b08 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a3b      	ldr	r2, [pc, #236]	; (8008b44 <HAL_ADC_ConfigChannel+0x874>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d125      	bne.n	8008aa8 <HAL_ADC_ConfigChannel+0x7d8>
 8008a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d11f      	bne.n	8008aa8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a31      	ldr	r2, [pc, #196]	; (8008b34 <HAL_ADC_ConfigChannel+0x864>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d104      	bne.n	8008a7c <HAL_ADC_ConfigChannel+0x7ac>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a34      	ldr	r2, [pc, #208]	; (8008b48 <HAL_ADC_ConfigChannel+0x878>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d047      	beq.n	8008b0c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a84:	d004      	beq.n	8008a90 <HAL_ADC_ConfigChannel+0x7c0>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a2a      	ldr	r2, [pc, #168]	; (8008b34 <HAL_ADC_ConfigChannel+0x864>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d101      	bne.n	8008a94 <HAL_ADC_ConfigChannel+0x7c4>
 8008a90:	4a29      	ldr	r2, [pc, #164]	; (8008b38 <HAL_ADC_ConfigChannel+0x868>)
 8008a92:	e000      	b.n	8008a96 <HAL_ADC_ConfigChannel+0x7c6>
 8008a94:	4a23      	ldr	r2, [pc, #140]	; (8008b24 <HAL_ADC_ConfigChannel+0x854>)
 8008a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7fe ff52 	bl	800794a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008aa6:	e031      	b.n	8008b0c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a27      	ldr	r2, [pc, #156]	; (8008b4c <HAL_ADC_ConfigChannel+0x87c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d12d      	bne.n	8008b0e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d127      	bne.n	8008b0e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <HAL_ADC_ConfigChannel+0x864>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d022      	beq.n	8008b0e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ad0:	d004      	beq.n	8008adc <HAL_ADC_ConfigChannel+0x80c>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	; (8008b34 <HAL_ADC_ConfigChannel+0x864>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d101      	bne.n	8008ae0 <HAL_ADC_ConfigChannel+0x810>
 8008adc:	4a16      	ldr	r2, [pc, #88]	; (8008b38 <HAL_ADC_ConfigChannel+0x868>)
 8008ade:	e000      	b.n	8008ae2 <HAL_ADC_ConfigChannel+0x812>
 8008ae0:	4a10      	ldr	r2, [pc, #64]	; (8008b24 <HAL_ADC_ConfigChannel+0x854>)
 8008ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7fe ff2c 	bl	800794a <LL_ADC_SetCommonPathInternalCh>
 8008af2:	e00c      	b.n	8008b0e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af8:	f043 0220 	orr.w	r2, r3, #32
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008b06:	e002      	b.n	8008b0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b08:	bf00      	nop
 8008b0a:	e000      	b.n	8008b0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008b0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008b16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	37d8      	adds	r7, #216	; 0xd8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	50000700 	.word	0x50000700
 8008b28:	c3210000 	.word	0xc3210000
 8008b2c:	90c00010 	.word	0x90c00010
 8008b30:	50000600 	.word	0x50000600
 8008b34:	50000100 	.word	0x50000100
 8008b38:	50000300 	.word	0x50000300
 8008b3c:	20000004 	.word	0x20000004
 8008b40:	053e2d63 	.word	0x053e2d63
 8008b44:	c7520000 	.word	0xc7520000
 8008b48:	50000500 	.word	0x50000500
 8008b4c:	cb840000 	.word	0xcb840000

08008b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff f8b5 	bl	8007ccc <LL_ADC_IsEnabled>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d14d      	bne.n	8008c04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	4b28      	ldr	r3, [pc, #160]	; (8008c10 <ADC_Enable+0xc0>)
 8008b70:	4013      	ands	r3, r2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00d      	beq.n	8008b92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7a:	f043 0210 	orr.w	r2, r3, #16
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b86:	f043 0201 	orr.w	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e039      	b.n	8008c06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff f884 	bl	8007ca4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008b9c:	f7fe fe94 	bl	80078c8 <HAL_GetTick>
 8008ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ba2:	e028      	b.n	8008bf6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff f88f 	bl	8007ccc <LL_ADC_IsEnabled>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff f873 	bl	8007ca4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008bbe:	f7fe fe83 	bl	80078c8 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d914      	bls.n	8008bf6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d00d      	beq.n	8008bf6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bde:	f043 0210 	orr.w	r2, r3, #16
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bea:	f043 0201 	orr.w	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e007      	b.n	8008c06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d1cf      	bne.n	8008ba4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	8000003f 	.word	0x8000003f

08008c14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d14b      	bne.n	8008cc6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0308 	and.w	r3, r3, #8
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d021      	beq.n	8008c8c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fe ff3b 	bl	8007ac8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d032      	beq.n	8008cbe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d12b      	bne.n	8008cbe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d11f      	bne.n	8008cbe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c82:	f043 0201 	orr.w	r2, r3, #1
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c8a:	e018      	b.n	8008cbe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d111      	bne.n	8008cbe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d105      	bne.n	8008cbe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb6:	f043 0201 	orr.w	r2, r3, #1
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff fae8 	bl	8008294 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008cc4:	e00e      	b.n	8008ce4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cca:	f003 0310 	and.w	r3, r3, #16
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff faf2 	bl	80082bc <HAL_ADC_ErrorCallback>
}
 8008cd8:	e004      	b.n	8008ce4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
}
 8008ce4:	bf00      	nop
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fad4 	bl	80082a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d26:	f043 0204 	orr.w	r2, r3, #4
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f7ff fac4 	bl	80082bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d4c:	4b0c      	ldr	r3, [pc, #48]	; (8008d80 <__NVIC_SetPriorityGrouping+0x44>)
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d58:	4013      	ands	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d6e:	4a04      	ldr	r2, [pc, #16]	; (8008d80 <__NVIC_SetPriorityGrouping+0x44>)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	60d3      	str	r3, [r2, #12]
}
 8008d74:	bf00      	nop
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	e000ed00 	.word	0xe000ed00

08008d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d88:	4b04      	ldr	r3, [pc, #16]	; (8008d9c <__NVIC_GetPriorityGrouping+0x18>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	0a1b      	lsrs	r3, r3, #8
 8008d8e:	f003 0307 	and.w	r3, r3, #7
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	e000ed00 	.word	0xe000ed00

08008da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	db0b      	blt.n	8008dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	f003 021f 	and.w	r2, r3, #31
 8008db8:	4907      	ldr	r1, [pc, #28]	; (8008dd8 <__NVIC_EnableIRQ+0x38>)
 8008dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dbe:	095b      	lsrs	r3, r3, #5
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8008dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	e000e100 	.word	0xe000e100

08008ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	db0a      	blt.n	8008e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	490c      	ldr	r1, [pc, #48]	; (8008e28 <__NVIC_SetPriority+0x4c>)
 8008df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dfa:	0112      	lsls	r2, r2, #4
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	440b      	add	r3, r1
 8008e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008e04:	e00a      	b.n	8008e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	4908      	ldr	r1, [pc, #32]	; (8008e2c <__NVIC_SetPriority+0x50>)
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	3b04      	subs	r3, #4
 8008e14:	0112      	lsls	r2, r2, #4
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	440b      	add	r3, r1
 8008e1a:	761a      	strb	r2, [r3, #24]
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	e000e100 	.word	0xe000e100
 8008e2c:	e000ed00 	.word	0xe000ed00

08008e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b089      	sub	sp, #36	; 0x24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f1c3 0307 	rsb	r3, r3, #7
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	bf28      	it	cs
 8008e4e:	2304      	movcs	r3, #4
 8008e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	3304      	adds	r3, #4
 8008e56:	2b06      	cmp	r3, #6
 8008e58:	d902      	bls.n	8008e60 <NVIC_EncodePriority+0x30>
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	3b03      	subs	r3, #3
 8008e5e:	e000      	b.n	8008e62 <NVIC_EncodePriority+0x32>
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e64:	f04f 32ff 	mov.w	r2, #4294967295
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6e:	43da      	mvns	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	401a      	ands	r2, r3
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e78:	f04f 31ff 	mov.w	r1, #4294967295
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e82:	43d9      	mvns	r1, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e88:	4313      	orrs	r3, r2
         );
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3724      	adds	r7, #36	; 0x24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff ff4c 	bl	8008d3c <__NVIC_SetPriorityGrouping>
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008eba:	f7ff ff63 	bl	8008d84 <__NVIC_GetPriorityGrouping>
 8008ebe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	68b9      	ldr	r1, [r7, #8]
 8008ec4:	6978      	ldr	r0, [r7, #20]
 8008ec6:	f7ff ffb3 	bl	8008e30 <NVIC_EncodePriority>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff ff82 	bl	8008ddc <__NVIC_SetPriority>
}
 8008ed8:	bf00      	nop
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff ff56 	bl	8008da0 <__NVIC_EnableIRQ>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e08d      	b.n	800902a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	4b47      	ldr	r3, [pc, #284]	; (8009034 <HAL_DMA_Init+0x138>)
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d80f      	bhi.n	8008f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4b45      	ldr	r3, [pc, #276]	; (8009038 <HAL_DMA_Init+0x13c>)
 8008f22:	4413      	add	r3, r2
 8008f24:	4a45      	ldr	r2, [pc, #276]	; (800903c <HAL_DMA_Init+0x140>)
 8008f26:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2a:	091b      	lsrs	r3, r3, #4
 8008f2c:	009a      	lsls	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a42      	ldr	r2, [pc, #264]	; (8009040 <HAL_DMA_Init+0x144>)
 8008f36:	641a      	str	r2, [r3, #64]	; 0x40
 8008f38:	e00e      	b.n	8008f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b40      	ldr	r3, [pc, #256]	; (8009044 <HAL_DMA_Init+0x148>)
 8008f42:	4413      	add	r3, r2
 8008f44:	4a3d      	ldr	r2, [pc, #244]	; (800903c <HAL_DMA_Init+0x140>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	091b      	lsrs	r3, r3, #4
 8008f4c:	009a      	lsls	r2, r3, #2
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a3c      	ldr	r2, [pc, #240]	; (8009048 <HAL_DMA_Init+0x14c>)
 8008f56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa76 	bl	800949c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fb8:	d102      	bne.n	8008fc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008fd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d010      	beq.n	8009000 <HAL_DMA_Init+0x104>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	d80c      	bhi.n	8009000 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa96 	bl	8009518 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008ffc:	605a      	str	r2, [r3, #4]
 8008ffe:	e008      	b.n	8009012 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	40020407 	.word	0x40020407
 8009038:	bffdfff8 	.word	0xbffdfff8
 800903c:	cccccccd 	.word	0xcccccccd
 8009040:	40020000 	.word	0x40020000
 8009044:	bffdfbf8 	.word	0xbffdfbf8
 8009048:	40020400 	.word	0x40020400

0800904c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <HAL_DMA_Start_IT+0x20>
 8009068:	2302      	movs	r3, #2
 800906a:	e066      	b.n	800913a <HAL_DMA_Start_IT+0xee>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d155      	bne.n	800912c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0201 	bic.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f9bb 	bl	8009420 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f042 020e 	orr.w	r2, r2, #14
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	e00f      	b.n	80090e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0204 	bic.w	r2, r2, #4
 80090d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 020a 	orr.w	r2, r2, #10
 80090e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009100:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009118:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0201 	orr.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	e005      	b.n	8009138 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009134:	2302      	movs	r3, #2
 8009136:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d005      	beq.n	8009166 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2204      	movs	r2, #4
 800915e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	73fb      	strb	r3, [r7, #15]
 8009164:	e037      	b.n	80091d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 020e 	bic.w	r2, r2, #14
 8009174:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009184:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0201 	bic.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800919a:	f003 021f 	and.w	r2, r3, #31
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2101      	movs	r1, #1
 80091a4:	fa01 f202 	lsl.w	r2, r1, r2
 80091a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80091b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00c      	beq.n	80091d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80091d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b02      	cmp	r3, #2
 800920a:	d00d      	beq.n	8009228 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2204      	movs	r2, #4
 8009210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	73fb      	strb	r3, [r7, #15]
 8009226:	e047      	b.n	80092b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 020e 	bic.w	r2, r2, #14
 8009236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009256:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925c:	f003 021f 	and.w	r2, r3, #31
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	2101      	movs	r1, #1
 8009266:	fa01 f202 	lsl.w	r2, r1, r2
 800926a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009274:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00c      	beq.n	8009298 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800928c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009296:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	4798      	blx	r3
    }
  }
  return status;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092de:	f003 031f 	and.w	r3, r3, #31
 80092e2:	2204      	movs	r2, #4
 80092e4:	409a      	lsls	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4013      	ands	r3, r2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d026      	beq.n	800933c <HAL_DMA_IRQHandler+0x7a>
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d021      	beq.n	800933c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b00      	cmp	r3, #0
 8009304:	d107      	bne.n	8009316 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f022 0204 	bic.w	r2, r2, #4
 8009314:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931a:	f003 021f 	and.w	r2, r3, #31
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	2104      	movs	r1, #4
 8009324:	fa01 f202 	lsl.w	r2, r1, r2
 8009328:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932e:	2b00      	cmp	r3, #0
 8009330:	d071      	beq.n	8009416 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800933a:	e06c      	b.n	8009416 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009340:	f003 031f 	and.w	r3, r3, #31
 8009344:	2202      	movs	r2, #2
 8009346:	409a      	lsls	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d02e      	beq.n	80093ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d029      	beq.n	80093ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10b      	bne.n	8009380 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 020a 	bic.w	r2, r2, #10
 8009376:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009384:	f003 021f 	and.w	r2, r3, #31
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938c:	2102      	movs	r1, #2
 800938e:	fa01 f202 	lsl.w	r2, r1, r2
 8009392:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d038      	beq.n	8009416 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80093ac:	e033      	b.n	8009416 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b2:	f003 031f 	and.w	r3, r3, #31
 80093b6:	2208      	movs	r2, #8
 80093b8:	409a      	lsls	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4013      	ands	r3, r2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d02a      	beq.n	8009418 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f003 0308 	and.w	r3, r3, #8
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d025      	beq.n	8009418 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 020e 	bic.w	r2, r2, #14
 80093da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e0:	f003 021f 	and.w	r2, r3, #31
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	2101      	movs	r1, #1
 80093ea:	fa01 f202 	lsl.w	r2, r1, r2
 80093ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009416:	bf00      	nop
 8009418:	bf00      	nop
}
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009436:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943c:	2b00      	cmp	r3, #0
 800943e:	d004      	beq.n	800944a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009448:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944e:	f003 021f 	and.w	r2, r3, #31
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	2101      	movs	r1, #1
 8009458:	fa01 f202 	lsl.w	r2, r1, r2
 800945c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	2b10      	cmp	r3, #16
 800946c:	d108      	bne.n	8009480 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800947e:	e007      	b.n	8009490 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	60da      	str	r2, [r3, #12]
}
 8009490:	bf00      	nop
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	4b16      	ldr	r3, [pc, #88]	; (8009504 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d802      	bhi.n	80094b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80094b0:	4b15      	ldr	r3, [pc, #84]	; (8009508 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	e001      	b.n	80094ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80094b6:	4b15      	ldr	r3, [pc, #84]	; (800950c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80094b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	3b08      	subs	r3, #8
 80094c6:	4a12      	ldr	r2, [pc, #72]	; (8009510 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80094c8:	fba2 2303 	umull	r2, r3, r2, r3
 80094cc:	091b      	lsrs	r3, r3, #4
 80094ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d4:	089b      	lsrs	r3, r3, #2
 80094d6:	009a      	lsls	r2, r3, #2
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	461a      	mov	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a0b      	ldr	r2, [pc, #44]	; (8009514 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80094e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f003 031f 	and.w	r3, r3, #31
 80094ee:	2201      	movs	r2, #1
 80094f0:	409a      	lsls	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	40020407 	.word	0x40020407
 8009508:	40020800 	.word	0x40020800
 800950c:	40020820 	.word	0x40020820
 8009510:	cccccccd 	.word	0xcccccccd
 8009514:	40020880 	.word	0x40020880

08009518 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	461a      	mov	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a08      	ldr	r2, [pc, #32]	; (800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800953a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3b01      	subs	r3, #1
 8009540:	f003 031f 	and.w	r3, r3, #31
 8009544:	2201      	movs	r2, #1
 8009546:	409a      	lsls	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800954c:	bf00      	nop
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	1000823f 	.word	0x1000823f
 800955c:	40020940 	.word	0x40020940

08009560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800956a:	2300      	movs	r3, #0
 800956c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800956e:	e15a      	b.n	8009826 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	2101      	movs	r1, #1
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	4013      	ands	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 814c 	beq.w	8009820 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	2b01      	cmp	r3, #1
 8009592:	d005      	beq.n	80095a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800959c:	2b02      	cmp	r3, #2
 800959e:	d130      	bne.n	8009602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	2203      	movs	r2, #3
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	43db      	mvns	r3, r3
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4013      	ands	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80095d6:	2201      	movs	r2, #1
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	fa02 f303 	lsl.w	r3, r2, r3
 80095de:	43db      	mvns	r3, r3
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	4013      	ands	r3, r2
 80095e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	091b      	lsrs	r3, r3, #4
 80095ec:	f003 0201 	and.w	r2, r3, #1
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	fa02 f303 	lsl.w	r3, r2, r3
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f003 0303 	and.w	r3, r3, #3
 800960a:	2b03      	cmp	r3, #3
 800960c:	d017      	beq.n	800963e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	2203      	movs	r2, #3
 800961a:	fa02 f303 	lsl.w	r3, r2, r3
 800961e:	43db      	mvns	r3, r3
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4013      	ands	r3, r2
 8009624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	fa02 f303 	lsl.w	r3, r2, r3
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	2b02      	cmp	r3, #2
 8009648:	d123      	bne.n	8009692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	08da      	lsrs	r2, r3, #3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3208      	adds	r2, #8
 8009652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	220f      	movs	r2, #15
 8009662:	fa02 f303 	lsl.w	r3, r2, r3
 8009666:	43db      	mvns	r3, r3
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4013      	ands	r3, r2
 800966c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	fa02 f303 	lsl.w	r3, r2, r3
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	08da      	lsrs	r2, r3, #3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3208      	adds	r2, #8
 800968c:	6939      	ldr	r1, [r7, #16]
 800968e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	2203      	movs	r2, #3
 800969e:	fa02 f303 	lsl.w	r3, r2, r3
 80096a2:	43db      	mvns	r3, r3
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4013      	ands	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f003 0203 	and.w	r2, r3, #3
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 80a6 	beq.w	8009820 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096d4:	4b5b      	ldr	r3, [pc, #364]	; (8009844 <HAL_GPIO_Init+0x2e4>)
 80096d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d8:	4a5a      	ldr	r2, [pc, #360]	; (8009844 <HAL_GPIO_Init+0x2e4>)
 80096da:	f043 0301 	orr.w	r3, r3, #1
 80096de:	6613      	str	r3, [r2, #96]	; 0x60
 80096e0:	4b58      	ldr	r3, [pc, #352]	; (8009844 <HAL_GPIO_Init+0x2e4>)
 80096e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	60bb      	str	r3, [r7, #8]
 80096ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096ec:	4a56      	ldr	r2, [pc, #344]	; (8009848 <HAL_GPIO_Init+0x2e8>)
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	089b      	lsrs	r3, r3, #2
 80096f2:	3302      	adds	r3, #2
 80096f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	220f      	movs	r2, #15
 8009704:	fa02 f303 	lsl.w	r3, r2, r3
 8009708:	43db      	mvns	r3, r3
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4013      	ands	r3, r2
 800970e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009716:	d01f      	beq.n	8009758 <HAL_GPIO_Init+0x1f8>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a4c      	ldr	r2, [pc, #304]	; (800984c <HAL_GPIO_Init+0x2ec>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d019      	beq.n	8009754 <HAL_GPIO_Init+0x1f4>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a4b      	ldr	r2, [pc, #300]	; (8009850 <HAL_GPIO_Init+0x2f0>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d013      	beq.n	8009750 <HAL_GPIO_Init+0x1f0>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a4a      	ldr	r2, [pc, #296]	; (8009854 <HAL_GPIO_Init+0x2f4>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d00d      	beq.n	800974c <HAL_GPIO_Init+0x1ec>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a49      	ldr	r2, [pc, #292]	; (8009858 <HAL_GPIO_Init+0x2f8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d007      	beq.n	8009748 <HAL_GPIO_Init+0x1e8>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a48      	ldr	r2, [pc, #288]	; (800985c <HAL_GPIO_Init+0x2fc>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d101      	bne.n	8009744 <HAL_GPIO_Init+0x1e4>
 8009740:	2305      	movs	r3, #5
 8009742:	e00a      	b.n	800975a <HAL_GPIO_Init+0x1fa>
 8009744:	2306      	movs	r3, #6
 8009746:	e008      	b.n	800975a <HAL_GPIO_Init+0x1fa>
 8009748:	2304      	movs	r3, #4
 800974a:	e006      	b.n	800975a <HAL_GPIO_Init+0x1fa>
 800974c:	2303      	movs	r3, #3
 800974e:	e004      	b.n	800975a <HAL_GPIO_Init+0x1fa>
 8009750:	2302      	movs	r3, #2
 8009752:	e002      	b.n	800975a <HAL_GPIO_Init+0x1fa>
 8009754:	2301      	movs	r3, #1
 8009756:	e000      	b.n	800975a <HAL_GPIO_Init+0x1fa>
 8009758:	2300      	movs	r3, #0
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	f002 0203 	and.w	r2, r2, #3
 8009760:	0092      	lsls	r2, r2, #2
 8009762:	4093      	lsls	r3, r2
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	4313      	orrs	r3, r2
 8009768:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800976a:	4937      	ldr	r1, [pc, #220]	; (8009848 <HAL_GPIO_Init+0x2e8>)
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	089b      	lsrs	r3, r3, #2
 8009770:	3302      	adds	r3, #2
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009778:	4b39      	ldr	r3, [pc, #228]	; (8009860 <HAL_GPIO_Init+0x300>)
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	43db      	mvns	r3, r3
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4013      	ands	r3, r2
 8009786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800979c:	4a30      	ldr	r2, [pc, #192]	; (8009860 <HAL_GPIO_Init+0x300>)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80097a2:	4b2f      	ldr	r3, [pc, #188]	; (8009860 <HAL_GPIO_Init+0x300>)
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	43db      	mvns	r3, r3
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	4013      	ands	r3, r2
 80097b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80097c6:	4a26      	ldr	r2, [pc, #152]	; (8009860 <HAL_GPIO_Init+0x300>)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80097cc:	4b24      	ldr	r3, [pc, #144]	; (8009860 <HAL_GPIO_Init+0x300>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	43db      	mvns	r3, r3
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	4013      	ands	r3, r2
 80097da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80097f0:	4a1b      	ldr	r2, [pc, #108]	; (8009860 <HAL_GPIO_Init+0x300>)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80097f6:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <HAL_GPIO_Init+0x300>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	43db      	mvns	r3, r3
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	4013      	ands	r3, r2
 8009804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4313      	orrs	r3, r2
 8009818:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800981a:	4a11      	ldr	r2, [pc, #68]	; (8009860 <HAL_GPIO_Init+0x300>)
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	3301      	adds	r3, #1
 8009824:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	fa22 f303 	lsr.w	r3, r2, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	f47f ae9d 	bne.w	8009570 <HAL_GPIO_Init+0x10>
  }
}
 8009836:	bf00      	nop
 8009838:	bf00      	nop
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	40021000 	.word	0x40021000
 8009848:	40010000 	.word	0x40010000
 800984c:	48000400 	.word	0x48000400
 8009850:	48000800 	.word	0x48000800
 8009854:	48000c00 	.word	0x48000c00
 8009858:	48001000 	.word	0x48001000
 800985c:	48001400 	.word	0x48001400
 8009860:	40010400 	.word	0x40010400

08009864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	807b      	strh	r3, [r7, #2]
 8009870:	4613      	mov	r3, r2
 8009872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009874:	787b      	ldrb	r3, [r7, #1]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800987a:	887a      	ldrh	r2, [r7, #2]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009880:	e002      	b.n	8009888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009882:	887a      	ldrh	r2, [r7, #2]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4013      	ands	r3, r2
 80098ac:	041a      	lsls	r2, r3, #16
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	43d9      	mvns	r1, r3
 80098b2:	887b      	ldrh	r3, [r7, #2]
 80098b4:	400b      	ands	r3, r1
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	619a      	str	r2, [r3, #24]
}
 80098bc:	bf00      	nop
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e081      	b.n	80099de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d106      	bne.n	80098f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fc fbd0 	bl	8006094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2224      	movs	r2, #36	; 0x24
 80098f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 0201 	bic.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009918:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009928:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d107      	bne.n	8009942 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800993e:	609a      	str	r2, [r3, #8]
 8009940:	e006      	b.n	8009950 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800994e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d104      	bne.n	8009962 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6812      	ldr	r2, [r2, #0]
 800996c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69d9      	ldr	r1, [r3, #28]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a1a      	ldr	r2, [r3, #32]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f042 0201 	orr.w	r2, r2, #1
 80099be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	4608      	mov	r0, r1
 80099f2:	4611      	mov	r1, r2
 80099f4:	461a      	mov	r2, r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	817b      	strh	r3, [r7, #10]
 80099fa:	460b      	mov	r3, r1
 80099fc:	813b      	strh	r3, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	f040 80f9 	bne.w	8009c02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_I2C_Mem_Write+0x34>
 8009a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d105      	bne.n	8009a28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e0ed      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d101      	bne.n	8009a36 <HAL_I2C_Mem_Write+0x4e>
 8009a32:	2302      	movs	r3, #2
 8009a34:	e0e6      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a3e:	f7fd ff43 	bl	80078c8 <HAL_GetTick>
 8009a42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	2319      	movs	r3, #25
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 fac3 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e0d1      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2221      	movs	r2, #33	; 0x21
 8009a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2240      	movs	r2, #64	; 0x40
 8009a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a3a      	ldr	r2, [r7, #32]
 8009a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a88:	88f8      	ldrh	r0, [r7, #6]
 8009a8a:	893a      	ldrh	r2, [r7, #8]
 8009a8c:	8979      	ldrh	r1, [r7, #10]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4603      	mov	r3, r0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f9d3 	bl	8009e44 <I2C_RequestMemoryWrite>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0a9      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	2bff      	cmp	r3, #255	; 0xff
 8009ab8:	d90e      	bls.n	8009ad8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	22ff      	movs	r2, #255	; 0xff
 8009abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	8979      	ldrh	r1, [r7, #10]
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 fc2b 	bl	800a32c <I2C_TransferConfig>
 8009ad6:	e00f      	b.n	8009af8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	8979      	ldrh	r1, [r7, #10]
 8009aea:	2300      	movs	r3, #0
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fc1a 	bl	800a32c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 faad 	bl	800a05c <I2C_WaitOnTXISFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e07b      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b10:	781a      	ldrb	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d034      	beq.n	8009bb0 <HAL_I2C_Mem_Write+0x1c8>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d130      	bne.n	8009bb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	2200      	movs	r2, #0
 8009b56:	2180      	movs	r1, #128	; 0x80
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fa3f 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e04d      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2bff      	cmp	r3, #255	; 0xff
 8009b70:	d90e      	bls.n	8009b90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	22ff      	movs	r2, #255	; 0xff
 8009b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	8979      	ldrh	r1, [r7, #10]
 8009b80:	2300      	movs	r3, #0
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 fbcf 	bl	800a32c <I2C_TransferConfig>
 8009b8e:	e00f      	b.n	8009bb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	8979      	ldrh	r1, [r7, #10]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 fbbe 	bl	800a32c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d19e      	bne.n	8009af8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 fa8c 	bl	800a0dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e01a      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6859      	ldr	r1, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <HAL_I2C_Mem_Write+0x224>)
 8009be2:	400b      	ands	r3, r1
 8009be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e000      	b.n	8009c04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009c02:	2302      	movs	r3, #2
  }
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	fe00e800 	.word	0xfe00e800

08009c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	4603      	mov	r3, r0
 8009c20:	817b      	strh	r3, [r7, #10]
 8009c22:	460b      	mov	r3, r1
 8009c24:	813b      	strh	r3, [r7, #8]
 8009c26:	4613      	mov	r3, r2
 8009c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	f040 80fd 	bne.w	8009e32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <HAL_I2C_Mem_Read+0x34>
 8009c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e0f1      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_I2C_Mem_Read+0x4e>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e0ea      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c66:	f7fd fe2f 	bl	80078c8 <HAL_GetTick>
 8009c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	2319      	movs	r3, #25
 8009c72:	2201      	movs	r2, #1
 8009c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 f9af 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e0d5      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2222      	movs	r2, #34	; 0x22
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2240      	movs	r2, #64	; 0x40
 8009c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
 8009ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cb0:	88f8      	ldrh	r0, [r7, #6]
 8009cb2:	893a      	ldrh	r2, [r7, #8]
 8009cb4:	8979      	ldrh	r1, [r7, #10]
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f913 	bl	8009eec <I2C_RequestMemoryRead>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e0ad      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	2bff      	cmp	r3, #255	; 0xff
 8009ce0:	d90e      	bls.n	8009d00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	8979      	ldrh	r1, [r7, #10]
 8009cf0:	4b52      	ldr	r3, [pc, #328]	; (8009e3c <HAL_I2C_Mem_Read+0x22c>)
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 fb17 	bl	800a32c <I2C_TransferConfig>
 8009cfe:	e00f      	b.n	8009d20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	8979      	ldrh	r1, [r7, #10]
 8009d12:	4b4a      	ldr	r3, [pc, #296]	; (8009e3c <HAL_I2C_Mem_Read+0x22c>)
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fb06 	bl	800a32c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	2200      	movs	r2, #0
 8009d28:	2104      	movs	r1, #4
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f956 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e07c      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	b2d2      	uxtb	r2, r2
 8009d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	3b01      	subs	r3, #1
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d034      	beq.n	8009de0 <HAL_I2C_Mem_Read+0x1d0>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d130      	bne.n	8009de0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	2200      	movs	r2, #0
 8009d86:	2180      	movs	r1, #128	; 0x80
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f927 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e04d      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2bff      	cmp	r3, #255	; 0xff
 8009da0:	d90e      	bls.n	8009dc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	8979      	ldrh	r1, [r7, #10]
 8009db0:	2300      	movs	r3, #0
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 fab7 	bl	800a32c <I2C_TransferConfig>
 8009dbe:	e00f      	b.n	8009de0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	8979      	ldrh	r1, [r7, #10]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 faa6 	bl	800a32c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d19a      	bne.n	8009d20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f974 	bl	800a0dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e01a      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2220      	movs	r2, #32
 8009e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6859      	ldr	r1, [r3, #4]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <HAL_I2C_Mem_Read+0x230>)
 8009e12:	400b      	ands	r3, r1
 8009e14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e000      	b.n	8009e34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009e32:	2302      	movs	r3, #2
  }
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	80002400 	.word	0x80002400
 8009e40:	fe00e800 	.word	0xfe00e800

08009e44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	4603      	mov	r3, r0
 8009e54:	817b      	strh	r3, [r7, #10]
 8009e56:	460b      	mov	r3, r1
 8009e58:	813b      	strh	r3, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	8979      	ldrh	r1, [r7, #10]
 8009e64:	4b20      	ldr	r3, [pc, #128]	; (8009ee8 <I2C_RequestMemoryWrite+0xa4>)
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fa5d 	bl	800a32c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 f8f0 	bl	800a05c <I2C_WaitOnTXISFlagUntilTimeout>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e02c      	b.n	8009ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d105      	bne.n	8009e98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e8c:	893b      	ldrh	r3, [r7, #8]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	629a      	str	r2, [r3, #40]	; 0x28
 8009e96:	e015      	b.n	8009ec4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e98:	893b      	ldrh	r3, [r7, #8]
 8009e9a:	0a1b      	lsrs	r3, r3, #8
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ea6:	69fa      	ldr	r2, [r7, #28]
 8009ea8:	69b9      	ldr	r1, [r7, #24]
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 f8d6 	bl	800a05c <I2C_WaitOnTXISFlagUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e012      	b.n	8009ee0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009eba:	893b      	ldrh	r3, [r7, #8]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2180      	movs	r1, #128	; 0x80
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 f884 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	80002000 	.word	0x80002000

08009eec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	4608      	mov	r0, r1
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4603      	mov	r3, r0
 8009efc:	817b      	strh	r3, [r7, #10]
 8009efe:	460b      	mov	r3, r1
 8009f00:	813b      	strh	r3, [r7, #8]
 8009f02:	4613      	mov	r3, r2
 8009f04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	8979      	ldrh	r1, [r7, #10]
 8009f0c:	4b20      	ldr	r3, [pc, #128]	; (8009f90 <I2C_RequestMemoryRead+0xa4>)
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	2300      	movs	r3, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 fa0a 	bl	800a32c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f18:	69fa      	ldr	r2, [r7, #28]
 8009f1a:	69b9      	ldr	r1, [r7, #24]
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 f89d 	bl	800a05c <I2C_WaitOnTXISFlagUntilTimeout>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e02c      	b.n	8009f86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d105      	bne.n	8009f3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f32:	893b      	ldrh	r3, [r7, #8]
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8009f3c:	e015      	b.n	8009f6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009f3e:	893b      	ldrh	r3, [r7, #8]
 8009f40:	0a1b      	lsrs	r3, r3, #8
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	69b9      	ldr	r1, [r7, #24]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f883 	bl	800a05c <I2C_WaitOnTXISFlagUntilTimeout>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e012      	b.n	8009f86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f60:	893b      	ldrh	r3, [r7, #8]
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2200      	movs	r2, #0
 8009f72:	2140      	movs	r1, #64	; 0x40
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 f831 	bl	8009fdc <I2C_WaitOnFlagUntilTimeout>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	80002000 	.word	0x80002000

08009f94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d103      	bne.n	8009fb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d007      	beq.n	8009fd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	699a      	ldr	r2, [r3, #24]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	619a      	str	r2, [r3, #24]
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fec:	e022      	b.n	800a034 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d01e      	beq.n	800a034 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff6:	f7fd fc67 	bl	80078c8 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d302      	bcc.n	800a00c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d113      	bne.n	800a034 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a010:	f043 0220 	orr.w	r2, r3, #32
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e00f      	b.n	800a054 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4013      	ands	r3, r2
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	429a      	cmp	r2, r3
 800a042:	bf0c      	ite	eq
 800a044:	2301      	moveq	r3, #1
 800a046:	2300      	movne	r3, #0
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	461a      	mov	r2, r3
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d0cd      	beq.n	8009fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a068:	e02c      	b.n	800a0c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f870 	bl	800a154 <I2C_IsErrorOccurred>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e02a      	b.n	800a0d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a084:	d01e      	beq.n	800a0c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a086:	f7fd fc1f 	bl	80078c8 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d302      	bcc.n	800a09c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d113      	bne.n	800a0c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a0:	f043 0220 	orr.w	r2, r3, #32
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e007      	b.n	800a0d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d1cb      	bne.n	800a06a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0e8:	e028      	b.n	800a13c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f830 	bl	800a154 <I2C_IsErrorOccurred>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e026      	b.n	800a14c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0fe:	f7fd fbe3 	bl	80078c8 <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d302      	bcc.n	800a114 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d113      	bne.n	800a13c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a118:	f043 0220 	orr.w	r2, r3, #32
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2220      	movs	r2, #32
 800a124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e007      	b.n	800a14c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b20      	cmp	r3, #32
 800a148:	d1cf      	bne.n	800a0ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08a      	sub	sp, #40	; 0x28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d075      	beq.n	800a26c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2210      	movs	r2, #16
 800a186:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a188:	e056      	b.n	800a238 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d052      	beq.n	800a238 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a192:	f7fd fb99 	bl	80078c8 <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d302      	bcc.n	800a1a8 <I2C_IsErrorOccurred+0x54>
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d147      	bne.n	800a238 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ca:	d12e      	bne.n	800a22a <I2C_IsErrorOccurred+0xd6>
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1d2:	d02a      	beq.n	800a22a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a1d4:	7cfb      	ldrb	r3, [r7, #19]
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	d027      	beq.n	800a22a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a1ea:	f7fd fb6d 	bl	80078c8 <HAL_GetTick>
 800a1ee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1f0:	e01b      	b.n	800a22a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a1f2:	f7fd fb69 	bl	80078c8 <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	2b19      	cmp	r3, #25
 800a1fe:	d914      	bls.n	800a22a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a204:	f043 0220 	orr.w	r2, r3, #32
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2220      	movs	r2, #32
 800a210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	f003 0320 	and.w	r3, r3, #32
 800a234:	2b20      	cmp	r3, #32
 800a236:	d1dc      	bne.n	800a1f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b20      	cmp	r3, #32
 800a244:	d003      	beq.n	800a24e <I2C_IsErrorOccurred+0xfa>
 800a246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d09d      	beq.n	800a18a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a24e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a252:	2b00      	cmp	r3, #0
 800a254:	d103      	bne.n	800a25e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2220      	movs	r2, #32
 800a25c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	f043 0304 	orr.w	r3, r3, #4
 800a264:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00b      	beq.n	800a296 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	f043 0301 	orr.w	r3, r3, #1
 800a284:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a28e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00b      	beq.n	800a2b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	f043 0308 	orr.w	r3, r3, #8
 800a2a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a2da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01c      	beq.n	800a31c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff fe56 	bl	8009f94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6859      	ldr	r1, [r3, #4]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	; (800a328 <I2C_IsErrorOccurred+0x1d4>)
 800a2f4:	400b      	ands	r3, r1
 800a2f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	431a      	orrs	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2220      	movs	r2, #32
 800a308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a31c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a320:	4618      	mov	r0, r3
 800a322:	3728      	adds	r7, #40	; 0x28
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	fe00e800 	.word	0xfe00e800

0800a32c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	817b      	strh	r3, [r7, #10]
 800a33a:	4613      	mov	r3, r2
 800a33c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a33e:	897b      	ldrh	r3, [r7, #10]
 800a340:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a344:	7a7b      	ldrb	r3, [r7, #9]
 800a346:	041b      	lsls	r3, r3, #16
 800a348:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a34c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	4313      	orrs	r3, r2
 800a356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a35a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	0d5b      	lsrs	r3, r3, #21
 800a366:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a36a:	4b08      	ldr	r3, [pc, #32]	; (800a38c <I2C_TransferConfig+0x60>)
 800a36c:	430b      	orrs	r3, r1
 800a36e:	43db      	mvns	r3, r3
 800a370:	ea02 0103 	and.w	r1, r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	430a      	orrs	r2, r1
 800a37c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a37e:	bf00      	nop
 800a380:	371c      	adds	r7, #28
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	03ff63ff 	.word	0x03ff63ff

0800a390 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b20      	cmp	r3, #32
 800a3a4:	d138      	bne.n	800a418 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e032      	b.n	800a41a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2224      	movs	r2, #36	; 0x24
 800a3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0201 	bic.w	r2, r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6819      	ldr	r1, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0201 	orr.w	r2, r2, #1
 800a402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2220      	movs	r2, #32
 800a408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	e000      	b.n	800a41a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a418:	2302      	movs	r3, #2
  }
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b20      	cmp	r3, #32
 800a43a:	d139      	bne.n	800a4b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a442:	2b01      	cmp	r3, #1
 800a444:	d101      	bne.n	800a44a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a446:	2302      	movs	r3, #2
 800a448:	e033      	b.n	800a4b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2224      	movs	r2, #36	; 0x24
 800a456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0201 	bic.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a478:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	4313      	orrs	r3, r2
 800a482:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0201 	orr.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e000      	b.n	800a4b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a4b0:	2302      	movs	r3, #2
  }
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d141      	bne.n	800a552 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a4ce:	4b4b      	ldr	r3, [pc, #300]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4da:	d131      	bne.n	800a540 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a4dc:	4b47      	ldr	r3, [pc, #284]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4e2:	4a46      	ldr	r2, [pc, #280]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a4ec:	4b43      	ldr	r3, [pc, #268]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a4f4:	4a41      	ldr	r2, [pc, #260]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a4fc:	4b40      	ldr	r3, [pc, #256]	; (800a600 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2232      	movs	r2, #50	; 0x32
 800a502:	fb02 f303 	mul.w	r3, r2, r3
 800a506:	4a3f      	ldr	r2, [pc, #252]	; (800a604 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a508:	fba2 2303 	umull	r2, r3, r2, r3
 800a50c:	0c9b      	lsrs	r3, r3, #18
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a512:	e002      	b.n	800a51a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3b01      	subs	r3, #1
 800a518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a51a:	4b38      	ldr	r3, [pc, #224]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a526:	d102      	bne.n	800a52e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f2      	bne.n	800a514 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a52e:	4b33      	ldr	r3, [pc, #204]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a53a:	d158      	bne.n	800a5ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e057      	b.n	800a5f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a540:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a546:	4a2d      	ldr	r2, [pc, #180]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a54c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a550:	e04d      	b.n	800a5ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a558:	d141      	bne.n	800a5de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a55a:	4b28      	ldr	r3, [pc, #160]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a566:	d131      	bne.n	800a5cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a568:	4b24      	ldr	r3, [pc, #144]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a56e:	4a23      	ldr	r2, [pc, #140]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a578:	4b20      	ldr	r3, [pc, #128]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a580:	4a1e      	ldr	r2, [pc, #120]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a588:	4b1d      	ldr	r3, [pc, #116]	; (800a600 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2232      	movs	r2, #50	; 0x32
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	4a1c      	ldr	r2, [pc, #112]	; (800a604 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a594:	fba2 2303 	umull	r2, r3, r2, r3
 800a598:	0c9b      	lsrs	r3, r3, #18
 800a59a:	3301      	adds	r3, #1
 800a59c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a59e:	e002      	b.n	800a5a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a5a6:	4b15      	ldr	r3, [pc, #84]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5b2:	d102      	bne.n	800a5ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f2      	bne.n	800a5a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a5ba:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5c6:	d112      	bne.n	800a5ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e011      	b.n	800a5f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a5cc:	4b0b      	ldr	r3, [pc, #44]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d2:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a5dc:	e007      	b.n	800a5ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a5de:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a5e6:	4a05      	ldr	r2, [pc, #20]	; (800a5fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	40007000 	.word	0x40007000
 800a600:	20000004 	.word	0x20000004
 800a604:	431bde83 	.word	0x431bde83

0800a608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e306      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d075      	beq.n	800a712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a626:	4b97      	ldr	r3, [pc, #604]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f003 030c 	and.w	r3, r3, #12
 800a62e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a630:	4b94      	ldr	r3, [pc, #592]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b0c      	cmp	r3, #12
 800a63e:	d102      	bne.n	800a646 <HAL_RCC_OscConfig+0x3e>
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2b03      	cmp	r3, #3
 800a644:	d002      	beq.n	800a64c <HAL_RCC_OscConfig+0x44>
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	2b08      	cmp	r3, #8
 800a64a:	d10b      	bne.n	800a664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a64c:	4b8d      	ldr	r3, [pc, #564]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d05b      	beq.n	800a710 <HAL_RCC_OscConfig+0x108>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d157      	bne.n	800a710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e2e1      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a66c:	d106      	bne.n	800a67c <HAL_RCC_OscConfig+0x74>
 800a66e:	4b85      	ldr	r3, [pc, #532]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a84      	ldr	r2, [pc, #528]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	e01d      	b.n	800a6b8 <HAL_RCC_OscConfig+0xb0>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a684:	d10c      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x98>
 800a686:	4b7f      	ldr	r3, [pc, #508]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a7e      	ldr	r2, [pc, #504]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a68c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a690:	6013      	str	r3, [r2, #0]
 800a692:	4b7c      	ldr	r3, [pc, #496]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a7b      	ldr	r2, [pc, #492]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	e00b      	b.n	800a6b8 <HAL_RCC_OscConfig+0xb0>
 800a6a0:	4b78      	ldr	r3, [pc, #480]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a77      	ldr	r2, [pc, #476]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a6a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	4b75      	ldr	r3, [pc, #468]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a74      	ldr	r2, [pc, #464]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a6b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d013      	beq.n	800a6e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c0:	f7fd f902 	bl	80078c8 <HAL_GetTick>
 800a6c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6c6:	e008      	b.n	800a6da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6c8:	f7fd f8fe 	bl	80078c8 <HAL_GetTick>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	2b64      	cmp	r3, #100	; 0x64
 800a6d4:	d901      	bls.n	800a6da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e2a6      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6da:	4b6a      	ldr	r3, [pc, #424]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0f0      	beq.n	800a6c8 <HAL_RCC_OscConfig+0xc0>
 800a6e6:	e014      	b.n	800a712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e8:	f7fd f8ee 	bl	80078c8 <HAL_GetTick>
 800a6ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6ee:	e008      	b.n	800a702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6f0:	f7fd f8ea 	bl	80078c8 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b64      	cmp	r3, #100	; 0x64
 800a6fc:	d901      	bls.n	800a702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e292      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a702:	4b60      	ldr	r3, [pc, #384]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1f0      	bne.n	800a6f0 <HAL_RCC_OscConfig+0xe8>
 800a70e:	e000      	b.n	800a712 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 0302 	and.w	r3, r3, #2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d075      	beq.n	800a80a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a71e:	4b59      	ldr	r3, [pc, #356]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f003 030c 	and.w	r3, r3, #12
 800a726:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a728:	4b56      	ldr	r3, [pc, #344]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	2b0c      	cmp	r3, #12
 800a736:	d102      	bne.n	800a73e <HAL_RCC_OscConfig+0x136>
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d002      	beq.n	800a744 <HAL_RCC_OscConfig+0x13c>
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	2b04      	cmp	r3, #4
 800a742:	d11f      	bne.n	800a784 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a744:	4b4f      	ldr	r3, [pc, #316]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <HAL_RCC_OscConfig+0x154>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e265      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a75c:	4b49      	ldr	r3, [pc, #292]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	061b      	lsls	r3, r3, #24
 800a76a:	4946      	ldr	r1, [pc, #280]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a770:	4b45      	ldr	r3, [pc, #276]	; (800a888 <HAL_RCC_OscConfig+0x280>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4618      	mov	r0, r3
 800a776:	f7fc fc5d 	bl	8007034 <HAL_InitTick>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d043      	beq.n	800a808 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e251      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d023      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a78c:	4b3d      	ldr	r3, [pc, #244]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a3c      	ldr	r2, [pc, #240]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a798:	f7fd f896 	bl	80078c8 <HAL_GetTick>
 800a79c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a79e:	e008      	b.n	800a7b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7a0:	f7fd f892 	bl	80078c8 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d901      	bls.n	800a7b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e23a      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a7b2:	4b34      	ldr	r3, [pc, #208]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0f0      	beq.n	800a7a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7be:	4b31      	ldr	r3, [pc, #196]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	061b      	lsls	r3, r3, #24
 800a7cc:	492d      	ldr	r1, [pc, #180]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	604b      	str	r3, [r1, #4]
 800a7d2:	e01a      	b.n	800a80a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7d4:	4b2b      	ldr	r3, [pc, #172]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a2a      	ldr	r2, [pc, #168]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a7da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e0:	f7fd f872 	bl	80078c8 <HAL_GetTick>
 800a7e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a7e6:	e008      	b.n	800a7fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7e8:	f7fd f86e 	bl	80078c8 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d901      	bls.n	800a7fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e216      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a7fa:	4b22      	ldr	r3, [pc, #136]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f0      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x1e0>
 800a806:	e000      	b.n	800a80a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a808:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 0308 	and.w	r3, r3, #8
 800a812:	2b00      	cmp	r3, #0
 800a814:	d041      	beq.n	800a89a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d01c      	beq.n	800a858 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a81e:	4b19      	ldr	r3, [pc, #100]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a824:	4a17      	ldr	r2, [pc, #92]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a82e:	f7fd f84b 	bl	80078c8 <HAL_GetTick>
 800a832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a834:	e008      	b.n	800a848 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a836:	f7fd f847 	bl	80078c8 <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	2b02      	cmp	r3, #2
 800a842:	d901      	bls.n	800a848 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	e1ef      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a848:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a84a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a84e:	f003 0302 	and.w	r3, r3, #2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0ef      	beq.n	800a836 <HAL_RCC_OscConfig+0x22e>
 800a856:	e020      	b.n	800a89a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a858:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a85a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a85e:	4a09      	ldr	r2, [pc, #36]	; (800a884 <HAL_RCC_OscConfig+0x27c>)
 800a860:	f023 0301 	bic.w	r3, r3, #1
 800a864:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a868:	f7fd f82e 	bl	80078c8 <HAL_GetTick>
 800a86c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a86e:	e00d      	b.n	800a88c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a870:	f7fd f82a 	bl	80078c8 <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d906      	bls.n	800a88c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a87e:	2303      	movs	r3, #3
 800a880:	e1d2      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
 800a882:	bf00      	nop
 800a884:	40021000 	.word	0x40021000
 800a888:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a88c:	4b8c      	ldr	r3, [pc, #560]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a88e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1ea      	bne.n	800a870 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 80a6 	beq.w	800a9f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a8ac:	4b84      	ldr	r3, [pc, #528]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a8ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <HAL_RCC_OscConfig+0x2b4>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e000      	b.n	800a8be <HAL_RCC_OscConfig+0x2b6>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00d      	beq.n	800a8de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8c2:	4b7f      	ldr	r3, [pc, #508]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8c6:	4a7e      	ldr	r2, [pc, #504]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a8c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8cc:	6593      	str	r3, [r2, #88]	; 0x58
 800a8ce:	4b7c      	ldr	r3, [pc, #496]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8de:	4b79      	ldr	r3, [pc, #484]	; (800aac4 <HAL_RCC_OscConfig+0x4bc>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d118      	bne.n	800a91c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8ea:	4b76      	ldr	r3, [pc, #472]	; (800aac4 <HAL_RCC_OscConfig+0x4bc>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a75      	ldr	r2, [pc, #468]	; (800aac4 <HAL_RCC_OscConfig+0x4bc>)
 800a8f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8f6:	f7fc ffe7 	bl	80078c8 <HAL_GetTick>
 800a8fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8fc:	e008      	b.n	800a910 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8fe:	f7fc ffe3 	bl	80078c8 <HAL_GetTick>
 800a902:	4602      	mov	r2, r0
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d901      	bls.n	800a910 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e18b      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a910:	4b6c      	ldr	r3, [pc, #432]	; (800aac4 <HAL_RCC_OscConfig+0x4bc>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0f0      	beq.n	800a8fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d108      	bne.n	800a936 <HAL_RCC_OscConfig+0x32e>
 800a924:	4b66      	ldr	r3, [pc, #408]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a92a:	4a65      	ldr	r2, [pc, #404]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a92c:	f043 0301 	orr.w	r3, r3, #1
 800a930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a934:	e024      	b.n	800a980 <HAL_RCC_OscConfig+0x378>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	d110      	bne.n	800a960 <HAL_RCC_OscConfig+0x358>
 800a93e:	4b60      	ldr	r3, [pc, #384]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a944:	4a5e      	ldr	r2, [pc, #376]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a946:	f043 0304 	orr.w	r3, r3, #4
 800a94a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a94e:	4b5c      	ldr	r3, [pc, #368]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a954:	4a5a      	ldr	r2, [pc, #360]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a95e:	e00f      	b.n	800a980 <HAL_RCC_OscConfig+0x378>
 800a960:	4b57      	ldr	r3, [pc, #348]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a966:	4a56      	ldr	r2, [pc, #344]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a968:	f023 0301 	bic.w	r3, r3, #1
 800a96c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a970:	4b53      	ldr	r3, [pc, #332]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a976:	4a52      	ldr	r2, [pc, #328]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a978:	f023 0304 	bic.w	r3, r3, #4
 800a97c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d016      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a988:	f7fc ff9e 	bl	80078c8 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a98e:	e00a      	b.n	800a9a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a990:	f7fc ff9a 	bl	80078c8 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d901      	bls.n	800a9a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e140      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9a6:	4b46      	ldr	r3, [pc, #280]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0ed      	beq.n	800a990 <HAL_RCC_OscConfig+0x388>
 800a9b4:	e015      	b.n	800a9e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b6:	f7fc ff87 	bl	80078c8 <HAL_GetTick>
 800a9ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a9bc:	e00a      	b.n	800a9d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9be:	f7fc ff83 	bl	80078c8 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d901      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e129      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a9d4:	4b3a      	ldr	r3, [pc, #232]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1ed      	bne.n	800a9be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a9e2:	7ffb      	ldrb	r3, [r7, #31]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d105      	bne.n	800a9f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9e8:	4b35      	ldr	r3, [pc, #212]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ec:	4a34      	ldr	r2, [pc, #208]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800a9ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d03c      	beq.n	800aa7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01c      	beq.n	800aa42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa08:	4b2d      	ldr	r3, [pc, #180]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa0e:	4a2c      	ldr	r2, [pc, #176]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa10:	f043 0301 	orr.w	r3, r3, #1
 800aa14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa18:	f7fc ff56 	bl	80078c8 <HAL_GetTick>
 800aa1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aa1e:	e008      	b.n	800aa32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa20:	f7fc ff52 	bl	80078c8 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e0fa      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aa32:	4b23      	ldr	r3, [pc, #140]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa38:	f003 0302 	and.w	r3, r3, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0ef      	beq.n	800aa20 <HAL_RCC_OscConfig+0x418>
 800aa40:	e01b      	b.n	800aa7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa42:	4b1f      	ldr	r3, [pc, #124]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa48:	4a1d      	ldr	r2, [pc, #116]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa4a:	f023 0301 	bic.w	r3, r3, #1
 800aa4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa52:	f7fc ff39 	bl	80078c8 <HAL_GetTick>
 800aa56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aa58:	e008      	b.n	800aa6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa5a:	f7fc ff35 	bl	80078c8 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d901      	bls.n	800aa6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e0dd      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aa6c:	4b14      	ldr	r3, [pc, #80]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1ef      	bne.n	800aa5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 80d1 	beq.w	800ac26 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa84:	4b0e      	ldr	r3, [pc, #56]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f003 030c 	and.w	r3, r3, #12
 800aa8c:	2b0c      	cmp	r3, #12
 800aa8e:	f000 808b 	beq.w	800aba8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d15e      	bne.n	800ab58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa9a:	4b09      	ldr	r3, [pc, #36]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a08      	ldr	r2, [pc, #32]	; (800aac0 <HAL_RCC_OscConfig+0x4b8>)
 800aaa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa6:	f7fc ff0f 	bl	80078c8 <HAL_GetTick>
 800aaaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aaac:	e00c      	b.n	800aac8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaae:	f7fc ff0b 	bl	80078c8 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d905      	bls.n	800aac8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e0b3      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
 800aac0:	40021000 	.word	0x40021000
 800aac4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aac8:	4b59      	ldr	r3, [pc, #356]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1ec      	bne.n	800aaae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aad4:	4b56      	ldr	r3, [pc, #344]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800aad6:	68da      	ldr	r2, [r3, #12]
 800aad8:	4b56      	ldr	r3, [pc, #344]	; (800ac34 <HAL_RCC_OscConfig+0x62c>)
 800aada:	4013      	ands	r3, r2
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	6a11      	ldr	r1, [r2, #32]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aae4:	3a01      	subs	r2, #1
 800aae6:	0112      	lsls	r2, r2, #4
 800aae8:	4311      	orrs	r1, r2
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aaee:	0212      	lsls	r2, r2, #8
 800aaf0:	4311      	orrs	r1, r2
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aaf6:	0852      	lsrs	r2, r2, #1
 800aaf8:	3a01      	subs	r2, #1
 800aafa:	0552      	lsls	r2, r2, #21
 800aafc:	4311      	orrs	r1, r2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab02:	0852      	lsrs	r2, r2, #1
 800ab04:	3a01      	subs	r2, #1
 800ab06:	0652      	lsls	r2, r2, #25
 800ab08:	4311      	orrs	r1, r2
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab0e:	06d2      	lsls	r2, r2, #27
 800ab10:	430a      	orrs	r2, r1
 800ab12:	4947      	ldr	r1, [pc, #284]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab18:	4b45      	ldr	r3, [pc, #276]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a44      	ldr	r2, [pc, #272]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ab24:	4b42      	ldr	r3, [pc, #264]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	4a41      	ldr	r2, [pc, #260]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab30:	f7fc feca 	bl	80078c8 <HAL_GetTick>
 800ab34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab36:	e008      	b.n	800ab4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab38:	f7fc fec6 	bl	80078c8 <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d901      	bls.n	800ab4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e06e      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab4a:	4b39      	ldr	r3, [pc, #228]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0f0      	beq.n	800ab38 <HAL_RCC_OscConfig+0x530>
 800ab56:	e066      	b.n	800ac26 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab58:	4b35      	ldr	r3, [pc, #212]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a34      	ldr	r2, [pc, #208]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ab64:	4b32      	ldr	r3, [pc, #200]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	4a31      	ldr	r2, [pc, #196]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab6a:	f023 0303 	bic.w	r3, r3, #3
 800ab6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ab70:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	4a2e      	ldr	r2, [pc, #184]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ab7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab80:	f7fc fea2 	bl	80078c8 <HAL_GetTick>
 800ab84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab86:	e008      	b.n	800ab9a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab88:	f7fc fe9e 	bl	80078c8 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d901      	bls.n	800ab9a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e046      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab9a:	4b25      	ldr	r3, [pc, #148]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1f0      	bne.n	800ab88 <HAL_RCC_OscConfig+0x580>
 800aba6:	e03e      	b.n	800ac26 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	69db      	ldr	r3, [r3, #28]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e039      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800abb4:	4b1e      	ldr	r3, [pc, #120]	; (800ac30 <HAL_RCC_OscConfig+0x628>)
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f003 0203 	and.w	r2, r3, #3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d12c      	bne.n	800ac22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd2:	3b01      	subs	r3, #1
 800abd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d123      	bne.n	800ac22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d11b      	bne.n	800ac22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d113      	bne.n	800ac22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	3b01      	subs	r3, #1
 800ac08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d109      	bne.n	800ac22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d001      	beq.n	800ac26 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e000      	b.n	800ac28 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3720      	adds	r7, #32
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	40021000 	.word	0x40021000
 800ac34:	019f800c 	.word	0x019f800c

0800ac38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ac42:	2300      	movs	r3, #0
 800ac44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e11e      	b.n	800ae8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac50:	4b91      	ldr	r3, [pc, #580]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 030f 	and.w	r3, r3, #15
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d910      	bls.n	800ac80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac5e:	4b8e      	ldr	r3, [pc, #568]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f023 020f 	bic.w	r2, r3, #15
 800ac66:	498c      	ldr	r1, [pc, #560]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac6e:	4b8a      	ldr	r3, [pc, #552]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d001      	beq.n	800ac80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e106      	b.n	800ae8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d073      	beq.n	800ad74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	2b03      	cmp	r3, #3
 800ac92:	d129      	bne.n	800ace8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac94:	4b81      	ldr	r3, [pc, #516]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e0f4      	b.n	800ae8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800aca4:	f000 f9d0 	bl	800b048 <RCC_GetSysClockFreqFromPLLSource>
 800aca8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	4a7c      	ldr	r2, [pc, #496]	; (800aea0 <HAL_RCC_ClockConfig+0x268>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d93f      	bls.n	800ad32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800acb2:	4b7a      	ldr	r3, [pc, #488]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d009      	beq.n	800acd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d033      	beq.n	800ad32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d12f      	bne.n	800ad32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800acd2:	4b72      	ldr	r3, [pc, #456]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acda:	4a70      	ldr	r2, [pc, #448]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800acdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ace2:	2380      	movs	r3, #128	; 0x80
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	e024      	b.n	800ad32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	2b02      	cmp	r3, #2
 800acee:	d107      	bne.n	800ad00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800acf0:	4b6a      	ldr	r3, [pc, #424]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d109      	bne.n	800ad10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e0c6      	b.n	800ae8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad00:	4b66      	ldr	r3, [pc, #408]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0be      	b.n	800ae8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ad10:	f000 f8ce 	bl	800aeb0 <HAL_RCC_GetSysClockFreq>
 800ad14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	4a61      	ldr	r2, [pc, #388]	; (800aea0 <HAL_RCC_ClockConfig+0x268>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d909      	bls.n	800ad32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ad1e:	4b5f      	ldr	r3, [pc, #380]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad26:	4a5d      	ldr	r2, [pc, #372]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ad2e:	2380      	movs	r3, #128	; 0x80
 800ad30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad32:	4b5a      	ldr	r3, [pc, #360]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f023 0203 	bic.w	r2, r3, #3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	4957      	ldr	r1, [pc, #348]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad44:	f7fc fdc0 	bl	80078c8 <HAL_GetTick>
 800ad48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad4a:	e00a      	b.n	800ad62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad4c:	f7fc fdbc 	bl	80078c8 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d901      	bls.n	800ad62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e095      	b.n	800ae8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad62:	4b4e      	ldr	r3, [pc, #312]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f003 020c 	and.w	r2, r3, #12
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d1eb      	bne.n	800ad4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d023      	beq.n	800adc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d005      	beq.n	800ad98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad8c:	4b43      	ldr	r3, [pc, #268]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	4a42      	ldr	r2, [pc, #264]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ad92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 0308 	and.w	r3, r3, #8
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d007      	beq.n	800adb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ada4:	4b3d      	ldr	r3, [pc, #244]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adac:	4a3b      	ldr	r2, [pc, #236]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800adae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800adb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adb4:	4b39      	ldr	r3, [pc, #228]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	4936      	ldr	r1, [pc, #216]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	608b      	str	r3, [r1, #8]
 800adc6:	e008      	b.n	800adda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2b80      	cmp	r3, #128	; 0x80
 800adcc:	d105      	bne.n	800adda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800adce:	4b33      	ldr	r3, [pc, #204]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	4a32      	ldr	r2, [pc, #200]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800add4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800add8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800adda:	4b2f      	ldr	r3, [pc, #188]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 030f 	and.w	r3, r3, #15
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d21d      	bcs.n	800ae24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ade8:	4b2b      	ldr	r3, [pc, #172]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f023 020f 	bic.w	r2, r3, #15
 800adf0:	4929      	ldr	r1, [pc, #164]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800adf8:	f7fc fd66 	bl	80078c8 <HAL_GetTick>
 800adfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adfe:	e00a      	b.n	800ae16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae00:	f7fc fd62 	bl	80078c8 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d901      	bls.n	800ae16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e03b      	b.n	800ae8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae16:	4b20      	ldr	r3, [pc, #128]	; (800ae98 <HAL_RCC_ClockConfig+0x260>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 030f 	and.w	r3, r3, #15
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d1ed      	bne.n	800ae00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d008      	beq.n	800ae42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae30:	4b1a      	ldr	r3, [pc, #104]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	4917      	ldr	r1, [pc, #92]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0308 	and.w	r3, r3, #8
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d009      	beq.n	800ae62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae4e:	4b13      	ldr	r3, [pc, #76]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	00db      	lsls	r3, r3, #3
 800ae5c:	490f      	ldr	r1, [pc, #60]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae62:	f000 f825 	bl	800aeb0 <HAL_RCC_GetSysClockFreq>
 800ae66:	4602      	mov	r2, r0
 800ae68:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <HAL_RCC_ClockConfig+0x264>)
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	091b      	lsrs	r3, r3, #4
 800ae6e:	f003 030f 	and.w	r3, r3, #15
 800ae72:	490c      	ldr	r1, [pc, #48]	; (800aea4 <HAL_RCC_ClockConfig+0x26c>)
 800ae74:	5ccb      	ldrb	r3, [r1, r3]
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7e:	4a0a      	ldr	r2, [pc, #40]	; (800aea8 <HAL_RCC_ClockConfig+0x270>)
 800ae80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ae82:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <HAL_RCC_ClockConfig+0x274>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fc f8d4 	bl	8007034 <HAL_InitTick>
 800ae8c:	4603      	mov	r3, r0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	40022000 	.word	0x40022000
 800ae9c:	40021000 	.word	0x40021000
 800aea0:	04c4b400 	.word	0x04c4b400
 800aea4:	08011cb8 	.word	0x08011cb8
 800aea8:	20000004 	.word	0x20000004
 800aeac:	20000008 	.word	0x20000008

0800aeb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800aeb6:	4b2c      	ldr	r3, [pc, #176]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f003 030c 	and.w	r3, r3, #12
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d102      	bne.n	800aec8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aec2:	4b2a      	ldr	r3, [pc, #168]	; (800af6c <HAL_RCC_GetSysClockFreq+0xbc>)
 800aec4:	613b      	str	r3, [r7, #16]
 800aec6:	e047      	b.n	800af58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800aec8:	4b27      	ldr	r3, [pc, #156]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f003 030c 	and.w	r3, r3, #12
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	d102      	bne.n	800aeda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aed4:	4b26      	ldr	r3, [pc, #152]	; (800af70 <HAL_RCC_GetSysClockFreq+0xc0>)
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	e03e      	b.n	800af58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800aeda:	4b23      	ldr	r3, [pc, #140]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f003 030c 	and.w	r3, r3, #12
 800aee2:	2b0c      	cmp	r3, #12
 800aee4:	d136      	bne.n	800af54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aee6:	4b20      	ldr	r3, [pc, #128]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f003 0303 	and.w	r3, r3, #3
 800aeee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aef0:	4b1d      	ldr	r3, [pc, #116]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	091b      	lsrs	r3, r3, #4
 800aef6:	f003 030f 	and.w	r3, r3, #15
 800aefa:	3301      	adds	r3, #1
 800aefc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b03      	cmp	r3, #3
 800af02:	d10c      	bne.n	800af1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af04:	4a1a      	ldr	r2, [pc, #104]	; (800af70 <HAL_RCC_GetSysClockFreq+0xc0>)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0c:	4a16      	ldr	r2, [pc, #88]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af0e:	68d2      	ldr	r2, [r2, #12]
 800af10:	0a12      	lsrs	r2, r2, #8
 800af12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800af16:	fb02 f303 	mul.w	r3, r2, r3
 800af1a:	617b      	str	r3, [r7, #20]
      break;
 800af1c:	e00c      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af1e:	4a13      	ldr	r2, [pc, #76]	; (800af6c <HAL_RCC_GetSysClockFreq+0xbc>)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	fbb2 f3f3 	udiv	r3, r2, r3
 800af26:	4a10      	ldr	r2, [pc, #64]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af28:	68d2      	ldr	r2, [r2, #12]
 800af2a:	0a12      	lsrs	r2, r2, #8
 800af2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800af30:	fb02 f303 	mul.w	r3, r2, r3
 800af34:	617b      	str	r3, [r7, #20]
      break;
 800af36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800af38:	4b0b      	ldr	r3, [pc, #44]	; (800af68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	0e5b      	lsrs	r3, r3, #25
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	3301      	adds	r3, #1
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af50:	613b      	str	r3, [r7, #16]
 800af52:	e001      	b.n	800af58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800af58:	693b      	ldr	r3, [r7, #16]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40021000 	.word	0x40021000
 800af6c:	00f42400 	.word	0x00f42400
 800af70:	007a1200 	.word	0x007a1200

0800af74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af74:	b480      	push	{r7}
 800af76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af78:	4b03      	ldr	r3, [pc, #12]	; (800af88 <HAL_RCC_GetHCLKFreq+0x14>)
 800af7a:	681b      	ldr	r3, [r3, #0]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	20000004 	.word	0x20000004

0800af8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800af90:	f7ff fff0 	bl	800af74 <HAL_RCC_GetHCLKFreq>
 800af94:	4602      	mov	r2, r0
 800af96:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	0a1b      	lsrs	r3, r3, #8
 800af9c:	f003 0307 	and.w	r3, r3, #7
 800afa0:	4904      	ldr	r1, [pc, #16]	; (800afb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800afa2:	5ccb      	ldrb	r3, [r1, r3]
 800afa4:	f003 031f 	and.w	r3, r3, #31
 800afa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afac:	4618      	mov	r0, r3
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	40021000 	.word	0x40021000
 800afb4:	08011cc8 	.word	0x08011cc8

0800afb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800afbc:	f7ff ffda 	bl	800af74 <HAL_RCC_GetHCLKFreq>
 800afc0:	4602      	mov	r2, r0
 800afc2:	4b06      	ldr	r3, [pc, #24]	; (800afdc <HAL_RCC_GetPCLK2Freq+0x24>)
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	0adb      	lsrs	r3, r3, #11
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	4904      	ldr	r1, [pc, #16]	; (800afe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800afce:	5ccb      	ldrb	r3, [r1, r3]
 800afd0:	f003 031f 	and.w	r3, r3, #31
 800afd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afd8:	4618      	mov	r0, r3
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	40021000 	.word	0x40021000
 800afe0:	08011cc8 	.word	0x08011cc8

0800afe4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	220f      	movs	r2, #15
 800aff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800aff4:	4b12      	ldr	r3, [pc, #72]	; (800b040 <HAL_RCC_GetClockConfig+0x5c>)
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f003 0203 	and.w	r2, r3, #3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b000:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <HAL_RCC_GetClockConfig+0x5c>)
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b00c:	4b0c      	ldr	r3, [pc, #48]	; (800b040 <HAL_RCC_GetClockConfig+0x5c>)
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b018:	4b09      	ldr	r3, [pc, #36]	; (800b040 <HAL_RCC_GetClockConfig+0x5c>)
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	08db      	lsrs	r3, r3, #3
 800b01e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b026:	4b07      	ldr	r3, [pc, #28]	; (800b044 <HAL_RCC_GetClockConfig+0x60>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 020f 	and.w	r2, r3, #15
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	601a      	str	r2, [r3, #0]
}
 800b032:	bf00      	nop
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	40021000 	.word	0x40021000
 800b044:	40022000 	.word	0x40022000

0800b048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b04e:	4b1e      	ldr	r3, [pc, #120]	; (800b0c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b058:	4b1b      	ldr	r3, [pc, #108]	; (800b0c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	091b      	lsrs	r3, r3, #4
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	3301      	adds	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2b03      	cmp	r3, #3
 800b06a:	d10c      	bne.n	800b086 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b06c:	4a17      	ldr	r2, [pc, #92]	; (800b0cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	fbb2 f3f3 	udiv	r3, r2, r3
 800b074:	4a14      	ldr	r2, [pc, #80]	; (800b0c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b076:	68d2      	ldr	r2, [r2, #12]
 800b078:	0a12      	lsrs	r2, r2, #8
 800b07a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
 800b082:	617b      	str	r3, [r7, #20]
    break;
 800b084:	e00c      	b.n	800b0a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b086:	4a12      	ldr	r2, [pc, #72]	; (800b0d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b08e:	4a0e      	ldr	r2, [pc, #56]	; (800b0c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b090:	68d2      	ldr	r2, [r2, #12]
 800b092:	0a12      	lsrs	r2, r2, #8
 800b094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b098:	fb02 f303 	mul.w	r3, r2, r3
 800b09c:	617b      	str	r3, [r7, #20]
    break;
 800b09e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b0a0:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	0e5b      	lsrs	r3, r3, #25
 800b0a6:	f003 0303 	and.w	r3, r3, #3
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b0ba:	687b      	ldr	r3, [r7, #4]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	40021000 	.word	0x40021000
 800b0cc:	007a1200 	.word	0x007a1200
 800b0d0:	00f42400 	.word	0x00f42400

0800b0d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0dc:	2300      	movs	r3, #0
 800b0de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 8098 	beq.w	800b222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0f6:	4b43      	ldr	r3, [pc, #268]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10d      	bne.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b102:	4b40      	ldr	r3, [pc, #256]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b106:	4a3f      	ldr	r2, [pc, #252]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b10c:	6593      	str	r3, [r2, #88]	; 0x58
 800b10e:	4b3d      	ldr	r3, [pc, #244]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b116:	60bb      	str	r3, [r7, #8]
 800b118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b11a:	2301      	movs	r3, #1
 800b11c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b11e:	4b3a      	ldr	r3, [pc, #232]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a39      	ldr	r2, [pc, #228]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b12a:	f7fc fbcd 	bl	80078c8 <HAL_GetTick>
 800b12e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b130:	e009      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b132:	f7fc fbc9 	bl	80078c8 <HAL_GetTick>
 800b136:	4602      	mov	r2, r0
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d902      	bls.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	74fb      	strb	r3, [r7, #19]
        break;
 800b144:	e005      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b146:	4b30      	ldr	r3, [pc, #192]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0ef      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b152:	7cfb      	ldrb	r3, [r7, #19]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d159      	bne.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b158:	4b2a      	ldr	r3, [pc, #168]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b162:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d01e      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	429a      	cmp	r2, r3
 800b172:	d019      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b174:	4b23      	ldr	r3, [pc, #140]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b17a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b17e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b180:	4b20      	ldr	r3, [pc, #128]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b186:	4a1f      	ldr	r2, [pc, #124]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b18c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b190:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b196:	4a1b      	ldr	r2, [pc, #108]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b1a0:	4a18      	ldr	r2, [pc, #96]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d016      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b2:	f7fc fb89 	bl	80078c8 <HAL_GetTick>
 800b1b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1b8:	e00b      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1ba:	f7fc fb85 	bl	80078c8 <HAL_GetTick>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d902      	bls.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	74fb      	strb	r3, [r7, #19]
            break;
 800b1d0:	e006      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1d2:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1d8:	f003 0302 	and.w	r3, r3, #2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0ec      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b1e0:	7cfb      	ldrb	r3, [r7, #19]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10b      	bne.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1e6:	4b07      	ldr	r3, [pc, #28]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f4:	4903      	ldr	r1, [pc, #12]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b1fc:	e008      	b.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b1fe:	7cfb      	ldrb	r3, [r7, #19]
 800b200:	74bb      	strb	r3, [r7, #18]
 800b202:	e005      	b.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b204:	40021000 	.word	0x40021000
 800b208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20c:	7cfb      	ldrb	r3, [r7, #19]
 800b20e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b210:	7c7b      	ldrb	r3, [r7, #17]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d105      	bne.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b216:	4ba7      	ldr	r3, [pc, #668]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b21a:	4aa6      	ldr	r2, [pc, #664]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b21c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b22e:	4ba1      	ldr	r3, [pc, #644]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b234:	f023 0203 	bic.w	r2, r3, #3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	499d      	ldr	r1, [pc, #628]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0302 	and.w	r3, r3, #2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00a      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b250:	4b98      	ldr	r3, [pc, #608]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b256:	f023 020c 	bic.w	r2, r3, #12
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	4995      	ldr	r1, [pc, #596]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b260:	4313      	orrs	r3, r2
 800b262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b272:	4b90      	ldr	r3, [pc, #576]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	498c      	ldr	r1, [pc, #560]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b282:	4313      	orrs	r3, r2
 800b284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0308 	and.w	r3, r3, #8
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00a      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b294:	4b87      	ldr	r3, [pc, #540]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	4984      	ldr	r1, [pc, #528]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 0310 	and.w	r3, r3, #16
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00a      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b2b6:	4b7f      	ldr	r3, [pc, #508]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	497b      	ldr	r1, [pc, #492]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0320 	and.w	r3, r3, #32
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2d8:	4b76      	ldr	r3, [pc, #472]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	4973      	ldr	r1, [pc, #460]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b2fa:	4b6e      	ldr	r3, [pc, #440]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	496a      	ldr	r1, [pc, #424]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b30a:	4313      	orrs	r3, r2
 800b30c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00a      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b31c:	4b65      	ldr	r3, [pc, #404]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	4962      	ldr	r1, [pc, #392]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00a      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b33e:	4b5d      	ldr	r3, [pc, #372]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34c:	4959      	ldr	r1, [pc, #356]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00a      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b360:	4b54      	ldr	r3, [pc, #336]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b366:	f023 0203 	bic.w	r2, r3, #3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36e:	4951      	ldr	r1, [pc, #324]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b370:	4313      	orrs	r3, r2
 800b372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b382:	4b4c      	ldr	r3, [pc, #304]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b390:	4948      	ldr	r1, [pc, #288]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b392:	4313      	orrs	r3, r2
 800b394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d015      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b3a4:	4b43      	ldr	r3, [pc, #268]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b2:	4940      	ldr	r1, [pc, #256]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c2:	d105      	bne.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3c4:	4b3b      	ldr	r3, [pc, #236]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	4a3a      	ldr	r2, [pc, #232]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d015      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b3dc:	4b35      	ldr	r3, [pc, #212]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ea:	4932      	ldr	r1, [pc, #200]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3fa:	d105      	bne.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3fc:	4b2d      	ldr	r3, [pc, #180]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	4a2c      	ldr	r2, [pc, #176]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b406:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d015      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b414:	4b27      	ldr	r3, [pc, #156]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b422:	4924      	ldr	r1, [pc, #144]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b424:	4313      	orrs	r3, r2
 800b426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b432:	d105      	bne.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b434:	4b1f      	ldr	r3, [pc, #124]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	4a1e      	ldr	r2, [pc, #120]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b43a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b43e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d015      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b44c:	4b19      	ldr	r3, [pc, #100]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b452:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45a:	4916      	ldr	r1, [pc, #88]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b46a:	d105      	bne.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b46c:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	4a10      	ldr	r2, [pc, #64]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b476:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d019      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b484:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b48a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b492:	4908      	ldr	r1, [pc, #32]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b494:	4313      	orrs	r3, r2
 800b496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4a2:	d109      	bne.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4a4:	4b03      	ldr	r3, [pc, #12]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	4a02      	ldr	r2, [pc, #8]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4ae:	60d3      	str	r3, [r2, #12]
 800b4b0:	e002      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b4b2:	bf00      	nop
 800b4b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d015      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b4c4:	4b29      	ldr	r3, [pc, #164]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d2:	4926      	ldr	r1, [pc, #152]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4e2:	d105      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b4e4:	4b21      	ldr	r3, [pc, #132]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	4a20      	ldr	r2, [pc, #128]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b4ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d015      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b4fc:	4b1b      	ldr	r3, [pc, #108]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b502:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b50a:	4918      	ldr	r1, [pc, #96]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b51a:	d105      	bne.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b51c:	4b13      	ldr	r3, [pc, #76]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	4a12      	ldr	r2, [pc, #72]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b526:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d015      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b534:	4b0d      	ldr	r3, [pc, #52]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b53a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b542:	490a      	ldr	r1, [pc, #40]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b544:	4313      	orrs	r3, r2
 800b546:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b54e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b552:	d105      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b554:	4b05      	ldr	r3, [pc, #20]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	4a04      	ldr	r2, [pc, #16]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b55a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b55e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b560:	7cbb      	ldrb	r3, [r7, #18]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	40021000 	.word	0x40021000

0800b570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e049      	b.n	800b616 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f841 	bl	800b61e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	f000 fcde 	bl	800bf70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
	...

0800b634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b01      	cmp	r3, #1
 800b646:	d001      	beq.n	800b64c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	e054      	b.n	800b6f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68da      	ldr	r2, [r3, #12]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f042 0201 	orr.w	r2, r2, #1
 800b662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a26      	ldr	r2, [pc, #152]	; (800b704 <HAL_TIM_Base_Start_IT+0xd0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d022      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x80>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b676:	d01d      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x80>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a22      	ldr	r2, [pc, #136]	; (800b708 <HAL_TIM_Base_Start_IT+0xd4>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d018      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x80>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a21      	ldr	r2, [pc, #132]	; (800b70c <HAL_TIM_Base_Start_IT+0xd8>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d013      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x80>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a1f      	ldr	r2, [pc, #124]	; (800b710 <HAL_TIM_Base_Start_IT+0xdc>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d00e      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x80>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a1e      	ldr	r2, [pc, #120]	; (800b714 <HAL_TIM_Base_Start_IT+0xe0>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d009      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x80>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a1c      	ldr	r2, [pc, #112]	; (800b718 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d004      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x80>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a1b      	ldr	r2, [pc, #108]	; (800b71c <HAL_TIM_Base_Start_IT+0xe8>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d115      	bne.n	800b6e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	4b19      	ldr	r3, [pc, #100]	; (800b720 <HAL_TIM_Base_Start_IT+0xec>)
 800b6bc:	4013      	ands	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b06      	cmp	r3, #6
 800b6c4:	d015      	beq.n	800b6f2 <HAL_TIM_Base_Start_IT+0xbe>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6cc:	d011      	beq.n	800b6f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f042 0201 	orr.w	r2, r2, #1
 800b6dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6de:	e008      	b.n	800b6f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f042 0201 	orr.w	r2, r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	e000      	b.n	800b6f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40012c00 	.word	0x40012c00
 800b708:	40000400 	.word	0x40000400
 800b70c:	40000800 	.word	0x40000800
 800b710:	40000c00 	.word	0x40000c00
 800b714:	40013400 	.word	0x40013400
 800b718:	40014000 	.word	0x40014000
 800b71c:	40015000 	.word	0x40015000
 800b720:	00010007 	.word	0x00010007

0800b724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e049      	b.n	800b7ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d106      	bne.n	800b750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7fb fe60 	bl	8007410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2202      	movs	r2, #2
 800b754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3304      	adds	r3, #4
 800b760:	4619      	mov	r1, r3
 800b762:	4610      	mov	r0, r2
 800b764:	f000 fc04 	bl	800bf70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d109      	bne.n	800b7f8 <HAL_TIM_PWM_Start+0x24>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	bf14      	ite	ne
 800b7f0:	2301      	movne	r3, #1
 800b7f2:	2300      	moveq	r3, #0
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	e03c      	b.n	800b872 <HAL_TIM_PWM_Start+0x9e>
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	d109      	bne.n	800b812 <HAL_TIM_PWM_Start+0x3e>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b01      	cmp	r3, #1
 800b808:	bf14      	ite	ne
 800b80a:	2301      	movne	r3, #1
 800b80c:	2300      	moveq	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	e02f      	b.n	800b872 <HAL_TIM_PWM_Start+0x9e>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b08      	cmp	r3, #8
 800b816:	d109      	bne.n	800b82c <HAL_TIM_PWM_Start+0x58>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b01      	cmp	r3, #1
 800b822:	bf14      	ite	ne
 800b824:	2301      	movne	r3, #1
 800b826:	2300      	moveq	r3, #0
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	e022      	b.n	800b872 <HAL_TIM_PWM_Start+0x9e>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	2b0c      	cmp	r3, #12
 800b830:	d109      	bne.n	800b846 <HAL_TIM_PWM_Start+0x72>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	bf14      	ite	ne
 800b83e:	2301      	movne	r3, #1
 800b840:	2300      	moveq	r3, #0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	e015      	b.n	800b872 <HAL_TIM_PWM_Start+0x9e>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b10      	cmp	r3, #16
 800b84a:	d109      	bne.n	800b860 <HAL_TIM_PWM_Start+0x8c>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b01      	cmp	r3, #1
 800b856:	bf14      	ite	ne
 800b858:	2301      	movne	r3, #1
 800b85a:	2300      	moveq	r3, #0
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	e008      	b.n	800b872 <HAL_TIM_PWM_Start+0x9e>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b01      	cmp	r3, #1
 800b86a:	bf14      	ite	ne
 800b86c:	2301      	movne	r3, #1
 800b86e:	2300      	moveq	r3, #0
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e0a6      	b.n	800b9c8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <HAL_TIM_PWM_Start+0xb6>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2202      	movs	r2, #2
 800b884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b888:	e023      	b.n	800b8d2 <HAL_TIM_PWM_Start+0xfe>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b04      	cmp	r3, #4
 800b88e:	d104      	bne.n	800b89a <HAL_TIM_PWM_Start+0xc6>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2202      	movs	r2, #2
 800b894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b898:	e01b      	b.n	800b8d2 <HAL_TIM_PWM_Start+0xfe>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b08      	cmp	r3, #8
 800b89e:	d104      	bne.n	800b8aa <HAL_TIM_PWM_Start+0xd6>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8a8:	e013      	b.n	800b8d2 <HAL_TIM_PWM_Start+0xfe>
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b0c      	cmp	r3, #12
 800b8ae:	d104      	bne.n	800b8ba <HAL_TIM_PWM_Start+0xe6>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8b8:	e00b      	b.n	800b8d2 <HAL_TIM_PWM_Start+0xfe>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b10      	cmp	r3, #16
 800b8be:	d104      	bne.n	800b8ca <HAL_TIM_PWM_Start+0xf6>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8c8:	e003      	b.n	800b8d2 <HAL_TIM_PWM_Start+0xfe>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 ff1a 	bl	800c714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a3a      	ldr	r2, [pc, #232]	; (800b9d0 <HAL_TIM_PWM_Start+0x1fc>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d018      	beq.n	800b91c <HAL_TIM_PWM_Start+0x148>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a39      	ldr	r2, [pc, #228]	; (800b9d4 <HAL_TIM_PWM_Start+0x200>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d013      	beq.n	800b91c <HAL_TIM_PWM_Start+0x148>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a37      	ldr	r2, [pc, #220]	; (800b9d8 <HAL_TIM_PWM_Start+0x204>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d00e      	beq.n	800b91c <HAL_TIM_PWM_Start+0x148>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a36      	ldr	r2, [pc, #216]	; (800b9dc <HAL_TIM_PWM_Start+0x208>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d009      	beq.n	800b91c <HAL_TIM_PWM_Start+0x148>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a34      	ldr	r2, [pc, #208]	; (800b9e0 <HAL_TIM_PWM_Start+0x20c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d004      	beq.n	800b91c <HAL_TIM_PWM_Start+0x148>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a33      	ldr	r2, [pc, #204]	; (800b9e4 <HAL_TIM_PWM_Start+0x210>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d101      	bne.n	800b920 <HAL_TIM_PWM_Start+0x14c>
 800b91c:	2301      	movs	r3, #1
 800b91e:	e000      	b.n	800b922 <HAL_TIM_PWM_Start+0x14e>
 800b920:	2300      	movs	r3, #0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d007      	beq.n	800b936 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a25      	ldr	r2, [pc, #148]	; (800b9d0 <HAL_TIM_PWM_Start+0x1fc>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d022      	beq.n	800b986 <HAL_TIM_PWM_Start+0x1b2>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b948:	d01d      	beq.n	800b986 <HAL_TIM_PWM_Start+0x1b2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a26      	ldr	r2, [pc, #152]	; (800b9e8 <HAL_TIM_PWM_Start+0x214>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d018      	beq.n	800b986 <HAL_TIM_PWM_Start+0x1b2>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a24      	ldr	r2, [pc, #144]	; (800b9ec <HAL_TIM_PWM_Start+0x218>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d013      	beq.n	800b986 <HAL_TIM_PWM_Start+0x1b2>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a23      	ldr	r2, [pc, #140]	; (800b9f0 <HAL_TIM_PWM_Start+0x21c>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00e      	beq.n	800b986 <HAL_TIM_PWM_Start+0x1b2>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a19      	ldr	r2, [pc, #100]	; (800b9d4 <HAL_TIM_PWM_Start+0x200>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d009      	beq.n	800b986 <HAL_TIM_PWM_Start+0x1b2>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a18      	ldr	r2, [pc, #96]	; (800b9d8 <HAL_TIM_PWM_Start+0x204>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d004      	beq.n	800b986 <HAL_TIM_PWM_Start+0x1b2>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <HAL_TIM_PWM_Start+0x210>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d115      	bne.n	800b9b2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	4b19      	ldr	r3, [pc, #100]	; (800b9f4 <HAL_TIM_PWM_Start+0x220>)
 800b98e:	4013      	ands	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b06      	cmp	r3, #6
 800b996:	d015      	beq.n	800b9c4 <HAL_TIM_PWM_Start+0x1f0>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b99e:	d011      	beq.n	800b9c4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f042 0201 	orr.w	r2, r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9b0:	e008      	b.n	800b9c4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f042 0201 	orr.w	r2, r2, #1
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	e000      	b.n	800b9c6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	40012c00 	.word	0x40012c00
 800b9d4:	40013400 	.word	0x40013400
 800b9d8:	40014000 	.word	0x40014000
 800b9dc:	40014400 	.word	0x40014400
 800b9e0:	40014800 	.word	0x40014800
 800b9e4:	40015000 	.word	0x40015000
 800b9e8:	40000400 	.word	0x40000400
 800b9ec:	40000800 	.word	0x40000800
 800b9f0:	40000c00 	.word	0x40000c00
 800b9f4:	00010007 	.word	0x00010007

0800b9f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	f003 0302 	and.w	r3, r3, #2
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d122      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d11b      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f06f 0202 	mvn.w	r2, #2
 800ba24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	f003 0303 	and.w	r3, r3, #3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fa7a 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800ba40:	e005      	b.n	800ba4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fa6c 	bl	800bf20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fa7d 	bl	800bf48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	f003 0304 	and.w	r3, r3, #4
 800ba5e:	2b04      	cmp	r3, #4
 800ba60:	d122      	bne.n	800baa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d11b      	bne.n	800baa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f06f 0204 	mvn.w	r2, #4
 800ba78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fa50 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800ba94:	e005      	b.n	800baa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fa42 	bl	800bf20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fa53 	bl	800bf48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	f003 0308 	and.w	r3, r3, #8
 800bab2:	2b08      	cmp	r3, #8
 800bab4:	d122      	bne.n	800bafc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f003 0308 	and.w	r3, r3, #8
 800bac0:	2b08      	cmp	r3, #8
 800bac2:	d11b      	bne.n	800bafc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f06f 0208 	mvn.w	r2, #8
 800bacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2204      	movs	r2, #4
 800bad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	f003 0303 	and.w	r3, r3, #3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fa26 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800bae8:	e005      	b.n	800baf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa18 	bl	800bf20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fa29 	bl	800bf48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	f003 0310 	and.w	r3, r3, #16
 800bb06:	2b10      	cmp	r3, #16
 800bb08:	d122      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	f003 0310 	and.w	r3, r3, #16
 800bb14:	2b10      	cmp	r3, #16
 800bb16:	d11b      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f06f 0210 	mvn.w	r2, #16
 800bb20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2208      	movs	r2, #8
 800bb26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f9fc 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800bb3c:	e005      	b.n	800bb4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f9ee 	bl	800bf20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f9ff 	bl	800bf48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d10e      	bne.n	800bb7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d107      	bne.n	800bb7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f06f 0201 	mvn.w	r2, #1
 800bb74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7fa ff4a 	bl	8006a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb86:	2b80      	cmp	r3, #128	; 0x80
 800bb88:	d10e      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb94:	2b80      	cmp	r3, #128	; 0x80
 800bb96:	d107      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fe7c 	bl	800c8a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbb6:	d10e      	bne.n	800bbd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d107      	bne.n	800bbd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fe6f 	bl	800c8b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe0:	2b40      	cmp	r3, #64	; 0x40
 800bbe2:	d10e      	bne.n	800bc02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbee:	2b40      	cmp	r3, #64	; 0x40
 800bbf0:	d107      	bne.n	800bc02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 f9ad 	bl	800bf5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	f003 0320 	and.w	r3, r3, #32
 800bc0c:	2b20      	cmp	r3, #32
 800bc0e:	d10e      	bne.n	800bc2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	f003 0320 	and.w	r3, r3, #32
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d107      	bne.n	800bc2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f06f 0220 	mvn.w	r2, #32
 800bc26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fe2f 	bl	800c88c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc3c:	d10f      	bne.n	800bc5e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc4c:	d107      	bne.n	800bc5e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bc56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fe35 	bl	800c8c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc6c:	d10f      	bne.n	800bc8e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc7c:	d107      	bne.n	800bc8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bc86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fe27 	bl	800c8dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc9c:	d10f      	bne.n	800bcbe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcac:	d107      	bne.n	800bcbe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bcb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fe19 	bl	800c8f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bccc:	d10f      	bne.n	800bcee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcdc:	d107      	bne.n	800bcee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fe0b 	bl	800c904 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d101      	bne.n	800bd16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd12:	2302      	movs	r3, #2
 800bd14:	e0ff      	b.n	800bf16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b14      	cmp	r3, #20
 800bd22:	f200 80f0 	bhi.w	800bf06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd26:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2c:	0800bd81 	.word	0x0800bd81
 800bd30:	0800bf07 	.word	0x0800bf07
 800bd34:	0800bf07 	.word	0x0800bf07
 800bd38:	0800bf07 	.word	0x0800bf07
 800bd3c:	0800bdc1 	.word	0x0800bdc1
 800bd40:	0800bf07 	.word	0x0800bf07
 800bd44:	0800bf07 	.word	0x0800bf07
 800bd48:	0800bf07 	.word	0x0800bf07
 800bd4c:	0800be03 	.word	0x0800be03
 800bd50:	0800bf07 	.word	0x0800bf07
 800bd54:	0800bf07 	.word	0x0800bf07
 800bd58:	0800bf07 	.word	0x0800bf07
 800bd5c:	0800be43 	.word	0x0800be43
 800bd60:	0800bf07 	.word	0x0800bf07
 800bd64:	0800bf07 	.word	0x0800bf07
 800bd68:	0800bf07 	.word	0x0800bf07
 800bd6c:	0800be85 	.word	0x0800be85
 800bd70:	0800bf07 	.word	0x0800bf07
 800bd74:	0800bf07 	.word	0x0800bf07
 800bd78:	0800bf07 	.word	0x0800bf07
 800bd7c:	0800bec5 	.word	0x0800bec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 f99a 	bl	800c0c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699a      	ldr	r2, [r3, #24]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f042 0208 	orr.w	r2, r2, #8
 800bd9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	699a      	ldr	r2, [r3, #24]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0204 	bic.w	r2, r2, #4
 800bdaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6999      	ldr	r1, [r3, #24]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	619a      	str	r2, [r3, #24]
      break;
 800bdbe:	e0a5      	b.n	800bf0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 fa14 	bl	800c1f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699a      	ldr	r2, [r3, #24]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	699a      	ldr	r2, [r3, #24]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6999      	ldr	r1, [r3, #24]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	021a      	lsls	r2, r3, #8
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	619a      	str	r2, [r3, #24]
      break;
 800be00:	e084      	b.n	800bf0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fa87 	bl	800c31c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	69da      	ldr	r2, [r3, #28]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f042 0208 	orr.w	r2, r2, #8
 800be1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	69da      	ldr	r2, [r3, #28]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f022 0204 	bic.w	r2, r2, #4
 800be2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69d9      	ldr	r1, [r3, #28]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691a      	ldr	r2, [r3, #16]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	430a      	orrs	r2, r1
 800be3e:	61da      	str	r2, [r3, #28]
      break;
 800be40:	e064      	b.n	800bf0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 faf9 	bl	800c440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	69da      	ldr	r2, [r3, #28]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	69da      	ldr	r2, [r3, #28]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69d9      	ldr	r1, [r3, #28]
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	021a      	lsls	r2, r3, #8
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	61da      	str	r2, [r3, #28]
      break;
 800be82:	e043      	b.n	800bf0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68b9      	ldr	r1, [r7, #8]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fb6c 	bl	800c568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f042 0208 	orr.w	r2, r2, #8
 800be9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0204 	bic.w	r2, r2, #4
 800beae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	691a      	ldr	r2, [r3, #16]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	430a      	orrs	r2, r1
 800bec0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800bec2:	e023      	b.n	800bf0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 fbb6 	bl	800c63c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800beee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	021a      	lsls	r2, r3, #8
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	430a      	orrs	r2, r1
 800bf02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800bf04:	e002      	b.n	800bf0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	75fb      	strb	r3, [r7, #23]
      break;
 800bf0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop

0800bf20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a46      	ldr	r2, [pc, #280]	; (800c09c <TIM_Base_SetConfig+0x12c>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d017      	beq.n	800bfb8 <TIM_Base_SetConfig+0x48>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf8e:	d013      	beq.n	800bfb8 <TIM_Base_SetConfig+0x48>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a43      	ldr	r2, [pc, #268]	; (800c0a0 <TIM_Base_SetConfig+0x130>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d00f      	beq.n	800bfb8 <TIM_Base_SetConfig+0x48>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a42      	ldr	r2, [pc, #264]	; (800c0a4 <TIM_Base_SetConfig+0x134>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d00b      	beq.n	800bfb8 <TIM_Base_SetConfig+0x48>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a41      	ldr	r2, [pc, #260]	; (800c0a8 <TIM_Base_SetConfig+0x138>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d007      	beq.n	800bfb8 <TIM_Base_SetConfig+0x48>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a40      	ldr	r2, [pc, #256]	; (800c0ac <TIM_Base_SetConfig+0x13c>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d003      	beq.n	800bfb8 <TIM_Base_SetConfig+0x48>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a3f      	ldr	r2, [pc, #252]	; (800c0b0 <TIM_Base_SetConfig+0x140>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d108      	bne.n	800bfca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a33      	ldr	r2, [pc, #204]	; (800c09c <TIM_Base_SetConfig+0x12c>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d023      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfd8:	d01f      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a30      	ldr	r2, [pc, #192]	; (800c0a0 <TIM_Base_SetConfig+0x130>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d01b      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a2f      	ldr	r2, [pc, #188]	; (800c0a4 <TIM_Base_SetConfig+0x134>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d017      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a2e      	ldr	r2, [pc, #184]	; (800c0a8 <TIM_Base_SetConfig+0x138>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d013      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a2d      	ldr	r2, [pc, #180]	; (800c0ac <TIM_Base_SetConfig+0x13c>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d00f      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a2d      	ldr	r2, [pc, #180]	; (800c0b4 <TIM_Base_SetConfig+0x144>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d00b      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a2c      	ldr	r2, [pc, #176]	; (800c0b8 <TIM_Base_SetConfig+0x148>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d007      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a2b      	ldr	r2, [pc, #172]	; (800c0bc <TIM_Base_SetConfig+0x14c>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d003      	beq.n	800c01a <TIM_Base_SetConfig+0xaa>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a26      	ldr	r2, [pc, #152]	; (800c0b0 <TIM_Base_SetConfig+0x140>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d108      	bne.n	800c02c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	4313      	orrs	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	4313      	orrs	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	689a      	ldr	r2, [r3, #8]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a12      	ldr	r2, [pc, #72]	; (800c09c <TIM_Base_SetConfig+0x12c>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d013      	beq.n	800c080 <TIM_Base_SetConfig+0x110>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a14      	ldr	r2, [pc, #80]	; (800c0ac <TIM_Base_SetConfig+0x13c>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d00f      	beq.n	800c080 <TIM_Base_SetConfig+0x110>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a14      	ldr	r2, [pc, #80]	; (800c0b4 <TIM_Base_SetConfig+0x144>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d00b      	beq.n	800c080 <TIM_Base_SetConfig+0x110>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a13      	ldr	r2, [pc, #76]	; (800c0b8 <TIM_Base_SetConfig+0x148>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d007      	beq.n	800c080 <TIM_Base_SetConfig+0x110>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a12      	ldr	r2, [pc, #72]	; (800c0bc <TIM_Base_SetConfig+0x14c>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d003      	beq.n	800c080 <TIM_Base_SetConfig+0x110>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a0d      	ldr	r2, [pc, #52]	; (800c0b0 <TIM_Base_SetConfig+0x140>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d103      	bne.n	800c088 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	691a      	ldr	r2, [r3, #16]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	615a      	str	r2, [r3, #20]
}
 800c08e:	bf00      	nop
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	40012c00 	.word	0x40012c00
 800c0a0:	40000400 	.word	0x40000400
 800c0a4:	40000800 	.word	0x40000800
 800c0a8:	40000c00 	.word	0x40000c00
 800c0ac:	40013400 	.word	0x40013400
 800c0b0:	40015000 	.word	0x40015000
 800c0b4:	40014000 	.word	0x40014000
 800c0b8:	40014400 	.word	0x40014400
 800c0bc:	40014800 	.word	0x40014800

0800c0c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a1b      	ldr	r3, [r3, #32]
 800c0ce:	f023 0201 	bic.w	r2, r3, #1
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f023 0303 	bic.w	r3, r3, #3
 800c0fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	4313      	orrs	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f023 0302 	bic.w	r3, r3, #2
 800c10c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	4313      	orrs	r3, r2
 800c116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a30      	ldr	r2, [pc, #192]	; (800c1dc <TIM_OC1_SetConfig+0x11c>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d013      	beq.n	800c148 <TIM_OC1_SetConfig+0x88>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a2f      	ldr	r2, [pc, #188]	; (800c1e0 <TIM_OC1_SetConfig+0x120>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d00f      	beq.n	800c148 <TIM_OC1_SetConfig+0x88>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a2e      	ldr	r2, [pc, #184]	; (800c1e4 <TIM_OC1_SetConfig+0x124>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d00b      	beq.n	800c148 <TIM_OC1_SetConfig+0x88>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a2d      	ldr	r2, [pc, #180]	; (800c1e8 <TIM_OC1_SetConfig+0x128>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d007      	beq.n	800c148 <TIM_OC1_SetConfig+0x88>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a2c      	ldr	r2, [pc, #176]	; (800c1ec <TIM_OC1_SetConfig+0x12c>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d003      	beq.n	800c148 <TIM_OC1_SetConfig+0x88>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a2b      	ldr	r2, [pc, #172]	; (800c1f0 <TIM_OC1_SetConfig+0x130>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d10c      	bne.n	800c162 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	f023 0308 	bic.w	r3, r3, #8
 800c14e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	4313      	orrs	r3, r2
 800c158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f023 0304 	bic.w	r3, r3, #4
 800c160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a1d      	ldr	r2, [pc, #116]	; (800c1dc <TIM_OC1_SetConfig+0x11c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d013      	beq.n	800c192 <TIM_OC1_SetConfig+0xd2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a1c      	ldr	r2, [pc, #112]	; (800c1e0 <TIM_OC1_SetConfig+0x120>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d00f      	beq.n	800c192 <TIM_OC1_SetConfig+0xd2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a1b      	ldr	r2, [pc, #108]	; (800c1e4 <TIM_OC1_SetConfig+0x124>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d00b      	beq.n	800c192 <TIM_OC1_SetConfig+0xd2>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a1a      	ldr	r2, [pc, #104]	; (800c1e8 <TIM_OC1_SetConfig+0x128>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d007      	beq.n	800c192 <TIM_OC1_SetConfig+0xd2>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a19      	ldr	r2, [pc, #100]	; (800c1ec <TIM_OC1_SetConfig+0x12c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d003      	beq.n	800c192 <TIM_OC1_SetConfig+0xd2>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a18      	ldr	r2, [pc, #96]	; (800c1f0 <TIM_OC1_SetConfig+0x130>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d111      	bne.n	800c1b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	697a      	ldr	r2, [r7, #20]
 800c1ce:	621a      	str	r2, [r3, #32]
}
 800c1d0:	bf00      	nop
 800c1d2:	371c      	adds	r7, #28
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	40012c00 	.word	0x40012c00
 800c1e0:	40013400 	.word	0x40013400
 800c1e4:	40014000 	.word	0x40014000
 800c1e8:	40014400 	.word	0x40014400
 800c1ec:	40014800 	.word	0x40014800
 800c1f0:	40015000 	.word	0x40015000

0800c1f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	f023 0210 	bic.w	r2, r3, #16
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	f023 0320 	bic.w	r3, r3, #32
 800c242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	011b      	lsls	r3, r3, #4
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a2c      	ldr	r2, [pc, #176]	; (800c304 <TIM_OC2_SetConfig+0x110>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d007      	beq.n	800c268 <TIM_OC2_SetConfig+0x74>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a2b      	ldr	r2, [pc, #172]	; (800c308 <TIM_OC2_SetConfig+0x114>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d003      	beq.n	800c268 <TIM_OC2_SetConfig+0x74>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a2a      	ldr	r2, [pc, #168]	; (800c30c <TIM_OC2_SetConfig+0x118>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d10d      	bne.n	800c284 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a1f      	ldr	r2, [pc, #124]	; (800c304 <TIM_OC2_SetConfig+0x110>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d013      	beq.n	800c2b4 <TIM_OC2_SetConfig+0xc0>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a1e      	ldr	r2, [pc, #120]	; (800c308 <TIM_OC2_SetConfig+0x114>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d00f      	beq.n	800c2b4 <TIM_OC2_SetConfig+0xc0>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a1e      	ldr	r2, [pc, #120]	; (800c310 <TIM_OC2_SetConfig+0x11c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d00b      	beq.n	800c2b4 <TIM_OC2_SetConfig+0xc0>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <TIM_OC2_SetConfig+0x120>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d007      	beq.n	800c2b4 <TIM_OC2_SetConfig+0xc0>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a1c      	ldr	r2, [pc, #112]	; (800c318 <TIM_OC2_SetConfig+0x124>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d003      	beq.n	800c2b4 <TIM_OC2_SetConfig+0xc0>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a17      	ldr	r2, [pc, #92]	; (800c30c <TIM_OC2_SetConfig+0x118>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d113      	bne.n	800c2dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	697a      	ldr	r2, [r7, #20]
 800c2f4:	621a      	str	r2, [r3, #32]
}
 800c2f6:	bf00      	nop
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	40012c00 	.word	0x40012c00
 800c308:	40013400 	.word	0x40013400
 800c30c:	40015000 	.word	0x40015000
 800c310:	40014000 	.word	0x40014000
 800c314:	40014400 	.word	0x40014400
 800c318:	40014800 	.word	0x40014800

0800c31c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a1b      	ldr	r3, [r3, #32]
 800c336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	69db      	ldr	r3, [r3, #28]
 800c342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f023 0303 	bic.w	r3, r3, #3
 800c356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4313      	orrs	r3, r2
 800c360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	021b      	lsls	r3, r3, #8
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4313      	orrs	r3, r2
 800c374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a2b      	ldr	r2, [pc, #172]	; (800c428 <TIM_OC3_SetConfig+0x10c>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d007      	beq.n	800c38e <TIM_OC3_SetConfig+0x72>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a2a      	ldr	r2, [pc, #168]	; (800c42c <TIM_OC3_SetConfig+0x110>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d003      	beq.n	800c38e <TIM_OC3_SetConfig+0x72>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a29      	ldr	r2, [pc, #164]	; (800c430 <TIM_OC3_SetConfig+0x114>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d10d      	bne.n	800c3aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	021b      	lsls	r3, r3, #8
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4a1e      	ldr	r2, [pc, #120]	; (800c428 <TIM_OC3_SetConfig+0x10c>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d013      	beq.n	800c3da <TIM_OC3_SetConfig+0xbe>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a1d      	ldr	r2, [pc, #116]	; (800c42c <TIM_OC3_SetConfig+0x110>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d00f      	beq.n	800c3da <TIM_OC3_SetConfig+0xbe>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a1d      	ldr	r2, [pc, #116]	; (800c434 <TIM_OC3_SetConfig+0x118>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d00b      	beq.n	800c3da <TIM_OC3_SetConfig+0xbe>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4a1c      	ldr	r2, [pc, #112]	; (800c438 <TIM_OC3_SetConfig+0x11c>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d007      	beq.n	800c3da <TIM_OC3_SetConfig+0xbe>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a1b      	ldr	r2, [pc, #108]	; (800c43c <TIM_OC3_SetConfig+0x120>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d003      	beq.n	800c3da <TIM_OC3_SetConfig+0xbe>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4a16      	ldr	r2, [pc, #88]	; (800c430 <TIM_OC3_SetConfig+0x114>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d113      	bne.n	800c402 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	011b      	lsls	r3, r3, #4
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	011b      	lsls	r3, r3, #4
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	685a      	ldr	r2, [r3, #4]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	621a      	str	r2, [r3, #32]
}
 800c41c:	bf00      	nop
 800c41e:	371c      	adds	r7, #28
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr
 800c428:	40012c00 	.word	0x40012c00
 800c42c:	40013400 	.word	0x40013400
 800c430:	40015000 	.word	0x40015000
 800c434:	40014000 	.word	0x40014000
 800c438:	40014400 	.word	0x40014400
 800c43c:	40014800 	.word	0x40014800

0800c440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c440:	b480      	push	{r7}
 800c442:	b087      	sub	sp, #28
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c46e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	021b      	lsls	r3, r3, #8
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	4313      	orrs	r3, r2
 800c486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c48e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	031b      	lsls	r3, r3, #12
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	4313      	orrs	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a2c      	ldr	r2, [pc, #176]	; (800c550 <TIM_OC4_SetConfig+0x110>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d007      	beq.n	800c4b4 <TIM_OC4_SetConfig+0x74>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a2b      	ldr	r2, [pc, #172]	; (800c554 <TIM_OC4_SetConfig+0x114>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d003      	beq.n	800c4b4 <TIM_OC4_SetConfig+0x74>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a2a      	ldr	r2, [pc, #168]	; (800c558 <TIM_OC4_SetConfig+0x118>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d10d      	bne.n	800c4d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c4ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	031b      	lsls	r3, r3, #12
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a1f      	ldr	r2, [pc, #124]	; (800c550 <TIM_OC4_SetConfig+0x110>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d013      	beq.n	800c500 <TIM_OC4_SetConfig+0xc0>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a1e      	ldr	r2, [pc, #120]	; (800c554 <TIM_OC4_SetConfig+0x114>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d00f      	beq.n	800c500 <TIM_OC4_SetConfig+0xc0>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a1e      	ldr	r2, [pc, #120]	; (800c55c <TIM_OC4_SetConfig+0x11c>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d00b      	beq.n	800c500 <TIM_OC4_SetConfig+0xc0>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a1d      	ldr	r2, [pc, #116]	; (800c560 <TIM_OC4_SetConfig+0x120>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d007      	beq.n	800c500 <TIM_OC4_SetConfig+0xc0>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a1c      	ldr	r2, [pc, #112]	; (800c564 <TIM_OC4_SetConfig+0x124>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d003      	beq.n	800c500 <TIM_OC4_SetConfig+0xc0>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a17      	ldr	r2, [pc, #92]	; (800c558 <TIM_OC4_SetConfig+0x118>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d113      	bne.n	800c528 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c506:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c50e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	695b      	ldr	r3, [r3, #20]
 800c514:	019b      	lsls	r3, r3, #6
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	4313      	orrs	r3, r2
 800c51a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	019b      	lsls	r3, r3, #6
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	4313      	orrs	r3, r2
 800c526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	621a      	str	r2, [r3, #32]
}
 800c542:	bf00      	nop
 800c544:	371c      	adds	r7, #28
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	40012c00 	.word	0x40012c00
 800c554:	40013400 	.word	0x40013400
 800c558:	40015000 	.word	0x40015000
 800c55c:	40014000 	.word	0x40014000
 800c560:	40014400 	.word	0x40014400
 800c564:	40014800 	.word	0x40014800

0800c568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c568:	b480      	push	{r7}
 800c56a:	b087      	sub	sp, #28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c5ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	041b      	lsls	r3, r3, #16
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a19      	ldr	r2, [pc, #100]	; (800c624 <TIM_OC5_SetConfig+0xbc>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d013      	beq.n	800c5ea <TIM_OC5_SetConfig+0x82>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a18      	ldr	r2, [pc, #96]	; (800c628 <TIM_OC5_SetConfig+0xc0>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d00f      	beq.n	800c5ea <TIM_OC5_SetConfig+0x82>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a17      	ldr	r2, [pc, #92]	; (800c62c <TIM_OC5_SetConfig+0xc4>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d00b      	beq.n	800c5ea <TIM_OC5_SetConfig+0x82>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a16      	ldr	r2, [pc, #88]	; (800c630 <TIM_OC5_SetConfig+0xc8>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d007      	beq.n	800c5ea <TIM_OC5_SetConfig+0x82>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a15      	ldr	r2, [pc, #84]	; (800c634 <TIM_OC5_SetConfig+0xcc>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d003      	beq.n	800c5ea <TIM_OC5_SetConfig+0x82>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a14      	ldr	r2, [pc, #80]	; (800c638 <TIM_OC5_SetConfig+0xd0>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d109      	bne.n	800c5fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	021b      	lsls	r3, r3, #8
 800c5f8:	697a      	ldr	r2, [r7, #20]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	621a      	str	r2, [r3, #32]
}
 800c618:	bf00      	nop
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	40012c00 	.word	0x40012c00
 800c628:	40013400 	.word	0x40013400
 800c62c:	40014000 	.word	0x40014000
 800c630:	40014400 	.word	0x40014400
 800c634:	40014800 	.word	0x40014800
 800c638:	40015000 	.word	0x40015000

0800c63c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a1b      	ldr	r3, [r3, #32]
 800c64a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c66a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	021b      	lsls	r3, r3, #8
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	4313      	orrs	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	051b      	lsls	r3, r3, #20
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a1a      	ldr	r2, [pc, #104]	; (800c6fc <TIM_OC6_SetConfig+0xc0>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d013      	beq.n	800c6c0 <TIM_OC6_SetConfig+0x84>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a19      	ldr	r2, [pc, #100]	; (800c700 <TIM_OC6_SetConfig+0xc4>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d00f      	beq.n	800c6c0 <TIM_OC6_SetConfig+0x84>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a18      	ldr	r2, [pc, #96]	; (800c704 <TIM_OC6_SetConfig+0xc8>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00b      	beq.n	800c6c0 <TIM_OC6_SetConfig+0x84>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a17      	ldr	r2, [pc, #92]	; (800c708 <TIM_OC6_SetConfig+0xcc>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d007      	beq.n	800c6c0 <TIM_OC6_SetConfig+0x84>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a16      	ldr	r2, [pc, #88]	; (800c70c <TIM_OC6_SetConfig+0xd0>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d003      	beq.n	800c6c0 <TIM_OC6_SetConfig+0x84>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a15      	ldr	r2, [pc, #84]	; (800c710 <TIM_OC6_SetConfig+0xd4>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d109      	bne.n	800c6d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	029b      	lsls	r3, r3, #10
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	621a      	str	r2, [r3, #32]
}
 800c6ee:	bf00      	nop
 800c6f0:	371c      	adds	r7, #28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	40012c00 	.word	0x40012c00
 800c700:	40013400 	.word	0x40013400
 800c704:	40014000 	.word	0x40014000
 800c708:	40014400 	.word	0x40014400
 800c70c:	40014800 	.word	0x40014800
 800c710:	40015000 	.word	0x40015000

0800c714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	f003 031f 	and.w	r3, r3, #31
 800c726:	2201      	movs	r2, #1
 800c728:	fa02 f303 	lsl.w	r3, r2, r3
 800c72c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6a1a      	ldr	r2, [r3, #32]
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	43db      	mvns	r3, r3
 800c736:	401a      	ands	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6a1a      	ldr	r2, [r3, #32]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f003 031f 	and.w	r3, r3, #31
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	fa01 f303 	lsl.w	r3, r1, r3
 800c74c:	431a      	orrs	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	621a      	str	r2, [r3, #32]
}
 800c752:	bf00      	nop
 800c754:	371c      	adds	r7, #28
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
	...

0800c760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c770:	2b01      	cmp	r3, #1
 800c772:	d101      	bne.n	800c778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c774:	2302      	movs	r3, #2
 800c776:	e074      	b.n	800c862 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a34      	ldr	r2, [pc, #208]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d009      	beq.n	800c7b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a33      	ldr	r2, [pc, #204]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d004      	beq.n	800c7b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a31      	ldr	r2, [pc, #196]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d108      	bne.n	800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c7bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a21      	ldr	r2, [pc, #132]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d022      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7f8:	d01d      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a1f      	ldr	r2, [pc, #124]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d018      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a1d      	ldr	r2, [pc, #116]	; (800c880 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d013      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a1c      	ldr	r2, [pc, #112]	; (800c884 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d00e      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a15      	ldr	r2, [pc, #84]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d009      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a18      	ldr	r2, [pc, #96]	; (800c888 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d004      	beq.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a11      	ldr	r2, [pc, #68]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d10c      	bne.n	800c850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c83c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	4313      	orrs	r3, r2
 800c846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	40012c00 	.word	0x40012c00
 800c874:	40013400 	.word	0x40013400
 800c878:	40015000 	.word	0x40015000
 800c87c:	40000400 	.word	0x40000400
 800c880:	40000800 	.word	0x40000800
 800c884:	40000c00 	.word	0x40000c00
 800c888:	40014000 	.word	0x40014000

0800c88c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	e042      	b.n	800c9b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7fa fea3 	bl	8007688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2224      	movs	r2, #36	; 0x24
 800c946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f022 0201 	bic.w	r2, r2, #1
 800c958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fbc4 	bl	800d0e8 <UART_SetConfig>
 800c960:	4603      	mov	r3, r0
 800c962:	2b01      	cmp	r3, #1
 800c964:	d101      	bne.n	800c96a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e022      	b.n	800c9b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 feb4 	bl	800d6e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	689a      	ldr	r2, [r3, #8]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f042 0201 	orr.w	r2, r2, #1
 800c9a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 ff3b 	bl	800d824 <UART_CheckIdleState>
 800c9ae:	4603      	mov	r3, r0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08a      	sub	sp, #40	; 0x28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9cc:	2b20      	cmp	r3, #32
 800c9ce:	d142      	bne.n	800ca56 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d002      	beq.n	800c9dc <HAL_UART_Receive_IT+0x24>
 800c9d6:	88fb      	ldrh	r3, [r7, #6]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e03b      	b.n	800ca58 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d101      	bne.n	800c9ee <HAL_UART_Receive_IT+0x36>
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	e034      	b.n	800ca58 <HAL_UART_Receive_IT+0xa0>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a17      	ldr	r2, [pc, #92]	; (800ca60 <HAL_UART_Receive_IT+0xa8>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d01f      	beq.n	800ca46 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d018      	beq.n	800ca46 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	613b      	str	r3, [r7, #16]
   return(result);
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	623b      	str	r3, [r7, #32]
 800ca34:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca36:	69f9      	ldr	r1, [r7, #28]
 800ca38:	6a3a      	ldr	r2, [r7, #32]
 800ca3a:	e841 2300 	strex	r3, r2, [r1]
 800ca3e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e6      	bne.n	800ca14 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ca46:	88fb      	ldrh	r3, [r7, #6]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	68b9      	ldr	r1, [r7, #8]
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f000 fffd 	bl	800da4c <UART_Start_Receive_IT>
 800ca52:	4603      	mov	r3, r0
 800ca54:	e000      	b.n	800ca58 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ca56:	2302      	movs	r3, #2
  }
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3728      	adds	r7, #40	; 0x28
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	40008000 	.word	0x40008000

0800ca64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b0ba      	sub	sp, #232	; 0xe8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ca8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ca92:	4013      	ands	r3, r2
 800ca94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ca98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d11b      	bne.n	800cad8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800caa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa4:	f003 0320 	and.w	r3, r3, #32
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d015      	beq.n	800cad8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800caac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab0:	f003 0320 	and.w	r3, r3, #32
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d105      	bne.n	800cac4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cabc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d009      	beq.n	800cad8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 82d6 	beq.w	800d07a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	4798      	blx	r3
      }
      return;
 800cad6:	e2d0      	b.n	800d07a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 811f 	beq.w	800cd20 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cae2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cae6:	4b8b      	ldr	r3, [pc, #556]	; (800cd14 <HAL_UART_IRQHandler+0x2b0>)
 800cae8:	4013      	ands	r3, r2
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800caee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800caf2:	4b89      	ldr	r3, [pc, #548]	; (800cd18 <HAL_UART_IRQHandler+0x2b4>)
 800caf4:	4013      	ands	r3, r2
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f000 8112 	beq.w	800cd20 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d011      	beq.n	800cb2c <HAL_UART_IRQHandler+0xc8>
 800cb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00b      	beq.n	800cb2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb22:	f043 0201 	orr.w	r2, r3, #1
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d011      	beq.n	800cb5c <HAL_UART_IRQHandler+0xf8>
 800cb38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00b      	beq.n	800cb5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2202      	movs	r2, #2
 800cb4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb52:	f043 0204 	orr.w	r2, r3, #4
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d011      	beq.n	800cb8c <HAL_UART_IRQHandler+0x128>
 800cb68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00b      	beq.n	800cb8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2204      	movs	r2, #4
 800cb7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb82:	f043 0202 	orr.w	r2, r3, #2
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb90:	f003 0308 	and.w	r3, r3, #8
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d017      	beq.n	800cbc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb9c:	f003 0320 	and.w	r3, r3, #32
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cba4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cba8:	4b5a      	ldr	r3, [pc, #360]	; (800cd14 <HAL_UART_IRQHandler+0x2b0>)
 800cbaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00b      	beq.n	800cbc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2208      	movs	r2, #8
 800cbb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbbe:	f043 0208 	orr.w	r2, r3, #8
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d012      	beq.n	800cbfa <HAL_UART_IRQHandler+0x196>
 800cbd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00c      	beq.n	800cbfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf0:	f043 0220 	orr.w	r2, r3, #32
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 823c 	beq.w	800d07e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc0a:	f003 0320 	and.w	r3, r3, #32
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d013      	beq.n	800cc3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc16:	f003 0320 	and.w	r3, r3, #32
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d105      	bne.n	800cc2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d007      	beq.n	800cc3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc4e:	2b40      	cmp	r3, #64	; 0x40
 800cc50:	d005      	beq.n	800cc5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d04f      	beq.n	800ccfe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f001 f81e 	bl	800dca0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	689b      	ldr	r3, [r3, #8]
 800cc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6e:	2b40      	cmp	r3, #64	; 0x40
 800cc70:	d141      	bne.n	800ccf6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3308      	adds	r3, #8
 800cc78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc80:	e853 3f00 	ldrex	r3, [r3]
 800cc84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cc88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cc9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ccaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ccae:	e841 2300 	strex	r3, r2, [r1]
 800ccb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ccb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1d9      	bne.n	800cc72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d013      	beq.n	800ccee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccca:	4a14      	ldr	r2, [pc, #80]	; (800cd1c <HAL_UART_IRQHandler+0x2b8>)
 800cccc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fc fa8e 	bl	80091f4 <HAL_DMA_Abort_IT>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d017      	beq.n	800cd0e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cce8:	4610      	mov	r0, r2
 800ccea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccec:	e00f      	b.n	800cd0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f9e4 	bl	800d0bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccf4:	e00b      	b.n	800cd0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f9e0 	bl	800d0bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccfc:	e007      	b.n	800cd0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f9dc 	bl	800d0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cd0c:	e1b7      	b.n	800d07e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd0e:	bf00      	nop
    return;
 800cd10:	e1b5      	b.n	800d07e <HAL_UART_IRQHandler+0x61a>
 800cd12:	bf00      	nop
 800cd14:	10000001 	.word	0x10000001
 800cd18:	04000120 	.word	0x04000120
 800cd1c:	0800dd6d 	.word	0x0800dd6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	f040 814a 	bne.w	800cfbe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd2e:	f003 0310 	and.w	r3, r3, #16
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f000 8143 	beq.w	800cfbe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd3c:	f003 0310 	and.w	r3, r3, #16
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 813c 	beq.w	800cfbe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2210      	movs	r2, #16
 800cd4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd58:	2b40      	cmp	r3, #64	; 0x40
 800cd5a:	f040 80b5 	bne.w	800cec8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cd6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 8187 	beq.w	800d082 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	f080 817f 	bcs.w	800d082 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cd8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 0320 	and.w	r3, r3, #32
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f040 8086 	bne.w	800ceac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cdac:	e853 3f00 	ldrex	r3, [r3]
 800cdb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cdb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cdca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cdce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cdd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cdda:	e841 2300 	strex	r3, r2, [r1]
 800cdde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cde2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1da      	bne.n	800cda0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3308      	adds	r3, #8
 800cdf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdf4:	e853 3f00 	ldrex	r3, [r3]
 800cdf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cdfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdfc:	f023 0301 	bic.w	r3, r3, #1
 800ce00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3308      	adds	r3, #8
 800ce0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ce0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce1a:	e841 2300 	strex	r3, r2, [r1]
 800ce1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ce20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1e1      	bne.n	800cdea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce30:	e853 3f00 	ldrex	r3, [r3]
 800ce34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ce36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3308      	adds	r3, #8
 800ce46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ce4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ce4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce52:	e841 2300 	strex	r3, r2, [r1]
 800ce56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ce58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d1e3      	bne.n	800ce26 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2220      	movs	r2, #32
 800ce62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce74:	e853 3f00 	ldrex	r3, [r3]
 800ce78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce7c:	f023 0310 	bic.w	r3, r3, #16
 800ce80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1e4      	bne.n	800ce6c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fc f94b 	bl	8009142 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f905 	bl	800d0d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cec6:	e0dc      	b.n	800d082 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 80ce 	beq.w	800d086 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ceea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f000 80c9 	beq.w	800d086 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cf16:	647b      	str	r3, [r7, #68]	; 0x44
 800cf18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e4      	bne.n	800cef4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3308      	adds	r3, #8
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	e853 3f00 	ldrex	r3, [r3]
 800cf38:	623b      	str	r3, [r7, #32]
   return(result);
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf40:	f023 0301 	bic.w	r3, r3, #1
 800cf44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cf52:	633a      	str	r2, [r7, #48]	; 0x30
 800cf54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf5a:	e841 2300 	strex	r3, r2, [r1]
 800cf5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1e1      	bne.n	800cf2a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2220      	movs	r2, #32
 800cf6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	e853 3f00 	ldrex	r3, [r3]
 800cf86:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f023 0310 	bic.w	r3, r3, #16
 800cf8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cf9c:	61fb      	str	r3, [r7, #28]
 800cf9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa0:	69b9      	ldr	r1, [r7, #24]
 800cfa2:	69fa      	ldr	r2, [r7, #28]
 800cfa4:	e841 2300 	strex	r3, r2, [r1]
 800cfa8:	617b      	str	r3, [r7, #20]
   return(result);
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1e4      	bne.n	800cf7a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cfb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f88a 	bl	800d0d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfbc:	e063      	b.n	800d086 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cfbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00e      	beq.n	800cfe8 <HAL_UART_IRQHandler+0x584>
 800cfca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d008      	beq.n	800cfe8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cfde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f001 fb61 	bl	800e6a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfe6:	e051      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cfe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d014      	beq.n	800d01e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d105      	bne.n	800d00c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d008      	beq.n	800d01e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d010:	2b00      	cmp	r3, #0
 800d012:	d03a      	beq.n	800d08a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	4798      	blx	r3
    }
    return;
 800d01c:	e035      	b.n	800d08a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d026:	2b00      	cmp	r3, #0
 800d028:	d009      	beq.n	800d03e <HAL_UART_IRQHandler+0x5da>
 800d02a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 feae 	bl	800dd98 <UART_EndTransmit_IT>
    return;
 800d03c:	e026      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d046:	2b00      	cmp	r3, #0
 800d048:	d009      	beq.n	800d05e <HAL_UART_IRQHandler+0x5fa>
 800d04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d04e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d052:	2b00      	cmp	r3, #0
 800d054:	d003      	beq.n	800d05e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f001 fb3a 	bl	800e6d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d05c:	e016      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d010      	beq.n	800d08c <HAL_UART_IRQHandler+0x628>
 800d06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	da0c      	bge.n	800d08c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 fb22 	bl	800e6bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d078:	e008      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
      return;
 800d07a:	bf00      	nop
 800d07c:	e006      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
    return;
 800d07e:	bf00      	nop
 800d080:	e004      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
      return;
 800d082:	bf00      	nop
 800d084:	e002      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
      return;
 800d086:	bf00      	nop
 800d088:	e000      	b.n	800d08c <HAL_UART_IRQHandler+0x628>
    return;
 800d08a:	bf00      	nop
  }
}
 800d08c:	37e8      	adds	r7, #232	; 0xe8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop

0800d094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d0dc:	bf00      	nop
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0ec:	b08c      	sub	sp, #48	; 0x30
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	431a      	orrs	r2, r3
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	431a      	orrs	r2, r3
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	69db      	ldr	r3, [r3, #28]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	4baa      	ldr	r3, [pc, #680]	; (800d3c0 <UART_SetConfig+0x2d8>)
 800d118:	4013      	ands	r3, r2
 800d11a:	697a      	ldr	r2, [r7, #20]
 800d11c:	6812      	ldr	r2, [r2, #0]
 800d11e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d120:	430b      	orrs	r3, r1
 800d122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	68da      	ldr	r2, [r3, #12]
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	430a      	orrs	r2, r1
 800d138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	699b      	ldr	r3, [r3, #24]
 800d13e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a9f      	ldr	r2, [pc, #636]	; (800d3c4 <UART_SetConfig+0x2dc>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d004      	beq.n	800d154 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	6a1b      	ldr	r3, [r3, #32]
 800d14e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d150:	4313      	orrs	r3, r2
 800d152:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d15e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	6812      	ldr	r2, [r2, #0]
 800d166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d168:	430b      	orrs	r3, r1
 800d16a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d172:	f023 010f 	bic.w	r1, r3, #15
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	430a      	orrs	r2, r1
 800d180:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a90      	ldr	r2, [pc, #576]	; (800d3c8 <UART_SetConfig+0x2e0>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d125      	bne.n	800d1d8 <UART_SetConfig+0xf0>
 800d18c:	4b8f      	ldr	r3, [pc, #572]	; (800d3cc <UART_SetConfig+0x2e4>)
 800d18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d192:	f003 0303 	and.w	r3, r3, #3
 800d196:	2b03      	cmp	r3, #3
 800d198:	d81a      	bhi.n	800d1d0 <UART_SetConfig+0xe8>
 800d19a:	a201      	add	r2, pc, #4	; (adr r2, 800d1a0 <UART_SetConfig+0xb8>)
 800d19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a0:	0800d1b1 	.word	0x0800d1b1
 800d1a4:	0800d1c1 	.word	0x0800d1c1
 800d1a8:	0800d1b9 	.word	0x0800d1b9
 800d1ac:	0800d1c9 	.word	0x0800d1c9
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1b6:	e116      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1be:	e112      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d1c0:	2304      	movs	r3, #4
 800d1c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1c6:	e10e      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d1c8:	2308      	movs	r3, #8
 800d1ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1ce:	e10a      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d1d0:	2310      	movs	r3, #16
 800d1d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1d6:	e106      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a7c      	ldr	r2, [pc, #496]	; (800d3d0 <UART_SetConfig+0x2e8>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d138      	bne.n	800d254 <UART_SetConfig+0x16c>
 800d1e2:	4b7a      	ldr	r3, [pc, #488]	; (800d3cc <UART_SetConfig+0x2e4>)
 800d1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1e8:	f003 030c 	and.w	r3, r3, #12
 800d1ec:	2b0c      	cmp	r3, #12
 800d1ee:	d82d      	bhi.n	800d24c <UART_SetConfig+0x164>
 800d1f0:	a201      	add	r2, pc, #4	; (adr r2, 800d1f8 <UART_SetConfig+0x110>)
 800d1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f6:	bf00      	nop
 800d1f8:	0800d22d 	.word	0x0800d22d
 800d1fc:	0800d24d 	.word	0x0800d24d
 800d200:	0800d24d 	.word	0x0800d24d
 800d204:	0800d24d 	.word	0x0800d24d
 800d208:	0800d23d 	.word	0x0800d23d
 800d20c:	0800d24d 	.word	0x0800d24d
 800d210:	0800d24d 	.word	0x0800d24d
 800d214:	0800d24d 	.word	0x0800d24d
 800d218:	0800d235 	.word	0x0800d235
 800d21c:	0800d24d 	.word	0x0800d24d
 800d220:	0800d24d 	.word	0x0800d24d
 800d224:	0800d24d 	.word	0x0800d24d
 800d228:	0800d245 	.word	0x0800d245
 800d22c:	2300      	movs	r3, #0
 800d22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d232:	e0d8      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d234:	2302      	movs	r3, #2
 800d236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d23a:	e0d4      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d23c:	2304      	movs	r3, #4
 800d23e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d242:	e0d0      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d244:	2308      	movs	r3, #8
 800d246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d24a:	e0cc      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d24c:	2310      	movs	r3, #16
 800d24e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d252:	e0c8      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a5e      	ldr	r2, [pc, #376]	; (800d3d4 <UART_SetConfig+0x2ec>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d125      	bne.n	800d2aa <UART_SetConfig+0x1c2>
 800d25e:	4b5b      	ldr	r3, [pc, #364]	; (800d3cc <UART_SetConfig+0x2e4>)
 800d260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d264:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d268:	2b30      	cmp	r3, #48	; 0x30
 800d26a:	d016      	beq.n	800d29a <UART_SetConfig+0x1b2>
 800d26c:	2b30      	cmp	r3, #48	; 0x30
 800d26e:	d818      	bhi.n	800d2a2 <UART_SetConfig+0x1ba>
 800d270:	2b20      	cmp	r3, #32
 800d272:	d00a      	beq.n	800d28a <UART_SetConfig+0x1a2>
 800d274:	2b20      	cmp	r3, #32
 800d276:	d814      	bhi.n	800d2a2 <UART_SetConfig+0x1ba>
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <UART_SetConfig+0x19a>
 800d27c:	2b10      	cmp	r3, #16
 800d27e:	d008      	beq.n	800d292 <UART_SetConfig+0x1aa>
 800d280:	e00f      	b.n	800d2a2 <UART_SetConfig+0x1ba>
 800d282:	2300      	movs	r3, #0
 800d284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d288:	e0ad      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d28a:	2302      	movs	r3, #2
 800d28c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d290:	e0a9      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d292:	2304      	movs	r3, #4
 800d294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d298:	e0a5      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d29a:	2308      	movs	r3, #8
 800d29c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2a0:	e0a1      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2a8:	e09d      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a4a      	ldr	r2, [pc, #296]	; (800d3d8 <UART_SetConfig+0x2f0>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d125      	bne.n	800d300 <UART_SetConfig+0x218>
 800d2b4:	4b45      	ldr	r3, [pc, #276]	; (800d3cc <UART_SetConfig+0x2e4>)
 800d2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d2be:	2bc0      	cmp	r3, #192	; 0xc0
 800d2c0:	d016      	beq.n	800d2f0 <UART_SetConfig+0x208>
 800d2c2:	2bc0      	cmp	r3, #192	; 0xc0
 800d2c4:	d818      	bhi.n	800d2f8 <UART_SetConfig+0x210>
 800d2c6:	2b80      	cmp	r3, #128	; 0x80
 800d2c8:	d00a      	beq.n	800d2e0 <UART_SetConfig+0x1f8>
 800d2ca:	2b80      	cmp	r3, #128	; 0x80
 800d2cc:	d814      	bhi.n	800d2f8 <UART_SetConfig+0x210>
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d002      	beq.n	800d2d8 <UART_SetConfig+0x1f0>
 800d2d2:	2b40      	cmp	r3, #64	; 0x40
 800d2d4:	d008      	beq.n	800d2e8 <UART_SetConfig+0x200>
 800d2d6:	e00f      	b.n	800d2f8 <UART_SetConfig+0x210>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2de:	e082      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2e6:	e07e      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d2e8:	2304      	movs	r3, #4
 800d2ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2ee:	e07a      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d2f0:	2308      	movs	r3, #8
 800d2f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2f6:	e076      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d2f8:	2310      	movs	r3, #16
 800d2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2fe:	e072      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a35      	ldr	r2, [pc, #212]	; (800d3dc <UART_SetConfig+0x2f4>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d12a      	bne.n	800d360 <UART_SetConfig+0x278>
 800d30a:	4b30      	ldr	r3, [pc, #192]	; (800d3cc <UART_SetConfig+0x2e4>)
 800d30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d318:	d01a      	beq.n	800d350 <UART_SetConfig+0x268>
 800d31a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d31e:	d81b      	bhi.n	800d358 <UART_SetConfig+0x270>
 800d320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d324:	d00c      	beq.n	800d340 <UART_SetConfig+0x258>
 800d326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d32a:	d815      	bhi.n	800d358 <UART_SetConfig+0x270>
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d003      	beq.n	800d338 <UART_SetConfig+0x250>
 800d330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d334:	d008      	beq.n	800d348 <UART_SetConfig+0x260>
 800d336:	e00f      	b.n	800d358 <UART_SetConfig+0x270>
 800d338:	2300      	movs	r3, #0
 800d33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d33e:	e052      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d340:	2302      	movs	r3, #2
 800d342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d346:	e04e      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d348:	2304      	movs	r3, #4
 800d34a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d34e:	e04a      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d350:	2308      	movs	r3, #8
 800d352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d356:	e046      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d358:	2310      	movs	r3, #16
 800d35a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d35e:	e042      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a17      	ldr	r2, [pc, #92]	; (800d3c4 <UART_SetConfig+0x2dc>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d13a      	bne.n	800d3e0 <UART_SetConfig+0x2f8>
 800d36a:	4b18      	ldr	r3, [pc, #96]	; (800d3cc <UART_SetConfig+0x2e4>)
 800d36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d378:	d01a      	beq.n	800d3b0 <UART_SetConfig+0x2c8>
 800d37a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d37e:	d81b      	bhi.n	800d3b8 <UART_SetConfig+0x2d0>
 800d380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d384:	d00c      	beq.n	800d3a0 <UART_SetConfig+0x2b8>
 800d386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d38a:	d815      	bhi.n	800d3b8 <UART_SetConfig+0x2d0>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <UART_SetConfig+0x2b0>
 800d390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d394:	d008      	beq.n	800d3a8 <UART_SetConfig+0x2c0>
 800d396:	e00f      	b.n	800d3b8 <UART_SetConfig+0x2d0>
 800d398:	2300      	movs	r3, #0
 800d39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d39e:	e022      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3a6:	e01e      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d3a8:	2304      	movs	r3, #4
 800d3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3ae:	e01a      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d3b0:	2308      	movs	r3, #8
 800d3b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3b6:	e016      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d3b8:	2310      	movs	r3, #16
 800d3ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3be:	e012      	b.n	800d3e6 <UART_SetConfig+0x2fe>
 800d3c0:	cfff69f3 	.word	0xcfff69f3
 800d3c4:	40008000 	.word	0x40008000
 800d3c8:	40013800 	.word	0x40013800
 800d3cc:	40021000 	.word	0x40021000
 800d3d0:	40004400 	.word	0x40004400
 800d3d4:	40004800 	.word	0x40004800
 800d3d8:	40004c00 	.word	0x40004c00
 800d3dc:	40005000 	.word	0x40005000
 800d3e0:	2310      	movs	r3, #16
 800d3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4aae      	ldr	r2, [pc, #696]	; (800d6a4 <UART_SetConfig+0x5bc>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	f040 8097 	bne.w	800d520 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3f6:	2b08      	cmp	r3, #8
 800d3f8:	d823      	bhi.n	800d442 <UART_SetConfig+0x35a>
 800d3fa:	a201      	add	r2, pc, #4	; (adr r2, 800d400 <UART_SetConfig+0x318>)
 800d3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d400:	0800d425 	.word	0x0800d425
 800d404:	0800d443 	.word	0x0800d443
 800d408:	0800d42d 	.word	0x0800d42d
 800d40c:	0800d443 	.word	0x0800d443
 800d410:	0800d433 	.word	0x0800d433
 800d414:	0800d443 	.word	0x0800d443
 800d418:	0800d443 	.word	0x0800d443
 800d41c:	0800d443 	.word	0x0800d443
 800d420:	0800d43b 	.word	0x0800d43b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d424:	f7fd fdb2 	bl	800af8c <HAL_RCC_GetPCLK1Freq>
 800d428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d42a:	e010      	b.n	800d44e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d42c:	4b9e      	ldr	r3, [pc, #632]	; (800d6a8 <UART_SetConfig+0x5c0>)
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d430:	e00d      	b.n	800d44e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d432:	f7fd fd3d 	bl	800aeb0 <HAL_RCC_GetSysClockFreq>
 800d436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d438:	e009      	b.n	800d44e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d43a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d43e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d440:	e005      	b.n	800d44e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d442:	2300      	movs	r3, #0
 800d444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d44c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 8130 	beq.w	800d6b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45a:	4a94      	ldr	r2, [pc, #592]	; (800d6ac <UART_SetConfig+0x5c4>)
 800d45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d460:	461a      	mov	r2, r3
 800d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d464:	fbb3 f3f2 	udiv	r3, r3, r2
 800d468:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	685a      	ldr	r2, [r3, #4]
 800d46e:	4613      	mov	r3, r2
 800d470:	005b      	lsls	r3, r3, #1
 800d472:	4413      	add	r3, r2
 800d474:	69ba      	ldr	r2, [r7, #24]
 800d476:	429a      	cmp	r2, r3
 800d478:	d305      	bcc.n	800d486 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d480:	69ba      	ldr	r2, [r7, #24]
 800d482:	429a      	cmp	r2, r3
 800d484:	d903      	bls.n	800d48e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d48c:	e113      	b.n	800d6b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	2200      	movs	r2, #0
 800d492:	60bb      	str	r3, [r7, #8]
 800d494:	60fa      	str	r2, [r7, #12]
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49a:	4a84      	ldr	r2, [pc, #528]	; (800d6ac <UART_SetConfig+0x5c4>)
 800d49c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	603b      	str	r3, [r7, #0]
 800d4a6:	607a      	str	r2, [r7, #4]
 800d4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4b0:	f7f7 fb7c 	bl	8004bac <__aeabi_uldivmod>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	f04f 0200 	mov.w	r2, #0
 800d4c0:	f04f 0300 	mov.w	r3, #0
 800d4c4:	020b      	lsls	r3, r1, #8
 800d4c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4ca:	0202      	lsls	r2, r0, #8
 800d4cc:	6979      	ldr	r1, [r7, #20]
 800d4ce:	6849      	ldr	r1, [r1, #4]
 800d4d0:	0849      	lsrs	r1, r1, #1
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	eb12 0804 	adds.w	r8, r2, r4
 800d4dc:	eb43 0905 	adc.w	r9, r3, r5
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	469a      	mov	sl, r3
 800d4e8:	4693      	mov	fp, r2
 800d4ea:	4652      	mov	r2, sl
 800d4ec:	465b      	mov	r3, fp
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	f7f7 fb5b 	bl	8004bac <__aeabi_uldivmod>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d504:	d308      	bcc.n	800d518 <UART_SetConfig+0x430>
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d50c:	d204      	bcs.n	800d518 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6a3a      	ldr	r2, [r7, #32]
 800d514:	60da      	str	r2, [r3, #12]
 800d516:	e0ce      	b.n	800d6b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d51e:	e0ca      	b.n	800d6b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	69db      	ldr	r3, [r3, #28]
 800d524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d528:	d166      	bne.n	800d5f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d52a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d52e:	2b08      	cmp	r3, #8
 800d530:	d827      	bhi.n	800d582 <UART_SetConfig+0x49a>
 800d532:	a201      	add	r2, pc, #4	; (adr r2, 800d538 <UART_SetConfig+0x450>)
 800d534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d538:	0800d55d 	.word	0x0800d55d
 800d53c:	0800d565 	.word	0x0800d565
 800d540:	0800d56d 	.word	0x0800d56d
 800d544:	0800d583 	.word	0x0800d583
 800d548:	0800d573 	.word	0x0800d573
 800d54c:	0800d583 	.word	0x0800d583
 800d550:	0800d583 	.word	0x0800d583
 800d554:	0800d583 	.word	0x0800d583
 800d558:	0800d57b 	.word	0x0800d57b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d55c:	f7fd fd16 	bl	800af8c <HAL_RCC_GetPCLK1Freq>
 800d560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d562:	e014      	b.n	800d58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d564:	f7fd fd28 	bl	800afb8 <HAL_RCC_GetPCLK2Freq>
 800d568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d56a:	e010      	b.n	800d58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d56c:	4b4e      	ldr	r3, [pc, #312]	; (800d6a8 <UART_SetConfig+0x5c0>)
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d570:	e00d      	b.n	800d58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d572:	f7fd fc9d 	bl	800aeb0 <HAL_RCC_GetSysClockFreq>
 800d576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d578:	e009      	b.n	800d58e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d57a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d57e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d580:	e005      	b.n	800d58e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d58c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 8090 	beq.w	800d6b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	4a44      	ldr	r2, [pc, #272]	; (800d6ac <UART_SetConfig+0x5c4>)
 800d59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5a8:	005a      	lsls	r2, r3, #1
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	085b      	lsrs	r3, r3, #1
 800d5b0:	441a      	add	r2, r3
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	2b0f      	cmp	r3, #15
 800d5c0:	d916      	bls.n	800d5f0 <UART_SetConfig+0x508>
 800d5c2:	6a3b      	ldr	r3, [r7, #32]
 800d5c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c8:	d212      	bcs.n	800d5f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	f023 030f 	bic.w	r3, r3, #15
 800d5d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5d4:	6a3b      	ldr	r3, [r7, #32]
 800d5d6:	085b      	lsrs	r3, r3, #1
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	f003 0307 	and.w	r3, r3, #7
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	8bfb      	ldrh	r3, [r7, #30]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	8bfa      	ldrh	r2, [r7, #30]
 800d5ec:	60da      	str	r2, [r3, #12]
 800d5ee:	e062      	b.n	800d6b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d5f6:	e05e      	b.n	800d6b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5fc:	2b08      	cmp	r3, #8
 800d5fe:	d828      	bhi.n	800d652 <UART_SetConfig+0x56a>
 800d600:	a201      	add	r2, pc, #4	; (adr r2, 800d608 <UART_SetConfig+0x520>)
 800d602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d606:	bf00      	nop
 800d608:	0800d62d 	.word	0x0800d62d
 800d60c:	0800d635 	.word	0x0800d635
 800d610:	0800d63d 	.word	0x0800d63d
 800d614:	0800d653 	.word	0x0800d653
 800d618:	0800d643 	.word	0x0800d643
 800d61c:	0800d653 	.word	0x0800d653
 800d620:	0800d653 	.word	0x0800d653
 800d624:	0800d653 	.word	0x0800d653
 800d628:	0800d64b 	.word	0x0800d64b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d62c:	f7fd fcae 	bl	800af8c <HAL_RCC_GetPCLK1Freq>
 800d630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d632:	e014      	b.n	800d65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d634:	f7fd fcc0 	bl	800afb8 <HAL_RCC_GetPCLK2Freq>
 800d638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d63a:	e010      	b.n	800d65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d63c:	4b1a      	ldr	r3, [pc, #104]	; (800d6a8 <UART_SetConfig+0x5c0>)
 800d63e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d640:	e00d      	b.n	800d65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d642:	f7fd fc35 	bl	800aeb0 <HAL_RCC_GetSysClockFreq>
 800d646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d648:	e009      	b.n	800d65e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d64a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d64e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d650:	e005      	b.n	800d65e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d656:	2301      	movs	r3, #1
 800d658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d65c:	bf00      	nop
    }

    if (pclk != 0U)
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	d028      	beq.n	800d6b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d668:	4a10      	ldr	r2, [pc, #64]	; (800d6ac <UART_SetConfig+0x5c4>)
 800d66a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d66e:	461a      	mov	r2, r3
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	fbb3 f2f2 	udiv	r2, r3, r2
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	085b      	lsrs	r3, r3, #1
 800d67c:	441a      	add	r2, r3
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	fbb2 f3f3 	udiv	r3, r2, r3
 800d686:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	d910      	bls.n	800d6b0 <UART_SetConfig+0x5c8>
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d694:	d20c      	bcs.n	800d6b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	b29a      	uxth	r2, r3
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60da      	str	r2, [r3, #12]
 800d6a0:	e009      	b.n	800d6b6 <UART_SetConfig+0x5ce>
 800d6a2:	bf00      	nop
 800d6a4:	40008000 	.word	0x40008000
 800d6a8:	00f42400 	.word	0x00f42400
 800d6ac:	08011cd0 	.word	0x08011cd0
      }
      else
      {
        ret = HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d6d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3730      	adds	r7, #48	; 0x30
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d6e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ec:	f003 0301 	and.w	r3, r3, #1
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00a      	beq.n	800d70a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	430a      	orrs	r2, r1
 800d708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70e:	f003 0302 	and.w	r3, r3, #2
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	430a      	orrs	r2, r1
 800d72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d730:	f003 0304 	and.w	r3, r3, #4
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00a      	beq.n	800d74e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	430a      	orrs	r2, r1
 800d74c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d752:	f003 0308 	and.w	r3, r3, #8
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00a      	beq.n	800d770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	430a      	orrs	r2, r1
 800d76e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d774:	f003 0310 	and.w	r3, r3, #16
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	430a      	orrs	r2, r1
 800d790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d796:	f003 0320 	and.w	r3, r3, #32
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00a      	beq.n	800d7b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	430a      	orrs	r2, r1
 800d7b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d01a      	beq.n	800d7f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	430a      	orrs	r2, r1
 800d7d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7de:	d10a      	bne.n	800d7f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	430a      	orrs	r2, r1
 800d7f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00a      	beq.n	800d818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	430a      	orrs	r2, r1
 800d816:	605a      	str	r2, [r3, #4]
  }
}
 800d818:	bf00      	nop
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af02      	add	r7, sp, #8
 800d82a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d834:	f7fa f848 	bl	80078c8 <HAL_GetTick>
 800d838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0308 	and.w	r3, r3, #8
 800d844:	2b08      	cmp	r3, #8
 800d846:	d10e      	bne.n	800d866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f82f 	bl	800d8ba <UART_WaitOnFlagUntilTimeout>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e025      	b.n	800d8b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 0304 	and.w	r3, r3, #4
 800d870:	2b04      	cmp	r3, #4
 800d872:	d10e      	bne.n	800d892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f819 	bl	800d8ba <UART_WaitOnFlagUntilTimeout>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d88e:	2303      	movs	r3, #3
 800d890:	e00f      	b.n	800d8b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2220      	movs	r2, #32
 800d896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2220      	movs	r2, #32
 800d89e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b09c      	sub	sp, #112	; 0x70
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	60b9      	str	r1, [r7, #8]
 800d8c4:	603b      	str	r3, [r7, #0]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8ca:	e0a9      	b.n	800da20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d2:	f000 80a5 	beq.w	800da20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8d6:	f7f9 fff7 	bl	80078c8 <HAL_GetTick>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d302      	bcc.n	800d8ec <UART_WaitOnFlagUntilTimeout+0x32>
 800d8e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d140      	bne.n	800d96e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f4:	e853 3f00 	ldrex	r3, [r3]
 800d8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d900:	667b      	str	r3, [r7, #100]	; 0x64
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	461a      	mov	r2, r3
 800d908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d90a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d90c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d912:	e841 2300 	strex	r3, r2, [r1]
 800d916:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1e6      	bne.n	800d8ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	3308      	adds	r3, #8
 800d924:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d928:	e853 3f00 	ldrex	r3, [r3]
 800d92c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d930:	f023 0301 	bic.w	r3, r3, #1
 800d934:	663b      	str	r3, [r7, #96]	; 0x60
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3308      	adds	r3, #8
 800d93c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d93e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d940:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d946:	e841 2300 	strex	r3, r2, [r1]
 800d94a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e5      	bne.n	800d91e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2220      	movs	r2, #32
 800d956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2220      	movs	r2, #32
 800d95e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d96a:	2303      	movs	r3, #3
 800d96c:	e069      	b.n	800da42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 0304 	and.w	r3, r3, #4
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d051      	beq.n	800da20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	69db      	ldr	r3, [r3, #28]
 800d982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d98a:	d149      	bne.n	800da20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d994:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	e853 3f00 	ldrex	r3, [r3]
 800d9a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d9aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d9b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9bc:	e841 2300 	strex	r3, r2, [r1]
 800d9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1e6      	bne.n	800d996 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	3308      	adds	r3, #8
 800d9ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	e853 3f00 	ldrex	r3, [r3]
 800d9d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	f023 0301 	bic.w	r3, r3, #1
 800d9de:	66bb      	str	r3, [r7, #104]	; 0x68
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3308      	adds	r3, #8
 800d9e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9e8:	623a      	str	r2, [r7, #32]
 800d9ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ec:	69f9      	ldr	r1, [r7, #28]
 800d9ee:	6a3a      	ldr	r2, [r7, #32]
 800d9f0:	e841 2300 	strex	r3, r2, [r1]
 800d9f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1e5      	bne.n	800d9c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2220      	movs	r2, #32
 800da00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2220      	movs	r2, #32
 800da08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2220      	movs	r2, #32
 800da10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800da1c:	2303      	movs	r3, #3
 800da1e:	e010      	b.n	800da42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	69da      	ldr	r2, [r3, #28]
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	4013      	ands	r3, r2
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	bf0c      	ite	eq
 800da30:	2301      	moveq	r3, #1
 800da32:	2300      	movne	r3, #0
 800da34:	b2db      	uxtb	r3, r3
 800da36:	461a      	mov	r2, r3
 800da38:	79fb      	ldrb	r3, [r7, #7]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	f43f af46 	beq.w	800d8cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3770      	adds	r7, #112	; 0x70
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
	...

0800da4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b0a3      	sub	sp, #140	; 0x8c
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	4613      	mov	r3, r2
 800da58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	88fa      	ldrh	r2, [r7, #6]
 800da64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	88fa      	ldrh	r2, [r7, #6]
 800da6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da7e:	d10e      	bne.n	800da9e <UART_Start_Receive_IT+0x52>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d105      	bne.n	800da94 <UART_Start_Receive_IT+0x48>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800da8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800da92:	e02d      	b.n	800daf0 <UART_Start_Receive_IT+0xa4>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	22ff      	movs	r2, #255	; 0xff
 800da98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800da9c:	e028      	b.n	800daf0 <UART_Start_Receive_IT+0xa4>
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10d      	bne.n	800dac2 <UART_Start_Receive_IT+0x76>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	691b      	ldr	r3, [r3, #16]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d104      	bne.n	800dab8 <UART_Start_Receive_IT+0x6c>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	22ff      	movs	r2, #255	; 0xff
 800dab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dab6:	e01b      	b.n	800daf0 <UART_Start_Receive_IT+0xa4>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	227f      	movs	r2, #127	; 0x7f
 800dabc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dac0:	e016      	b.n	800daf0 <UART_Start_Receive_IT+0xa4>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800daca:	d10d      	bne.n	800dae8 <UART_Start_Receive_IT+0x9c>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d104      	bne.n	800dade <UART_Start_Receive_IT+0x92>
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	227f      	movs	r2, #127	; 0x7f
 800dad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dadc:	e008      	b.n	800daf0 <UART_Start_Receive_IT+0xa4>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	223f      	movs	r2, #63	; 0x3f
 800dae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dae6:	e003      	b.n	800daf0 <UART_Start_Receive_IT+0xa4>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2222      	movs	r2, #34	; 0x22
 800dafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3308      	adds	r3, #8
 800db06:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db0a:	e853 3f00 	ldrex	r3, [r3]
 800db0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800db10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db12:	f043 0301 	orr.w	r3, r3, #1
 800db16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3308      	adds	r3, #8
 800db20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800db24:	673a      	str	r2, [r7, #112]	; 0x70
 800db26:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800db2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800db2c:	e841 2300 	strex	r3, r2, [r1]
 800db30:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800db32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e3      	bne.n	800db00 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db40:	d153      	bne.n	800dbea <UART_Start_Receive_IT+0x19e>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db48:	88fa      	ldrh	r2, [r7, #6]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d34d      	bcc.n	800dbea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db56:	d107      	bne.n	800db68 <UART_Start_Receive_IT+0x11c>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4a4b      	ldr	r2, [pc, #300]	; (800dc90 <UART_Start_Receive_IT+0x244>)
 800db64:	671a      	str	r2, [r3, #112]	; 0x70
 800db66:	e002      	b.n	800db6e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	4a4a      	ldr	r2, [pc, #296]	; (800dc94 <UART_Start_Receive_IT+0x248>)
 800db6c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2200      	movs	r2, #0
 800db72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d01a      	beq.n	800dbb4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db86:	e853 3f00 	ldrex	r3, [r3]
 800db8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800db8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dba2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dba6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dba8:	e841 2300 	strex	r3, r2, [r1]
 800dbac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dbae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1e4      	bne.n	800db7e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3308      	adds	r3, #8
 800dbba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbbe:	e853 3f00 	ldrex	r3, [r3]
 800dbc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dbd4:	64ba      	str	r2, [r7, #72]	; 0x48
 800dbd6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbdc:	e841 2300 	strex	r3, r2, [r1]
 800dbe0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e5      	bne.n	800dbb4 <UART_Start_Receive_IT+0x168>
 800dbe8:	e04a      	b.n	800dc80 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbf2:	d107      	bne.n	800dc04 <UART_Start_Receive_IT+0x1b8>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d103      	bne.n	800dc04 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4a26      	ldr	r2, [pc, #152]	; (800dc98 <UART_Start_Receive_IT+0x24c>)
 800dc00:	671a      	str	r2, [r3, #112]	; 0x70
 800dc02:	e002      	b.n	800dc0a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	4a25      	ldr	r2, [pc, #148]	; (800dc9c <UART_Start_Receive_IT+0x250>)
 800dc08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	691b      	ldr	r3, [r3, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d019      	beq.n	800dc4e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc22:	e853 3f00 	ldrex	r3, [r3]
 800dc26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800dc2e:	677b      	str	r3, [r7, #116]	; 0x74
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc38:	637b      	str	r3, [r7, #52]	; 0x34
 800dc3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc40:	e841 2300 	strex	r3, r2, [r1]
 800dc44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1e6      	bne.n	800dc1a <UART_Start_Receive_IT+0x1ce>
 800dc4c:	e018      	b.n	800dc80 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	e853 3f00 	ldrex	r3, [r3]
 800dc5a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	f043 0320 	orr.w	r3, r3, #32
 800dc62:	67bb      	str	r3, [r7, #120]	; 0x78
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc6c:	623b      	str	r3, [r7, #32]
 800dc6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc70:	69f9      	ldr	r1, [r7, #28]
 800dc72:	6a3a      	ldr	r2, [r7, #32]
 800dc74:	e841 2300 	strex	r3, r2, [r1]
 800dc78:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1e6      	bne.n	800dc4e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	378c      	adds	r7, #140	; 0x8c
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	0800e3a9 	.word	0x0800e3a9
 800dc94:	0800e0b1 	.word	0x0800e0b1
 800dc98:	0800df4f 	.word	0x0800df4f
 800dc9c:	0800ddef 	.word	0x0800ddef

0800dca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b095      	sub	sp, #84	; 0x54
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb0:	e853 3f00 	ldrex	r3, [r3]
 800dcb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc6:	643b      	str	r3, [r7, #64]	; 0x40
 800dcc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcce:	e841 2300 	strex	r3, r2, [r1]
 800dcd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1e6      	bne.n	800dca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	3308      	adds	r3, #8
 800dce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	e853 3f00 	ldrex	r3, [r3]
 800dce8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dcf0:	f023 0301 	bic.w	r3, r3, #1
 800dcf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd06:	e841 2300 	strex	r3, r2, [r1]
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1e3      	bne.n	800dcda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d118      	bne.n	800dd4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	e853 3f00 	ldrex	r3, [r3]
 800dd26:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	f023 0310 	bic.w	r3, r3, #16
 800dd2e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	461a      	mov	r2, r3
 800dd36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd38:	61bb      	str	r3, [r7, #24]
 800dd3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3c:	6979      	ldr	r1, [r7, #20]
 800dd3e:	69ba      	ldr	r2, [r7, #24]
 800dd40:	e841 2300 	strex	r3, r2, [r1]
 800dd44:	613b      	str	r3, [r7, #16]
   return(result);
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1e6      	bne.n	800dd1a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2220      	movs	r2, #32
 800dd50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800dd60:	bf00      	nop
 800dd62:	3754      	adds	r7, #84	; 0x54
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f7ff f996 	bl	800d0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd90:	bf00      	nop
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	e853 3f00 	ldrex	r3, [r3]
 800ddac:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddb4:	61fb      	str	r3, [r7, #28]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	61bb      	str	r3, [r7, #24]
 800ddc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc2:	6979      	ldr	r1, [r7, #20]
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	e841 2300 	strex	r3, r2, [r1]
 800ddca:	613b      	str	r3, [r7, #16]
   return(result);
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1e6      	bne.n	800dda0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff f957 	bl	800d094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dde6:	bf00      	nop
 800dde8:	3720      	adds	r7, #32
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b096      	sub	sp, #88	; 0x58
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de06:	2b22      	cmp	r3, #34	; 0x22
 800de08:	f040 8095 	bne.w	800df36 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de12:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800de16:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800de1a:	b2d9      	uxtb	r1, r3
 800de1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800de20:	b2da      	uxtb	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de26:	400a      	ands	r2, r1
 800de28:	b2d2      	uxtb	r2, r2
 800de2a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de30:	1c5a      	adds	r2, r3, #1
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	3b01      	subs	r3, #1
 800de40:	b29a      	uxth	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d178      	bne.n	800df46 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5c:	e853 3f00 	ldrex	r3, [r3]
 800de60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de68:	653b      	str	r3, [r7, #80]	; 0x50
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de72:	647b      	str	r3, [r7, #68]	; 0x44
 800de74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de7a:	e841 2300 	strex	r3, r2, [r1]
 800de7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e6      	bne.n	800de54 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3308      	adds	r3, #8
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	e853 3f00 	ldrex	r3, [r3]
 800de94:	623b      	str	r3, [r7, #32]
   return(result);
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	f023 0301 	bic.w	r3, r3, #1
 800de9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3308      	adds	r3, #8
 800dea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dea6:	633a      	str	r2, [r7, #48]	; 0x30
 800dea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deae:	e841 2300 	strex	r3, r2, [r1]
 800deb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1e5      	bne.n	800de86 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2220      	movs	r2, #32
 800debe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800decc:	2b01      	cmp	r3, #1
 800dece:	d12e      	bne.n	800df2e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	e853 3f00 	ldrex	r3, [r3]
 800dee2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f023 0310 	bic.w	r3, r3, #16
 800deea:	64bb      	str	r3, [r7, #72]	; 0x48
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	461a      	mov	r2, r3
 800def2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def4:	61fb      	str	r3, [r7, #28]
 800def6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def8:	69b9      	ldr	r1, [r7, #24]
 800defa:	69fa      	ldr	r2, [r7, #28]
 800defc:	e841 2300 	strex	r3, r2, [r1]
 800df00:	617b      	str	r3, [r7, #20]
   return(result);
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1e6      	bne.n	800ded6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	69db      	ldr	r3, [r3, #28]
 800df0e:	f003 0310 	and.w	r3, r3, #16
 800df12:	2b10      	cmp	r3, #16
 800df14:	d103      	bne.n	800df1e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2210      	movs	r2, #16
 800df1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df24:	4619      	mov	r1, r3
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff f8d2 	bl	800d0d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df2c:	e00b      	b.n	800df46 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff f8ba 	bl	800d0a8 <HAL_UART_RxCpltCallback>
}
 800df34:	e007      	b.n	800df46 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	699a      	ldr	r2, [r3, #24]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f042 0208 	orr.w	r2, r2, #8
 800df44:	619a      	str	r2, [r3, #24]
}
 800df46:	bf00      	nop
 800df48:	3758      	adds	r7, #88	; 0x58
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b096      	sub	sp, #88	; 0x58
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df66:	2b22      	cmp	r3, #34	; 0x22
 800df68:	f040 8095 	bne.w	800e096 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df7a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800df7c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800df80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800df84:	4013      	ands	r3, r2
 800df86:	b29a      	uxth	r2, r3
 800df88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df8a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df90:	1c9a      	adds	r2, r3, #2
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d178      	bne.n	800e0a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfbc:	e853 3f00 	ldrex	r3, [r3]
 800dfc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfd2:	643b      	str	r3, [r7, #64]	; 0x40
 800dfd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfda:	e841 2300 	strex	r3, r2, [r1]
 800dfde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1e6      	bne.n	800dfb4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3308      	adds	r3, #8
 800dfec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfee:	6a3b      	ldr	r3, [r7, #32]
 800dff0:	e853 3f00 	ldrex	r3, [r3]
 800dff4:	61fb      	str	r3, [r7, #28]
   return(result);
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	f023 0301 	bic.w	r3, r3, #1
 800dffc:	64bb      	str	r3, [r7, #72]	; 0x48
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3308      	adds	r3, #8
 800e004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e006:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e00e:	e841 2300 	strex	r3, r2, [r1]
 800e012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1e5      	bne.n	800dfe6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2220      	movs	r2, #32
 800e01e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d12e      	bne.n	800e08e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	e853 3f00 	ldrex	r3, [r3]
 800e042:	60bb      	str	r3, [r7, #8]
   return(result);
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	f023 0310 	bic.w	r3, r3, #16
 800e04a:	647b      	str	r3, [r7, #68]	; 0x44
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	461a      	mov	r2, r3
 800e052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e054:	61bb      	str	r3, [r7, #24]
 800e056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e058:	6979      	ldr	r1, [r7, #20]
 800e05a:	69ba      	ldr	r2, [r7, #24]
 800e05c:	e841 2300 	strex	r3, r2, [r1]
 800e060:	613b      	str	r3, [r7, #16]
   return(result);
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1e6      	bne.n	800e036 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	69db      	ldr	r3, [r3, #28]
 800e06e:	f003 0310 	and.w	r3, r3, #16
 800e072:	2b10      	cmp	r3, #16
 800e074:	d103      	bne.n	800e07e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2210      	movs	r2, #16
 800e07c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e084:	4619      	mov	r1, r3
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7ff f822 	bl	800d0d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e08c:	e00b      	b.n	800e0a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f7ff f80a 	bl	800d0a8 <HAL_UART_RxCpltCallback>
}
 800e094:	e007      	b.n	800e0a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	699a      	ldr	r2, [r3, #24]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f042 0208 	orr.w	r2, r2, #8
 800e0a4:	619a      	str	r2, [r3, #24]
}
 800e0a6:	bf00      	nop
 800e0a8:	3758      	adds	r7, #88	; 0x58
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b0a6      	sub	sp, #152	; 0x98
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e0be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69db      	ldr	r3, [r3, #28]
 800e0c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0e6:	2b22      	cmp	r3, #34	; 0x22
 800e0e8:	f040 814f 	bne.w	800e38a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e0f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e0f6:	e0f6      	b.n	800e2e6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e102:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e106:	b2d9      	uxtb	r1, r3
 800e108:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e112:	400a      	ands	r2, r1
 800e114:	b2d2      	uxtb	r2, r2
 800e116:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e11c:	1c5a      	adds	r2, r3, #1
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e128:	b29b      	uxth	r3, r3
 800e12a:	3b01      	subs	r3, #1
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	69db      	ldr	r3, [r3, #28]
 800e13a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e13e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b00      	cmp	r3, #0
 800e148:	d053      	beq.n	800e1f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e14a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e14e:	f003 0301 	and.w	r3, r3, #1
 800e152:	2b00      	cmp	r3, #0
 800e154:	d011      	beq.n	800e17a <UART_RxISR_8BIT_FIFOEN+0xca>
 800e156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00b      	beq.n	800e17a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2201      	movs	r2, #1
 800e168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e170:	f043 0201 	orr.w	r2, r3, #1
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e17a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e17e:	f003 0302 	and.w	r3, r3, #2
 800e182:	2b00      	cmp	r3, #0
 800e184:	d011      	beq.n	800e1aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e186:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e18a:	f003 0301 	and.w	r3, r3, #1
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00b      	beq.n	800e1aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2202      	movs	r2, #2
 800e198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1a0:	f043 0204 	orr.w	r2, r3, #4
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1ae:	f003 0304 	and.w	r3, r3, #4
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d011      	beq.n	800e1da <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e1b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00b      	beq.n	800e1da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2204      	movs	r2, #4
 800e1c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1d0:	f043 0202 	orr.w	r2, r3, #2
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d006      	beq.n	800e1f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7fe ff69 	bl	800d0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d173      	bne.n	800e2e6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e206:	e853 3f00 	ldrex	r3, [r3]
 800e20a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e20c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e20e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e212:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	461a      	mov	r2, r3
 800e21c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e220:	66bb      	str	r3, [r7, #104]	; 0x68
 800e222:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e224:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e226:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e228:	e841 2300 	strex	r3, r2, [r1]
 800e22c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e22e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1e4      	bne.n	800e1fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3308      	adds	r3, #8
 800e23a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e23e:	e853 3f00 	ldrex	r3, [r3]
 800e242:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e24a:	f023 0301 	bic.w	r3, r3, #1
 800e24e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	3308      	adds	r3, #8
 800e256:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e258:	657a      	str	r2, [r7, #84]	; 0x54
 800e25a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e25e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e260:	e841 2300 	strex	r3, r2, [r1]
 800e264:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1e3      	bne.n	800e234 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2220      	movs	r2, #32
 800e270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d12e      	bne.n	800e2e0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e298:	f023 0310 	bic.w	r3, r3, #16
 800e29c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2a6:	643b      	str	r3, [r7, #64]	; 0x40
 800e2a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2ae:	e841 2300 	strex	r3, r2, [r1]
 800e2b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1e6      	bne.n	800e288 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	69db      	ldr	r3, [r3, #28]
 800e2c0:	f003 0310 	and.w	r3, r3, #16
 800e2c4:	2b10      	cmp	r3, #16
 800e2c6:	d103      	bne.n	800e2d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2210      	movs	r2, #16
 800e2ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7fe fef9 	bl	800d0d0 <HAL_UARTEx_RxEventCallback>
 800e2de:	e002      	b.n	800e2e6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7fe fee1 	bl	800d0a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e2e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d006      	beq.n	800e2fc <UART_RxISR_8BIT_FIFOEN+0x24c>
 800e2ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e2f2:	f003 0320 	and.w	r3, r3, #32
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f47f aefe 	bne.w	800e0f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e306:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d045      	beq.n	800e39a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e314:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e318:	429a      	cmp	r2, r3
 800e31a:	d23e      	bcs.n	800e39a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	3308      	adds	r3, #8
 800e322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	e853 3f00 	ldrex	r3, [r3]
 800e32a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e332:	673b      	str	r3, [r7, #112]	; 0x70
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	3308      	adds	r3, #8
 800e33a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e33c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e33e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e344:	e841 2300 	strex	r3, r2, [r1]
 800e348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1e5      	bne.n	800e31c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a14      	ldr	r2, [pc, #80]	; (800e3a4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e354:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	e853 3f00 	ldrex	r3, [r3]
 800e362:	60bb      	str	r3, [r7, #8]
   return(result);
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	f043 0320 	orr.w	r3, r3, #32
 800e36a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	461a      	mov	r2, r3
 800e372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e374:	61bb      	str	r3, [r7, #24]
 800e376:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e378:	6979      	ldr	r1, [r7, #20]
 800e37a:	69ba      	ldr	r2, [r7, #24]
 800e37c:	e841 2300 	strex	r3, r2, [r1]
 800e380:	613b      	str	r3, [r7, #16]
   return(result);
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1e6      	bne.n	800e356 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e388:	e007      	b.n	800e39a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	699a      	ldr	r2, [r3, #24]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f042 0208 	orr.w	r2, r2, #8
 800e398:	619a      	str	r2, [r3, #24]
}
 800e39a:	bf00      	nop
 800e39c:	3798      	adds	r7, #152	; 0x98
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	0800ddef 	.word	0x0800ddef

0800e3a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b0a8      	sub	sp, #160	; 0xa0
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3de:	2b22      	cmp	r3, #34	; 0x22
 800e3e0:	f040 8153 	bne.w	800e68a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e3ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e3ee:	e0fa      	b.n	800e5e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e402:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e406:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e40a:	4013      	ands	r3, r2
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e412:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e418:	1c9a      	adds	r2, r3, #2
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e424:	b29b      	uxth	r3, r3
 800e426:	3b01      	subs	r3, #1
 800e428:	b29a      	uxth	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e43a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e43e:	f003 0307 	and.w	r3, r3, #7
 800e442:	2b00      	cmp	r3, #0
 800e444:	d053      	beq.n	800e4ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e446:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e44a:	f003 0301 	and.w	r3, r3, #1
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d011      	beq.n	800e476 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00b      	beq.n	800e476 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2201      	movs	r2, #1
 800e464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e46c:	f043 0201 	orr.w	r2, r3, #1
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d011      	beq.n	800e4a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e486:	f003 0301 	and.w	r3, r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00b      	beq.n	800e4a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2202      	movs	r2, #2
 800e494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e49c:	f043 0204 	orr.w	r2, r3, #4
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e4aa:	f003 0304 	and.w	r3, r3, #4
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d011      	beq.n	800e4d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e4b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00b      	beq.n	800e4d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2204      	movs	r2, #4
 800e4c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4cc:	f043 0202 	orr.w	r2, r3, #2
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d006      	beq.n	800e4ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7fe fdeb 	bl	800d0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d175      	bne.n	800e5e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e502:	e853 3f00 	ldrex	r3, [r3]
 800e506:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e50a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e50e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	461a      	mov	r2, r3
 800e518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e51c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e51e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e520:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e522:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e524:	e841 2300 	strex	r3, r2, [r1]
 800e528:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e52a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1e4      	bne.n	800e4fa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3308      	adds	r3, #8
 800e536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e53a:	e853 3f00 	ldrex	r3, [r3]
 800e53e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e546:	f023 0301 	bic.w	r3, r3, #1
 800e54a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3308      	adds	r3, #8
 800e554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e558:	65ba      	str	r2, [r7, #88]	; 0x58
 800e55a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e55e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e560:	e841 2300 	strex	r3, r2, [r1]
 800e564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1e1      	bne.n	800e530 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2220      	movs	r2, #32
 800e570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d12e      	bne.n	800e5e0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	e853 3f00 	ldrex	r3, [r3]
 800e594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e598:	f023 0310 	bic.w	r3, r3, #16
 800e59c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5a6:	647b      	str	r3, [r7, #68]	; 0x44
 800e5a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5ae:	e841 2300 	strex	r3, r2, [r1]
 800e5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d1e6      	bne.n	800e588 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	69db      	ldr	r3, [r3, #28]
 800e5c0:	f003 0310 	and.w	r3, r3, #16
 800e5c4:	2b10      	cmp	r3, #16
 800e5c6:	d103      	bne.n	800e5d0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2210      	movs	r2, #16
 800e5ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7fe fd79 	bl	800d0d0 <HAL_UARTEx_RxEventCallback>
 800e5de:	e002      	b.n	800e5e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7fe fd61 	bl	800d0a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d006      	beq.n	800e5fc <UART_RxISR_16BIT_FIFOEN+0x254>
 800e5ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5f2:	f003 0320 	and.w	r3, r3, #32
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f47f aefa 	bne.w	800e3f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e602:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e606:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d045      	beq.n	800e69a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e614:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e618:	429a      	cmp	r2, r3
 800e61a:	d23e      	bcs.n	800e69a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	3308      	adds	r3, #8
 800e622:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	e853 3f00 	ldrex	r3, [r3]
 800e62a:	623b      	str	r3, [r7, #32]
   return(result);
 800e62c:	6a3b      	ldr	r3, [r7, #32]
 800e62e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e632:	677b      	str	r3, [r7, #116]	; 0x74
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3308      	adds	r3, #8
 800e63a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e63c:	633a      	str	r2, [r7, #48]	; 0x30
 800e63e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e644:	e841 2300 	strex	r3, r2, [r1]
 800e648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1e5      	bne.n	800e61c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a14      	ldr	r2, [pc, #80]	; (800e6a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e654:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	e853 3f00 	ldrex	r3, [r3]
 800e662:	60fb      	str	r3, [r7, #12]
   return(result);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f043 0320 	orr.w	r3, r3, #32
 800e66a:	673b      	str	r3, [r7, #112]	; 0x70
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	461a      	mov	r2, r3
 800e672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e674:	61fb      	str	r3, [r7, #28]
 800e676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e678:	69b9      	ldr	r1, [r7, #24]
 800e67a:	69fa      	ldr	r2, [r7, #28]
 800e67c:	e841 2300 	strex	r3, r2, [r1]
 800e680:	617b      	str	r3, [r7, #20]
   return(result);
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1e6      	bne.n	800e656 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e688:	e007      	b.n	800e69a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	699a      	ldr	r2, [r3, #24]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f042 0208 	orr.w	r2, r2, #8
 800e698:	619a      	str	r2, [r3, #24]
}
 800e69a:	bf00      	nop
 800e69c:	37a0      	adds	r7, #160	; 0xa0
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	0800df4f 	.word	0x0800df4f

0800e6a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d101      	bne.n	800e6fa <HAL_UARTEx_DisableFifoMode+0x16>
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	e027      	b.n	800e74a <HAL_UARTEx_DisableFifoMode+0x66>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2224      	movs	r2, #36	; 0x24
 800e706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f022 0201 	bic.w	r2, r2, #1
 800e720:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e728:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2200      	movs	r2, #0
 800e72e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68fa      	ldr	r2, [r7, #12]
 800e736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2220      	movs	r2, #32
 800e73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e766:	2b01      	cmp	r3, #1
 800e768:	d101      	bne.n	800e76e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e76a:	2302      	movs	r3, #2
 800e76c:	e02d      	b.n	800e7ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2224      	movs	r2, #36	; 0x24
 800e77a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f022 0201 	bic.w	r2, r2, #1
 800e794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	683a      	ldr	r2, [r7, #0]
 800e7a6:	430a      	orrs	r2, r1
 800e7a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f850 	bl	800e850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	68fa      	ldr	r2, [r7, #12]
 800e7b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2220      	movs	r2, #32
 800e7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b084      	sub	sp, #16
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d101      	bne.n	800e7ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	e02d      	b.n	800e846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2224      	movs	r2, #36	; 0x24
 800e7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f022 0201 	bic.w	r2, r2, #1
 800e810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	683a      	ldr	r2, [r7, #0]
 800e822:	430a      	orrs	r2, r1
 800e824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 f812 	bl	800e850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68fa      	ldr	r2, [r7, #12]
 800e832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2220      	movs	r2, #32
 800e838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
	...

0800e850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d108      	bne.n	800e872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e870:	e031      	b.n	800e8d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e872:	2308      	movs	r3, #8
 800e874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e876:	2308      	movs	r3, #8
 800e878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	0e5b      	lsrs	r3, r3, #25
 800e882:	b2db      	uxtb	r3, r3
 800e884:	f003 0307 	and.w	r3, r3, #7
 800e888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	0f5b      	lsrs	r3, r3, #29
 800e892:	b2db      	uxtb	r3, r3
 800e894:	f003 0307 	and.w	r3, r3, #7
 800e898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e89a:	7bbb      	ldrb	r3, [r7, #14]
 800e89c:	7b3a      	ldrb	r2, [r7, #12]
 800e89e:	4911      	ldr	r1, [pc, #68]	; (800e8e4 <UARTEx_SetNbDataToProcess+0x94>)
 800e8a0:	5c8a      	ldrb	r2, [r1, r2]
 800e8a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e8a6:	7b3a      	ldrb	r2, [r7, #12]
 800e8a8:	490f      	ldr	r1, [pc, #60]	; (800e8e8 <UARTEx_SetNbDataToProcess+0x98>)
 800e8aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ba:	7b7a      	ldrb	r2, [r7, #13]
 800e8bc:	4909      	ldr	r1, [pc, #36]	; (800e8e4 <UARTEx_SetNbDataToProcess+0x94>)
 800e8be:	5c8a      	ldrb	r2, [r1, r2]
 800e8c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8c4:	7b7a      	ldrb	r2, [r7, #13]
 800e8c6:	4908      	ldr	r1, [pc, #32]	; (800e8e8 <UARTEx_SetNbDataToProcess+0x98>)
 800e8c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e8d6:	bf00      	nop
 800e8d8:	3714      	adds	r7, #20
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	08011ce8 	.word	0x08011ce8
 800e8e8:	08011cf0 	.word	0x08011cf0

0800e8ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b085      	sub	sp, #20
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e8fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8fe:	2b84      	cmp	r3, #132	; 0x84
 800e900:	d005      	beq.n	800e90e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e902:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	4413      	add	r3, r2
 800e90a:	3303      	adds	r3, #3
 800e90c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e90e:	68fb      	ldr	r3, [r7, #12]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3714      	adds	r7, #20
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e920:	f000 fee8 	bl	800f6f4 <vTaskStartScheduler>
  
  return osOK;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	bd80      	pop	{r7, pc}

0800e92a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e92a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e92c:	b087      	sub	sp, #28
 800e92e:	af02      	add	r7, sp, #8
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	685c      	ldr	r4, [r3, #4]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e940:	b29e      	uxth	r6, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e948:	4618      	mov	r0, r3
 800e94a:	f7ff ffcf 	bl	800e8ec <makeFreeRtosPriority>
 800e94e:	4602      	mov	r2, r0
 800e950:	f107 030c 	add.w	r3, r7, #12
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	9200      	str	r2, [sp, #0]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	4632      	mov	r2, r6
 800e95c:	4629      	mov	r1, r5
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 fd54 	bl	800f40c <xTaskCreate>
 800e964:	4603      	mov	r3, r0
 800e966:	2b01      	cmp	r3, #1
 800e968:	d001      	beq.n	800e96e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800e96a:	2300      	movs	r3, #0
 800e96c:	e000      	b.n	800e970 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800e96e:	68fb      	ldr	r3, [r7, #12]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e978 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <osDelay+0x16>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	e000      	b.n	800e990 <osDelay+0x18>
 800e98e:	2301      	movs	r3, #1
 800e990:	4618      	mov	r0, r3
 800e992:	f000 fe7b 	bl	800f68c <vTaskDelay>
  
  return osOK;
 800e996:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800e9a8:	2001      	movs	r0, #1
 800e9aa:	f000 f9a1 	bl	800ecf0 <xQueueCreateMutex>
 800e9ae:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d110      	bne.n	800e9ea <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800e9c8:	2203      	movs	r2, #3
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	2001      	movs	r0, #1
 800e9ce:	f000 f920 	bl	800ec12 <xQueueGenericCreate>
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d005      	beq.n	800e9e6 <osSemaphoreCreate+0x2e>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	2200      	movs	r2, #0
 800e9de:	2100      	movs	r1, #0
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f000 f99d 	bl	800ed20 <xQueueGenericSend>
    return sema;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	e000      	b.n	800e9ec <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800e9ea:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f103 0208 	add.w	r2, r3, #8
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f04f 32ff 	mov.w	r2, #4294967295
 800ea0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f103 0208 	add.w	r2, r3, #8
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f103 0208 	add.w	r2, r3, #8
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea42:	bf00      	nop
 800ea44:	370c      	adds	r7, #12
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea4e:	b480      	push	{r7}
 800ea50:	b085      	sub	sp, #20
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	689a      	ldr	r2, [r3, #8]
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	683a      	ldr	r2, [r7, #0]
 800ea78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	1c5a      	adds	r2, r3, #1
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	601a      	str	r2, [r3, #0]
}
 800ea8a:	bf00      	nop
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea96:	b480      	push	{r7}
 800ea98:	b085      	sub	sp, #20
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaac:	d103      	bne.n	800eab6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	691b      	ldr	r3, [r3, #16]
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	e00c      	b.n	800ead0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	3308      	adds	r3, #8
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	e002      	b.n	800eac4 <vListInsert+0x2e>
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d2f6      	bcs.n	800eabe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	683a      	ldr	r2, [r7, #0]
 800eade:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	683a      	ldr	r2, [r7, #0]
 800eaea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	1c5a      	adds	r2, r3, #1
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	601a      	str	r2, [r3, #0]
}
 800eafc:	bf00      	nop
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	6892      	ldr	r2, [r2, #8]
 800eb1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	6852      	ldr	r2, [r2, #4]
 800eb28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d103      	bne.n	800eb3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	1e5a      	subs	r2, r3, #1
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10a      	bne.n	800eb86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eb82:	bf00      	nop
 800eb84:	e7fe      	b.n	800eb84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eb86:	f001 fcbd 	bl	8010504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb92:	68f9      	ldr	r1, [r7, #12]
 800eb94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb96:	fb01 f303 	mul.w	r3, r1, r3
 800eb9a:	441a      	add	r2, r3
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	68f9      	ldr	r1, [r7, #12]
 800ebba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ebbc:	fb01 f303 	mul.w	r3, r1, r3
 800ebc0:	441a      	add	r2, r3
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	22ff      	movs	r2, #255	; 0xff
 800ebca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	22ff      	movs	r2, #255	; 0xff
 800ebd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d109      	bne.n	800ebf0 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	691b      	ldr	r3, [r3, #16]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00f      	beq.n	800ec04 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3310      	adds	r3, #16
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 ff8b 	bl	800fb04 <xTaskRemoveFromEventList>
 800ebee:	e009      	b.n	800ec04 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	3310      	adds	r3, #16
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7ff fefd 	bl	800e9f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3324      	adds	r3, #36	; 0x24
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7ff fef8 	bl	800e9f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ec04:	f001 fcae 	bl	8010564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ec08:	2301      	movs	r3, #1
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b08a      	sub	sp, #40	; 0x28
 800ec16:	af02      	add	r7, sp, #8
 800ec18:	60f8      	str	r0, [r7, #12]
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10a      	bne.n	800ec3c <xQueueGenericCreate+0x2a>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	613b      	str	r3, [r7, #16]
}
 800ec38:	bf00      	nop
 800ec3a:	e7fe      	b.n	800ec3a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	fb02 f303 	mul.w	r3, r2, r3
 800ec44:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	3348      	adds	r3, #72	; 0x48
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f001 fd7c 	bl	8010748 <pvPortMalloc>
 800ec50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00d      	beq.n	800ec74 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	3348      	adds	r3, #72	; 0x48
 800ec60:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec62:	79fa      	ldrb	r2, [r7, #7]
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	4613      	mov	r3, r2
 800ec6a:	697a      	ldr	r2, [r7, #20]
 800ec6c:	68b9      	ldr	r1, [r7, #8]
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f000 f805 	bl	800ec7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec74:	69bb      	ldr	r3, [r7, #24]
	}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3720      	adds	r7, #32
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	60b9      	str	r1, [r7, #8]
 800ec88:	607a      	str	r2, [r7, #4]
 800ec8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d103      	bne.n	800ec9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	69ba      	ldr	r2, [r7, #24]
 800ec96:	601a      	str	r2, [r3, #0]
 800ec98:	e002      	b.n	800eca0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ecac:	2101      	movs	r1, #1
 800ecae:	69b8      	ldr	r0, [r7, #24]
 800ecb0:	f7ff ff54 	bl	800eb5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ecb4:	bf00      	nop
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00e      	beq.n	800ece8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ecdc:	2300      	movs	r3, #0
 800ecde:	2200      	movs	r2, #0
 800ece0:	2100      	movs	r1, #0
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 f81c 	bl	800ed20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	617b      	str	r3, [r7, #20]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ed02:	79fb      	ldrb	r3, [r7, #7]
 800ed04:	461a      	mov	r2, r3
 800ed06:	6939      	ldr	r1, [r7, #16]
 800ed08:	6978      	ldr	r0, [r7, #20]
 800ed0a:	f7ff ff82 	bl	800ec12 <xQueueGenericCreate>
 800ed0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f7ff ffd3 	bl	800ecbc <prvInitialiseMutex>

		return xNewQueue;
 800ed16:	68fb      	ldr	r3, [r7, #12]
	}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b08e      	sub	sp, #56	; 0x38
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10a      	bne.n	800ed52 <xQueueGenericSend+0x32>
	__asm volatile
 800ed3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed4e:	bf00      	nop
 800ed50:	e7fe      	b.n	800ed50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d103      	bne.n	800ed60 <xQueueGenericSend+0x40>
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d101      	bne.n	800ed64 <xQueueGenericSend+0x44>
 800ed60:	2301      	movs	r3, #1
 800ed62:	e000      	b.n	800ed66 <xQueueGenericSend+0x46>
 800ed64:	2300      	movs	r3, #0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10a      	bne.n	800ed80 <xQueueGenericSend+0x60>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed7c:	bf00      	nop
 800ed7e:	e7fe      	b.n	800ed7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d103      	bne.n	800ed8e <xQueueGenericSend+0x6e>
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d101      	bne.n	800ed92 <xQueueGenericSend+0x72>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e000      	b.n	800ed94 <xQueueGenericSend+0x74>
 800ed92:	2300      	movs	r3, #0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10a      	bne.n	800edae <xQueueGenericSend+0x8e>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	623b      	str	r3, [r7, #32]
}
 800edaa:	bf00      	nop
 800edac:	e7fe      	b.n	800edac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edae:	f001 f855 	bl	800fe5c <xTaskGetSchedulerState>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <xQueueGenericSend+0x9e>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d101      	bne.n	800edc2 <xQueueGenericSend+0xa2>
 800edbe:	2301      	movs	r3, #1
 800edc0:	e000      	b.n	800edc4 <xQueueGenericSend+0xa4>
 800edc2:	2300      	movs	r3, #0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10a      	bne.n	800edde <xQueueGenericSend+0xbe>
	__asm volatile
 800edc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	61fb      	str	r3, [r7, #28]
}
 800edda:	bf00      	nop
 800eddc:	e7fe      	b.n	800eddc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edde:	f001 fb91 	bl	8010504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edea:	429a      	cmp	r2, r3
 800edec:	d302      	bcc.n	800edf4 <xQueueGenericSend+0xd4>
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	d112      	bne.n	800ee1a <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edf4:	683a      	ldr	r2, [r7, #0]
 800edf6:	68b9      	ldr	r1, [r7, #8]
 800edf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edfa:	f000 fa1d 	bl	800f238 <prvCopyDataToQueue>
 800edfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d004      	beq.n	800ee12 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	3324      	adds	r3, #36	; 0x24
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 fe79 	bl	800fb04 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee12:	f001 fba7 	bl	8010564 <vPortExitCritical>
				return pdPASS;
 800ee16:	2301      	movs	r3, #1
 800ee18:	e062      	b.n	800eee0 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d103      	bne.n	800ee28 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee20:	f001 fba0 	bl	8010564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee24:	2300      	movs	r3, #0
 800ee26:	e05b      	b.n	800eee0 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee2e:	f107 0314 	add.w	r3, r7, #20
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 fec8 	bl	800fbc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee3c:	f001 fb92 	bl	8010564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee40:	f000 fca8 	bl	800f794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee44:	f001 fb5e 	bl	8010504 <vPortEnterCritical>
 800ee48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee4e:	b25b      	sxtb	r3, r3
 800ee50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee54:	d103      	bne.n	800ee5e <xQueueGenericSend+0x13e>
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee64:	b25b      	sxtb	r3, r3
 800ee66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6a:	d103      	bne.n	800ee74 <xQueueGenericSend+0x154>
 800ee6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee74:	f001 fb76 	bl	8010564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee78:	1d3a      	adds	r2, r7, #4
 800ee7a:	f107 0314 	add.w	r3, r7, #20
 800ee7e:	4611      	mov	r1, r2
 800ee80:	4618      	mov	r0, r3
 800ee82:	f000 feb7 	bl	800fbf4 <xTaskCheckForTimeOut>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d123      	bne.n	800eed4 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee8e:	f000 faa5 	bl	800f3dc <prvIsQueueFull>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d017      	beq.n	800eec8 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9a:	3310      	adds	r3, #16
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 fe0b 	bl	800fabc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eea8:	f000 fa30 	bl	800f30c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eeac:	f000 fc80 	bl	800f7b0 <xTaskResumeAll>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d193      	bne.n	800edde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eeb6:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <xQueueGenericSend+0x1c8>)
 800eeb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	f3bf 8f6f 	isb	sy
 800eec6:	e78a      	b.n	800edde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeca:	f000 fa1f 	bl	800f30c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eece:	f000 fc6f 	bl	800f7b0 <xTaskResumeAll>
 800eed2:	e784      	b.n	800edde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eed6:	f000 fa19 	bl	800f30c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eeda:	f000 fc69 	bl	800f7b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eede:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3738      	adds	r7, #56	; 0x38
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	e000ed04 	.word	0xe000ed04

0800eeec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b08e      	sub	sp, #56	; 0x38
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d10a      	bne.n	800ef16 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ef00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef04:	f383 8811 	msr	BASEPRI, r3
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	623b      	str	r3, [r7, #32]
}
 800ef12:	bf00      	nop
 800ef14:	e7fe      	b.n	800ef14 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00a      	beq.n	800ef34 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	61fb      	str	r3, [r7, #28]
}
 800ef30:	bf00      	nop
 800ef32:	e7fe      	b.n	800ef32 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d103      	bne.n	800ef44 <xQueueGiveFromISR+0x58>
 800ef3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d101      	bne.n	800ef48 <xQueueGiveFromISR+0x5c>
 800ef44:	2301      	movs	r3, #1
 800ef46:	e000      	b.n	800ef4a <xQueueGiveFromISR+0x5e>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d10a      	bne.n	800ef64 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ef4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef52:	f383 8811 	msr	BASEPRI, r3
 800ef56:	f3bf 8f6f 	isb	sy
 800ef5a:	f3bf 8f4f 	dsb	sy
 800ef5e:	61bb      	str	r3, [r7, #24]
}
 800ef60:	bf00      	nop
 800ef62:	e7fe      	b.n	800ef62 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef64:	f001 fbb0 	bl	80106c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef68:	f3ef 8211 	mrs	r2, BASEPRI
 800ef6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	617a      	str	r2, [r7, #20]
 800ef7e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ef80:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef88:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d22b      	bcs.n	800efec <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa0:	1c5a      	adds	r2, r3, #1
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800efa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efae:	d112      	bne.n	800efd6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d016      	beq.n	800efe6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efba:	3324      	adds	r3, #36	; 0x24
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 fda1 	bl	800fb04 <xTaskRemoveFromEventList>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00e      	beq.n	800efe6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00b      	beq.n	800efe6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	2201      	movs	r2, #1
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	e007      	b.n	800efe6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800efd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efda:	3301      	adds	r3, #1
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	b25a      	sxtb	r2, r3
 800efe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800efe6:	2301      	movs	r3, #1
 800efe8:	637b      	str	r3, [r7, #52]	; 0x34
 800efea:	e001      	b.n	800eff0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800efec:	2300      	movs	r3, #0
 800efee:	637b      	str	r3, [r7, #52]	; 0x34
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800effa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800effc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800effe:	4618      	mov	r0, r3
 800f000:	3738      	adds	r7, #56	; 0x38
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
	...

0800f008 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b08e      	sub	sp, #56	; 0x38
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f012:	2300      	movs	r3, #0
 800f014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f01a:	2300      	movs	r3, #0
 800f01c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10a      	bne.n	800f03a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f028:	f383 8811 	msr	BASEPRI, r3
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	623b      	str	r3, [r7, #32]
}
 800f036:	bf00      	nop
 800f038:	e7fe      	b.n	800f038 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00a      	beq.n	800f058 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	61fb      	str	r3, [r7, #28]
}
 800f054:	bf00      	nop
 800f056:	e7fe      	b.n	800f056 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f058:	f000 ff00 	bl	800fe5c <xTaskGetSchedulerState>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d102      	bne.n	800f068 <xQueueSemaphoreTake+0x60>
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d101      	bne.n	800f06c <xQueueSemaphoreTake+0x64>
 800f068:	2301      	movs	r3, #1
 800f06a:	e000      	b.n	800f06e <xQueueSemaphoreTake+0x66>
 800f06c:	2300      	movs	r3, #0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10a      	bne.n	800f088 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f076:	f383 8811 	msr	BASEPRI, r3
 800f07a:	f3bf 8f6f 	isb	sy
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	61bb      	str	r3, [r7, #24]
}
 800f084:	bf00      	nop
 800f086:	e7fe      	b.n	800f086 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f088:	f001 fa3c 	bl	8010504 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f090:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f094:	2b00      	cmp	r3, #0
 800f096:	d019      	beq.n	800f0cc <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09a:	1e5a      	subs	r2, r3, #1
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d104      	bne.n	800f0b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f0a8:	f001 f880 	bl	80101ac <pvTaskIncrementMutexHeldCount>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d004      	beq.n	800f0c4 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0bc:	3310      	adds	r3, #16
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 fd20 	bl	800fb04 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0c4:	f001 fa4e 	bl	8010564 <vPortExitCritical>
				return pdPASS;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e097      	b.n	800f1fc <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d111      	bne.n	800f0f6 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00a      	beq.n	800f0ee <xQueueSemaphoreTake+0xe6>
	__asm volatile
 800f0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	617b      	str	r3, [r7, #20]
}
 800f0ea:	bf00      	nop
 800f0ec:	e7fe      	b.n	800f0ec <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f0ee:	f001 fa39 	bl	8010564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e082      	b.n	800f1fc <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d106      	bne.n	800f10a <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0fc:	f107 030c 	add.w	r3, r7, #12
 800f100:	4618      	mov	r0, r3
 800f102:	f000 fd61 	bl	800fbc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f106:	2301      	movs	r3, #1
 800f108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f10a:	f001 fa2b 	bl	8010564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f10e:	f000 fb41 	bl	800f794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f112:	f001 f9f7 	bl	8010504 <vPortEnterCritical>
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f11c:	b25b      	sxtb	r3, r3
 800f11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f122:	d103      	bne.n	800f12c <xQueueSemaphoreTake+0x124>
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	2200      	movs	r2, #0
 800f128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f132:	b25b      	sxtb	r3, r3
 800f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f138:	d103      	bne.n	800f142 <xQueueSemaphoreTake+0x13a>
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f142:	f001 fa0f 	bl	8010564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f146:	463a      	mov	r2, r7
 800f148:	f107 030c 	add.w	r3, r7, #12
 800f14c:	4611      	mov	r1, r2
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 fd50 	bl	800fbf4 <xTaskCheckForTimeOut>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d132      	bne.n	800f1c0 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f15a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f15c:	f000 f928 	bl	800f3b0 <prvIsQueueEmpty>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d026      	beq.n	800f1b4 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d109      	bne.n	800f182 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 800f16e:	f001 f9c9 	bl	8010504 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	4618      	mov	r0, r3
 800f178:	f000 fe8e 	bl	800fe98 <xTaskPriorityInherit>
 800f17c:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f17e:	f001 f9f1 	bl	8010564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f184:	3324      	adds	r3, #36	; 0x24
 800f186:	683a      	ldr	r2, [r7, #0]
 800f188:	4611      	mov	r1, r2
 800f18a:	4618      	mov	r0, r3
 800f18c:	f000 fc96 	bl	800fabc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f192:	f000 f8bb 	bl	800f30c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f196:	f000 fb0b 	bl	800f7b0 <xTaskResumeAll>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f47f af73 	bne.w	800f088 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f1a2:	4b18      	ldr	r3, [pc, #96]	; (800f204 <xQueueSemaphoreTake+0x1fc>)
 800f1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	e769      	b.n	800f088 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f1b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1b6:	f000 f8a9 	bl	800f30c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1ba:	f000 faf9 	bl	800f7b0 <xTaskResumeAll>
 800f1be:	e763      	b.n	800f088 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1c2:	f000 f8a3 	bl	800f30c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1c6:	f000 faf3 	bl	800f7b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1cc:	f000 f8f0 	bl	800f3b0 <prvIsQueueEmpty>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f43f af58 	beq.w	800f088 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00d      	beq.n	800f1fa <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 800f1de:	f001 f991 	bl	8010504 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f1e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e4:	f000 f810 	bl	800f208 <prvGetDisinheritPriorityAfterTimeout>
 800f1e8:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 ff4d 	bl	8010090 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f1f6:	f001 f9b5 	bl	8010564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3738      	adds	r7, #56	; 0x38
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	e000ed04 	.word	0xe000ed04

0800f208 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f214:	2b00      	cmp	r3, #0
 800f216:	d006      	beq.n	800f226 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f1c3 0307 	rsb	r3, r3, #7
 800f222:	60fb      	str	r3, [r7, #12]
 800f224:	e001      	b.n	800f22a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f226:	2300      	movs	r3, #0
 800f228:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f22a:	68fb      	ldr	r3, [r7, #12]
	}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3714      	adds	r7, #20
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr

0800f238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f244:	2300      	movs	r3, #0
 800f246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f24c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f252:	2b00      	cmp	r3, #0
 800f254:	d10d      	bne.n	800f272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d14d      	bne.n	800f2fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	4618      	mov	r0, r3
 800f264:	f000 fe8e 	bl	800ff84 <xTaskPriorityDisinherit>
 800f268:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	609a      	str	r2, [r3, #8]
 800f270:	e043      	b.n	800f2fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d119      	bne.n	800f2ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	6858      	ldr	r0, [r3, #4]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f280:	461a      	mov	r2, r3
 800f282:	68b9      	ldr	r1, [r7, #8]
 800f284:	f001 fc94 	bl	8010bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f290:	441a      	add	r2, r3
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	685a      	ldr	r2, [r3, #4]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d32b      	bcc.n	800f2fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	605a      	str	r2, [r3, #4]
 800f2aa:	e026      	b.n	800f2fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	68d8      	ldr	r0, [r3, #12]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	68b9      	ldr	r1, [r7, #8]
 800f2b8:	f001 fc7a 	bl	8010bb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	68da      	ldr	r2, [r3, #12]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c4:	425b      	negs	r3, r3
 800f2c6:	441a      	add	r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	68da      	ldr	r2, [r3, #12]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d207      	bcs.n	800f2e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	689a      	ldr	r2, [r3, #8]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e0:	425b      	negs	r3, r3
 800f2e2:	441a      	add	r2, r3
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d105      	bne.n	800f2fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f302:	697b      	ldr	r3, [r7, #20]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3718      	adds	r7, #24
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f314:	f001 f8f6 	bl	8010504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f31e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f320:	e011      	b.n	800f346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f326:	2b00      	cmp	r3, #0
 800f328:	d012      	beq.n	800f350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3324      	adds	r3, #36	; 0x24
 800f32e:	4618      	mov	r0, r3
 800f330:	f000 fbe8 	bl	800fb04 <xTaskRemoveFromEventList>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d001      	beq.n	800f33e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f33a:	f000 fccd 	bl	800fcd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f33e:	7bfb      	ldrb	r3, [r7, #15]
 800f340:	3b01      	subs	r3, #1
 800f342:	b2db      	uxtb	r3, r3
 800f344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	dce9      	bgt.n	800f322 <prvUnlockQueue+0x16>
 800f34e:	e000      	b.n	800f352 <prvUnlockQueue+0x46>
					break;
 800f350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	22ff      	movs	r2, #255	; 0xff
 800f356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f35a:	f001 f903 	bl	8010564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f35e:	f001 f8d1 	bl	8010504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f36a:	e011      	b.n	800f390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	691b      	ldr	r3, [r3, #16]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d012      	beq.n	800f39a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	3310      	adds	r3, #16
 800f378:	4618      	mov	r0, r3
 800f37a:	f000 fbc3 	bl	800fb04 <xTaskRemoveFromEventList>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f384:	f000 fca8 	bl	800fcd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f388:	7bbb      	ldrb	r3, [r7, #14]
 800f38a:	3b01      	subs	r3, #1
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f394:	2b00      	cmp	r3, #0
 800f396:	dce9      	bgt.n	800f36c <prvUnlockQueue+0x60>
 800f398:	e000      	b.n	800f39c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f39a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	22ff      	movs	r2, #255	; 0xff
 800f3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f3a4:	f001 f8de 	bl	8010564 <vPortExitCritical>
}
 800f3a8:	bf00      	nop
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3b8:	f001 f8a4 	bl	8010504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d102      	bne.n	800f3ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	60fb      	str	r3, [r7, #12]
 800f3c8:	e001      	b.n	800f3ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3ce:	f001 f8c9 	bl	8010564 <vPortExitCritical>

	return xReturn;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3e4:	f001 f88e 	bl	8010504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d102      	bne.n	800f3fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	e001      	b.n	800f3fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3fe:	f001 f8b1 	bl	8010564 <vPortExitCritical>

	return xReturn;
 800f402:	68fb      	ldr	r3, [r7, #12]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b08c      	sub	sp, #48	; 0x30
 800f410:	af04      	add	r7, sp, #16
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	603b      	str	r3, [r7, #0]
 800f418:	4613      	mov	r3, r2
 800f41a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f41c:	88fb      	ldrh	r3, [r7, #6]
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4618      	mov	r0, r3
 800f422:	f001 f991 	bl	8010748 <pvPortMalloc>
 800f426:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00e      	beq.n	800f44c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f42e:	20b4      	movs	r0, #180	; 0xb4
 800f430:	f001 f98a 	bl	8010748 <pvPortMalloc>
 800f434:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d003      	beq.n	800f444 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	697a      	ldr	r2, [r7, #20]
 800f440:	631a      	str	r2, [r3, #48]	; 0x30
 800f442:	e005      	b.n	800f450 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f444:	6978      	ldr	r0, [r7, #20]
 800f446:	f001 fa4b 	bl	80108e0 <vPortFree>
 800f44a:	e001      	b.n	800f450 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f44c:	2300      	movs	r3, #0
 800f44e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d013      	beq.n	800f47e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f456:	88fa      	ldrh	r2, [r7, #6]
 800f458:	2300      	movs	r3, #0
 800f45a:	9303      	str	r3, [sp, #12]
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	9302      	str	r3, [sp, #8]
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	9301      	str	r3, [sp, #4]
 800f464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	68b9      	ldr	r1, [r7, #8]
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f000 f80f 	bl	800f490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f472:	69f8      	ldr	r0, [r7, #28]
 800f474:	f000 f8ae 	bl	800f5d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f478:	2301      	movs	r3, #1
 800f47a:	61bb      	str	r3, [r7, #24]
 800f47c:	e002      	b.n	800f484 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f47e:	f04f 33ff 	mov.w	r3, #4294967295
 800f482:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f484:	69bb      	ldr	r3, [r7, #24]
	}
 800f486:	4618      	mov	r0, r3
 800f488:	3720      	adds	r7, #32
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
	...

0800f490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b088      	sub	sp, #32
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
 800f49c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	f023 0307 	bic.w	r3, r3, #7
 800f4b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	f003 0307 	and.w	r3, r3, #7
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d00a      	beq.n	800f4d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c6:	f383 8811 	msr	BASEPRI, r3
 800f4ca:	f3bf 8f6f 	isb	sy
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	617b      	str	r3, [r7, #20]
}
 800f4d4:	bf00      	nop
 800f4d6:	e7fe      	b.n	800f4d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d01f      	beq.n	800f51e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f4de:	2300      	movs	r3, #0
 800f4e0:	61fb      	str	r3, [r7, #28]
 800f4e2:	e012      	b.n	800f50a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f4e4:	68ba      	ldr	r2, [r7, #8]
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	7819      	ldrb	r1, [r3, #0]
 800f4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	3334      	adds	r3, #52	; 0x34
 800f4f4:	460a      	mov	r2, r1
 800f4f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f4f8:	68ba      	ldr	r2, [r7, #8]
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d006      	beq.n	800f512 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	3301      	adds	r3, #1
 800f508:	61fb      	str	r3, [r7, #28]
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	2b0f      	cmp	r3, #15
 800f50e:	d9e9      	bls.n	800f4e4 <prvInitialiseNewTask+0x54>
 800f510:	e000      	b.n	800f514 <prvInitialiseNewTask+0x84>
			{
				break;
 800f512:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f516:	2200      	movs	r2, #0
 800f518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f51c:	e003      	b.n	800f526 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	2200      	movs	r2, #0
 800f522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	2b06      	cmp	r3, #6
 800f52a:	d901      	bls.n	800f530 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f52c:	2306      	movs	r3, #6
 800f52e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f534:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f53a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	2200      	movs	r2, #0
 800f540:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f544:	3304      	adds	r3, #4
 800f546:	4618      	mov	r0, r3
 800f548:	f7ff fa74 	bl	800ea34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	3318      	adds	r3, #24
 800f550:	4618      	mov	r0, r3
 800f552:	f7ff fa6f 	bl	800ea34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f55a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	f1c3 0207 	rsb	r2, r3, #7
 800f562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f564:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f56a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56e:	2200      	movs	r2, #0
 800f570:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	2200      	movs	r2, #0
 800f578:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	334c      	adds	r3, #76	; 0x4c
 800f580:	2260      	movs	r2, #96	; 0x60
 800f582:	2100      	movs	r1, #0
 800f584:	4618      	mov	r0, r3
 800f586:	f001 fb21 	bl	8010bcc <memset>
 800f58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58c:	4a0e      	ldr	r2, [pc, #56]	; (800f5c8 <prvInitialiseNewTask+0x138>)
 800f58e:	651a      	str	r2, [r3, #80]	; 0x50
 800f590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f592:	4a0e      	ldr	r2, [pc, #56]	; (800f5cc <prvInitialiseNewTask+0x13c>)
 800f594:	655a      	str	r2, [r3, #84]	; 0x54
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	4a0d      	ldr	r2, [pc, #52]	; (800f5d0 <prvInitialiseNewTask+0x140>)
 800f59a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800f59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5a4:	683a      	ldr	r2, [r7, #0]
 800f5a6:	68f9      	ldr	r1, [r7, #12]
 800f5a8:	69b8      	ldr	r0, [r7, #24]
 800f5aa:	f000 fe7d 	bl	80102a8 <pxPortInitialiseStack>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d002      	beq.n	800f5c0 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5c0:	bf00      	nop
 800f5c2:	3720      	adds	r7, #32
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	08011d18 	.word	0x08011d18
 800f5cc:	08011d38 	.word	0x08011d38
 800f5d0:	08011cf8 	.word	0x08011cf8

0800f5d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f5dc:	f000 ff92 	bl	8010504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f5e0:	4b24      	ldr	r3, [pc, #144]	; (800f674 <prvAddNewTaskToReadyList+0xa0>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	4a23      	ldr	r2, [pc, #140]	; (800f674 <prvAddNewTaskToReadyList+0xa0>)
 800f5e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f5ea:	4b23      	ldr	r3, [pc, #140]	; (800f678 <prvAddNewTaskToReadyList+0xa4>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d109      	bne.n	800f606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f5f2:	4a21      	ldr	r2, [pc, #132]	; (800f678 <prvAddNewTaskToReadyList+0xa4>)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f5f8:	4b1e      	ldr	r3, [pc, #120]	; (800f674 <prvAddNewTaskToReadyList+0xa0>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d110      	bne.n	800f622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f600:	f000 fb88 	bl	800fd14 <prvInitialiseTaskLists>
 800f604:	e00d      	b.n	800f622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f606:	4b1d      	ldr	r3, [pc, #116]	; (800f67c <prvAddNewTaskToReadyList+0xa8>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d109      	bne.n	800f622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f60e:	4b1a      	ldr	r3, [pc, #104]	; (800f678 <prvAddNewTaskToReadyList+0xa4>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f618:	429a      	cmp	r2, r3
 800f61a:	d802      	bhi.n	800f622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f61c:	4a16      	ldr	r2, [pc, #88]	; (800f678 <prvAddNewTaskToReadyList+0xa4>)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f622:	4b17      	ldr	r3, [pc, #92]	; (800f680 <prvAddNewTaskToReadyList+0xac>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	3301      	adds	r3, #1
 800f628:	4a15      	ldr	r2, [pc, #84]	; (800f680 <prvAddNewTaskToReadyList+0xac>)
 800f62a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f630:	2201      	movs	r2, #1
 800f632:	409a      	lsls	r2, r3
 800f634:	4b13      	ldr	r3, [pc, #76]	; (800f684 <prvAddNewTaskToReadyList+0xb0>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4313      	orrs	r3, r2
 800f63a:	4a12      	ldr	r2, [pc, #72]	; (800f684 <prvAddNewTaskToReadyList+0xb0>)
 800f63c:	6013      	str	r3, [r2, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f642:	4613      	mov	r3, r2
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	4413      	add	r3, r2
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	4a0f      	ldr	r2, [pc, #60]	; (800f688 <prvAddNewTaskToReadyList+0xb4>)
 800f64c:	441a      	add	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3304      	adds	r3, #4
 800f652:	4619      	mov	r1, r3
 800f654:	4610      	mov	r0, r2
 800f656:	f7ff f9fa 	bl	800ea4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f65a:	f000 ff83 	bl	8010564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f65e:	4b07      	ldr	r3, [pc, #28]	; (800f67c <prvAddNewTaskToReadyList+0xa8>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d001      	beq.n	800f66a <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f666:	4b04      	ldr	r3, [pc, #16]	; (800f678 <prvAddNewTaskToReadyList+0xa4>)
 800f668:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f66a:	bf00      	nop
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20000a6c 	.word	0x20000a6c
 800f678:	2000096c 	.word	0x2000096c
 800f67c:	20000a78 	.word	0x20000a78
 800f680:	20000a88 	.word	0x20000a88
 800f684:	20000a74 	.word	0x20000a74
 800f688:	20000970 	.word	0x20000970

0800f68c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f694:	2300      	movs	r3, #0
 800f696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d017      	beq.n	800f6ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f69e:	4b13      	ldr	r3, [pc, #76]	; (800f6ec <vTaskDelay+0x60>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00a      	beq.n	800f6bc <vTaskDelay+0x30>
	__asm volatile
 800f6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6aa:	f383 8811 	msr	BASEPRI, r3
 800f6ae:	f3bf 8f6f 	isb	sy
 800f6b2:	f3bf 8f4f 	dsb	sy
 800f6b6:	60bb      	str	r3, [r7, #8]
}
 800f6b8:	bf00      	nop
 800f6ba:	e7fe      	b.n	800f6ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f6bc:	f000 f86a 	bl	800f794 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fd86 	bl	80101d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f6c8:	f000 f872 	bl	800f7b0 <xTaskResumeAll>
 800f6cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d107      	bne.n	800f6e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f6d4:	4b06      	ldr	r3, [pc, #24]	; (800f6f0 <vTaskDelay+0x64>)
 800f6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6e4:	bf00      	nop
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20000a94 	.word	0x20000a94
 800f6f0:	e000ed04 	.word	0xe000ed04

0800f6f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800f6fa:	4b1e      	ldr	r3, [pc, #120]	; (800f774 <vTaskStartScheduler+0x80>)
 800f6fc:	9301      	str	r3, [sp, #4]
 800f6fe:	2300      	movs	r3, #0
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	2300      	movs	r3, #0
 800f704:	2280      	movs	r2, #128	; 0x80
 800f706:	491c      	ldr	r1, [pc, #112]	; (800f778 <vTaskStartScheduler+0x84>)
 800f708:	481c      	ldr	r0, [pc, #112]	; (800f77c <vTaskStartScheduler+0x88>)
 800f70a:	f7ff fe7f 	bl	800f40c <xTaskCreate>
 800f70e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d11b      	bne.n	800f74e <vTaskStartScheduler+0x5a>
	__asm volatile
 800f716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71a:	f383 8811 	msr	BASEPRI, r3
 800f71e:	f3bf 8f6f 	isb	sy
 800f722:	f3bf 8f4f 	dsb	sy
 800f726:	60bb      	str	r3, [r7, #8]
}
 800f728:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f72a:	4b15      	ldr	r3, [pc, #84]	; (800f780 <vTaskStartScheduler+0x8c>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	334c      	adds	r3, #76	; 0x4c
 800f730:	4a14      	ldr	r2, [pc, #80]	; (800f784 <vTaskStartScheduler+0x90>)
 800f732:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f734:	4b14      	ldr	r3, [pc, #80]	; (800f788 <vTaskStartScheduler+0x94>)
 800f736:	f04f 32ff 	mov.w	r2, #4294967295
 800f73a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f73c:	4b13      	ldr	r3, [pc, #76]	; (800f78c <vTaskStartScheduler+0x98>)
 800f73e:	2201      	movs	r2, #1
 800f740:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f742:	4b13      	ldr	r3, [pc, #76]	; (800f790 <vTaskStartScheduler+0x9c>)
 800f744:	2200      	movs	r2, #0
 800f746:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f748:	f000 fe3a 	bl	80103c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f74c:	e00e      	b.n	800f76c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f754:	d10a      	bne.n	800f76c <vTaskStartScheduler+0x78>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	607b      	str	r3, [r7, #4]
}
 800f768:	bf00      	nop
 800f76a:	e7fe      	b.n	800f76a <vTaskStartScheduler+0x76>
}
 800f76c:	bf00      	nop
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	20000a90 	.word	0x20000a90
 800f778:	08011cb0 	.word	0x08011cb0
 800f77c:	0800fcf1 	.word	0x0800fcf1
 800f780:	2000096c 	.word	0x2000096c
 800f784:	20000014 	.word	0x20000014
 800f788:	20000a8c 	.word	0x20000a8c
 800f78c:	20000a78 	.word	0x20000a78
 800f790:	20000a70 	.word	0x20000a70

0800f794 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f794:	b480      	push	{r7}
 800f796:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f798:	4b04      	ldr	r3, [pc, #16]	; (800f7ac <vTaskSuspendAll+0x18>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	3301      	adds	r3, #1
 800f79e:	4a03      	ldr	r2, [pc, #12]	; (800f7ac <vTaskSuspendAll+0x18>)
 800f7a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f7a2:	bf00      	nop
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	20000a94 	.word	0x20000a94

0800f7b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7be:	4b3b      	ldr	r3, [pc, #236]	; (800f8ac <xTaskResumeAll+0xfc>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10a      	bne.n	800f7dc <xTaskResumeAll+0x2c>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	603b      	str	r3, [r7, #0]
}
 800f7d8:	bf00      	nop
 800f7da:	e7fe      	b.n	800f7da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7dc:	f000 fe92 	bl	8010504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f7e0:	4b32      	ldr	r3, [pc, #200]	; (800f8ac <xTaskResumeAll+0xfc>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	4a31      	ldr	r2, [pc, #196]	; (800f8ac <xTaskResumeAll+0xfc>)
 800f7e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7ea:	4b30      	ldr	r3, [pc, #192]	; (800f8ac <xTaskResumeAll+0xfc>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d155      	bne.n	800f89e <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7f2:	4b2f      	ldr	r3, [pc, #188]	; (800f8b0 <xTaskResumeAll+0x100>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d051      	beq.n	800f89e <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7fa:	e02e      	b.n	800f85a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7fc:	4b2d      	ldr	r3, [pc, #180]	; (800f8b4 <xTaskResumeAll+0x104>)
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	3318      	adds	r3, #24
 800f808:	4618      	mov	r0, r3
 800f80a:	f7ff f97d 	bl	800eb08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3304      	adds	r3, #4
 800f812:	4618      	mov	r0, r3
 800f814:	f7ff f978 	bl	800eb08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81c:	2201      	movs	r2, #1
 800f81e:	409a      	lsls	r2, r3
 800f820:	4b25      	ldr	r3, [pc, #148]	; (800f8b8 <xTaskResumeAll+0x108>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4313      	orrs	r3, r2
 800f826:	4a24      	ldr	r2, [pc, #144]	; (800f8b8 <xTaskResumeAll+0x108>)
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f82e:	4613      	mov	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	4413      	add	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4a21      	ldr	r2, [pc, #132]	; (800f8bc <xTaskResumeAll+0x10c>)
 800f838:	441a      	add	r2, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	3304      	adds	r3, #4
 800f83e:	4619      	mov	r1, r3
 800f840:	4610      	mov	r0, r2
 800f842:	f7ff f904 	bl	800ea4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84a:	4b1d      	ldr	r3, [pc, #116]	; (800f8c0 <xTaskResumeAll+0x110>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f850:	429a      	cmp	r2, r3
 800f852:	d302      	bcc.n	800f85a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f854:	4b1b      	ldr	r3, [pc, #108]	; (800f8c4 <xTaskResumeAll+0x114>)
 800f856:	2201      	movs	r2, #1
 800f858:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f85a:	4b16      	ldr	r3, [pc, #88]	; (800f8b4 <xTaskResumeAll+0x104>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1cc      	bne.n	800f7fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d001      	beq.n	800f86c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f868:	f000 fad8 	bl	800fe1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f86c:	4b16      	ldr	r3, [pc, #88]	; (800f8c8 <xTaskResumeAll+0x118>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d010      	beq.n	800f89a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f878:	f000 f828 	bl	800f8cc <xTaskIncrementTick>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f882:	4b10      	ldr	r3, [pc, #64]	; (800f8c4 <xTaskResumeAll+0x114>)
 800f884:	2201      	movs	r2, #1
 800f886:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1f1      	bne.n	800f878 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f894:	4b0c      	ldr	r3, [pc, #48]	; (800f8c8 <xTaskResumeAll+0x118>)
 800f896:	2200      	movs	r2, #0
 800f898:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f89a:	4b0a      	ldr	r3, [pc, #40]	; (800f8c4 <xTaskResumeAll+0x114>)
 800f89c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f89e:	f000 fe61 	bl	8010564 <vPortExitCritical>

	return xAlreadyYielded;
 800f8a2:	687b      	ldr	r3, [r7, #4]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	20000a94 	.word	0x20000a94
 800f8b0:	20000a6c 	.word	0x20000a6c
 800f8b4:	20000a2c 	.word	0x20000a2c
 800f8b8:	20000a74 	.word	0x20000a74
 800f8bc:	20000970 	.word	0x20000970
 800f8c0:	2000096c 	.word	0x2000096c
 800f8c4:	20000a80 	.word	0x20000a80
 800f8c8:	20000a7c 	.word	0x20000a7c

0800f8cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b086      	sub	sp, #24
 800f8d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8d6:	4b3f      	ldr	r3, [pc, #252]	; (800f9d4 <xTaskIncrementTick+0x108>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d16f      	bne.n	800f9be <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f8de:	4b3e      	ldr	r3, [pc, #248]	; (800f9d8 <xTaskIncrementTick+0x10c>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f8e6:	4a3c      	ldr	r2, [pc, #240]	; (800f9d8 <xTaskIncrementTick+0x10c>)
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d120      	bne.n	800f934 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f8f2:	4b3a      	ldr	r3, [pc, #232]	; (800f9dc <xTaskIncrementTick+0x110>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d00a      	beq.n	800f912 <xTaskIncrementTick+0x46>
	__asm volatile
 800f8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f900:	f383 8811 	msr	BASEPRI, r3
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	603b      	str	r3, [r7, #0]
}
 800f90e:	bf00      	nop
 800f910:	e7fe      	b.n	800f910 <xTaskIncrementTick+0x44>
 800f912:	4b32      	ldr	r3, [pc, #200]	; (800f9dc <xTaskIncrementTick+0x110>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	4b31      	ldr	r3, [pc, #196]	; (800f9e0 <xTaskIncrementTick+0x114>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a2f      	ldr	r2, [pc, #188]	; (800f9dc <xTaskIncrementTick+0x110>)
 800f91e:	6013      	str	r3, [r2, #0]
 800f920:	4a2f      	ldr	r2, [pc, #188]	; (800f9e0 <xTaskIncrementTick+0x114>)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6013      	str	r3, [r2, #0]
 800f926:	4b2f      	ldr	r3, [pc, #188]	; (800f9e4 <xTaskIncrementTick+0x118>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3301      	adds	r3, #1
 800f92c:	4a2d      	ldr	r2, [pc, #180]	; (800f9e4 <xTaskIncrementTick+0x118>)
 800f92e:	6013      	str	r3, [r2, #0]
 800f930:	f000 fa74 	bl	800fe1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f934:	4b2c      	ldr	r3, [pc, #176]	; (800f9e8 <xTaskIncrementTick+0x11c>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d344      	bcc.n	800f9c8 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f93e:	4b27      	ldr	r3, [pc, #156]	; (800f9dc <xTaskIncrementTick+0x110>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d104      	bne.n	800f952 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f948:	4b27      	ldr	r3, [pc, #156]	; (800f9e8 <xTaskIncrementTick+0x11c>)
 800f94a:	f04f 32ff 	mov.w	r2, #4294967295
 800f94e:	601a      	str	r2, [r3, #0]
					break;
 800f950:	e03a      	b.n	800f9c8 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f952:	4b22      	ldr	r3, [pc, #136]	; (800f9dc <xTaskIncrementTick+0x110>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	429a      	cmp	r2, r3
 800f968:	d203      	bcs.n	800f972 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f96a:	4a1f      	ldr	r2, [pc, #124]	; (800f9e8 <xTaskIncrementTick+0x11c>)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f970:	e02a      	b.n	800f9c8 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	3304      	adds	r3, #4
 800f976:	4618      	mov	r0, r3
 800f978:	f7ff f8c6 	bl	800eb08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f980:	2b00      	cmp	r3, #0
 800f982:	d004      	beq.n	800f98e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	3318      	adds	r3, #24
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff f8bd 	bl	800eb08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f992:	2201      	movs	r2, #1
 800f994:	409a      	lsls	r2, r3
 800f996:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <xTaskIncrementTick+0x120>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4313      	orrs	r3, r2
 800f99c:	4a13      	ldr	r2, [pc, #76]	; (800f9ec <xTaskIncrementTick+0x120>)
 800f99e:	6013      	str	r3, [r2, #0]
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4413      	add	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4a10      	ldr	r2, [pc, #64]	; (800f9f0 <xTaskIncrementTick+0x124>)
 800f9ae:	441a      	add	r2, r3
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	f7ff f849 	bl	800ea4e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9bc:	e7bf      	b.n	800f93e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f9be:	4b0d      	ldr	r3, [pc, #52]	; (800f9f4 <xTaskIncrementTick+0x128>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	4a0b      	ldr	r2, [pc, #44]	; (800f9f4 <xTaskIncrementTick+0x128>)
 800f9c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f9c8:	697b      	ldr	r3, [r7, #20]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3718      	adds	r7, #24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	20000a94 	.word	0x20000a94
 800f9d8:	20000a70 	.word	0x20000a70
 800f9dc:	20000a24 	.word	0x20000a24
 800f9e0:	20000a28 	.word	0x20000a28
 800f9e4:	20000a84 	.word	0x20000a84
 800f9e8:	20000a8c 	.word	0x20000a8c
 800f9ec:	20000a74 	.word	0x20000a74
 800f9f0:	20000970 	.word	0x20000970
 800f9f4:	20000a7c 	.word	0x20000a7c

0800f9f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b087      	sub	sp, #28
 800f9fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9fe:	4b29      	ldr	r3, [pc, #164]	; (800faa4 <vTaskSwitchContext+0xac>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa06:	4b28      	ldr	r3, [pc, #160]	; (800faa8 <vTaskSwitchContext+0xb0>)
 800fa08:	2201      	movs	r2, #1
 800fa0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa0c:	e044      	b.n	800fa98 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fa0e:	4b26      	ldr	r3, [pc, #152]	; (800faa8 <vTaskSwitchContext+0xb0>)
 800fa10:	2200      	movs	r2, #0
 800fa12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa14:	4b25      	ldr	r3, [pc, #148]	; (800faac <vTaskSwitchContext+0xb4>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	fab3 f383 	clz	r3, r3
 800fa20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fa22:	7afb      	ldrb	r3, [r7, #11]
 800fa24:	f1c3 031f 	rsb	r3, r3, #31
 800fa28:	617b      	str	r3, [r7, #20]
 800fa2a:	4921      	ldr	r1, [pc, #132]	; (800fab0 <vTaskSwitchContext+0xb8>)
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	440b      	add	r3, r1
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10a      	bne.n	800fa54 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	607b      	str	r3, [r7, #4]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <vTaskSwitchContext+0x5a>
 800fa54:	697a      	ldr	r2, [r7, #20]
 800fa56:	4613      	mov	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	4413      	add	r3, r2
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4a14      	ldr	r2, [pc, #80]	; (800fab0 <vTaskSwitchContext+0xb8>)
 800fa60:	4413      	add	r3, r2
 800fa62:	613b      	str	r3, [r7, #16]
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	605a      	str	r2, [r3, #4]
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	685a      	ldr	r2, [r3, #4]
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	3308      	adds	r3, #8
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d104      	bne.n	800fa84 <vTaskSwitchContext+0x8c>
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	685a      	ldr	r2, [r3, #4]
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	605a      	str	r2, [r3, #4]
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	4a0a      	ldr	r2, [pc, #40]	; (800fab4 <vTaskSwitchContext+0xbc>)
 800fa8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa8e:	4b09      	ldr	r3, [pc, #36]	; (800fab4 <vTaskSwitchContext+0xbc>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	334c      	adds	r3, #76	; 0x4c
 800fa94:	4a08      	ldr	r2, [pc, #32]	; (800fab8 <vTaskSwitchContext+0xc0>)
 800fa96:	6013      	str	r3, [r2, #0]
}
 800fa98:	bf00      	nop
 800fa9a:	371c      	adds	r7, #28
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	20000a94 	.word	0x20000a94
 800faa8:	20000a80 	.word	0x20000a80
 800faac:	20000a74 	.word	0x20000a74
 800fab0:	20000970 	.word	0x20000970
 800fab4:	2000096c 	.word	0x2000096c
 800fab8:	20000014 	.word	0x20000014

0800fabc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10a      	bne.n	800fae2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad0:	f383 8811 	msr	BASEPRI, r3
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	60fb      	str	r3, [r7, #12]
}
 800fade:	bf00      	nop
 800fae0:	e7fe      	b.n	800fae0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fae2:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <vTaskPlaceOnEventList+0x44>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	3318      	adds	r3, #24
 800fae8:	4619      	mov	r1, r3
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7fe ffd3 	bl	800ea96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800faf0:	2101      	movs	r1, #1
 800faf2:	6838      	ldr	r0, [r7, #0]
 800faf4:	f000 fb6e 	bl	80101d4 <prvAddCurrentTaskToDelayedList>
}
 800faf8:	bf00      	nop
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	2000096c 	.word	0x2000096c

0800fb04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d10a      	bne.n	800fb30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	60fb      	str	r3, [r7, #12]
}
 800fb2c:	bf00      	nop
 800fb2e:	e7fe      	b.n	800fb2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	3318      	adds	r3, #24
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7fe ffe7 	bl	800eb08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb3a:	4b1d      	ldr	r3, [pc, #116]	; (800fbb0 <xTaskRemoveFromEventList+0xac>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d11c      	bne.n	800fb7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	3304      	adds	r3, #4
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fe ffde 	bl	800eb08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb50:	2201      	movs	r2, #1
 800fb52:	409a      	lsls	r2, r3
 800fb54:	4b17      	ldr	r3, [pc, #92]	; (800fbb4 <xTaskRemoveFromEventList+0xb0>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	4a16      	ldr	r2, [pc, #88]	; (800fbb4 <xTaskRemoveFromEventList+0xb0>)
 800fb5c:	6013      	str	r3, [r2, #0]
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb62:	4613      	mov	r3, r2
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	4413      	add	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4a13      	ldr	r2, [pc, #76]	; (800fbb8 <xTaskRemoveFromEventList+0xb4>)
 800fb6c:	441a      	add	r2, r3
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	3304      	adds	r3, #4
 800fb72:	4619      	mov	r1, r3
 800fb74:	4610      	mov	r0, r2
 800fb76:	f7fe ff6a 	bl	800ea4e <vListInsertEnd>
 800fb7a:	e005      	b.n	800fb88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	3318      	adds	r3, #24
 800fb80:	4619      	mov	r1, r3
 800fb82:	480e      	ldr	r0, [pc, #56]	; (800fbbc <xTaskRemoveFromEventList+0xb8>)
 800fb84:	f7fe ff63 	bl	800ea4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb8c:	4b0c      	ldr	r3, [pc, #48]	; (800fbc0 <xTaskRemoveFromEventList+0xbc>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d905      	bls.n	800fba2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fb96:	2301      	movs	r3, #1
 800fb98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fb9a:	4b0a      	ldr	r3, [pc, #40]	; (800fbc4 <xTaskRemoveFromEventList+0xc0>)
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	e001      	b.n	800fba6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fba2:	2300      	movs	r3, #0
 800fba4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fba6:	697b      	ldr	r3, [r7, #20]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	20000a94 	.word	0x20000a94
 800fbb4:	20000a74 	.word	0x20000a74
 800fbb8:	20000970 	.word	0x20000970
 800fbbc:	20000a2c 	.word	0x20000a2c
 800fbc0:	2000096c 	.word	0x2000096c
 800fbc4:	20000a80 	.word	0x20000a80

0800fbc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fbd0:	4b06      	ldr	r3, [pc, #24]	; (800fbec <vTaskInternalSetTimeOutState+0x24>)
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fbd8:	4b05      	ldr	r3, [pc, #20]	; (800fbf0 <vTaskInternalSetTimeOutState+0x28>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	605a      	str	r2, [r3, #4]
}
 800fbe0:	bf00      	nop
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	20000a84 	.word	0x20000a84
 800fbf0:	20000a70 	.word	0x20000a70

0800fbf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b088      	sub	sp, #32
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d10a      	bne.n	800fc1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc08:	f383 8811 	msr	BASEPRI, r3
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	f3bf 8f4f 	dsb	sy
 800fc14:	613b      	str	r3, [r7, #16]
}
 800fc16:	bf00      	nop
 800fc18:	e7fe      	b.n	800fc18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10a      	bne.n	800fc36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	60fb      	str	r3, [r7, #12]
}
 800fc32:	bf00      	nop
 800fc34:	e7fe      	b.n	800fc34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fc36:	f000 fc65 	bl	8010504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fc3a:	4b24      	ldr	r3, [pc, #144]	; (800fccc <xTaskCheckForTimeOut+0xd8>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	69ba      	ldr	r2, [r7, #24]
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800fc4a:	4b21      	ldr	r3, [pc, #132]	; (800fcd0 <xTaskCheckForTimeOut+0xdc>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d007      	beq.n	800fc66 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800fc56:	4b1e      	ldr	r3, [pc, #120]	; (800fcd0 <xTaskCheckForTimeOut+0xdc>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				xReturn = pdTRUE;
 800fc60:	2301      	movs	r3, #1
 800fc62:	61fb      	str	r3, [r7, #28]
 800fc64:	e02b      	b.n	800fcbe <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6e:	d102      	bne.n	800fc76 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fc70:	2300      	movs	r3, #0
 800fc72:	61fb      	str	r3, [r7, #28]
 800fc74:	e023      	b.n	800fcbe <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	4b16      	ldr	r3, [pc, #88]	; (800fcd4 <xTaskCheckForTimeOut+0xe0>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d007      	beq.n	800fc92 <xTaskCheckForTimeOut+0x9e>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	69ba      	ldr	r2, [r7, #24]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d302      	bcc.n	800fc92 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	61fb      	str	r3, [r7, #28]
 800fc90:	e015      	b.n	800fcbe <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d20b      	bcs.n	800fcb4 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	1ad2      	subs	r2, r2, r3
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff ff8d 	bl	800fbc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	61fb      	str	r3, [r7, #28]
 800fcb2:	e004      	b.n	800fcbe <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fcbe:	f000 fc51 	bl	8010564 <vPortExitCritical>

	return xReturn;
 800fcc2:	69fb      	ldr	r3, [r7, #28]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3720      	adds	r7, #32
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	20000a70 	.word	0x20000a70
 800fcd0:	2000096c 	.word	0x2000096c
 800fcd4:	20000a84 	.word	0x20000a84

0800fcd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fcd8:	b480      	push	{r7}
 800fcda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fcdc:	4b03      	ldr	r3, [pc, #12]	; (800fcec <vTaskMissedYield+0x14>)
 800fcde:	2201      	movs	r2, #1
 800fce0:	601a      	str	r2, [r3, #0]
}
 800fce2:	bf00      	nop
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	20000a80 	.word	0x20000a80

0800fcf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fcf8:	f000 f84c 	bl	800fd94 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800fcfc:	4b04      	ldr	r3, [pc, #16]	; (800fd10 <prvIdleTask+0x20>)
 800fcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	f3bf 8f4f 	dsb	sy
 800fd08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd0c:	e7f4      	b.n	800fcf8 <prvIdleTask+0x8>
 800fd0e:	bf00      	nop
 800fd10:	e000ed04 	.word	0xe000ed04

0800fd14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	607b      	str	r3, [r7, #4]
 800fd1e:	e00c      	b.n	800fd3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	4613      	mov	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4413      	add	r3, r2
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4a12      	ldr	r2, [pc, #72]	; (800fd74 <prvInitialiseTaskLists+0x60>)
 800fd2c:	4413      	add	r3, r2
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fe60 	bl	800e9f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3301      	adds	r3, #1
 800fd38:	607b      	str	r3, [r7, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b06      	cmp	r3, #6
 800fd3e:	d9ef      	bls.n	800fd20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd40:	480d      	ldr	r0, [pc, #52]	; (800fd78 <prvInitialiseTaskLists+0x64>)
 800fd42:	f7fe fe57 	bl	800e9f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd46:	480d      	ldr	r0, [pc, #52]	; (800fd7c <prvInitialiseTaskLists+0x68>)
 800fd48:	f7fe fe54 	bl	800e9f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fd4c:	480c      	ldr	r0, [pc, #48]	; (800fd80 <prvInitialiseTaskLists+0x6c>)
 800fd4e:	f7fe fe51 	bl	800e9f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fd52:	480c      	ldr	r0, [pc, #48]	; (800fd84 <prvInitialiseTaskLists+0x70>)
 800fd54:	f7fe fe4e 	bl	800e9f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fd58:	480b      	ldr	r0, [pc, #44]	; (800fd88 <prvInitialiseTaskLists+0x74>)
 800fd5a:	f7fe fe4b 	bl	800e9f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fd5e:	4b0b      	ldr	r3, [pc, #44]	; (800fd8c <prvInitialiseTaskLists+0x78>)
 800fd60:	4a05      	ldr	r2, [pc, #20]	; (800fd78 <prvInitialiseTaskLists+0x64>)
 800fd62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fd64:	4b0a      	ldr	r3, [pc, #40]	; (800fd90 <prvInitialiseTaskLists+0x7c>)
 800fd66:	4a05      	ldr	r2, [pc, #20]	; (800fd7c <prvInitialiseTaskLists+0x68>)
 800fd68:	601a      	str	r2, [r3, #0]
}
 800fd6a:	bf00      	nop
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	20000970 	.word	0x20000970
 800fd78:	200009fc 	.word	0x200009fc
 800fd7c:	20000a10 	.word	0x20000a10
 800fd80:	20000a2c 	.word	0x20000a2c
 800fd84:	20000a40 	.word	0x20000a40
 800fd88:	20000a58 	.word	0x20000a58
 800fd8c:	20000a24 	.word	0x20000a24
 800fd90:	20000a28 	.word	0x20000a28

0800fd94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd9a:	e019      	b.n	800fdd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fd9c:	f000 fbb2 	bl	8010504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda0:	4b10      	ldr	r3, [pc, #64]	; (800fde4 <prvCheckTasksWaitingTermination+0x50>)
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3304      	adds	r3, #4
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fe feab 	bl	800eb08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fdb2:	4b0d      	ldr	r3, [pc, #52]	; (800fde8 <prvCheckTasksWaitingTermination+0x54>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	4a0b      	ldr	r2, [pc, #44]	; (800fde8 <prvCheckTasksWaitingTermination+0x54>)
 800fdba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fdbc:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <prvCheckTasksWaitingTermination+0x58>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	4a0a      	ldr	r2, [pc, #40]	; (800fdec <prvCheckTasksWaitingTermination+0x58>)
 800fdc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fdc6:	f000 fbcd 	bl	8010564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 f810 	bl	800fdf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdd0:	4b06      	ldr	r3, [pc, #24]	; (800fdec <prvCheckTasksWaitingTermination+0x58>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1e1      	bne.n	800fd9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fdd8:	bf00      	nop
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	20000a40 	.word	0x20000a40
 800fde8:	20000a6c 	.word	0x20000a6c
 800fdec:	20000a54 	.word	0x20000a54

0800fdf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	334c      	adds	r3, #76	; 0x4c
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f000 fefb 	bl	8010bf8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe06:	4618      	mov	r0, r3
 800fe08:	f000 fd6a 	bl	80108e0 <vPortFree>
			vPortFree( pxTCB );
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 fd67 	bl	80108e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe12:	bf00      	nop
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
	...

0800fe1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe22:	4b0c      	ldr	r3, [pc, #48]	; (800fe54 <prvResetNextTaskUnblockTime+0x38>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d104      	bne.n	800fe36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fe2c:	4b0a      	ldr	r3, [pc, #40]	; (800fe58 <prvResetNextTaskUnblockTime+0x3c>)
 800fe2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fe34:	e008      	b.n	800fe48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe36:	4b07      	ldr	r3, [pc, #28]	; (800fe54 <prvResetNextTaskUnblockTime+0x38>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	4a04      	ldr	r2, [pc, #16]	; (800fe58 <prvResetNextTaskUnblockTime+0x3c>)
 800fe46:	6013      	str	r3, [r2, #0]
}
 800fe48:	bf00      	nop
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr
 800fe54:	20000a24 	.word	0x20000a24
 800fe58:	20000a8c 	.word	0x20000a8c

0800fe5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fe62:	4b0b      	ldr	r3, [pc, #44]	; (800fe90 <xTaskGetSchedulerState+0x34>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d102      	bne.n	800fe70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	607b      	str	r3, [r7, #4]
 800fe6e:	e008      	b.n	800fe82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe70:	4b08      	ldr	r3, [pc, #32]	; (800fe94 <xTaskGetSchedulerState+0x38>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d102      	bne.n	800fe7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe78:	2302      	movs	r3, #2
 800fe7a:	607b      	str	r3, [r7, #4]
 800fe7c:	e001      	b.n	800fe82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe82:	687b      	ldr	r3, [r7, #4]
	}
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr
 800fe90:	20000a78 	.word	0x20000a78
 800fe94:	20000a94 	.word	0x20000a94

0800fe98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fea4:	2300      	movs	r3, #0
 800fea6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d05e      	beq.n	800ff6c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb2:	4b31      	ldr	r3, [pc, #196]	; (800ff78 <xTaskPriorityInherit+0xe0>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb8:	429a      	cmp	r2, r3
 800feba:	d24e      	bcs.n	800ff5a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	db06      	blt.n	800fed2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fec4:	4b2c      	ldr	r3, [pc, #176]	; (800ff78 <xTaskPriorityInherit+0xe0>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feca:	f1c3 0207 	rsb	r2, r3, #7
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	6959      	ldr	r1, [r3, #20]
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feda:	4613      	mov	r3, r2
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	4a26      	ldr	r2, [pc, #152]	; (800ff7c <xTaskPriorityInherit+0xe4>)
 800fee4:	4413      	add	r3, r2
 800fee6:	4299      	cmp	r1, r3
 800fee8:	d12f      	bne.n	800ff4a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	3304      	adds	r3, #4
 800feee:	4618      	mov	r0, r3
 800fef0:	f7fe fe0a 	bl	800eb08 <uxListRemove>
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d10a      	bne.n	800ff10 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefe:	2201      	movs	r2, #1
 800ff00:	fa02 f303 	lsl.w	r3, r2, r3
 800ff04:	43da      	mvns	r2, r3
 800ff06:	4b1e      	ldr	r3, [pc, #120]	; (800ff80 <xTaskPriorityInherit+0xe8>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	4a1c      	ldr	r2, [pc, #112]	; (800ff80 <xTaskPriorityInherit+0xe8>)
 800ff0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff10:	4b19      	ldr	r3, [pc, #100]	; (800ff78 <xTaskPriorityInherit+0xe0>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1e:	2201      	movs	r2, #1
 800ff20:	409a      	lsls	r2, r3
 800ff22:	4b17      	ldr	r3, [pc, #92]	; (800ff80 <xTaskPriorityInherit+0xe8>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	4a15      	ldr	r2, [pc, #84]	; (800ff80 <xTaskPriorityInherit+0xe8>)
 800ff2a:	6013      	str	r3, [r2, #0]
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff30:	4613      	mov	r3, r2
 800ff32:	009b      	lsls	r3, r3, #2
 800ff34:	4413      	add	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	4a10      	ldr	r2, [pc, #64]	; (800ff7c <xTaskPriorityInherit+0xe4>)
 800ff3a:	441a      	add	r2, r3
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	3304      	adds	r3, #4
 800ff40:	4619      	mov	r1, r3
 800ff42:	4610      	mov	r0, r2
 800ff44:	f7fe fd83 	bl	800ea4e <vListInsertEnd>
 800ff48:	e004      	b.n	800ff54 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff4a:	4b0b      	ldr	r3, [pc, #44]	; (800ff78 <xTaskPriorityInherit+0xe0>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ff54:	2301      	movs	r3, #1
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	e008      	b.n	800ff6c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff5e:	4b06      	ldr	r3, [pc, #24]	; (800ff78 <xTaskPriorityInherit+0xe0>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d201      	bcs.n	800ff6c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
	}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	2000096c 	.word	0x2000096c
 800ff7c:	20000970 	.word	0x20000970
 800ff80:	20000a74 	.word	0x20000a74

0800ff84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b086      	sub	sp, #24
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff90:	2300      	movs	r3, #0
 800ff92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d06e      	beq.n	8010078 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff9a:	4b3a      	ldr	r3, [pc, #232]	; (8010084 <xTaskPriorityDisinherit+0x100>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	693a      	ldr	r2, [r7, #16]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d00a      	beq.n	800ffba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ffa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa8:	f383 8811 	msr	BASEPRI, r3
 800ffac:	f3bf 8f6f 	isb	sy
 800ffb0:	f3bf 8f4f 	dsb	sy
 800ffb4:	60fb      	str	r3, [r7, #12]
}
 800ffb6:	bf00      	nop
 800ffb8:	e7fe      	b.n	800ffb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d10a      	bne.n	800ffd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ffc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc6:	f383 8811 	msr	BASEPRI, r3
 800ffca:	f3bf 8f6f 	isb	sy
 800ffce:	f3bf 8f4f 	dsb	sy
 800ffd2:	60bb      	str	r3, [r7, #8]
}
 800ffd4:	bf00      	nop
 800ffd6:	e7fe      	b.n	800ffd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffdc:	1e5a      	subs	r2, r3, #1
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d044      	beq.n	8010078 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d140      	bne.n	8010078 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	3304      	adds	r3, #4
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fe fd84 	bl	800eb08 <uxListRemove>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	d115      	bne.n	8010032 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801000a:	491f      	ldr	r1, [pc, #124]	; (8010088 <xTaskPriorityDisinherit+0x104>)
 801000c:	4613      	mov	r3, r2
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4413      	add	r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	440b      	add	r3, r1
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d10a      	bne.n	8010032 <xTaskPriorityDisinherit+0xae>
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010020:	2201      	movs	r2, #1
 8010022:	fa02 f303 	lsl.w	r3, r2, r3
 8010026:	43da      	mvns	r2, r3
 8010028:	4b18      	ldr	r3, [pc, #96]	; (801008c <xTaskPriorityDisinherit+0x108>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4013      	ands	r3, r2
 801002e:	4a17      	ldr	r2, [pc, #92]	; (801008c <xTaskPriorityDisinherit+0x108>)
 8010030:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003e:	f1c3 0207 	rsb	r2, r3, #7
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004a:	2201      	movs	r2, #1
 801004c:	409a      	lsls	r2, r3
 801004e:	4b0f      	ldr	r3, [pc, #60]	; (801008c <xTaskPriorityDisinherit+0x108>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4313      	orrs	r3, r2
 8010054:	4a0d      	ldr	r2, [pc, #52]	; (801008c <xTaskPriorityDisinherit+0x108>)
 8010056:	6013      	str	r3, [r2, #0]
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801005c:	4613      	mov	r3, r2
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	4413      	add	r3, r2
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	4a08      	ldr	r2, [pc, #32]	; (8010088 <xTaskPriorityDisinherit+0x104>)
 8010066:	441a      	add	r2, r3
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	3304      	adds	r3, #4
 801006c:	4619      	mov	r1, r3
 801006e:	4610      	mov	r0, r2
 8010070:	f7fe fced 	bl	800ea4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010074:	2301      	movs	r3, #1
 8010076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010078:	697b      	ldr	r3, [r7, #20]
	}
 801007a:	4618      	mov	r0, r3
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	2000096c 	.word	0x2000096c
 8010088:	20000970 	.word	0x20000970
 801008c:	20000a74 	.word	0x20000a74

08010090 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010090:	b580      	push	{r7, lr}
 8010092:	b088      	sub	sp, #32
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801009e:	2301      	movs	r3, #1
 80100a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d077      	beq.n	8010198 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d10a      	bne.n	80100c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80100b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	60fb      	str	r3, [r7, #12]
}
 80100c2:	bf00      	nop
 80100c4:	e7fe      	b.n	80100c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100ca:	683a      	ldr	r2, [r7, #0]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d902      	bls.n	80100d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	61fb      	str	r3, [r7, #28]
 80100d4:	e002      	b.n	80100dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e0:	69fa      	ldr	r2, [r7, #28]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d058      	beq.n	8010198 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d153      	bne.n	8010198 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80100f0:	4b2b      	ldr	r3, [pc, #172]	; (80101a0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	69ba      	ldr	r2, [r7, #24]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d10a      	bne.n	8010110 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	60bb      	str	r3, [r7, #8]
}
 801010c:	bf00      	nop
 801010e:	e7fe      	b.n	801010e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010114:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	69fa      	ldr	r2, [r7, #28]
 801011a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	699b      	ldr	r3, [r3, #24]
 8010120:	2b00      	cmp	r3, #0
 8010122:	db04      	blt.n	801012e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	f1c3 0207 	rsb	r2, r3, #7
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801012e:	69bb      	ldr	r3, [r7, #24]
 8010130:	6959      	ldr	r1, [r3, #20]
 8010132:	693a      	ldr	r2, [r7, #16]
 8010134:	4613      	mov	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	4413      	add	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4a19      	ldr	r2, [pc, #100]	; (80101a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801013e:	4413      	add	r3, r2
 8010140:	4299      	cmp	r1, r3
 8010142:	d129      	bne.n	8010198 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	3304      	adds	r3, #4
 8010148:	4618      	mov	r0, r3
 801014a:	f7fe fcdd 	bl	800eb08 <uxListRemove>
 801014e:	4603      	mov	r3, r0
 8010150:	2b00      	cmp	r3, #0
 8010152:	d10a      	bne.n	801016a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010158:	2201      	movs	r2, #1
 801015a:	fa02 f303 	lsl.w	r3, r2, r3
 801015e:	43da      	mvns	r2, r3
 8010160:	4b11      	ldr	r3, [pc, #68]	; (80101a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4013      	ands	r3, r2
 8010166:	4a10      	ldr	r2, [pc, #64]	; (80101a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010168:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801016e:	2201      	movs	r2, #1
 8010170:	409a      	lsls	r2, r3
 8010172:	4b0d      	ldr	r3, [pc, #52]	; (80101a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4313      	orrs	r3, r2
 8010178:	4a0b      	ldr	r2, [pc, #44]	; (80101a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801017a:	6013      	str	r3, [r2, #0]
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010180:	4613      	mov	r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	4413      	add	r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	4a06      	ldr	r2, [pc, #24]	; (80101a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801018a:	441a      	add	r2, r3
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	3304      	adds	r3, #4
 8010190:	4619      	mov	r1, r3
 8010192:	4610      	mov	r0, r2
 8010194:	f7fe fc5b 	bl	800ea4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010198:	bf00      	nop
 801019a:	3720      	adds	r7, #32
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	2000096c 	.word	0x2000096c
 80101a4:	20000970 	.word	0x20000970
 80101a8:	20000a74 	.word	0x20000a74

080101ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80101ac:	b480      	push	{r7}
 80101ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80101b0:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d004      	beq.n	80101c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80101be:	3201      	adds	r2, #1
 80101c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80101c2:	4b03      	ldr	r3, [pc, #12]	; (80101d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101c4:	681b      	ldr	r3, [r3, #0]
	}
 80101c6:	4618      	mov	r0, r3
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr
 80101d0:	2000096c 	.word	0x2000096c

080101d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80101de:	4b2b      	ldr	r3, [pc, #172]	; (801028c <prvAddCurrentTaskToDelayedList+0xb8>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80101e4:	4b2a      	ldr	r3, [pc, #168]	; (8010290 <prvAddCurrentTaskToDelayedList+0xbc>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2200      	movs	r2, #0
 80101ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101ee:	4b28      	ldr	r3, [pc, #160]	; (8010290 <prvAddCurrentTaskToDelayedList+0xbc>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3304      	adds	r3, #4
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe fc87 	bl	800eb08 <uxListRemove>
 80101fa:	4603      	mov	r3, r0
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d10b      	bne.n	8010218 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010200:	4b23      	ldr	r3, [pc, #140]	; (8010290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010206:	2201      	movs	r2, #1
 8010208:	fa02 f303 	lsl.w	r3, r2, r3
 801020c:	43da      	mvns	r2, r3
 801020e:	4b21      	ldr	r3, [pc, #132]	; (8010294 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	4013      	ands	r3, r2
 8010214:	4a1f      	ldr	r2, [pc, #124]	; (8010294 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010216:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801021e:	d10a      	bne.n	8010236 <prvAddCurrentTaskToDelayedList+0x62>
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d007      	beq.n	8010236 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010226:	4b1a      	ldr	r3, [pc, #104]	; (8010290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	3304      	adds	r3, #4
 801022c:	4619      	mov	r1, r3
 801022e:	481a      	ldr	r0, [pc, #104]	; (8010298 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010230:	f7fe fc0d 	bl	800ea4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010234:	e026      	b.n	8010284 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4413      	add	r3, r2
 801023c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801023e:	4b14      	ldr	r3, [pc, #80]	; (8010290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	68ba      	ldr	r2, [r7, #8]
 8010244:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	429a      	cmp	r2, r3
 801024c:	d209      	bcs.n	8010262 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801024e:	4b13      	ldr	r3, [pc, #76]	; (801029c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	4b0f      	ldr	r3, [pc, #60]	; (8010290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	3304      	adds	r3, #4
 8010258:	4619      	mov	r1, r3
 801025a:	4610      	mov	r0, r2
 801025c:	f7fe fc1b 	bl	800ea96 <vListInsert>
}
 8010260:	e010      	b.n	8010284 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010262:	4b0f      	ldr	r3, [pc, #60]	; (80102a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	4b0a      	ldr	r3, [pc, #40]	; (8010290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	3304      	adds	r3, #4
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f7fe fc11 	bl	800ea96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010274:	4b0b      	ldr	r3, [pc, #44]	; (80102a4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	429a      	cmp	r2, r3
 801027c:	d202      	bcs.n	8010284 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 801027e:	4a09      	ldr	r2, [pc, #36]	; (80102a4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	6013      	str	r3, [r2, #0]
}
 8010284:	bf00      	nop
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	20000a70 	.word	0x20000a70
 8010290:	2000096c 	.word	0x2000096c
 8010294:	20000a74 	.word	0x20000a74
 8010298:	20000a58 	.word	0x20000a58
 801029c:	20000a28 	.word	0x20000a28
 80102a0:	20000a24 	.word	0x20000a24
 80102a4:	20000a8c 	.word	0x20000a8c

080102a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	3b04      	subs	r3, #4
 80102b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80102c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	3b04      	subs	r3, #4
 80102c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	f023 0201 	bic.w	r2, r3, #1
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3b04      	subs	r3, #4
 80102d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80102d8:	4a0c      	ldr	r2, [pc, #48]	; (801030c <pxPortInitialiseStack+0x64>)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	3b14      	subs	r3, #20
 80102e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	3b04      	subs	r3, #4
 80102ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f06f 0202 	mvn.w	r2, #2
 80102f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	3b20      	subs	r3, #32
 80102fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80102fe:	68fb      	ldr	r3, [r7, #12]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3714      	adds	r7, #20
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	08010311 	.word	0x08010311

08010310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010310:	b480      	push	{r7}
 8010312:	b085      	sub	sp, #20
 8010314:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801031a:	4b12      	ldr	r3, [pc, #72]	; (8010364 <prvTaskExitError+0x54>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010322:	d00a      	beq.n	801033a <prvTaskExitError+0x2a>
	__asm volatile
 8010324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010328:	f383 8811 	msr	BASEPRI, r3
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f3bf 8f4f 	dsb	sy
 8010334:	60fb      	str	r3, [r7, #12]
}
 8010336:	bf00      	nop
 8010338:	e7fe      	b.n	8010338 <prvTaskExitError+0x28>
	__asm volatile
 801033a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033e:	f383 8811 	msr	BASEPRI, r3
 8010342:	f3bf 8f6f 	isb	sy
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	60bb      	str	r3, [r7, #8]
}
 801034c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801034e:	bf00      	nop
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d0fc      	beq.n	8010350 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010356:	bf00      	nop
 8010358:	bf00      	nop
 801035a:	3714      	adds	r7, #20
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr
 8010364:	20000010 	.word	0x20000010
	...

08010370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010370:	4b07      	ldr	r3, [pc, #28]	; (8010390 <pxCurrentTCBConst2>)
 8010372:	6819      	ldr	r1, [r3, #0]
 8010374:	6808      	ldr	r0, [r1, #0]
 8010376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801037a:	f380 8809 	msr	PSP, r0
 801037e:	f3bf 8f6f 	isb	sy
 8010382:	f04f 0000 	mov.w	r0, #0
 8010386:	f380 8811 	msr	BASEPRI, r0
 801038a:	4770      	bx	lr
 801038c:	f3af 8000 	nop.w

08010390 <pxCurrentTCBConst2>:
 8010390:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010394:	bf00      	nop
 8010396:	bf00      	nop

08010398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010398:	4808      	ldr	r0, [pc, #32]	; (80103bc <prvPortStartFirstTask+0x24>)
 801039a:	6800      	ldr	r0, [r0, #0]
 801039c:	6800      	ldr	r0, [r0, #0]
 801039e:	f380 8808 	msr	MSP, r0
 80103a2:	f04f 0000 	mov.w	r0, #0
 80103a6:	f380 8814 	msr	CONTROL, r0
 80103aa:	b662      	cpsie	i
 80103ac:	b661      	cpsie	f
 80103ae:	f3bf 8f4f 	dsb	sy
 80103b2:	f3bf 8f6f 	isb	sy
 80103b6:	df00      	svc	0
 80103b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80103ba:	bf00      	nop
 80103bc:	e000ed08 	.word	0xe000ed08

080103c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b086      	sub	sp, #24
 80103c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80103c6:	4b46      	ldr	r3, [pc, #280]	; (80104e0 <xPortStartScheduler+0x120>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a46      	ldr	r2, [pc, #280]	; (80104e4 <xPortStartScheduler+0x124>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d10a      	bne.n	80103e6 <xPortStartScheduler+0x26>
	__asm volatile
 80103d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d4:	f383 8811 	msr	BASEPRI, r3
 80103d8:	f3bf 8f6f 	isb	sy
 80103dc:	f3bf 8f4f 	dsb	sy
 80103e0:	613b      	str	r3, [r7, #16]
}
 80103e2:	bf00      	nop
 80103e4:	e7fe      	b.n	80103e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80103e6:	4b3e      	ldr	r3, [pc, #248]	; (80104e0 <xPortStartScheduler+0x120>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a3f      	ldr	r2, [pc, #252]	; (80104e8 <xPortStartScheduler+0x128>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d10a      	bne.n	8010406 <xPortStartScheduler+0x46>
	__asm volatile
 80103f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f4:	f383 8811 	msr	BASEPRI, r3
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	60fb      	str	r3, [r7, #12]
}
 8010402:	bf00      	nop
 8010404:	e7fe      	b.n	8010404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010406:	4b39      	ldr	r3, [pc, #228]	; (80104ec <xPortStartScheduler+0x12c>)
 8010408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	b2db      	uxtb	r3, r3
 8010410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	22ff      	movs	r2, #255	; 0xff
 8010416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	b2db      	uxtb	r3, r3
 801041e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010420:	78fb      	ldrb	r3, [r7, #3]
 8010422:	b2db      	uxtb	r3, r3
 8010424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010428:	b2da      	uxtb	r2, r3
 801042a:	4b31      	ldr	r3, [pc, #196]	; (80104f0 <xPortStartScheduler+0x130>)
 801042c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801042e:	4b31      	ldr	r3, [pc, #196]	; (80104f4 <xPortStartScheduler+0x134>)
 8010430:	2207      	movs	r2, #7
 8010432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010434:	e009      	b.n	801044a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010436:	4b2f      	ldr	r3, [pc, #188]	; (80104f4 <xPortStartScheduler+0x134>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	3b01      	subs	r3, #1
 801043c:	4a2d      	ldr	r2, [pc, #180]	; (80104f4 <xPortStartScheduler+0x134>)
 801043e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010440:	78fb      	ldrb	r3, [r7, #3]
 8010442:	b2db      	uxtb	r3, r3
 8010444:	005b      	lsls	r3, r3, #1
 8010446:	b2db      	uxtb	r3, r3
 8010448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801044a:	78fb      	ldrb	r3, [r7, #3]
 801044c:	b2db      	uxtb	r3, r3
 801044e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010452:	2b80      	cmp	r3, #128	; 0x80
 8010454:	d0ef      	beq.n	8010436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010456:	4b27      	ldr	r3, [pc, #156]	; (80104f4 <xPortStartScheduler+0x134>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f1c3 0307 	rsb	r3, r3, #7
 801045e:	2b04      	cmp	r3, #4
 8010460:	d00a      	beq.n	8010478 <xPortStartScheduler+0xb8>
	__asm volatile
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	60bb      	str	r3, [r7, #8]
}
 8010474:	bf00      	nop
 8010476:	e7fe      	b.n	8010476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010478:	4b1e      	ldr	r3, [pc, #120]	; (80104f4 <xPortStartScheduler+0x134>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	021b      	lsls	r3, r3, #8
 801047e:	4a1d      	ldr	r2, [pc, #116]	; (80104f4 <xPortStartScheduler+0x134>)
 8010480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010482:	4b1c      	ldr	r3, [pc, #112]	; (80104f4 <xPortStartScheduler+0x134>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801048a:	4a1a      	ldr	r2, [pc, #104]	; (80104f4 <xPortStartScheduler+0x134>)
 801048c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	b2da      	uxtb	r2, r3
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010496:	4b18      	ldr	r3, [pc, #96]	; (80104f8 <xPortStartScheduler+0x138>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a17      	ldr	r2, [pc, #92]	; (80104f8 <xPortStartScheduler+0x138>)
 801049c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80104a2:	4b15      	ldr	r3, [pc, #84]	; (80104f8 <xPortStartScheduler+0x138>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a14      	ldr	r2, [pc, #80]	; (80104f8 <xPortStartScheduler+0x138>)
 80104a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80104ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104ae:	f000 f8dd 	bl	801066c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104b2:	4b12      	ldr	r3, [pc, #72]	; (80104fc <xPortStartScheduler+0x13c>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80104b8:	f000 f8fc 	bl	80106b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80104bc:	4b10      	ldr	r3, [pc, #64]	; (8010500 <xPortStartScheduler+0x140>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a0f      	ldr	r2, [pc, #60]	; (8010500 <xPortStartScheduler+0x140>)
 80104c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80104c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80104c8:	f7ff ff66 	bl	8010398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80104cc:	f7ff fa94 	bl	800f9f8 <vTaskSwitchContext>
	prvTaskExitError();
 80104d0:	f7ff ff1e 	bl	8010310 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3718      	adds	r7, #24
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	e000ed00 	.word	0xe000ed00
 80104e4:	410fc271 	.word	0x410fc271
 80104e8:	410fc270 	.word	0x410fc270
 80104ec:	e000e400 	.word	0xe000e400
 80104f0:	20000a98 	.word	0x20000a98
 80104f4:	20000a9c 	.word	0x20000a9c
 80104f8:	e000ed20 	.word	0xe000ed20
 80104fc:	20000010 	.word	0x20000010
 8010500:	e000ef34 	.word	0xe000ef34

08010504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010504:	b480      	push	{r7}
 8010506:	b083      	sub	sp, #12
 8010508:	af00      	add	r7, sp, #0
	__asm volatile
 801050a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050e:	f383 8811 	msr	BASEPRI, r3
 8010512:	f3bf 8f6f 	isb	sy
 8010516:	f3bf 8f4f 	dsb	sy
 801051a:	607b      	str	r3, [r7, #4]
}
 801051c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801051e:	4b0f      	ldr	r3, [pc, #60]	; (801055c <vPortEnterCritical+0x58>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	3301      	adds	r3, #1
 8010524:	4a0d      	ldr	r2, [pc, #52]	; (801055c <vPortEnterCritical+0x58>)
 8010526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010528:	4b0c      	ldr	r3, [pc, #48]	; (801055c <vPortEnterCritical+0x58>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d10f      	bne.n	8010550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010530:	4b0b      	ldr	r3, [pc, #44]	; (8010560 <vPortEnterCritical+0x5c>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00a      	beq.n	8010550 <vPortEnterCritical+0x4c>
	__asm volatile
 801053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	603b      	str	r3, [r7, #0]
}
 801054c:	bf00      	nop
 801054e:	e7fe      	b.n	801054e <vPortEnterCritical+0x4a>
	}
}
 8010550:	bf00      	nop
 8010552:	370c      	adds	r7, #12
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr
 801055c:	20000010 	.word	0x20000010
 8010560:	e000ed04 	.word	0xe000ed04

08010564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801056a:	4b12      	ldr	r3, [pc, #72]	; (80105b4 <vPortExitCritical+0x50>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d10a      	bne.n	8010588 <vPortExitCritical+0x24>
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010576:	f383 8811 	msr	BASEPRI, r3
 801057a:	f3bf 8f6f 	isb	sy
 801057e:	f3bf 8f4f 	dsb	sy
 8010582:	607b      	str	r3, [r7, #4]
}
 8010584:	bf00      	nop
 8010586:	e7fe      	b.n	8010586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010588:	4b0a      	ldr	r3, [pc, #40]	; (80105b4 <vPortExitCritical+0x50>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	3b01      	subs	r3, #1
 801058e:	4a09      	ldr	r2, [pc, #36]	; (80105b4 <vPortExitCritical+0x50>)
 8010590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010592:	4b08      	ldr	r3, [pc, #32]	; (80105b4 <vPortExitCritical+0x50>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d105      	bne.n	80105a6 <vPortExitCritical+0x42>
 801059a:	2300      	movs	r3, #0
 801059c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	f383 8811 	msr	BASEPRI, r3
}
 80105a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80105a6:	bf00      	nop
 80105a8:	370c      	adds	r7, #12
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop
 80105b4:	20000010 	.word	0x20000010
	...

080105c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80105c0:	f3ef 8009 	mrs	r0, PSP
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	4b15      	ldr	r3, [pc, #84]	; (8010620 <pxCurrentTCBConst>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	f01e 0f10 	tst.w	lr, #16
 80105d0:	bf08      	it	eq
 80105d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80105d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105da:	6010      	str	r0, [r2, #0]
 80105dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80105e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80105e4:	f380 8811 	msr	BASEPRI, r0
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f7ff fa02 	bl	800f9f8 <vTaskSwitchContext>
 80105f4:	f04f 0000 	mov.w	r0, #0
 80105f8:	f380 8811 	msr	BASEPRI, r0
 80105fc:	bc09      	pop	{r0, r3}
 80105fe:	6819      	ldr	r1, [r3, #0]
 8010600:	6808      	ldr	r0, [r1, #0]
 8010602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010606:	f01e 0f10 	tst.w	lr, #16
 801060a:	bf08      	it	eq
 801060c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010610:	f380 8809 	msr	PSP, r0
 8010614:	f3bf 8f6f 	isb	sy
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop
 801061c:	f3af 8000 	nop.w

08010620 <pxCurrentTCBConst>:
 8010620:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010624:	bf00      	nop
 8010626:	bf00      	nop

08010628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
	__asm volatile
 801062e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010632:	f383 8811 	msr	BASEPRI, r3
 8010636:	f3bf 8f6f 	isb	sy
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	607b      	str	r3, [r7, #4]
}
 8010640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010642:	f7ff f943 	bl	800f8cc <xTaskIncrementTick>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d003      	beq.n	8010654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801064c:	4b06      	ldr	r3, [pc, #24]	; (8010668 <SysTick_Handler+0x40>)
 801064e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010652:	601a      	str	r2, [r3, #0]
 8010654:	2300      	movs	r3, #0
 8010656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	f383 8811 	msr	BASEPRI, r3
}
 801065e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010660:	bf00      	nop
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	e000ed04 	.word	0xe000ed04

0801066c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801066c:	b480      	push	{r7}
 801066e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010670:	4b0b      	ldr	r3, [pc, #44]	; (80106a0 <vPortSetupTimerInterrupt+0x34>)
 8010672:	2200      	movs	r2, #0
 8010674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010676:	4b0b      	ldr	r3, [pc, #44]	; (80106a4 <vPortSetupTimerInterrupt+0x38>)
 8010678:	2200      	movs	r2, #0
 801067a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801067c:	4b0a      	ldr	r3, [pc, #40]	; (80106a8 <vPortSetupTimerInterrupt+0x3c>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a0a      	ldr	r2, [pc, #40]	; (80106ac <vPortSetupTimerInterrupt+0x40>)
 8010682:	fba2 2303 	umull	r2, r3, r2, r3
 8010686:	099b      	lsrs	r3, r3, #6
 8010688:	4a09      	ldr	r2, [pc, #36]	; (80106b0 <vPortSetupTimerInterrupt+0x44>)
 801068a:	3b01      	subs	r3, #1
 801068c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801068e:	4b04      	ldr	r3, [pc, #16]	; (80106a0 <vPortSetupTimerInterrupt+0x34>)
 8010690:	2207      	movs	r2, #7
 8010692:	601a      	str	r2, [r3, #0]
}
 8010694:	bf00      	nop
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr
 801069e:	bf00      	nop
 80106a0:	e000e010 	.word	0xe000e010
 80106a4:	e000e018 	.word	0xe000e018
 80106a8:	20000004 	.word	0x20000004
 80106ac:	10624dd3 	.word	0x10624dd3
 80106b0:	e000e014 	.word	0xe000e014

080106b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80106b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80106c4 <vPortEnableVFP+0x10>
 80106b8:	6801      	ldr	r1, [r0, #0]
 80106ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80106be:	6001      	str	r1, [r0, #0]
 80106c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80106c2:	bf00      	nop
 80106c4:	e000ed88 	.word	0xe000ed88

080106c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80106ce:	f3ef 8305 	mrs	r3, IPSR
 80106d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2b0f      	cmp	r3, #15
 80106d8:	d914      	bls.n	8010704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80106da:	4a17      	ldr	r2, [pc, #92]	; (8010738 <vPortValidateInterruptPriority+0x70>)
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	4413      	add	r3, r2
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80106e4:	4b15      	ldr	r3, [pc, #84]	; (801073c <vPortValidateInterruptPriority+0x74>)
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	7afa      	ldrb	r2, [r7, #11]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d20a      	bcs.n	8010704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	607b      	str	r3, [r7, #4]
}
 8010700:	bf00      	nop
 8010702:	e7fe      	b.n	8010702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010704:	4b0e      	ldr	r3, [pc, #56]	; (8010740 <vPortValidateInterruptPriority+0x78>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801070c:	4b0d      	ldr	r3, [pc, #52]	; (8010744 <vPortValidateInterruptPriority+0x7c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	d90a      	bls.n	801072a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010718:	f383 8811 	msr	BASEPRI, r3
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	603b      	str	r3, [r7, #0]
}
 8010726:	bf00      	nop
 8010728:	e7fe      	b.n	8010728 <vPortValidateInterruptPriority+0x60>
	}
 801072a:	bf00      	nop
 801072c:	3714      	adds	r7, #20
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	e000e3f0 	.word	0xe000e3f0
 801073c:	20000a98 	.word	0x20000a98
 8010740:	e000ed0c 	.word	0xe000ed0c
 8010744:	20000a9c 	.word	0x20000a9c

08010748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b08a      	sub	sp, #40	; 0x28
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010750:	2300      	movs	r3, #0
 8010752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010754:	f7ff f81e 	bl	800f794 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010758:	4b5b      	ldr	r3, [pc, #364]	; (80108c8 <pvPortMalloc+0x180>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d101      	bne.n	8010764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010760:	f000 f920 	bl	80109a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010764:	4b59      	ldr	r3, [pc, #356]	; (80108cc <pvPortMalloc+0x184>)
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4013      	ands	r3, r2
 801076c:	2b00      	cmp	r3, #0
 801076e:	f040 8093 	bne.w	8010898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d01d      	beq.n	80107b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010778:	2208      	movs	r2, #8
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4413      	add	r3, r2
 801077e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f003 0307 	and.w	r3, r3, #7
 8010786:	2b00      	cmp	r3, #0
 8010788:	d014      	beq.n	80107b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f023 0307 	bic.w	r3, r3, #7
 8010790:	3308      	adds	r3, #8
 8010792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f003 0307 	and.w	r3, r3, #7
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00a      	beq.n	80107b4 <pvPortMalloc+0x6c>
	__asm volatile
 801079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a2:	f383 8811 	msr	BASEPRI, r3
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	617b      	str	r3, [r7, #20]
}
 80107b0:	bf00      	nop
 80107b2:	e7fe      	b.n	80107b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d06e      	beq.n	8010898 <pvPortMalloc+0x150>
 80107ba:	4b45      	ldr	r3, [pc, #276]	; (80108d0 <pvPortMalloc+0x188>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d869      	bhi.n	8010898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80107c4:	4b43      	ldr	r3, [pc, #268]	; (80108d4 <pvPortMalloc+0x18c>)
 80107c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80107c8:	4b42      	ldr	r3, [pc, #264]	; (80108d4 <pvPortMalloc+0x18c>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107ce:	e004      	b.n	80107da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80107d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d903      	bls.n	80107ec <pvPortMalloc+0xa4>
 80107e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1f1      	bne.n	80107d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80107ec:	4b36      	ldr	r3, [pc, #216]	; (80108c8 <pvPortMalloc+0x180>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d050      	beq.n	8010898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107f6:	6a3b      	ldr	r3, [r7, #32]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2208      	movs	r2, #8
 80107fc:	4413      	add	r3, r2
 80107fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	1ad2      	subs	r2, r2, r3
 8010810:	2308      	movs	r3, #8
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	429a      	cmp	r2, r3
 8010816:	d91f      	bls.n	8010858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4413      	add	r3, r2
 801081e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	f003 0307 	and.w	r3, r3, #7
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00a      	beq.n	8010840 <pvPortMalloc+0xf8>
	__asm volatile
 801082a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082e:	f383 8811 	msr	BASEPRI, r3
 8010832:	f3bf 8f6f 	isb	sy
 8010836:	f3bf 8f4f 	dsb	sy
 801083a:	613b      	str	r3, [r7, #16]
}
 801083c:	bf00      	nop
 801083e:	e7fe      	b.n	801083e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010842:	685a      	ldr	r2, [r3, #4]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	1ad2      	subs	r2, r2, r3
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010852:	69b8      	ldr	r0, [r7, #24]
 8010854:	f000 f908 	bl	8010a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010858:	4b1d      	ldr	r3, [pc, #116]	; (80108d0 <pvPortMalloc+0x188>)
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	1ad3      	subs	r3, r2, r3
 8010862:	4a1b      	ldr	r2, [pc, #108]	; (80108d0 <pvPortMalloc+0x188>)
 8010864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010866:	4b1a      	ldr	r3, [pc, #104]	; (80108d0 <pvPortMalloc+0x188>)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	4b1b      	ldr	r3, [pc, #108]	; (80108d8 <pvPortMalloc+0x190>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	429a      	cmp	r2, r3
 8010870:	d203      	bcs.n	801087a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010872:	4b17      	ldr	r3, [pc, #92]	; (80108d0 <pvPortMalloc+0x188>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a18      	ldr	r2, [pc, #96]	; (80108d8 <pvPortMalloc+0x190>)
 8010878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087c:	685a      	ldr	r2, [r3, #4]
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <pvPortMalloc+0x184>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	431a      	orrs	r2, r3
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088a:	2200      	movs	r2, #0
 801088c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801088e:	4b13      	ldr	r3, [pc, #76]	; (80108dc <pvPortMalloc+0x194>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	3301      	adds	r3, #1
 8010894:	4a11      	ldr	r2, [pc, #68]	; (80108dc <pvPortMalloc+0x194>)
 8010896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010898:	f7fe ff8a 	bl	800f7b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801089c:	69fb      	ldr	r3, [r7, #28]
 801089e:	f003 0307 	and.w	r3, r3, #7
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00a      	beq.n	80108bc <pvPortMalloc+0x174>
	__asm volatile
 80108a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108aa:	f383 8811 	msr	BASEPRI, r3
 80108ae:	f3bf 8f6f 	isb	sy
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	60fb      	str	r3, [r7, #12]
}
 80108b8:	bf00      	nop
 80108ba:	e7fe      	b.n	80108ba <pvPortMalloc+0x172>
	return pvReturn;
 80108bc:	69fb      	ldr	r3, [r7, #28]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3728      	adds	r7, #40	; 0x28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	20003aa8 	.word	0x20003aa8
 80108cc:	20003abc 	.word	0x20003abc
 80108d0:	20003aac 	.word	0x20003aac
 80108d4:	20003aa0 	.word	0x20003aa0
 80108d8:	20003ab0 	.word	0x20003ab0
 80108dc:	20003ab4 	.word	0x20003ab4

080108e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d04d      	beq.n	801098e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80108f2:	2308      	movs	r3, #8
 80108f4:	425b      	negs	r3, r3
 80108f6:	697a      	ldr	r2, [r7, #20]
 80108f8:	4413      	add	r3, r2
 80108fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	685a      	ldr	r2, [r3, #4]
 8010904:	4b24      	ldr	r3, [pc, #144]	; (8010998 <vPortFree+0xb8>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	4013      	ands	r3, r2
 801090a:	2b00      	cmp	r3, #0
 801090c:	d10a      	bne.n	8010924 <vPortFree+0x44>
	__asm volatile
 801090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010912:	f383 8811 	msr	BASEPRI, r3
 8010916:	f3bf 8f6f 	isb	sy
 801091a:	f3bf 8f4f 	dsb	sy
 801091e:	60fb      	str	r3, [r7, #12]
}
 8010920:	bf00      	nop
 8010922:	e7fe      	b.n	8010922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00a      	beq.n	8010942 <vPortFree+0x62>
	__asm volatile
 801092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010930:	f383 8811 	msr	BASEPRI, r3
 8010934:	f3bf 8f6f 	isb	sy
 8010938:	f3bf 8f4f 	dsb	sy
 801093c:	60bb      	str	r3, [r7, #8]
}
 801093e:	bf00      	nop
 8010940:	e7fe      	b.n	8010940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	685a      	ldr	r2, [r3, #4]
 8010946:	4b14      	ldr	r3, [pc, #80]	; (8010998 <vPortFree+0xb8>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4013      	ands	r3, r2
 801094c:	2b00      	cmp	r3, #0
 801094e:	d01e      	beq.n	801098e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d11a      	bne.n	801098e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	685a      	ldr	r2, [r3, #4]
 801095c:	4b0e      	ldr	r3, [pc, #56]	; (8010998 <vPortFree+0xb8>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	43db      	mvns	r3, r3
 8010962:	401a      	ands	r2, r3
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010968:	f7fe ff14 	bl	800f794 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	4b0a      	ldr	r3, [pc, #40]	; (801099c <vPortFree+0xbc>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4413      	add	r3, r2
 8010976:	4a09      	ldr	r2, [pc, #36]	; (801099c <vPortFree+0xbc>)
 8010978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801097a:	6938      	ldr	r0, [r7, #16]
 801097c:	f000 f874 	bl	8010a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010980:	4b07      	ldr	r3, [pc, #28]	; (80109a0 <vPortFree+0xc0>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3301      	adds	r3, #1
 8010986:	4a06      	ldr	r2, [pc, #24]	; (80109a0 <vPortFree+0xc0>)
 8010988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801098a:	f7fe ff11 	bl	800f7b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801098e:	bf00      	nop
 8010990:	3718      	adds	r7, #24
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	20003abc 	.word	0x20003abc
 801099c:	20003aac 	.word	0x20003aac
 80109a0:	20003ab8 	.word	0x20003ab8

080109a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80109aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80109ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80109b0:	4b27      	ldr	r3, [pc, #156]	; (8010a50 <prvHeapInit+0xac>)
 80109b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f003 0307 	and.w	r3, r3, #7
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00c      	beq.n	80109d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	3307      	adds	r3, #7
 80109c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f023 0307 	bic.w	r3, r3, #7
 80109ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80109cc:	68ba      	ldr	r2, [r7, #8]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	1ad3      	subs	r3, r2, r3
 80109d2:	4a1f      	ldr	r2, [pc, #124]	; (8010a50 <prvHeapInit+0xac>)
 80109d4:	4413      	add	r3, r2
 80109d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80109dc:	4a1d      	ldr	r2, [pc, #116]	; (8010a54 <prvHeapInit+0xb0>)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80109e2:	4b1c      	ldr	r3, [pc, #112]	; (8010a54 <prvHeapInit+0xb0>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	4413      	add	r3, r2
 80109ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80109f0:	2208      	movs	r2, #8
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	1a9b      	subs	r3, r3, r2
 80109f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	f023 0307 	bic.w	r3, r3, #7
 80109fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	4a15      	ldr	r2, [pc, #84]	; (8010a58 <prvHeapInit+0xb4>)
 8010a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a06:	4b14      	ldr	r3, [pc, #80]	; (8010a58 <prvHeapInit+0xb4>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a0e:	4b12      	ldr	r3, [pc, #72]	; (8010a58 <prvHeapInit+0xb4>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2200      	movs	r2, #0
 8010a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	1ad2      	subs	r2, r2, r3
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a24:	4b0c      	ldr	r3, [pc, #48]	; (8010a58 <prvHeapInit+0xb4>)
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	4a0a      	ldr	r2, [pc, #40]	; (8010a5c <prvHeapInit+0xb8>)
 8010a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	4a09      	ldr	r2, [pc, #36]	; (8010a60 <prvHeapInit+0xbc>)
 8010a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a3c:	4b09      	ldr	r3, [pc, #36]	; (8010a64 <prvHeapInit+0xc0>)
 8010a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010a42:	601a      	str	r2, [r3, #0]
}
 8010a44:	bf00      	nop
 8010a46:	3714      	adds	r7, #20
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr
 8010a50:	20000aa0 	.word	0x20000aa0
 8010a54:	20003aa0 	.word	0x20003aa0
 8010a58:	20003aa8 	.word	0x20003aa8
 8010a5c:	20003ab0 	.word	0x20003ab0
 8010a60:	20003aac 	.word	0x20003aac
 8010a64:	20003abc 	.word	0x20003abc

08010a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010a70:	4b28      	ldr	r3, [pc, #160]	; (8010b14 <prvInsertBlockIntoFreeList+0xac>)
 8010a72:	60fb      	str	r3, [r7, #12]
 8010a74:	e002      	b.n	8010a7c <prvInsertBlockIntoFreeList+0x14>
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	60fb      	str	r3, [r7, #12]
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d8f7      	bhi.n	8010a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	4413      	add	r3, r2
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d108      	bne.n	8010aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	685a      	ldr	r2, [r3, #4]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	441a      	add	r2, r3
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	441a      	add	r2, r3
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d118      	bne.n	8010af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	4b15      	ldr	r3, [pc, #84]	; (8010b18 <prvInsertBlockIntoFreeList+0xb0>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d00d      	beq.n	8010ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	685a      	ldr	r2, [r3, #4]
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	441a      	add	r2, r3
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	e008      	b.n	8010af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ae6:	4b0c      	ldr	r3, [pc, #48]	; (8010b18 <prvInsertBlockIntoFreeList+0xb0>)
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	601a      	str	r2, [r3, #0]
 8010aee:	e003      	b.n	8010af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d002      	beq.n	8010b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b06:	bf00      	nop
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	20003aa0 	.word	0x20003aa0
 8010b18:	20003aa8 	.word	0x20003aa8

08010b1c <arm_pid_init_f32>:
 8010b1c:	edd0 6a08 	vldr	s13, [r0, #32]
 8010b20:	edd0 7a06 	vldr	s15, [r0, #24]
 8010b24:	ed90 7a07 	vldr	s14, [r0, #28]
 8010b28:	edc0 6a02 	vstr	s13, [r0, #8]
 8010b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010b30:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8010b34:	eef1 7a67 	vneg.f32	s15, s15
 8010b38:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010b3c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010b40:	ed80 7a00 	vstr	s14, [r0]
 8010b44:	edc0 7a01 	vstr	s15, [r0, #4]
 8010b48:	b901      	cbnz	r1, 8010b4c <arm_pid_init_f32+0x30>
 8010b4a:	4770      	bx	lr
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	60c3      	str	r3, [r0, #12]
 8010b50:	6103      	str	r3, [r0, #16]
 8010b52:	6143      	str	r3, [r0, #20]
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop

08010b58 <__errno>:
 8010b58:	4b01      	ldr	r3, [pc, #4]	; (8010b60 <__errno+0x8>)
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	20000014 	.word	0x20000014

08010b64 <__libc_init_array>:
 8010b64:	b570      	push	{r4, r5, r6, lr}
 8010b66:	4d0d      	ldr	r5, [pc, #52]	; (8010b9c <__libc_init_array+0x38>)
 8010b68:	4c0d      	ldr	r4, [pc, #52]	; (8010ba0 <__libc_init_array+0x3c>)
 8010b6a:	1b64      	subs	r4, r4, r5
 8010b6c:	10a4      	asrs	r4, r4, #2
 8010b6e:	2600      	movs	r6, #0
 8010b70:	42a6      	cmp	r6, r4
 8010b72:	d109      	bne.n	8010b88 <__libc_init_array+0x24>
 8010b74:	4d0b      	ldr	r5, [pc, #44]	; (8010ba4 <__libc_init_array+0x40>)
 8010b76:	4c0c      	ldr	r4, [pc, #48]	; (8010ba8 <__libc_init_array+0x44>)
 8010b78:	f001 f80c 	bl	8011b94 <_init>
 8010b7c:	1b64      	subs	r4, r4, r5
 8010b7e:	10a4      	asrs	r4, r4, #2
 8010b80:	2600      	movs	r6, #0
 8010b82:	42a6      	cmp	r6, r4
 8010b84:	d105      	bne.n	8010b92 <__libc_init_array+0x2e>
 8010b86:	bd70      	pop	{r4, r5, r6, pc}
 8010b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b8c:	4798      	blx	r3
 8010b8e:	3601      	adds	r6, #1
 8010b90:	e7ee      	b.n	8010b70 <__libc_init_array+0xc>
 8010b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b96:	4798      	blx	r3
 8010b98:	3601      	adds	r6, #1
 8010b9a:	e7f2      	b.n	8010b82 <__libc_init_array+0x1e>
 8010b9c:	08011d90 	.word	0x08011d90
 8010ba0:	08011d90 	.word	0x08011d90
 8010ba4:	08011d90 	.word	0x08011d90
 8010ba8:	08011d94 	.word	0x08011d94

08010bac <__retarget_lock_acquire_recursive>:
 8010bac:	4770      	bx	lr

08010bae <__retarget_lock_release_recursive>:
 8010bae:	4770      	bx	lr

08010bb0 <memcpy>:
 8010bb0:	440a      	add	r2, r1
 8010bb2:	4291      	cmp	r1, r2
 8010bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8010bb8:	d100      	bne.n	8010bbc <memcpy+0xc>
 8010bba:	4770      	bx	lr
 8010bbc:	b510      	push	{r4, lr}
 8010bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bc6:	4291      	cmp	r1, r2
 8010bc8:	d1f9      	bne.n	8010bbe <memcpy+0xe>
 8010bca:	bd10      	pop	{r4, pc}

08010bcc <memset>:
 8010bcc:	4402      	add	r2, r0
 8010bce:	4603      	mov	r3, r0
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d100      	bne.n	8010bd6 <memset+0xa>
 8010bd4:	4770      	bx	lr
 8010bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8010bda:	e7f9      	b.n	8010bd0 <memset+0x4>

08010bdc <cleanup_glue>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	460c      	mov	r4, r1
 8010be0:	6809      	ldr	r1, [r1, #0]
 8010be2:	4605      	mov	r5, r0
 8010be4:	b109      	cbz	r1, 8010bea <cleanup_glue+0xe>
 8010be6:	f7ff fff9 	bl	8010bdc <cleanup_glue>
 8010bea:	4621      	mov	r1, r4
 8010bec:	4628      	mov	r0, r5
 8010bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bf2:	f000 b869 	b.w	8010cc8 <_free_r>
	...

08010bf8 <_reclaim_reent>:
 8010bf8:	4b2c      	ldr	r3, [pc, #176]	; (8010cac <_reclaim_reent+0xb4>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4283      	cmp	r3, r0
 8010bfe:	b570      	push	{r4, r5, r6, lr}
 8010c00:	4604      	mov	r4, r0
 8010c02:	d051      	beq.n	8010ca8 <_reclaim_reent+0xb0>
 8010c04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010c06:	b143      	cbz	r3, 8010c1a <_reclaim_reent+0x22>
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d14a      	bne.n	8010ca4 <_reclaim_reent+0xac>
 8010c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c10:	6819      	ldr	r1, [r3, #0]
 8010c12:	b111      	cbz	r1, 8010c1a <_reclaim_reent+0x22>
 8010c14:	4620      	mov	r0, r4
 8010c16:	f000 f857 	bl	8010cc8 <_free_r>
 8010c1a:	6961      	ldr	r1, [r4, #20]
 8010c1c:	b111      	cbz	r1, 8010c24 <_reclaim_reent+0x2c>
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f000 f852 	bl	8010cc8 <_free_r>
 8010c24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010c26:	b111      	cbz	r1, 8010c2e <_reclaim_reent+0x36>
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f000 f84d 	bl	8010cc8 <_free_r>
 8010c2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010c30:	b111      	cbz	r1, 8010c38 <_reclaim_reent+0x40>
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 f848 	bl	8010cc8 <_free_r>
 8010c38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010c3a:	b111      	cbz	r1, 8010c42 <_reclaim_reent+0x4a>
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f000 f843 	bl	8010cc8 <_free_r>
 8010c42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010c44:	b111      	cbz	r1, 8010c4c <_reclaim_reent+0x54>
 8010c46:	4620      	mov	r0, r4
 8010c48:	f000 f83e 	bl	8010cc8 <_free_r>
 8010c4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010c4e:	b111      	cbz	r1, 8010c56 <_reclaim_reent+0x5e>
 8010c50:	4620      	mov	r0, r4
 8010c52:	f000 f839 	bl	8010cc8 <_free_r>
 8010c56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010c58:	b111      	cbz	r1, 8010c60 <_reclaim_reent+0x68>
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	f000 f834 	bl	8010cc8 <_free_r>
 8010c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c62:	b111      	cbz	r1, 8010c6a <_reclaim_reent+0x72>
 8010c64:	4620      	mov	r0, r4
 8010c66:	f000 f82f 	bl	8010cc8 <_free_r>
 8010c6a:	69a3      	ldr	r3, [r4, #24]
 8010c6c:	b1e3      	cbz	r3, 8010ca8 <_reclaim_reent+0xb0>
 8010c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010c70:	4620      	mov	r0, r4
 8010c72:	4798      	blx	r3
 8010c74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010c76:	b1b9      	cbz	r1, 8010ca8 <_reclaim_reent+0xb0>
 8010c78:	4620      	mov	r0, r4
 8010c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c7e:	f7ff bfad 	b.w	8010bdc <cleanup_glue>
 8010c82:	5949      	ldr	r1, [r1, r5]
 8010c84:	b941      	cbnz	r1, 8010c98 <_reclaim_reent+0xa0>
 8010c86:	3504      	adds	r5, #4
 8010c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c8a:	2d80      	cmp	r5, #128	; 0x80
 8010c8c:	68d9      	ldr	r1, [r3, #12]
 8010c8e:	d1f8      	bne.n	8010c82 <_reclaim_reent+0x8a>
 8010c90:	4620      	mov	r0, r4
 8010c92:	f000 f819 	bl	8010cc8 <_free_r>
 8010c96:	e7ba      	b.n	8010c0e <_reclaim_reent+0x16>
 8010c98:	680e      	ldr	r6, [r1, #0]
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f000 f814 	bl	8010cc8 <_free_r>
 8010ca0:	4631      	mov	r1, r6
 8010ca2:	e7ef      	b.n	8010c84 <_reclaim_reent+0x8c>
 8010ca4:	2500      	movs	r5, #0
 8010ca6:	e7ef      	b.n	8010c88 <_reclaim_reent+0x90>
 8010ca8:	bd70      	pop	{r4, r5, r6, pc}
 8010caa:	bf00      	nop
 8010cac:	20000014 	.word	0x20000014

08010cb0 <__malloc_lock>:
 8010cb0:	4801      	ldr	r0, [pc, #4]	; (8010cb8 <__malloc_lock+0x8>)
 8010cb2:	f7ff bf7b 	b.w	8010bac <__retarget_lock_acquire_recursive>
 8010cb6:	bf00      	nop
 8010cb8:	20003ac0 	.word	0x20003ac0

08010cbc <__malloc_unlock>:
 8010cbc:	4801      	ldr	r0, [pc, #4]	; (8010cc4 <__malloc_unlock+0x8>)
 8010cbe:	f7ff bf76 	b.w	8010bae <__retarget_lock_release_recursive>
 8010cc2:	bf00      	nop
 8010cc4:	20003ac0 	.word	0x20003ac0

08010cc8 <_free_r>:
 8010cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cca:	2900      	cmp	r1, #0
 8010ccc:	d044      	beq.n	8010d58 <_free_r+0x90>
 8010cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cd2:	9001      	str	r0, [sp, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8010cda:	bfb8      	it	lt
 8010cdc:	18e4      	addlt	r4, r4, r3
 8010cde:	f7ff ffe7 	bl	8010cb0 <__malloc_lock>
 8010ce2:	4a1e      	ldr	r2, [pc, #120]	; (8010d5c <_free_r+0x94>)
 8010ce4:	9801      	ldr	r0, [sp, #4]
 8010ce6:	6813      	ldr	r3, [r2, #0]
 8010ce8:	b933      	cbnz	r3, 8010cf8 <_free_r+0x30>
 8010cea:	6063      	str	r3, [r4, #4]
 8010cec:	6014      	str	r4, [r2, #0]
 8010cee:	b003      	add	sp, #12
 8010cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cf4:	f7ff bfe2 	b.w	8010cbc <__malloc_unlock>
 8010cf8:	42a3      	cmp	r3, r4
 8010cfa:	d908      	bls.n	8010d0e <_free_r+0x46>
 8010cfc:	6825      	ldr	r5, [r4, #0]
 8010cfe:	1961      	adds	r1, r4, r5
 8010d00:	428b      	cmp	r3, r1
 8010d02:	bf01      	itttt	eq
 8010d04:	6819      	ldreq	r1, [r3, #0]
 8010d06:	685b      	ldreq	r3, [r3, #4]
 8010d08:	1949      	addeq	r1, r1, r5
 8010d0a:	6021      	streq	r1, [r4, #0]
 8010d0c:	e7ed      	b.n	8010cea <_free_r+0x22>
 8010d0e:	461a      	mov	r2, r3
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	b10b      	cbz	r3, 8010d18 <_free_r+0x50>
 8010d14:	42a3      	cmp	r3, r4
 8010d16:	d9fa      	bls.n	8010d0e <_free_r+0x46>
 8010d18:	6811      	ldr	r1, [r2, #0]
 8010d1a:	1855      	adds	r5, r2, r1
 8010d1c:	42a5      	cmp	r5, r4
 8010d1e:	d10b      	bne.n	8010d38 <_free_r+0x70>
 8010d20:	6824      	ldr	r4, [r4, #0]
 8010d22:	4421      	add	r1, r4
 8010d24:	1854      	adds	r4, r2, r1
 8010d26:	42a3      	cmp	r3, r4
 8010d28:	6011      	str	r1, [r2, #0]
 8010d2a:	d1e0      	bne.n	8010cee <_free_r+0x26>
 8010d2c:	681c      	ldr	r4, [r3, #0]
 8010d2e:	685b      	ldr	r3, [r3, #4]
 8010d30:	6053      	str	r3, [r2, #4]
 8010d32:	4421      	add	r1, r4
 8010d34:	6011      	str	r1, [r2, #0]
 8010d36:	e7da      	b.n	8010cee <_free_r+0x26>
 8010d38:	d902      	bls.n	8010d40 <_free_r+0x78>
 8010d3a:	230c      	movs	r3, #12
 8010d3c:	6003      	str	r3, [r0, #0]
 8010d3e:	e7d6      	b.n	8010cee <_free_r+0x26>
 8010d40:	6825      	ldr	r5, [r4, #0]
 8010d42:	1961      	adds	r1, r4, r5
 8010d44:	428b      	cmp	r3, r1
 8010d46:	bf04      	itt	eq
 8010d48:	6819      	ldreq	r1, [r3, #0]
 8010d4a:	685b      	ldreq	r3, [r3, #4]
 8010d4c:	6063      	str	r3, [r4, #4]
 8010d4e:	bf04      	itt	eq
 8010d50:	1949      	addeq	r1, r1, r5
 8010d52:	6021      	streq	r1, [r4, #0]
 8010d54:	6054      	str	r4, [r2, #4]
 8010d56:	e7ca      	b.n	8010cee <_free_r+0x26>
 8010d58:	b003      	add	sp, #12
 8010d5a:	bd30      	pop	{r4, r5, pc}
 8010d5c:	20003ac4 	.word	0x20003ac4

08010d60 <pow>:
 8010d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d62:	ed2d 8b02 	vpush	{d8}
 8010d66:	eeb0 8a40 	vmov.f32	s16, s0
 8010d6a:	eef0 8a60 	vmov.f32	s17, s1
 8010d6e:	ec55 4b11 	vmov	r4, r5, d1
 8010d72:	f000 f865 	bl	8010e40 <__ieee754_pow>
 8010d76:	4622      	mov	r2, r4
 8010d78:	462b      	mov	r3, r5
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	ec57 6b10 	vmov	r6, r7, d0
 8010d82:	f7f3 fead 	bl	8004ae0 <__aeabi_dcmpun>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d13b      	bne.n	8010e02 <pow+0xa2>
 8010d8a:	ec51 0b18 	vmov	r0, r1, d8
 8010d8e:	2200      	movs	r2, #0
 8010d90:	2300      	movs	r3, #0
 8010d92:	f7f3 fe73 	bl	8004a7c <__aeabi_dcmpeq>
 8010d96:	b1b8      	cbz	r0, 8010dc8 <pow+0x68>
 8010d98:	2200      	movs	r2, #0
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	4629      	mov	r1, r5
 8010da0:	f7f3 fe6c 	bl	8004a7c <__aeabi_dcmpeq>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d146      	bne.n	8010e36 <pow+0xd6>
 8010da8:	ec45 4b10 	vmov	d0, r4, r5
 8010dac:	f000 fe61 	bl	8011a72 <finite>
 8010db0:	b338      	cbz	r0, 8010e02 <pow+0xa2>
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4620      	mov	r0, r4
 8010db8:	4629      	mov	r1, r5
 8010dba:	f7f3 fe69 	bl	8004a90 <__aeabi_dcmplt>
 8010dbe:	b300      	cbz	r0, 8010e02 <pow+0xa2>
 8010dc0:	f7ff feca 	bl	8010b58 <__errno>
 8010dc4:	2322      	movs	r3, #34	; 0x22
 8010dc6:	e01b      	b.n	8010e00 <pow+0xa0>
 8010dc8:	ec47 6b10 	vmov	d0, r6, r7
 8010dcc:	f000 fe51 	bl	8011a72 <finite>
 8010dd0:	b9e0      	cbnz	r0, 8010e0c <pow+0xac>
 8010dd2:	eeb0 0a48 	vmov.f32	s0, s16
 8010dd6:	eef0 0a68 	vmov.f32	s1, s17
 8010dda:	f000 fe4a 	bl	8011a72 <finite>
 8010dde:	b1a8      	cbz	r0, 8010e0c <pow+0xac>
 8010de0:	ec45 4b10 	vmov	d0, r4, r5
 8010de4:	f000 fe45 	bl	8011a72 <finite>
 8010de8:	b180      	cbz	r0, 8010e0c <pow+0xac>
 8010dea:	4632      	mov	r2, r6
 8010dec:	463b      	mov	r3, r7
 8010dee:	4630      	mov	r0, r6
 8010df0:	4639      	mov	r1, r7
 8010df2:	f7f3 fe75 	bl	8004ae0 <__aeabi_dcmpun>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d0e2      	beq.n	8010dc0 <pow+0x60>
 8010dfa:	f7ff fead 	bl	8010b58 <__errno>
 8010dfe:	2321      	movs	r3, #33	; 0x21
 8010e00:	6003      	str	r3, [r0, #0]
 8010e02:	ecbd 8b02 	vpop	{d8}
 8010e06:	ec47 6b10 	vmov	d0, r6, r7
 8010e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	2300      	movs	r3, #0
 8010e10:	4630      	mov	r0, r6
 8010e12:	4639      	mov	r1, r7
 8010e14:	f7f3 fe32 	bl	8004a7c <__aeabi_dcmpeq>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d0f2      	beq.n	8010e02 <pow+0xa2>
 8010e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8010e20:	eef0 0a68 	vmov.f32	s1, s17
 8010e24:	f000 fe25 	bl	8011a72 <finite>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d0ea      	beq.n	8010e02 <pow+0xa2>
 8010e2c:	ec45 4b10 	vmov	d0, r4, r5
 8010e30:	f000 fe1f 	bl	8011a72 <finite>
 8010e34:	e7c3      	b.n	8010dbe <pow+0x5e>
 8010e36:	4f01      	ldr	r7, [pc, #4]	; (8010e3c <pow+0xdc>)
 8010e38:	2600      	movs	r6, #0
 8010e3a:	e7e2      	b.n	8010e02 <pow+0xa2>
 8010e3c:	3ff00000 	.word	0x3ff00000

08010e40 <__ieee754_pow>:
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	ed2d 8b06 	vpush	{d8-d10}
 8010e48:	b089      	sub	sp, #36	; 0x24
 8010e4a:	ed8d 1b00 	vstr	d1, [sp]
 8010e4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010e52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010e56:	ea58 0102 	orrs.w	r1, r8, r2
 8010e5a:	ec57 6b10 	vmov	r6, r7, d0
 8010e5e:	d115      	bne.n	8010e8c <__ieee754_pow+0x4c>
 8010e60:	19b3      	adds	r3, r6, r6
 8010e62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010e66:	4152      	adcs	r2, r2
 8010e68:	4299      	cmp	r1, r3
 8010e6a:	4b89      	ldr	r3, [pc, #548]	; (8011090 <__ieee754_pow+0x250>)
 8010e6c:	4193      	sbcs	r3, r2
 8010e6e:	f080 84d2 	bcs.w	8011816 <__ieee754_pow+0x9d6>
 8010e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e76:	4630      	mov	r0, r6
 8010e78:	4639      	mov	r1, r7
 8010e7a:	f7f3 f9e1 	bl	8004240 <__adddf3>
 8010e7e:	ec41 0b10 	vmov	d0, r0, r1
 8010e82:	b009      	add	sp, #36	; 0x24
 8010e84:	ecbd 8b06 	vpop	{d8-d10}
 8010e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8c:	4b81      	ldr	r3, [pc, #516]	; (8011094 <__ieee754_pow+0x254>)
 8010e8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010e92:	429c      	cmp	r4, r3
 8010e94:	ee10 aa10 	vmov	sl, s0
 8010e98:	463d      	mov	r5, r7
 8010e9a:	dc06      	bgt.n	8010eaa <__ieee754_pow+0x6a>
 8010e9c:	d101      	bne.n	8010ea2 <__ieee754_pow+0x62>
 8010e9e:	2e00      	cmp	r6, #0
 8010ea0:	d1e7      	bne.n	8010e72 <__ieee754_pow+0x32>
 8010ea2:	4598      	cmp	r8, r3
 8010ea4:	dc01      	bgt.n	8010eaa <__ieee754_pow+0x6a>
 8010ea6:	d10f      	bne.n	8010ec8 <__ieee754_pow+0x88>
 8010ea8:	b172      	cbz	r2, 8010ec8 <__ieee754_pow+0x88>
 8010eaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010eae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010eb2:	ea55 050a 	orrs.w	r5, r5, sl
 8010eb6:	d1dc      	bne.n	8010e72 <__ieee754_pow+0x32>
 8010eb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010ebc:	18db      	adds	r3, r3, r3
 8010ebe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010ec2:	4152      	adcs	r2, r2
 8010ec4:	429d      	cmp	r5, r3
 8010ec6:	e7d0      	b.n	8010e6a <__ieee754_pow+0x2a>
 8010ec8:	2d00      	cmp	r5, #0
 8010eca:	da3b      	bge.n	8010f44 <__ieee754_pow+0x104>
 8010ecc:	4b72      	ldr	r3, [pc, #456]	; (8011098 <__ieee754_pow+0x258>)
 8010ece:	4598      	cmp	r8, r3
 8010ed0:	dc51      	bgt.n	8010f76 <__ieee754_pow+0x136>
 8010ed2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010ed6:	4598      	cmp	r8, r3
 8010ed8:	f340 84ac 	ble.w	8011834 <__ieee754_pow+0x9f4>
 8010edc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010ee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010ee4:	2b14      	cmp	r3, #20
 8010ee6:	dd0f      	ble.n	8010f08 <__ieee754_pow+0xc8>
 8010ee8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010eec:	fa22 f103 	lsr.w	r1, r2, r3
 8010ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	f040 849d 	bne.w	8011834 <__ieee754_pow+0x9f4>
 8010efa:	f001 0101 	and.w	r1, r1, #1
 8010efe:	f1c1 0302 	rsb	r3, r1, #2
 8010f02:	9304      	str	r3, [sp, #16]
 8010f04:	b182      	cbz	r2, 8010f28 <__ieee754_pow+0xe8>
 8010f06:	e05f      	b.n	8010fc8 <__ieee754_pow+0x188>
 8010f08:	2a00      	cmp	r2, #0
 8010f0a:	d15b      	bne.n	8010fc4 <__ieee754_pow+0x184>
 8010f0c:	f1c3 0314 	rsb	r3, r3, #20
 8010f10:	fa48 f103 	asr.w	r1, r8, r3
 8010f14:	fa01 f303 	lsl.w	r3, r1, r3
 8010f18:	4543      	cmp	r3, r8
 8010f1a:	f040 8488 	bne.w	801182e <__ieee754_pow+0x9ee>
 8010f1e:	f001 0101 	and.w	r1, r1, #1
 8010f22:	f1c1 0302 	rsb	r3, r1, #2
 8010f26:	9304      	str	r3, [sp, #16]
 8010f28:	4b5c      	ldr	r3, [pc, #368]	; (801109c <__ieee754_pow+0x25c>)
 8010f2a:	4598      	cmp	r8, r3
 8010f2c:	d132      	bne.n	8010f94 <__ieee754_pow+0x154>
 8010f2e:	f1b9 0f00 	cmp.w	r9, #0
 8010f32:	f280 8478 	bge.w	8011826 <__ieee754_pow+0x9e6>
 8010f36:	4959      	ldr	r1, [pc, #356]	; (801109c <__ieee754_pow+0x25c>)
 8010f38:	4632      	mov	r2, r6
 8010f3a:	463b      	mov	r3, r7
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	f7f3 fc5f 	bl	8004800 <__aeabi_ddiv>
 8010f42:	e79c      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010f44:	2300      	movs	r3, #0
 8010f46:	9304      	str	r3, [sp, #16]
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	d13d      	bne.n	8010fc8 <__ieee754_pow+0x188>
 8010f4c:	4b51      	ldr	r3, [pc, #324]	; (8011094 <__ieee754_pow+0x254>)
 8010f4e:	4598      	cmp	r8, r3
 8010f50:	d1ea      	bne.n	8010f28 <__ieee754_pow+0xe8>
 8010f52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010f56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010f5a:	ea53 030a 	orrs.w	r3, r3, sl
 8010f5e:	f000 845a 	beq.w	8011816 <__ieee754_pow+0x9d6>
 8010f62:	4b4f      	ldr	r3, [pc, #316]	; (80110a0 <__ieee754_pow+0x260>)
 8010f64:	429c      	cmp	r4, r3
 8010f66:	dd08      	ble.n	8010f7a <__ieee754_pow+0x13a>
 8010f68:	f1b9 0f00 	cmp.w	r9, #0
 8010f6c:	f2c0 8457 	blt.w	801181e <__ieee754_pow+0x9de>
 8010f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f74:	e783      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010f76:	2302      	movs	r3, #2
 8010f78:	e7e5      	b.n	8010f46 <__ieee754_pow+0x106>
 8010f7a:	f1b9 0f00 	cmp.w	r9, #0
 8010f7e:	f04f 0000 	mov.w	r0, #0
 8010f82:	f04f 0100 	mov.w	r1, #0
 8010f86:	f6bf af7a 	bge.w	8010e7e <__ieee754_pow+0x3e>
 8010f8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010f8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f92:	e774      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010f94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010f98:	d106      	bne.n	8010fa8 <__ieee754_pow+0x168>
 8010f9a:	4632      	mov	r2, r6
 8010f9c:	463b      	mov	r3, r7
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	4639      	mov	r1, r7
 8010fa2:	f7f3 fb03 	bl	80045ac <__aeabi_dmul>
 8010fa6:	e76a      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010fa8:	4b3e      	ldr	r3, [pc, #248]	; (80110a4 <__ieee754_pow+0x264>)
 8010faa:	4599      	cmp	r9, r3
 8010fac:	d10c      	bne.n	8010fc8 <__ieee754_pow+0x188>
 8010fae:	2d00      	cmp	r5, #0
 8010fb0:	db0a      	blt.n	8010fc8 <__ieee754_pow+0x188>
 8010fb2:	ec47 6b10 	vmov	d0, r6, r7
 8010fb6:	b009      	add	sp, #36	; 0x24
 8010fb8:	ecbd 8b06 	vpop	{d8-d10}
 8010fbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	f000 bc6c 	b.w	801189c <__ieee754_sqrt>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	9304      	str	r3, [sp, #16]
 8010fc8:	ec47 6b10 	vmov	d0, r6, r7
 8010fcc:	f000 fd48 	bl	8011a60 <fabs>
 8010fd0:	ec51 0b10 	vmov	r0, r1, d0
 8010fd4:	f1ba 0f00 	cmp.w	sl, #0
 8010fd8:	d129      	bne.n	801102e <__ieee754_pow+0x1ee>
 8010fda:	b124      	cbz	r4, 8010fe6 <__ieee754_pow+0x1a6>
 8010fdc:	4b2f      	ldr	r3, [pc, #188]	; (801109c <__ieee754_pow+0x25c>)
 8010fde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d123      	bne.n	801102e <__ieee754_pow+0x1ee>
 8010fe6:	f1b9 0f00 	cmp.w	r9, #0
 8010fea:	da05      	bge.n	8010ff8 <__ieee754_pow+0x1b8>
 8010fec:	4602      	mov	r2, r0
 8010fee:	460b      	mov	r3, r1
 8010ff0:	2000      	movs	r0, #0
 8010ff2:	492a      	ldr	r1, [pc, #168]	; (801109c <__ieee754_pow+0x25c>)
 8010ff4:	f7f3 fc04 	bl	8004800 <__aeabi_ddiv>
 8010ff8:	2d00      	cmp	r5, #0
 8010ffa:	f6bf af40 	bge.w	8010e7e <__ieee754_pow+0x3e>
 8010ffe:	9b04      	ldr	r3, [sp, #16]
 8011000:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011004:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011008:	4323      	orrs	r3, r4
 801100a:	d108      	bne.n	801101e <__ieee754_pow+0x1de>
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	4610      	mov	r0, r2
 8011012:	4619      	mov	r1, r3
 8011014:	f7f3 f912 	bl	800423c <__aeabi_dsub>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	e78f      	b.n	8010f3e <__ieee754_pow+0xfe>
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	2b01      	cmp	r3, #1
 8011022:	f47f af2c 	bne.w	8010e7e <__ieee754_pow+0x3e>
 8011026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801102a:	4619      	mov	r1, r3
 801102c:	e727      	b.n	8010e7e <__ieee754_pow+0x3e>
 801102e:	0feb      	lsrs	r3, r5, #31
 8011030:	3b01      	subs	r3, #1
 8011032:	9306      	str	r3, [sp, #24]
 8011034:	9a06      	ldr	r2, [sp, #24]
 8011036:	9b04      	ldr	r3, [sp, #16]
 8011038:	4313      	orrs	r3, r2
 801103a:	d102      	bne.n	8011042 <__ieee754_pow+0x202>
 801103c:	4632      	mov	r2, r6
 801103e:	463b      	mov	r3, r7
 8011040:	e7e6      	b.n	8011010 <__ieee754_pow+0x1d0>
 8011042:	4b19      	ldr	r3, [pc, #100]	; (80110a8 <__ieee754_pow+0x268>)
 8011044:	4598      	cmp	r8, r3
 8011046:	f340 80fb 	ble.w	8011240 <__ieee754_pow+0x400>
 801104a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801104e:	4598      	cmp	r8, r3
 8011050:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <__ieee754_pow+0x260>)
 8011052:	dd0c      	ble.n	801106e <__ieee754_pow+0x22e>
 8011054:	429c      	cmp	r4, r3
 8011056:	dc0f      	bgt.n	8011078 <__ieee754_pow+0x238>
 8011058:	f1b9 0f00 	cmp.w	r9, #0
 801105c:	da0f      	bge.n	801107e <__ieee754_pow+0x23e>
 801105e:	2000      	movs	r0, #0
 8011060:	b009      	add	sp, #36	; 0x24
 8011062:	ecbd 8b06 	vpop	{d8-d10}
 8011066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106a:	f000 bcf0 	b.w	8011a4e <__math_oflow>
 801106e:	429c      	cmp	r4, r3
 8011070:	dbf2      	blt.n	8011058 <__ieee754_pow+0x218>
 8011072:	4b0a      	ldr	r3, [pc, #40]	; (801109c <__ieee754_pow+0x25c>)
 8011074:	429c      	cmp	r4, r3
 8011076:	dd19      	ble.n	80110ac <__ieee754_pow+0x26c>
 8011078:	f1b9 0f00 	cmp.w	r9, #0
 801107c:	dcef      	bgt.n	801105e <__ieee754_pow+0x21e>
 801107e:	2000      	movs	r0, #0
 8011080:	b009      	add	sp, #36	; 0x24
 8011082:	ecbd 8b06 	vpop	{d8-d10}
 8011086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108a:	f000 bcd7 	b.w	8011a3c <__math_uflow>
 801108e:	bf00      	nop
 8011090:	fff00000 	.word	0xfff00000
 8011094:	7ff00000 	.word	0x7ff00000
 8011098:	433fffff 	.word	0x433fffff
 801109c:	3ff00000 	.word	0x3ff00000
 80110a0:	3fefffff 	.word	0x3fefffff
 80110a4:	3fe00000 	.word	0x3fe00000
 80110a8:	41e00000 	.word	0x41e00000
 80110ac:	4b60      	ldr	r3, [pc, #384]	; (8011230 <__ieee754_pow+0x3f0>)
 80110ae:	2200      	movs	r2, #0
 80110b0:	f7f3 f8c4 	bl	800423c <__aeabi_dsub>
 80110b4:	a354      	add	r3, pc, #336	; (adr r3, 8011208 <__ieee754_pow+0x3c8>)
 80110b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ba:	4604      	mov	r4, r0
 80110bc:	460d      	mov	r5, r1
 80110be:	f7f3 fa75 	bl	80045ac <__aeabi_dmul>
 80110c2:	a353      	add	r3, pc, #332	; (adr r3, 8011210 <__ieee754_pow+0x3d0>)
 80110c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c8:	4606      	mov	r6, r0
 80110ca:	460f      	mov	r7, r1
 80110cc:	4620      	mov	r0, r4
 80110ce:	4629      	mov	r1, r5
 80110d0:	f7f3 fa6c 	bl	80045ac <__aeabi_dmul>
 80110d4:	4b57      	ldr	r3, [pc, #348]	; (8011234 <__ieee754_pow+0x3f4>)
 80110d6:	4682      	mov	sl, r0
 80110d8:	468b      	mov	fp, r1
 80110da:	2200      	movs	r2, #0
 80110dc:	4620      	mov	r0, r4
 80110de:	4629      	mov	r1, r5
 80110e0:	f7f3 fa64 	bl	80045ac <__aeabi_dmul>
 80110e4:	4602      	mov	r2, r0
 80110e6:	460b      	mov	r3, r1
 80110e8:	a14b      	add	r1, pc, #300	; (adr r1, 8011218 <__ieee754_pow+0x3d8>)
 80110ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110ee:	f7f3 f8a5 	bl	800423c <__aeabi_dsub>
 80110f2:	4622      	mov	r2, r4
 80110f4:	462b      	mov	r3, r5
 80110f6:	f7f3 fa59 	bl	80045ac <__aeabi_dmul>
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	2000      	movs	r0, #0
 8011100:	494d      	ldr	r1, [pc, #308]	; (8011238 <__ieee754_pow+0x3f8>)
 8011102:	f7f3 f89b 	bl	800423c <__aeabi_dsub>
 8011106:	4622      	mov	r2, r4
 8011108:	4680      	mov	r8, r0
 801110a:	4689      	mov	r9, r1
 801110c:	462b      	mov	r3, r5
 801110e:	4620      	mov	r0, r4
 8011110:	4629      	mov	r1, r5
 8011112:	f7f3 fa4b 	bl	80045ac <__aeabi_dmul>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	4640      	mov	r0, r8
 801111c:	4649      	mov	r1, r9
 801111e:	f7f3 fa45 	bl	80045ac <__aeabi_dmul>
 8011122:	a33f      	add	r3, pc, #252	; (adr r3, 8011220 <__ieee754_pow+0x3e0>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	f7f3 fa40 	bl	80045ac <__aeabi_dmul>
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	4650      	mov	r0, sl
 8011132:	4659      	mov	r1, fp
 8011134:	f7f3 f882 	bl	800423c <__aeabi_dsub>
 8011138:	4602      	mov	r2, r0
 801113a:	460b      	mov	r3, r1
 801113c:	4680      	mov	r8, r0
 801113e:	4689      	mov	r9, r1
 8011140:	4630      	mov	r0, r6
 8011142:	4639      	mov	r1, r7
 8011144:	f7f3 f87c 	bl	8004240 <__adddf3>
 8011148:	2000      	movs	r0, #0
 801114a:	4632      	mov	r2, r6
 801114c:	463b      	mov	r3, r7
 801114e:	4604      	mov	r4, r0
 8011150:	460d      	mov	r5, r1
 8011152:	f7f3 f873 	bl	800423c <__aeabi_dsub>
 8011156:	4602      	mov	r2, r0
 8011158:	460b      	mov	r3, r1
 801115a:	4640      	mov	r0, r8
 801115c:	4649      	mov	r1, r9
 801115e:	f7f3 f86d 	bl	800423c <__aeabi_dsub>
 8011162:	9b04      	ldr	r3, [sp, #16]
 8011164:	9a06      	ldr	r2, [sp, #24]
 8011166:	3b01      	subs	r3, #1
 8011168:	4313      	orrs	r3, r2
 801116a:	4682      	mov	sl, r0
 801116c:	468b      	mov	fp, r1
 801116e:	f040 81e7 	bne.w	8011540 <__ieee754_pow+0x700>
 8011172:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011228 <__ieee754_pow+0x3e8>
 8011176:	eeb0 8a47 	vmov.f32	s16, s14
 801117a:	eef0 8a67 	vmov.f32	s17, s15
 801117e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011182:	2600      	movs	r6, #0
 8011184:	4632      	mov	r2, r6
 8011186:	463b      	mov	r3, r7
 8011188:	e9dd 0100 	ldrd	r0, r1, [sp]
 801118c:	f7f3 f856 	bl	800423c <__aeabi_dsub>
 8011190:	4622      	mov	r2, r4
 8011192:	462b      	mov	r3, r5
 8011194:	f7f3 fa0a 	bl	80045ac <__aeabi_dmul>
 8011198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801119c:	4680      	mov	r8, r0
 801119e:	4689      	mov	r9, r1
 80111a0:	4650      	mov	r0, sl
 80111a2:	4659      	mov	r1, fp
 80111a4:	f7f3 fa02 	bl	80045ac <__aeabi_dmul>
 80111a8:	4602      	mov	r2, r0
 80111aa:	460b      	mov	r3, r1
 80111ac:	4640      	mov	r0, r8
 80111ae:	4649      	mov	r1, r9
 80111b0:	f7f3 f846 	bl	8004240 <__adddf3>
 80111b4:	4632      	mov	r2, r6
 80111b6:	463b      	mov	r3, r7
 80111b8:	4680      	mov	r8, r0
 80111ba:	4689      	mov	r9, r1
 80111bc:	4620      	mov	r0, r4
 80111be:	4629      	mov	r1, r5
 80111c0:	f7f3 f9f4 	bl	80045ac <__aeabi_dmul>
 80111c4:	460b      	mov	r3, r1
 80111c6:	4604      	mov	r4, r0
 80111c8:	460d      	mov	r5, r1
 80111ca:	4602      	mov	r2, r0
 80111cc:	4649      	mov	r1, r9
 80111ce:	4640      	mov	r0, r8
 80111d0:	f7f3 f836 	bl	8004240 <__adddf3>
 80111d4:	4b19      	ldr	r3, [pc, #100]	; (801123c <__ieee754_pow+0x3fc>)
 80111d6:	4299      	cmp	r1, r3
 80111d8:	ec45 4b19 	vmov	d9, r4, r5
 80111dc:	4606      	mov	r6, r0
 80111de:	460f      	mov	r7, r1
 80111e0:	468b      	mov	fp, r1
 80111e2:	f340 82f1 	ble.w	80117c8 <__ieee754_pow+0x988>
 80111e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80111ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80111ee:	4303      	orrs	r3, r0
 80111f0:	f000 81e4 	beq.w	80115bc <__ieee754_pow+0x77c>
 80111f4:	ec51 0b18 	vmov	r0, r1, d8
 80111f8:	2200      	movs	r2, #0
 80111fa:	2300      	movs	r3, #0
 80111fc:	f7f3 fc48 	bl	8004a90 <__aeabi_dcmplt>
 8011200:	3800      	subs	r0, #0
 8011202:	bf18      	it	ne
 8011204:	2001      	movne	r0, #1
 8011206:	e72b      	b.n	8011060 <__ieee754_pow+0x220>
 8011208:	60000000 	.word	0x60000000
 801120c:	3ff71547 	.word	0x3ff71547
 8011210:	f85ddf44 	.word	0xf85ddf44
 8011214:	3e54ae0b 	.word	0x3e54ae0b
 8011218:	55555555 	.word	0x55555555
 801121c:	3fd55555 	.word	0x3fd55555
 8011220:	652b82fe 	.word	0x652b82fe
 8011224:	3ff71547 	.word	0x3ff71547
 8011228:	00000000 	.word	0x00000000
 801122c:	bff00000 	.word	0xbff00000
 8011230:	3ff00000 	.word	0x3ff00000
 8011234:	3fd00000 	.word	0x3fd00000
 8011238:	3fe00000 	.word	0x3fe00000
 801123c:	408fffff 	.word	0x408fffff
 8011240:	4bd5      	ldr	r3, [pc, #852]	; (8011598 <__ieee754_pow+0x758>)
 8011242:	402b      	ands	r3, r5
 8011244:	2200      	movs	r2, #0
 8011246:	b92b      	cbnz	r3, 8011254 <__ieee754_pow+0x414>
 8011248:	4bd4      	ldr	r3, [pc, #848]	; (801159c <__ieee754_pow+0x75c>)
 801124a:	f7f3 f9af 	bl	80045ac <__aeabi_dmul>
 801124e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011252:	460c      	mov	r4, r1
 8011254:	1523      	asrs	r3, r4, #20
 8011256:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801125a:	4413      	add	r3, r2
 801125c:	9305      	str	r3, [sp, #20]
 801125e:	4bd0      	ldr	r3, [pc, #832]	; (80115a0 <__ieee754_pow+0x760>)
 8011260:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011264:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011268:	429c      	cmp	r4, r3
 801126a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801126e:	dd08      	ble.n	8011282 <__ieee754_pow+0x442>
 8011270:	4bcc      	ldr	r3, [pc, #816]	; (80115a4 <__ieee754_pow+0x764>)
 8011272:	429c      	cmp	r4, r3
 8011274:	f340 8162 	ble.w	801153c <__ieee754_pow+0x6fc>
 8011278:	9b05      	ldr	r3, [sp, #20]
 801127a:	3301      	adds	r3, #1
 801127c:	9305      	str	r3, [sp, #20]
 801127e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011282:	2400      	movs	r4, #0
 8011284:	00e3      	lsls	r3, r4, #3
 8011286:	9307      	str	r3, [sp, #28]
 8011288:	4bc7      	ldr	r3, [pc, #796]	; (80115a8 <__ieee754_pow+0x768>)
 801128a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801128e:	ed93 7b00 	vldr	d7, [r3]
 8011292:	4629      	mov	r1, r5
 8011294:	ec53 2b17 	vmov	r2, r3, d7
 8011298:	eeb0 9a47 	vmov.f32	s18, s14
 801129c:	eef0 9a67 	vmov.f32	s19, s15
 80112a0:	4682      	mov	sl, r0
 80112a2:	f7f2 ffcb 	bl	800423c <__aeabi_dsub>
 80112a6:	4652      	mov	r2, sl
 80112a8:	4606      	mov	r6, r0
 80112aa:	460f      	mov	r7, r1
 80112ac:	462b      	mov	r3, r5
 80112ae:	ec51 0b19 	vmov	r0, r1, d9
 80112b2:	f7f2 ffc5 	bl	8004240 <__adddf3>
 80112b6:	4602      	mov	r2, r0
 80112b8:	460b      	mov	r3, r1
 80112ba:	2000      	movs	r0, #0
 80112bc:	49bb      	ldr	r1, [pc, #748]	; (80115ac <__ieee754_pow+0x76c>)
 80112be:	f7f3 fa9f 	bl	8004800 <__aeabi_ddiv>
 80112c2:	ec41 0b1a 	vmov	d10, r0, r1
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4630      	mov	r0, r6
 80112cc:	4639      	mov	r1, r7
 80112ce:	f7f3 f96d 	bl	80045ac <__aeabi_dmul>
 80112d2:	2300      	movs	r3, #0
 80112d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112d8:	9302      	str	r3, [sp, #8]
 80112da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80112de:	46ab      	mov	fp, r5
 80112e0:	106d      	asrs	r5, r5, #1
 80112e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80112e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80112ea:	ec41 0b18 	vmov	d8, r0, r1
 80112ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80112f2:	2200      	movs	r2, #0
 80112f4:	4640      	mov	r0, r8
 80112f6:	4649      	mov	r1, r9
 80112f8:	4614      	mov	r4, r2
 80112fa:	461d      	mov	r5, r3
 80112fc:	f7f3 f956 	bl	80045ac <__aeabi_dmul>
 8011300:	4602      	mov	r2, r0
 8011302:	460b      	mov	r3, r1
 8011304:	4630      	mov	r0, r6
 8011306:	4639      	mov	r1, r7
 8011308:	f7f2 ff98 	bl	800423c <__aeabi_dsub>
 801130c:	ec53 2b19 	vmov	r2, r3, d9
 8011310:	4606      	mov	r6, r0
 8011312:	460f      	mov	r7, r1
 8011314:	4620      	mov	r0, r4
 8011316:	4629      	mov	r1, r5
 8011318:	f7f2 ff90 	bl	800423c <__aeabi_dsub>
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	4650      	mov	r0, sl
 8011322:	4659      	mov	r1, fp
 8011324:	f7f2 ff8a 	bl	800423c <__aeabi_dsub>
 8011328:	4642      	mov	r2, r8
 801132a:	464b      	mov	r3, r9
 801132c:	f7f3 f93e 	bl	80045ac <__aeabi_dmul>
 8011330:	4602      	mov	r2, r0
 8011332:	460b      	mov	r3, r1
 8011334:	4630      	mov	r0, r6
 8011336:	4639      	mov	r1, r7
 8011338:	f7f2 ff80 	bl	800423c <__aeabi_dsub>
 801133c:	ec53 2b1a 	vmov	r2, r3, d10
 8011340:	f7f3 f934 	bl	80045ac <__aeabi_dmul>
 8011344:	ec53 2b18 	vmov	r2, r3, d8
 8011348:	ec41 0b19 	vmov	d9, r0, r1
 801134c:	ec51 0b18 	vmov	r0, r1, d8
 8011350:	f7f3 f92c 	bl	80045ac <__aeabi_dmul>
 8011354:	a37c      	add	r3, pc, #496	; (adr r3, 8011548 <__ieee754_pow+0x708>)
 8011356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135a:	4604      	mov	r4, r0
 801135c:	460d      	mov	r5, r1
 801135e:	f7f3 f925 	bl	80045ac <__aeabi_dmul>
 8011362:	a37b      	add	r3, pc, #492	; (adr r3, 8011550 <__ieee754_pow+0x710>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	f7f2 ff6a 	bl	8004240 <__adddf3>
 801136c:	4622      	mov	r2, r4
 801136e:	462b      	mov	r3, r5
 8011370:	f7f3 f91c 	bl	80045ac <__aeabi_dmul>
 8011374:	a378      	add	r3, pc, #480	; (adr r3, 8011558 <__ieee754_pow+0x718>)
 8011376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137a:	f7f2 ff61 	bl	8004240 <__adddf3>
 801137e:	4622      	mov	r2, r4
 8011380:	462b      	mov	r3, r5
 8011382:	f7f3 f913 	bl	80045ac <__aeabi_dmul>
 8011386:	a376      	add	r3, pc, #472	; (adr r3, 8011560 <__ieee754_pow+0x720>)
 8011388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138c:	f7f2 ff58 	bl	8004240 <__adddf3>
 8011390:	4622      	mov	r2, r4
 8011392:	462b      	mov	r3, r5
 8011394:	f7f3 f90a 	bl	80045ac <__aeabi_dmul>
 8011398:	a373      	add	r3, pc, #460	; (adr r3, 8011568 <__ieee754_pow+0x728>)
 801139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139e:	f7f2 ff4f 	bl	8004240 <__adddf3>
 80113a2:	4622      	mov	r2, r4
 80113a4:	462b      	mov	r3, r5
 80113a6:	f7f3 f901 	bl	80045ac <__aeabi_dmul>
 80113aa:	a371      	add	r3, pc, #452	; (adr r3, 8011570 <__ieee754_pow+0x730>)
 80113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b0:	f7f2 ff46 	bl	8004240 <__adddf3>
 80113b4:	4622      	mov	r2, r4
 80113b6:	4606      	mov	r6, r0
 80113b8:	460f      	mov	r7, r1
 80113ba:	462b      	mov	r3, r5
 80113bc:	4620      	mov	r0, r4
 80113be:	4629      	mov	r1, r5
 80113c0:	f7f3 f8f4 	bl	80045ac <__aeabi_dmul>
 80113c4:	4602      	mov	r2, r0
 80113c6:	460b      	mov	r3, r1
 80113c8:	4630      	mov	r0, r6
 80113ca:	4639      	mov	r1, r7
 80113cc:	f7f3 f8ee 	bl	80045ac <__aeabi_dmul>
 80113d0:	4642      	mov	r2, r8
 80113d2:	4604      	mov	r4, r0
 80113d4:	460d      	mov	r5, r1
 80113d6:	464b      	mov	r3, r9
 80113d8:	ec51 0b18 	vmov	r0, r1, d8
 80113dc:	f7f2 ff30 	bl	8004240 <__adddf3>
 80113e0:	ec53 2b19 	vmov	r2, r3, d9
 80113e4:	f7f3 f8e2 	bl	80045ac <__aeabi_dmul>
 80113e8:	4622      	mov	r2, r4
 80113ea:	462b      	mov	r3, r5
 80113ec:	f7f2 ff28 	bl	8004240 <__adddf3>
 80113f0:	4642      	mov	r2, r8
 80113f2:	4682      	mov	sl, r0
 80113f4:	468b      	mov	fp, r1
 80113f6:	464b      	mov	r3, r9
 80113f8:	4640      	mov	r0, r8
 80113fa:	4649      	mov	r1, r9
 80113fc:	f7f3 f8d6 	bl	80045ac <__aeabi_dmul>
 8011400:	4b6b      	ldr	r3, [pc, #428]	; (80115b0 <__ieee754_pow+0x770>)
 8011402:	2200      	movs	r2, #0
 8011404:	4606      	mov	r6, r0
 8011406:	460f      	mov	r7, r1
 8011408:	f7f2 ff1a 	bl	8004240 <__adddf3>
 801140c:	4652      	mov	r2, sl
 801140e:	465b      	mov	r3, fp
 8011410:	f7f2 ff16 	bl	8004240 <__adddf3>
 8011414:	2000      	movs	r0, #0
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	4602      	mov	r2, r0
 801141c:	460b      	mov	r3, r1
 801141e:	4640      	mov	r0, r8
 8011420:	4649      	mov	r1, r9
 8011422:	f7f3 f8c3 	bl	80045ac <__aeabi_dmul>
 8011426:	4b62      	ldr	r3, [pc, #392]	; (80115b0 <__ieee754_pow+0x770>)
 8011428:	4680      	mov	r8, r0
 801142a:	4689      	mov	r9, r1
 801142c:	2200      	movs	r2, #0
 801142e:	4620      	mov	r0, r4
 8011430:	4629      	mov	r1, r5
 8011432:	f7f2 ff03 	bl	800423c <__aeabi_dsub>
 8011436:	4632      	mov	r2, r6
 8011438:	463b      	mov	r3, r7
 801143a:	f7f2 feff 	bl	800423c <__aeabi_dsub>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	4650      	mov	r0, sl
 8011444:	4659      	mov	r1, fp
 8011446:	f7f2 fef9 	bl	800423c <__aeabi_dsub>
 801144a:	ec53 2b18 	vmov	r2, r3, d8
 801144e:	f7f3 f8ad 	bl	80045ac <__aeabi_dmul>
 8011452:	4622      	mov	r2, r4
 8011454:	4606      	mov	r6, r0
 8011456:	460f      	mov	r7, r1
 8011458:	462b      	mov	r3, r5
 801145a:	ec51 0b19 	vmov	r0, r1, d9
 801145e:	f7f3 f8a5 	bl	80045ac <__aeabi_dmul>
 8011462:	4602      	mov	r2, r0
 8011464:	460b      	mov	r3, r1
 8011466:	4630      	mov	r0, r6
 8011468:	4639      	mov	r1, r7
 801146a:	f7f2 fee9 	bl	8004240 <__adddf3>
 801146e:	4606      	mov	r6, r0
 8011470:	460f      	mov	r7, r1
 8011472:	4602      	mov	r2, r0
 8011474:	460b      	mov	r3, r1
 8011476:	4640      	mov	r0, r8
 8011478:	4649      	mov	r1, r9
 801147a:	f7f2 fee1 	bl	8004240 <__adddf3>
 801147e:	a33e      	add	r3, pc, #248	; (adr r3, 8011578 <__ieee754_pow+0x738>)
 8011480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011484:	2000      	movs	r0, #0
 8011486:	4604      	mov	r4, r0
 8011488:	460d      	mov	r5, r1
 801148a:	f7f3 f88f 	bl	80045ac <__aeabi_dmul>
 801148e:	4642      	mov	r2, r8
 8011490:	ec41 0b18 	vmov	d8, r0, r1
 8011494:	464b      	mov	r3, r9
 8011496:	4620      	mov	r0, r4
 8011498:	4629      	mov	r1, r5
 801149a:	f7f2 fecf 	bl	800423c <__aeabi_dsub>
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4630      	mov	r0, r6
 80114a4:	4639      	mov	r1, r7
 80114a6:	f7f2 fec9 	bl	800423c <__aeabi_dsub>
 80114aa:	a335      	add	r3, pc, #212	; (adr r3, 8011580 <__ieee754_pow+0x740>)
 80114ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b0:	f7f3 f87c 	bl	80045ac <__aeabi_dmul>
 80114b4:	a334      	add	r3, pc, #208	; (adr r3, 8011588 <__ieee754_pow+0x748>)
 80114b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ba:	4606      	mov	r6, r0
 80114bc:	460f      	mov	r7, r1
 80114be:	4620      	mov	r0, r4
 80114c0:	4629      	mov	r1, r5
 80114c2:	f7f3 f873 	bl	80045ac <__aeabi_dmul>
 80114c6:	4602      	mov	r2, r0
 80114c8:	460b      	mov	r3, r1
 80114ca:	4630      	mov	r0, r6
 80114cc:	4639      	mov	r1, r7
 80114ce:	f7f2 feb7 	bl	8004240 <__adddf3>
 80114d2:	9a07      	ldr	r2, [sp, #28]
 80114d4:	4b37      	ldr	r3, [pc, #220]	; (80115b4 <__ieee754_pow+0x774>)
 80114d6:	4413      	add	r3, r2
 80114d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114dc:	f7f2 feb0 	bl	8004240 <__adddf3>
 80114e0:	4682      	mov	sl, r0
 80114e2:	9805      	ldr	r0, [sp, #20]
 80114e4:	468b      	mov	fp, r1
 80114e6:	f7f2 fff7 	bl	80044d8 <__aeabi_i2d>
 80114ea:	9a07      	ldr	r2, [sp, #28]
 80114ec:	4b32      	ldr	r3, [pc, #200]	; (80115b8 <__ieee754_pow+0x778>)
 80114ee:	4413      	add	r3, r2
 80114f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80114f4:	4606      	mov	r6, r0
 80114f6:	460f      	mov	r7, r1
 80114f8:	4652      	mov	r2, sl
 80114fa:	465b      	mov	r3, fp
 80114fc:	ec51 0b18 	vmov	r0, r1, d8
 8011500:	f7f2 fe9e 	bl	8004240 <__adddf3>
 8011504:	4642      	mov	r2, r8
 8011506:	464b      	mov	r3, r9
 8011508:	f7f2 fe9a 	bl	8004240 <__adddf3>
 801150c:	4632      	mov	r2, r6
 801150e:	463b      	mov	r3, r7
 8011510:	f7f2 fe96 	bl	8004240 <__adddf3>
 8011514:	2000      	movs	r0, #0
 8011516:	4632      	mov	r2, r6
 8011518:	463b      	mov	r3, r7
 801151a:	4604      	mov	r4, r0
 801151c:	460d      	mov	r5, r1
 801151e:	f7f2 fe8d 	bl	800423c <__aeabi_dsub>
 8011522:	4642      	mov	r2, r8
 8011524:	464b      	mov	r3, r9
 8011526:	f7f2 fe89 	bl	800423c <__aeabi_dsub>
 801152a:	ec53 2b18 	vmov	r2, r3, d8
 801152e:	f7f2 fe85 	bl	800423c <__aeabi_dsub>
 8011532:	4602      	mov	r2, r0
 8011534:	460b      	mov	r3, r1
 8011536:	4650      	mov	r0, sl
 8011538:	4659      	mov	r1, fp
 801153a:	e610      	b.n	801115e <__ieee754_pow+0x31e>
 801153c:	2401      	movs	r4, #1
 801153e:	e6a1      	b.n	8011284 <__ieee754_pow+0x444>
 8011540:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011590 <__ieee754_pow+0x750>
 8011544:	e617      	b.n	8011176 <__ieee754_pow+0x336>
 8011546:	bf00      	nop
 8011548:	4a454eef 	.word	0x4a454eef
 801154c:	3fca7e28 	.word	0x3fca7e28
 8011550:	93c9db65 	.word	0x93c9db65
 8011554:	3fcd864a 	.word	0x3fcd864a
 8011558:	a91d4101 	.word	0xa91d4101
 801155c:	3fd17460 	.word	0x3fd17460
 8011560:	518f264d 	.word	0x518f264d
 8011564:	3fd55555 	.word	0x3fd55555
 8011568:	db6fabff 	.word	0xdb6fabff
 801156c:	3fdb6db6 	.word	0x3fdb6db6
 8011570:	33333303 	.word	0x33333303
 8011574:	3fe33333 	.word	0x3fe33333
 8011578:	e0000000 	.word	0xe0000000
 801157c:	3feec709 	.word	0x3feec709
 8011580:	dc3a03fd 	.word	0xdc3a03fd
 8011584:	3feec709 	.word	0x3feec709
 8011588:	145b01f5 	.word	0x145b01f5
 801158c:	be3e2fe0 	.word	0xbe3e2fe0
 8011590:	00000000 	.word	0x00000000
 8011594:	3ff00000 	.word	0x3ff00000
 8011598:	7ff00000 	.word	0x7ff00000
 801159c:	43400000 	.word	0x43400000
 80115a0:	0003988e 	.word	0x0003988e
 80115a4:	000bb679 	.word	0x000bb679
 80115a8:	08011d58 	.word	0x08011d58
 80115ac:	3ff00000 	.word	0x3ff00000
 80115b0:	40080000 	.word	0x40080000
 80115b4:	08011d78 	.word	0x08011d78
 80115b8:	08011d68 	.word	0x08011d68
 80115bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8011894 <__ieee754_pow+0xa54>)
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	4640      	mov	r0, r8
 80115c4:	4649      	mov	r1, r9
 80115c6:	f7f2 fe3b 	bl	8004240 <__adddf3>
 80115ca:	4622      	mov	r2, r4
 80115cc:	ec41 0b1a 	vmov	d10, r0, r1
 80115d0:	462b      	mov	r3, r5
 80115d2:	4630      	mov	r0, r6
 80115d4:	4639      	mov	r1, r7
 80115d6:	f7f2 fe31 	bl	800423c <__aeabi_dsub>
 80115da:	4602      	mov	r2, r0
 80115dc:	460b      	mov	r3, r1
 80115de:	ec51 0b1a 	vmov	r0, r1, d10
 80115e2:	f7f3 fa73 	bl	8004acc <__aeabi_dcmpgt>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	f47f ae04 	bne.w	80111f4 <__ieee754_pow+0x3b4>
 80115ec:	4aa4      	ldr	r2, [pc, #656]	; (8011880 <__ieee754_pow+0xa40>)
 80115ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80115f2:	4293      	cmp	r3, r2
 80115f4:	f340 8108 	ble.w	8011808 <__ieee754_pow+0x9c8>
 80115f8:	151b      	asrs	r3, r3, #20
 80115fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80115fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011602:	fa4a f303 	asr.w	r3, sl, r3
 8011606:	445b      	add	r3, fp
 8011608:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801160c:	4e9d      	ldr	r6, [pc, #628]	; (8011884 <__ieee754_pow+0xa44>)
 801160e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011612:	4116      	asrs	r6, r2
 8011614:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011618:	2000      	movs	r0, #0
 801161a:	ea23 0106 	bic.w	r1, r3, r6
 801161e:	f1c2 0214 	rsb	r2, r2, #20
 8011622:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011626:	fa4a fa02 	asr.w	sl, sl, r2
 801162a:	f1bb 0f00 	cmp.w	fp, #0
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	4620      	mov	r0, r4
 8011634:	4629      	mov	r1, r5
 8011636:	bfb8      	it	lt
 8011638:	f1ca 0a00 	rsblt	sl, sl, #0
 801163c:	f7f2 fdfe 	bl	800423c <__aeabi_dsub>
 8011640:	ec41 0b19 	vmov	d9, r0, r1
 8011644:	4642      	mov	r2, r8
 8011646:	464b      	mov	r3, r9
 8011648:	ec51 0b19 	vmov	r0, r1, d9
 801164c:	f7f2 fdf8 	bl	8004240 <__adddf3>
 8011650:	a37b      	add	r3, pc, #492	; (adr r3, 8011840 <__ieee754_pow+0xa00>)
 8011652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011656:	2000      	movs	r0, #0
 8011658:	4604      	mov	r4, r0
 801165a:	460d      	mov	r5, r1
 801165c:	f7f2 ffa6 	bl	80045ac <__aeabi_dmul>
 8011660:	ec53 2b19 	vmov	r2, r3, d9
 8011664:	4606      	mov	r6, r0
 8011666:	460f      	mov	r7, r1
 8011668:	4620      	mov	r0, r4
 801166a:	4629      	mov	r1, r5
 801166c:	f7f2 fde6 	bl	800423c <__aeabi_dsub>
 8011670:	4602      	mov	r2, r0
 8011672:	460b      	mov	r3, r1
 8011674:	4640      	mov	r0, r8
 8011676:	4649      	mov	r1, r9
 8011678:	f7f2 fde0 	bl	800423c <__aeabi_dsub>
 801167c:	a372      	add	r3, pc, #456	; (adr r3, 8011848 <__ieee754_pow+0xa08>)
 801167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011682:	f7f2 ff93 	bl	80045ac <__aeabi_dmul>
 8011686:	a372      	add	r3, pc, #456	; (adr r3, 8011850 <__ieee754_pow+0xa10>)
 8011688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168c:	4680      	mov	r8, r0
 801168e:	4689      	mov	r9, r1
 8011690:	4620      	mov	r0, r4
 8011692:	4629      	mov	r1, r5
 8011694:	f7f2 ff8a 	bl	80045ac <__aeabi_dmul>
 8011698:	4602      	mov	r2, r0
 801169a:	460b      	mov	r3, r1
 801169c:	4640      	mov	r0, r8
 801169e:	4649      	mov	r1, r9
 80116a0:	f7f2 fdce 	bl	8004240 <__adddf3>
 80116a4:	4604      	mov	r4, r0
 80116a6:	460d      	mov	r5, r1
 80116a8:	4602      	mov	r2, r0
 80116aa:	460b      	mov	r3, r1
 80116ac:	4630      	mov	r0, r6
 80116ae:	4639      	mov	r1, r7
 80116b0:	f7f2 fdc6 	bl	8004240 <__adddf3>
 80116b4:	4632      	mov	r2, r6
 80116b6:	463b      	mov	r3, r7
 80116b8:	4680      	mov	r8, r0
 80116ba:	4689      	mov	r9, r1
 80116bc:	f7f2 fdbe 	bl	800423c <__aeabi_dsub>
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4620      	mov	r0, r4
 80116c6:	4629      	mov	r1, r5
 80116c8:	f7f2 fdb8 	bl	800423c <__aeabi_dsub>
 80116cc:	4642      	mov	r2, r8
 80116ce:	4606      	mov	r6, r0
 80116d0:	460f      	mov	r7, r1
 80116d2:	464b      	mov	r3, r9
 80116d4:	4640      	mov	r0, r8
 80116d6:	4649      	mov	r1, r9
 80116d8:	f7f2 ff68 	bl	80045ac <__aeabi_dmul>
 80116dc:	a35e      	add	r3, pc, #376	; (adr r3, 8011858 <__ieee754_pow+0xa18>)
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	4604      	mov	r4, r0
 80116e4:	460d      	mov	r5, r1
 80116e6:	f7f2 ff61 	bl	80045ac <__aeabi_dmul>
 80116ea:	a35d      	add	r3, pc, #372	; (adr r3, 8011860 <__ieee754_pow+0xa20>)
 80116ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f0:	f7f2 fda4 	bl	800423c <__aeabi_dsub>
 80116f4:	4622      	mov	r2, r4
 80116f6:	462b      	mov	r3, r5
 80116f8:	f7f2 ff58 	bl	80045ac <__aeabi_dmul>
 80116fc:	a35a      	add	r3, pc, #360	; (adr r3, 8011868 <__ieee754_pow+0xa28>)
 80116fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011702:	f7f2 fd9d 	bl	8004240 <__adddf3>
 8011706:	4622      	mov	r2, r4
 8011708:	462b      	mov	r3, r5
 801170a:	f7f2 ff4f 	bl	80045ac <__aeabi_dmul>
 801170e:	a358      	add	r3, pc, #352	; (adr r3, 8011870 <__ieee754_pow+0xa30>)
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	f7f2 fd92 	bl	800423c <__aeabi_dsub>
 8011718:	4622      	mov	r2, r4
 801171a:	462b      	mov	r3, r5
 801171c:	f7f2 ff46 	bl	80045ac <__aeabi_dmul>
 8011720:	a355      	add	r3, pc, #340	; (adr r3, 8011878 <__ieee754_pow+0xa38>)
 8011722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011726:	f7f2 fd8b 	bl	8004240 <__adddf3>
 801172a:	4622      	mov	r2, r4
 801172c:	462b      	mov	r3, r5
 801172e:	f7f2 ff3d 	bl	80045ac <__aeabi_dmul>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4640      	mov	r0, r8
 8011738:	4649      	mov	r1, r9
 801173a:	f7f2 fd7f 	bl	800423c <__aeabi_dsub>
 801173e:	4604      	mov	r4, r0
 8011740:	460d      	mov	r5, r1
 8011742:	4602      	mov	r2, r0
 8011744:	460b      	mov	r3, r1
 8011746:	4640      	mov	r0, r8
 8011748:	4649      	mov	r1, r9
 801174a:	f7f2 ff2f 	bl	80045ac <__aeabi_dmul>
 801174e:	2200      	movs	r2, #0
 8011750:	ec41 0b19 	vmov	d9, r0, r1
 8011754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011758:	4620      	mov	r0, r4
 801175a:	4629      	mov	r1, r5
 801175c:	f7f2 fd6e 	bl	800423c <__aeabi_dsub>
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	ec51 0b19 	vmov	r0, r1, d9
 8011768:	f7f3 f84a 	bl	8004800 <__aeabi_ddiv>
 801176c:	4632      	mov	r2, r6
 801176e:	4604      	mov	r4, r0
 8011770:	460d      	mov	r5, r1
 8011772:	463b      	mov	r3, r7
 8011774:	4640      	mov	r0, r8
 8011776:	4649      	mov	r1, r9
 8011778:	f7f2 ff18 	bl	80045ac <__aeabi_dmul>
 801177c:	4632      	mov	r2, r6
 801177e:	463b      	mov	r3, r7
 8011780:	f7f2 fd5e 	bl	8004240 <__adddf3>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4620      	mov	r0, r4
 801178a:	4629      	mov	r1, r5
 801178c:	f7f2 fd56 	bl	800423c <__aeabi_dsub>
 8011790:	4642      	mov	r2, r8
 8011792:	464b      	mov	r3, r9
 8011794:	f7f2 fd52 	bl	800423c <__aeabi_dsub>
 8011798:	460b      	mov	r3, r1
 801179a:	4602      	mov	r2, r0
 801179c:	493a      	ldr	r1, [pc, #232]	; (8011888 <__ieee754_pow+0xa48>)
 801179e:	2000      	movs	r0, #0
 80117a0:	f7f2 fd4c 	bl	800423c <__aeabi_dsub>
 80117a4:	ec41 0b10 	vmov	d0, r0, r1
 80117a8:	ee10 3a90 	vmov	r3, s1
 80117ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80117b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117b4:	da2b      	bge.n	801180e <__ieee754_pow+0x9ce>
 80117b6:	4650      	mov	r0, sl
 80117b8:	f000 f966 	bl	8011a88 <scalbn>
 80117bc:	ec51 0b10 	vmov	r0, r1, d0
 80117c0:	ec53 2b18 	vmov	r2, r3, d8
 80117c4:	f7ff bbed 	b.w	8010fa2 <__ieee754_pow+0x162>
 80117c8:	4b30      	ldr	r3, [pc, #192]	; (801188c <__ieee754_pow+0xa4c>)
 80117ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80117ce:	429e      	cmp	r6, r3
 80117d0:	f77f af0c 	ble.w	80115ec <__ieee754_pow+0x7ac>
 80117d4:	4b2e      	ldr	r3, [pc, #184]	; (8011890 <__ieee754_pow+0xa50>)
 80117d6:	440b      	add	r3, r1
 80117d8:	4303      	orrs	r3, r0
 80117da:	d009      	beq.n	80117f0 <__ieee754_pow+0x9b0>
 80117dc:	ec51 0b18 	vmov	r0, r1, d8
 80117e0:	2200      	movs	r2, #0
 80117e2:	2300      	movs	r3, #0
 80117e4:	f7f3 f954 	bl	8004a90 <__aeabi_dcmplt>
 80117e8:	3800      	subs	r0, #0
 80117ea:	bf18      	it	ne
 80117ec:	2001      	movne	r0, #1
 80117ee:	e447      	b.n	8011080 <__ieee754_pow+0x240>
 80117f0:	4622      	mov	r2, r4
 80117f2:	462b      	mov	r3, r5
 80117f4:	f7f2 fd22 	bl	800423c <__aeabi_dsub>
 80117f8:	4642      	mov	r2, r8
 80117fa:	464b      	mov	r3, r9
 80117fc:	f7f3 f95c 	bl	8004ab8 <__aeabi_dcmpge>
 8011800:	2800      	cmp	r0, #0
 8011802:	f43f aef3 	beq.w	80115ec <__ieee754_pow+0x7ac>
 8011806:	e7e9      	b.n	80117dc <__ieee754_pow+0x99c>
 8011808:	f04f 0a00 	mov.w	sl, #0
 801180c:	e71a      	b.n	8011644 <__ieee754_pow+0x804>
 801180e:	ec51 0b10 	vmov	r0, r1, d0
 8011812:	4619      	mov	r1, r3
 8011814:	e7d4      	b.n	80117c0 <__ieee754_pow+0x980>
 8011816:	491c      	ldr	r1, [pc, #112]	; (8011888 <__ieee754_pow+0xa48>)
 8011818:	2000      	movs	r0, #0
 801181a:	f7ff bb30 	b.w	8010e7e <__ieee754_pow+0x3e>
 801181e:	2000      	movs	r0, #0
 8011820:	2100      	movs	r1, #0
 8011822:	f7ff bb2c 	b.w	8010e7e <__ieee754_pow+0x3e>
 8011826:	4630      	mov	r0, r6
 8011828:	4639      	mov	r1, r7
 801182a:	f7ff bb28 	b.w	8010e7e <__ieee754_pow+0x3e>
 801182e:	9204      	str	r2, [sp, #16]
 8011830:	f7ff bb7a 	b.w	8010f28 <__ieee754_pow+0xe8>
 8011834:	2300      	movs	r3, #0
 8011836:	f7ff bb64 	b.w	8010f02 <__ieee754_pow+0xc2>
 801183a:	bf00      	nop
 801183c:	f3af 8000 	nop.w
 8011840:	00000000 	.word	0x00000000
 8011844:	3fe62e43 	.word	0x3fe62e43
 8011848:	fefa39ef 	.word	0xfefa39ef
 801184c:	3fe62e42 	.word	0x3fe62e42
 8011850:	0ca86c39 	.word	0x0ca86c39
 8011854:	be205c61 	.word	0xbe205c61
 8011858:	72bea4d0 	.word	0x72bea4d0
 801185c:	3e663769 	.word	0x3e663769
 8011860:	c5d26bf1 	.word	0xc5d26bf1
 8011864:	3ebbbd41 	.word	0x3ebbbd41
 8011868:	af25de2c 	.word	0xaf25de2c
 801186c:	3f11566a 	.word	0x3f11566a
 8011870:	16bebd93 	.word	0x16bebd93
 8011874:	3f66c16c 	.word	0x3f66c16c
 8011878:	5555553e 	.word	0x5555553e
 801187c:	3fc55555 	.word	0x3fc55555
 8011880:	3fe00000 	.word	0x3fe00000
 8011884:	000fffff 	.word	0x000fffff
 8011888:	3ff00000 	.word	0x3ff00000
 801188c:	4090cbff 	.word	0x4090cbff
 8011890:	3f6f3400 	.word	0x3f6f3400
 8011894:	652b82fe 	.word	0x652b82fe
 8011898:	3c971547 	.word	0x3c971547

0801189c <__ieee754_sqrt>:
 801189c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a0:	ec55 4b10 	vmov	r4, r5, d0
 80118a4:	4e55      	ldr	r6, [pc, #340]	; (80119fc <__ieee754_sqrt+0x160>)
 80118a6:	43ae      	bics	r6, r5
 80118a8:	ee10 0a10 	vmov	r0, s0
 80118ac:	ee10 3a10 	vmov	r3, s0
 80118b0:	462a      	mov	r2, r5
 80118b2:	4629      	mov	r1, r5
 80118b4:	d110      	bne.n	80118d8 <__ieee754_sqrt+0x3c>
 80118b6:	ee10 2a10 	vmov	r2, s0
 80118ba:	462b      	mov	r3, r5
 80118bc:	f7f2 fe76 	bl	80045ac <__aeabi_dmul>
 80118c0:	4602      	mov	r2, r0
 80118c2:	460b      	mov	r3, r1
 80118c4:	4620      	mov	r0, r4
 80118c6:	4629      	mov	r1, r5
 80118c8:	f7f2 fcba 	bl	8004240 <__adddf3>
 80118cc:	4604      	mov	r4, r0
 80118ce:	460d      	mov	r5, r1
 80118d0:	ec45 4b10 	vmov	d0, r4, r5
 80118d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d8:	2d00      	cmp	r5, #0
 80118da:	dc10      	bgt.n	80118fe <__ieee754_sqrt+0x62>
 80118dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80118e0:	4330      	orrs	r0, r6
 80118e2:	d0f5      	beq.n	80118d0 <__ieee754_sqrt+0x34>
 80118e4:	b15d      	cbz	r5, 80118fe <__ieee754_sqrt+0x62>
 80118e6:	ee10 2a10 	vmov	r2, s0
 80118ea:	462b      	mov	r3, r5
 80118ec:	ee10 0a10 	vmov	r0, s0
 80118f0:	f7f2 fca4 	bl	800423c <__aeabi_dsub>
 80118f4:	4602      	mov	r2, r0
 80118f6:	460b      	mov	r3, r1
 80118f8:	f7f2 ff82 	bl	8004800 <__aeabi_ddiv>
 80118fc:	e7e6      	b.n	80118cc <__ieee754_sqrt+0x30>
 80118fe:	1512      	asrs	r2, r2, #20
 8011900:	d074      	beq.n	80119ec <__ieee754_sqrt+0x150>
 8011902:	07d4      	lsls	r4, r2, #31
 8011904:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011908:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801190c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011910:	bf5e      	ittt	pl
 8011912:	0fda      	lsrpl	r2, r3, #31
 8011914:	005b      	lslpl	r3, r3, #1
 8011916:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801191a:	2400      	movs	r4, #0
 801191c:	0fda      	lsrs	r2, r3, #31
 801191e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011922:	107f      	asrs	r7, r7, #1
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	2516      	movs	r5, #22
 8011928:	4620      	mov	r0, r4
 801192a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801192e:	1886      	adds	r6, r0, r2
 8011930:	428e      	cmp	r6, r1
 8011932:	bfde      	ittt	le
 8011934:	1b89      	suble	r1, r1, r6
 8011936:	18b0      	addle	r0, r6, r2
 8011938:	18a4      	addle	r4, r4, r2
 801193a:	0049      	lsls	r1, r1, #1
 801193c:	3d01      	subs	r5, #1
 801193e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011942:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801194a:	d1f0      	bne.n	801192e <__ieee754_sqrt+0x92>
 801194c:	462a      	mov	r2, r5
 801194e:	f04f 0e20 	mov.w	lr, #32
 8011952:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011956:	4281      	cmp	r1, r0
 8011958:	eb06 0c05 	add.w	ip, r6, r5
 801195c:	dc02      	bgt.n	8011964 <__ieee754_sqrt+0xc8>
 801195e:	d113      	bne.n	8011988 <__ieee754_sqrt+0xec>
 8011960:	459c      	cmp	ip, r3
 8011962:	d811      	bhi.n	8011988 <__ieee754_sqrt+0xec>
 8011964:	f1bc 0f00 	cmp.w	ip, #0
 8011968:	eb0c 0506 	add.w	r5, ip, r6
 801196c:	da43      	bge.n	80119f6 <__ieee754_sqrt+0x15a>
 801196e:	2d00      	cmp	r5, #0
 8011970:	db41      	blt.n	80119f6 <__ieee754_sqrt+0x15a>
 8011972:	f100 0801 	add.w	r8, r0, #1
 8011976:	1a09      	subs	r1, r1, r0
 8011978:	459c      	cmp	ip, r3
 801197a:	bf88      	it	hi
 801197c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011980:	eba3 030c 	sub.w	r3, r3, ip
 8011984:	4432      	add	r2, r6
 8011986:	4640      	mov	r0, r8
 8011988:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801198c:	f1be 0e01 	subs.w	lr, lr, #1
 8011990:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011998:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801199c:	d1db      	bne.n	8011956 <__ieee754_sqrt+0xba>
 801199e:	430b      	orrs	r3, r1
 80119a0:	d006      	beq.n	80119b0 <__ieee754_sqrt+0x114>
 80119a2:	1c50      	adds	r0, r2, #1
 80119a4:	bf13      	iteet	ne
 80119a6:	3201      	addne	r2, #1
 80119a8:	3401      	addeq	r4, #1
 80119aa:	4672      	moveq	r2, lr
 80119ac:	f022 0201 	bicne.w	r2, r2, #1
 80119b0:	1063      	asrs	r3, r4, #1
 80119b2:	0852      	lsrs	r2, r2, #1
 80119b4:	07e1      	lsls	r1, r4, #31
 80119b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80119ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80119be:	bf48      	it	mi
 80119c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80119c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80119c8:	4614      	mov	r4, r2
 80119ca:	e781      	b.n	80118d0 <__ieee754_sqrt+0x34>
 80119cc:	0ad9      	lsrs	r1, r3, #11
 80119ce:	3815      	subs	r0, #21
 80119d0:	055b      	lsls	r3, r3, #21
 80119d2:	2900      	cmp	r1, #0
 80119d4:	d0fa      	beq.n	80119cc <__ieee754_sqrt+0x130>
 80119d6:	02cd      	lsls	r5, r1, #11
 80119d8:	d50a      	bpl.n	80119f0 <__ieee754_sqrt+0x154>
 80119da:	f1c2 0420 	rsb	r4, r2, #32
 80119de:	fa23 f404 	lsr.w	r4, r3, r4
 80119e2:	1e55      	subs	r5, r2, #1
 80119e4:	4093      	lsls	r3, r2
 80119e6:	4321      	orrs	r1, r4
 80119e8:	1b42      	subs	r2, r0, r5
 80119ea:	e78a      	b.n	8011902 <__ieee754_sqrt+0x66>
 80119ec:	4610      	mov	r0, r2
 80119ee:	e7f0      	b.n	80119d2 <__ieee754_sqrt+0x136>
 80119f0:	0049      	lsls	r1, r1, #1
 80119f2:	3201      	adds	r2, #1
 80119f4:	e7ef      	b.n	80119d6 <__ieee754_sqrt+0x13a>
 80119f6:	4680      	mov	r8, r0
 80119f8:	e7bd      	b.n	8011976 <__ieee754_sqrt+0xda>
 80119fa:	bf00      	nop
 80119fc:	7ff00000 	.word	0x7ff00000

08011a00 <with_errno>:
 8011a00:	b570      	push	{r4, r5, r6, lr}
 8011a02:	4604      	mov	r4, r0
 8011a04:	460d      	mov	r5, r1
 8011a06:	4616      	mov	r6, r2
 8011a08:	f7ff f8a6 	bl	8010b58 <__errno>
 8011a0c:	4629      	mov	r1, r5
 8011a0e:	6006      	str	r6, [r0, #0]
 8011a10:	4620      	mov	r0, r4
 8011a12:	bd70      	pop	{r4, r5, r6, pc}

08011a14 <xflow>:
 8011a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a16:	4614      	mov	r4, r2
 8011a18:	461d      	mov	r5, r3
 8011a1a:	b108      	cbz	r0, 8011a20 <xflow+0xc>
 8011a1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a20:	e9cd 2300 	strd	r2, r3, [sp]
 8011a24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a28:	4620      	mov	r0, r4
 8011a2a:	4629      	mov	r1, r5
 8011a2c:	f7f2 fdbe 	bl	80045ac <__aeabi_dmul>
 8011a30:	2222      	movs	r2, #34	; 0x22
 8011a32:	b003      	add	sp, #12
 8011a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a38:	f7ff bfe2 	b.w	8011a00 <with_errno>

08011a3c <__math_uflow>:
 8011a3c:	b508      	push	{r3, lr}
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011a44:	f7ff ffe6 	bl	8011a14 <xflow>
 8011a48:	ec41 0b10 	vmov	d0, r0, r1
 8011a4c:	bd08      	pop	{r3, pc}

08011a4e <__math_oflow>:
 8011a4e:	b508      	push	{r3, lr}
 8011a50:	2200      	movs	r2, #0
 8011a52:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011a56:	f7ff ffdd 	bl	8011a14 <xflow>
 8011a5a:	ec41 0b10 	vmov	d0, r0, r1
 8011a5e:	bd08      	pop	{r3, pc}

08011a60 <fabs>:
 8011a60:	ec51 0b10 	vmov	r0, r1, d0
 8011a64:	ee10 2a10 	vmov	r2, s0
 8011a68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a6c:	ec43 2b10 	vmov	d0, r2, r3
 8011a70:	4770      	bx	lr

08011a72 <finite>:
 8011a72:	b082      	sub	sp, #8
 8011a74:	ed8d 0b00 	vstr	d0, [sp]
 8011a78:	9801      	ldr	r0, [sp, #4]
 8011a7a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011a7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011a82:	0fc0      	lsrs	r0, r0, #31
 8011a84:	b002      	add	sp, #8
 8011a86:	4770      	bx	lr

08011a88 <scalbn>:
 8011a88:	b570      	push	{r4, r5, r6, lr}
 8011a8a:	ec55 4b10 	vmov	r4, r5, d0
 8011a8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011a92:	4606      	mov	r6, r0
 8011a94:	462b      	mov	r3, r5
 8011a96:	b99a      	cbnz	r2, 8011ac0 <scalbn+0x38>
 8011a98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a9c:	4323      	orrs	r3, r4
 8011a9e:	d036      	beq.n	8011b0e <scalbn+0x86>
 8011aa0:	4b39      	ldr	r3, [pc, #228]	; (8011b88 <scalbn+0x100>)
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	ee10 0a10 	vmov	r0, s0
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f7f2 fd7f 	bl	80045ac <__aeabi_dmul>
 8011aae:	4b37      	ldr	r3, [pc, #220]	; (8011b8c <scalbn+0x104>)
 8011ab0:	429e      	cmp	r6, r3
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	460d      	mov	r5, r1
 8011ab6:	da10      	bge.n	8011ada <scalbn+0x52>
 8011ab8:	a32b      	add	r3, pc, #172	; (adr r3, 8011b68 <scalbn+0xe0>)
 8011aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abe:	e03a      	b.n	8011b36 <scalbn+0xae>
 8011ac0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011ac4:	428a      	cmp	r2, r1
 8011ac6:	d10c      	bne.n	8011ae2 <scalbn+0x5a>
 8011ac8:	ee10 2a10 	vmov	r2, s0
 8011acc:	4620      	mov	r0, r4
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f7f2 fbb6 	bl	8004240 <__adddf3>
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	460d      	mov	r5, r1
 8011ad8:	e019      	b.n	8011b0e <scalbn+0x86>
 8011ada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011ade:	460b      	mov	r3, r1
 8011ae0:	3a36      	subs	r2, #54	; 0x36
 8011ae2:	4432      	add	r2, r6
 8011ae4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011ae8:	428a      	cmp	r2, r1
 8011aea:	dd08      	ble.n	8011afe <scalbn+0x76>
 8011aec:	2d00      	cmp	r5, #0
 8011aee:	a120      	add	r1, pc, #128	; (adr r1, 8011b70 <scalbn+0xe8>)
 8011af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011af4:	da1c      	bge.n	8011b30 <scalbn+0xa8>
 8011af6:	a120      	add	r1, pc, #128	; (adr r1, 8011b78 <scalbn+0xf0>)
 8011af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011afc:	e018      	b.n	8011b30 <scalbn+0xa8>
 8011afe:	2a00      	cmp	r2, #0
 8011b00:	dd08      	ble.n	8011b14 <scalbn+0x8c>
 8011b02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011b06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011b0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011b0e:	ec45 4b10 	vmov	d0, r4, r5
 8011b12:	bd70      	pop	{r4, r5, r6, pc}
 8011b14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011b18:	da19      	bge.n	8011b4e <scalbn+0xc6>
 8011b1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011b1e:	429e      	cmp	r6, r3
 8011b20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011b24:	dd0a      	ble.n	8011b3c <scalbn+0xb4>
 8011b26:	a112      	add	r1, pc, #72	; (adr r1, 8011b70 <scalbn+0xe8>)
 8011b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d1e2      	bne.n	8011af6 <scalbn+0x6e>
 8011b30:	a30f      	add	r3, pc, #60	; (adr r3, 8011b70 <scalbn+0xe8>)
 8011b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b36:	f7f2 fd39 	bl	80045ac <__aeabi_dmul>
 8011b3a:	e7cb      	b.n	8011ad4 <scalbn+0x4c>
 8011b3c:	a10a      	add	r1, pc, #40	; (adr r1, 8011b68 <scalbn+0xe0>)
 8011b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d0b8      	beq.n	8011ab8 <scalbn+0x30>
 8011b46:	a10e      	add	r1, pc, #56	; (adr r1, 8011b80 <scalbn+0xf8>)
 8011b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b4c:	e7b4      	b.n	8011ab8 <scalbn+0x30>
 8011b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011b52:	3236      	adds	r2, #54	; 0x36
 8011b54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011b58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	4b0c      	ldr	r3, [pc, #48]	; (8011b90 <scalbn+0x108>)
 8011b60:	2200      	movs	r2, #0
 8011b62:	e7e8      	b.n	8011b36 <scalbn+0xae>
 8011b64:	f3af 8000 	nop.w
 8011b68:	c2f8f359 	.word	0xc2f8f359
 8011b6c:	01a56e1f 	.word	0x01a56e1f
 8011b70:	8800759c 	.word	0x8800759c
 8011b74:	7e37e43c 	.word	0x7e37e43c
 8011b78:	8800759c 	.word	0x8800759c
 8011b7c:	fe37e43c 	.word	0xfe37e43c
 8011b80:	c2f8f359 	.word	0xc2f8f359
 8011b84:	81a56e1f 	.word	0x81a56e1f
 8011b88:	43500000 	.word	0x43500000
 8011b8c:	ffff3cb0 	.word	0xffff3cb0
 8011b90:	3c900000 	.word	0x3c900000

08011b94 <_init>:
 8011b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b96:	bf00      	nop
 8011b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b9a:	bc08      	pop	{r3}
 8011b9c:	469e      	mov	lr, r3
 8011b9e:	4770      	bx	lr

08011ba0 <_fini>:
 8011ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ba2:	bf00      	nop
 8011ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ba6:	bc08      	pop	{r3}
 8011ba8:	469e      	mov	lr, r3
 8011baa:	4770      	bx	lr
